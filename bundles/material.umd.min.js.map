{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor, CanColorCtor,\r\n  CanDisable, CanDisableCtor,\r\n  CanDisableRipple, CanDisableRippleCtor,\r\n  HasTabIndex, HasTabIndexCtor,\r\n  MAT_RIPPLE_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex, RippleConfig,\r\n  RippleGlobalOptions,\r\n  RippleRenderer,\r\n  RippleTarget,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {merge, of as observableOf, Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {MatInkBar} from '../ink-bar';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\n\r\n\r\n// Boilerplate for applying mixins to MatTabNav.\r\n/** @docs-private */\r\nclass MatTabNavBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\r\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\r\n\r\n/**\r\n * Navigation component matching the styles of the tab group header.\r\n * Provides anchored navigation with animated ink bar.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-tab-nav-bar]',\r\n  exportAs: 'matTabNavBar, matTabNav',\r\n  inputs: ['color', 'disableRipple'],\r\n  templateUrl: 'tab-nav-bar.html',\r\n  styleUrls: ['tab-nav-bar.css'],\r\n  host: {'class': 'mat-tab-nav-bar'},\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatTabNav extends _MatTabNavMixinBase\r\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private readonly _onDestroy = new Subject<void>();\r\n\r\n  private _activeLinkChanged: boolean;\r\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\r\n\r\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\r\n\r\n  /** Query list of all tab links of the tab navigation. */\r\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\r\n  _tabLinks: QueryList<MatTabLink>;\r\n\r\n  /** Background color of the tab nav. */\r\n  @Input()\r\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\r\n  set backgroundColor(value: ThemePalette) {\r\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      nativeElement.classList.add(`mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\r\n  private _backgroundColor: ThemePalette;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              @Optional() private _dir: Directionality,\r\n              private _ngZone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _viewportRuler: ViewportRuler) {\r\n    super(elementRef);\r\n  }\r\n\r\n  /**\r\n   * Notifies the component that the active link has been changed.\r\n   * @breaking-change 8.0.0 `element` parameter to be removed.\r\n   */\r\n  updateActiveLink(element: ElementRef) {\r\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\r\n    // @breaking-change 8.0.0\r\n    this._activeLinkChanged = !!element;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\r\n\r\n      return merge(dirChange, this._viewportRuler.change(10))\r\n          .pipe(takeUntil(this._onDestroy))\r\n          .subscribe(() => this._alignInkBar());\r\n    });\r\n  }\r\n\r\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\r\n  ngAfterContentChecked(): void {\r\n    if (this._activeLinkChanged) {\r\n      const activeTab = this._tabLinks.find(tab => tab.active);\r\n\r\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\r\n      this._alignInkBar();\r\n      this._activeLinkChanged = false;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  /** Aligns the ink bar to the active link. */\r\n  _alignInkBar(): void {\r\n    if (this._activeLinkElement) {\r\n      this._inkBar.show();\r\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\r\n    } else {\r\n      this._inkBar.hide();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatTabLink.\r\nclass MatTabLinkBase {}\r\nconst _MatTabLinkMixinBase:\r\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\r\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\r\n\r\n/**\r\n * Link inside of a `mat-tab-nav-bar`.\r\n */\r\n@Directive({\r\n  selector: '[mat-tab-link], [matTabLink]',\r\n  exportAs: 'matTabLink',\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  host: {\r\n    'class': 'mat-tab-link',\r\n    '[attr.aria-current]': 'active',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.tabIndex]': 'tabIndex',\r\n    '[class.mat-tab-disabled]': 'disabled',\r\n    '[class.mat-tab-label-active]': 'active',\r\n  }\r\n})\r\nexport class MatTabLink extends _MatTabLinkMixinBase\r\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\r\n\r\n  /** Whether the tab link is active or not. */\r\n  protected _isActive: boolean = false;\r\n\r\n  /** Reference to the RippleRenderer for the tab-link. */\r\n  protected _tabLinkRipple: RippleRenderer;\r\n\r\n  /** Whether the link is active. */\r\n  @Input()\r\n  get active(): boolean { return this._isActive; }\r\n  set active(value: boolean) {\r\n    if (value !== this._isActive) {\r\n      this._isActive = value;\r\n      this._tabNavBar.updateActiveLink(this._elementRef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\r\n   * is set to the global ripple options since we don't have any configurable options for\r\n   * the tab link ripples.\r\n   * @docs-private\r\n   */\r\n  rippleConfig: RippleConfig & RippleGlobalOptions;\r\n\r\n  /**\r\n   * Whether ripples are disabled on interaction.\r\n   * @docs-private\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\r\n      !!this.rippleConfig.disabled;\r\n  }\r\n\r\n  constructor(\r\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\r\n      platform: Platform,\r\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\r\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\r\n    super();\r\n\r\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n    this.rippleConfig = globalRippleOptions || {};\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n    _focusMonitor.monitor(_elementRef);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabLinkRipple._removeTriggerEvents();\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatInkBar} from './ink-bar';\r\nimport {MatTab} from './tab';\r\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\r\nimport {MatTabContent} from './tab-content';\r\nimport {MatTabGroup} from './tab-group';\r\nimport {MatTabHeader} from './tab-header';\r\nimport {MatTabLabel} from './tab-label';\r\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\r\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    PortalModule,\r\n    MatRippleModule,\r\n    ObserversModule,\r\n    A11yModule,\r\n  ],\r\n  // Don't export all components because some are only to be used internally.\r\n  exports: [\r\n    MatCommonModule,\r\n    MatTabGroup,\r\n    MatTabLabel,\r\n    MatTab,\r\n    MatTabNav,\r\n    MatTabLink,\r\n    MatTabContent,\r\n  ],\r\n  declarations: [\r\n    MatTabGroup,\r\n    MatTabLabel,\r\n    MatTab,\r\n    MatInkBar,\r\n    MatTabLabelWrapper,\r\n    MatTabNav,\r\n    MatTabLink,\r\n    MatTabBody,\r\n    MatTabBodyPortal,\r\n    MatTabHeader,\r\n    MatTabContent,\r\n  ],\r\n})\r\nexport class MatTabsModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  isDevMode,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\r\n\r\n\r\n// Boilerplate for applying mixins to MatToolbar.\r\n/** @docs-private */\r\nclass MatToolbarBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\r\n\r\n@Directive({\r\n  selector: 'mat-toolbar-row',\r\n  exportAs: 'matToolbarRow',\r\n  host: {'class': 'mat-toolbar-row'},\r\n})\r\nexport class MatToolbarRow {}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-toolbar',\r\n  exportAs: 'matToolbar',\r\n  templateUrl: 'toolbar.html',\r\n  styleUrls: ['toolbar.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'class': 'mat-toolbar',\r\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\r\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\r\n  private _document: Document;\r\n\r\n  /** Reference to all toolbar row elements that have been projected. */\r\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\r\n\r\n  constructor(\r\n    elementRef: ElementRef,\r\n    private _platform: Platform,\r\n    @Inject(DOCUMENT) document?: any) {\r\n    super(elementRef);\r\n\r\n    // TODO: make the document a required param when doing breaking changes.\r\n    this._document = document;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!isDevMode() || !this._platform.isBrowser) {\r\n      return;\r\n    }\r\n\r\n    this._checkToolbarMixedModes();\r\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\r\n  }\r\n\r\n  /**\r\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\r\n   */\r\n  private _checkToolbarMixedModes() {\r\n    if (!this._toolbarRows.length) {\r\n      return;\r\n    }\r\n\r\n    // Check if there are any other DOM nodes that can display content but aren't inside of\r\n    // a <mat-toolbar-row> element.\r\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\r\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\r\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\r\n      .some(node => !!(node.textContent && node.textContent.trim()));\r\n\r\n    if (isCombinedUsage) {\r\n      throwToolbarMixedModesError();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to combine the different toolbar row modes.\r\n * @docs-private\r\n */\r\nexport function throwToolbarMixedModesError() {\r\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\r\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\r\n    'inside of a `<mat-toolbar>` for a single row.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatToolbar, MatToolbarRow} from './toolbar';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\r\n  declarations: [MatToolbar, MatToolbarRow],\r\n})\r\nexport class MatToolbarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\r\nimport {\r\n  Directive,\r\n  Inject,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\n\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeOutlet]'\r\n})\r\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\r\n  constructor(\r\n      public viewContainer: ViewContainerRef,\r\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  CDK_TREE_NODE_OUTLET_NODE,\r\n  CdkNestedTreeNode,\r\n  CdkTree,\r\n  CdkTreeNode,\r\n  CdkTreeNodeDef,\r\n} from '@angular/cdk/tree';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  HasTabIndex,\r\n  HasTabIndexCtor,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\n\r\nimport {MatTreeNodeOutlet} from './outlet';\r\n\r\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\r\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\r\n\r\nconst _MatNestedTreeNodeMixinBase:\r\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\r\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\r\n\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n */\r\n@Directive({\r\n  selector: 'mat-tree-node',\r\n  exportAs: 'matTreeNode',\r\n  inputs: ['disabled', 'tabIndex'],\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-tree-node'\r\n  },\r\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\r\n})\r\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\r\n    implements CanDisable, HasTabIndex {\r\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              protected _tree: CdkTree<T>,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super(_elementRef, _tree);\r\n\r\n    this.tabIndex = Number(tabIndex) || 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeDef]',\r\n  inputs: [\r\n    'when: matTreeNodeDefWhen'\r\n  ],\r\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\r\n})\r\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\r\n  @Input('matTreeNode') data: T;\r\n}\r\n\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n */\r\n@Directive({\r\n  selector: 'mat-nested-tree-node',\r\n  exportAs: 'matNestedTreeNode',\r\n  host: {\r\n    '[attr.aria-expanded]': 'isExpanded',\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-nested-tree-node',\r\n  },\r\n  inputs: ['disabled', 'tabIndex'],\r\n  providers: [\r\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\r\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\r\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\r\n  ]\r\n})\r\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\r\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\r\n  @Input('matNestedTreeNode') node: T;\r\n\r\n  /** The children node placeholder. */\r\n  @ContentChildren(MatTreeNodeOutlet, {\r\n    // We need to use `descendants: true`, because Ivy will no longer match\r\n    // indirect descendants if it's left as false.\r\n    descendants: true\r\n  })\r\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              protected _tree: CdkTree<T>,\r\n              protected _differs: IterableDiffers,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super(_elementRef, _tree, _differs);\r\n\r\n    this.tabIndex = Number(tabIndex) || 0;\r\n  }\r\n\r\n  // This is a workaround for https://github.com/angular/angular/issues/23091\r\n  // In aot mode, the lifecycle hooks from parent class are not called.\r\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\r\n  ngAfterContentInit() {\r\n    super.ngAfterContentInit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodePadding]',\r\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\r\n})\r\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\r\n\r\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n  @Input('matTreeNodePadding') level: number;\r\n\r\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\r\n  @Input('matTreeNodePaddingIndent') indent: number;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkTree} from '@angular/cdk/tree';\r\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport {MatTreeNodeOutlet} from './outlet';\r\n\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tree',\r\n  exportAs: 'matTree',\r\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\r\n  host: {\r\n    'class': 'mat-tree',\r\n    'role': 'tree',\r\n  },\r\n  styleUrls: ['tree.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  providers: [{provide: CdkTree, useExisting: MatTree}]\r\n})\r\nexport class MatTree<T> extends CdkTree<T> {\r\n  // Outlets within the tree's template where the dataNodes will be inserted.\r\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n */\r\n@Directive({\r\n  selector: '[matTreeNodeToggle]',\r\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\r\n})\r\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\r\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\r\nimport {MatTree} from './tree';\r\nimport {MatTreeNodeToggle} from './toggle';\r\nimport {MatTreeNodeOutlet} from './outlet';\r\nimport {MatTreeNodePadding} from './padding';\r\n\r\nconst MAT_TREE_DIRECTIVES = [\r\n  MatNestedTreeNode,\r\n  MatTreeNodeDef,\r\n  MatTreeNodePadding,\r\n  MatTreeNodeToggle,\r\n  MatTree,\r\n  MatTreeNode,\r\n  MatTreeNodeOutlet\r\n];\r\n\r\n@NgModule({\r\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\r\n  exports: MAT_TREE_DIRECTIVES,\r\n  declarations: MAT_TREE_DIRECTIVES,\r\n})\r\nexport class MatTreeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map, take} from 'rxjs/operators';\r\n\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\r\nexport class MatTreeFlattener<T, F> {\r\n\r\n  constructor(public transformFunction: (node: T, level: number) => F,\r\n              public getLevel: (node: F) => number,\r\n              public isExpandable: (node: F) => boolean,\r\n              public getChildren: (node: T) =>\r\n                  Observable<T[]> | T[] | undefined | null) {}\r\n\r\n  _flattenNode(node: T, level: number,\r\n               resultNodes: F[], parentMap: boolean[]): F[] {\r\n    const flatNode = this.transformFunction(node, level);\r\n    resultNodes.push(flatNode);\r\n\r\n    if (this.isExpandable(flatNode)) {\r\n      const childrenNodes = this.getChildren(node);\r\n      if (childrenNodes) {\r\n        if (Array.isArray(childrenNodes)) {\r\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n        } else {\r\n          childrenNodes.pipe(take(1)).subscribe(children => {\r\n            this._flattenChildren(children, level, resultNodes, parentMap);\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return resultNodes;\r\n  }\r\n\r\n  _flattenChildren(children: T[], level: number,\r\n                   resultNodes: F[], parentMap: boolean[]): void {\r\n    children.forEach((child, index) => {\r\n      let childParentMap: boolean[] = parentMap.slice();\r\n      childParentMap.push(index != children.length - 1);\r\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten a list of node type T to flattened version of node F.\r\n   * Please note that type T may be nested, and the length of `structuredData` may be different\r\n   * from that of returned list `F[]`.\r\n   */\r\n  flattenNodes(structuredData: T[]): F[] {\r\n    let resultNodes: F[] = [];\r\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\r\n    return resultNodes;\r\n  }\r\n\r\n  /**\r\n   * Expand flattened node with current expansion status.\r\n   * The returned list may have different length.\r\n   */\r\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\r\n    let results: F[] = [];\r\n    let currentExpand: boolean[] = [];\r\n    currentExpand[0] = true;\r\n\r\n    nodes.forEach(node => {\r\n      let expand = true;\r\n      for (let i = 0; i <= this.getLevel(node); i++) {\r\n        expand = expand && currentExpand[i];\r\n      }\r\n      if (expand) {\r\n        results.push(node);\r\n      }\r\n      if (this.isExpandable(node)) {\r\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n      }\r\n    });\r\n    return results;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\r\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\r\n  _flattenedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _expandedData = new BehaviorSubject<F[]>([]);\r\n\r\n  _data: BehaviorSubject<T[]>;\r\n  get data() { return this._data.value; }\r\n  set data(value: T[]) {\r\n    this._data.next(value);\r\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\r\n    this._treeControl.dataNodes = this._flattenedData.value;\r\n  }\r\n\r\n  constructor(private _treeControl: FlatTreeControl<F>,\r\n              private _treeFlattener: MatTreeFlattener<T, F>,\r\n              initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n  }\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\r\n    const changes = [\r\n      collectionViewer.viewChange,\r\n      this._treeControl.expansionModel.onChange,\r\n      this._flattenedData\r\n    ];\r\n    return merge(...changes).pipe(map(() => {\r\n      this._expandedData.next(\r\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\r\n      return this._expandedData.value;\r\n    }));\r\n  }\r\n\r\n  disconnect() {\r\n    // no op\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\r\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n */\r\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\r\n  _data = new BehaviorSubject<T[]>([]);\r\n\r\n  /**\r\n   * Data for the nested tree\r\n   */\r\n  get data() { return this._data.value; }\r\n  set data(value: T[]) { this._data.next(value); }\r\n\r\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\r\n    return merge(...[collectionViewer.viewChange, this._data])\r\n      .pipe(map(() => {\r\n        return this.data;\r\n      }));\r\n  }\r\n\r\n  disconnect() {\r\n    // no op\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n  ConnectedPosition,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\r\n\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the scrollTop of the panel. Because we are not\r\n * actually focusing the active item, scroll must be handled manually.\r\n */\r\n\r\n/** The height of each autocomplete option. */\r\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\r\n\r\n/** The total height of the autocomplete panel. */\r\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\r\n\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n * @docs-private\r\n */\r\nexport function getMatAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    '[attr.autocomplete]': 'autocompleteAttribute',\r\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\r\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\r\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\r\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\r\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\r\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  exportAs: 'matAutocompleteTrigger',\r\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n})\r\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\r\n  private _overlayRef: OverlayRef | null;\r\n  private _portal: TemplatePortal;\r\n  private _componentDestroyed = false;\r\n  private _autocompleteDisabled = false;\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\r\n  private _previousValue: string | number | null;\r\n\r\n  /** Strategy that is used to position the panel. */\r\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** Whether or not the label state is being overridden. */\r\n  private _manuallyFloatingLabel = false;\r\n\r\n  /** The subscription for closing actions (some are bound to document). */\r\n  private _closingActionsSubscription: Subscription;\r\n\r\n  /** Subscription to viewport size changes. */\r\n  private _viewportSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\r\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\r\n   * comes back.\r\n   */\r\n  private _canOpenOnNextFocus = true;\r\n\r\n  /** Stream of keyboard events that can close the panel. */\r\n  private readonly _closeKeyEventStream = new Subject<void>();\r\n\r\n  /**\r\n   * Event handler for when the window is blurred. Needs to be an\r\n   * arrow function in order to preserve the context.\r\n   */\r\n  private _windowBlurHandler = () => {\r\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\r\n    // refocused when they come back. In this case we want to skip the first focus event, if the\r\n    // pane was closed, in order to avoid reopening it unintentionally.\r\n    this._canOpenOnNextFocus =\r\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\r\n  }\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when autocomplete has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The autocomplete panel to be attached to this trigger. */\r\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\r\n\r\n  /**\r\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\r\n   * will render the panel underneath the trigger if there is enough space for it to fit in\r\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\r\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\r\n   * whether it fits completely in the viewport.\r\n   */\r\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\r\n\r\n  /**\r\n   * Reference relative to which to position the autocomplete panel.\r\n   * Defaults to the autocomplete trigger element.\r\n   */\r\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\r\n\r\n  /**\r\n   * `autocomplete` attribute to be set on the input element.\r\n   * @docs-private\r\n   */\r\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\r\n\r\n  /**\r\n   * Whether the autocomplete is disabled. When disabled, the element will\r\n   * act as a regular input and the user won't be able to open the panel.\r\n   */\r\n  @Input('matAutocompleteDisabled')\r\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\r\n  set autocompleteDisabled(value: boolean) {\r\n    this._autocompleteDisabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              private _zone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Host() private _formField: MatFormField,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\r\n              private _viewportRuler?: ViewportRuler) {\r\n\r\n    if (typeof window !== 'undefined') {\r\n      _zone.runOutsideAngular(() => {\r\n        window.addEventListener('blur', this._windowBlurHandler);\r\n      });\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['position'] && this._positionStrategy) {\r\n      this._setStrategyPositions(this._positionStrategy);\r\n\r\n      if (this.panelOpen) {\r\n        this._overlayRef!.updatePosition();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (typeof window !== 'undefined') {\r\n      window.removeEventListener('blur', this._windowBlurHandler);\r\n    }\r\n\r\n    this._viewportSubscription.unsubscribe();\r\n    this._componentDestroyed = true;\r\n    this._destroyPanel();\r\n    this._closeKeyEventStream.complete();\r\n  }\r\n\r\n  /** Whether or not the autocomplete panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._overlayAttached && this.autocomplete.showPanel;\r\n  }\r\n  private _overlayAttached: boolean = false;\r\n\r\n  /** Opens the autocomplete suggestion panel. */\r\n  openPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatLabel();\r\n  }\r\n\r\n  /** Closes the autocomplete suggestion panel. */\r\n  closePanel(): void {\r\n    this._resetLabel();\r\n\r\n    if (!this._overlayAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.panelOpen) {\r\n      // Only emit if the panel was visible.\r\n      this.autocomplete.closed.emit();\r\n    }\r\n\r\n    this.autocomplete._isOpen = this._overlayAttached = false;\r\n\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n      this._closingActionsSubscription.unsubscribe();\r\n    }\r\n\r\n    // Note that in some cases this can end up being called after the component is destroyed.\r\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n    if (!this._componentDestroyed) {\r\n      // We need to trigger change detection manually, because\r\n      // `fromEvent` doesn't seem to do it at the proper time.\r\n      // This ensures that the label is reset when the\r\n      // user clicks outside.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n   * within the viewport.\r\n   */\r\n  updatePosition(): void {\r\n    if (this._overlayAttached) {\r\n      this._overlayRef!.updatePosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\r\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\r\n      this._closeKeyEventStream,\r\n      this._getOutsideClickStream(),\r\n      this._overlayRef ?\r\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\r\n          observableOf()\r\n    ).pipe(\r\n      // Normalize the output so we return a consistent type.\r\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\r\n    );\r\n  }\r\n\r\n  /** Stream of autocomplete option selections. */\r\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.autocomplete && this.autocomplete.options) {\r\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n    // Return a stream that we'll replace with the real one once everything is in place.\r\n    return this._zone.onStable\r\n        .asObservable()\r\n        .pipe(take(1), switchMap(() => this.optionSelections));\r\n  }) as Observable<MatOptionSelectionChange>;\r\n\r\n  /** The currently active option, coerced to MatOption type. */\r\n  get activeOption(): MatOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stream of clicks outside of the autocomplete panel. */\r\n  private _getOutsideClickStream(): Observable<any> {\r\n    return merge(\r\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\r\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\r\n    )\r\n    .pipe(filter(event => {\r\n      const clickTarget = event.target as HTMLElement;\r\n      const formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._overlayAttached &&\r\n              clickTarget !== this._element.nativeElement &&\r\n              (!formField || !formField.contains(clickTarget)) &&\r\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this._element.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n    // the input value to the one that it had on focus, however it won't dispatch any events\r\n    // which means that the model value will be out of sync with the view.\r\n    if (keyCode === ESCAPE) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else if (this.autocomplete) {\r\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen || keyCode === TAB) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey && this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n\r\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n        this._scrollToOption();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleInput(event: KeyboardEvent): void {\r\n    let target = event.target as HTMLInputElement;\r\n    let value: number | string | null = target.value;\r\n\r\n    // Based on `NumberValueAccessor` from forms.\r\n    if (target.type === 'number') {\r\n      value = value == '' ? null : parseFloat(value);\r\n    }\r\n\r\n    // If the input has a placeholder, IE will fire the `input` event on page load,\r\n    // focus and blur, in addition to when the user actually changed the value. To\r\n    // filter out all of the extra events, we save the value on focus and between\r\n    // `input` events, and we check whether it changed.\r\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (this._previousValue !== value) {\r\n      this._previousValue = value;\r\n      this._onChange(value);\r\n\r\n      if (this._canOpen() && this._document.activeElement === event.target) {\r\n        this.openPanel();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleFocus(): void {\r\n    if (!this._canOpenOnNextFocus) {\r\n      this._canOpenOnNextFocus = true;\r\n    } else if (this._canOpen()) {\r\n      this._previousValue = this._element.nativeElement.value;\r\n      this._attachOverlay();\r\n      this._floatLabel(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\r\n  private _floatLabel(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatLabel === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockLabel();\r\n      } else {\r\n        this._formField.floatLabel = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingLabel = true;\r\n    }\r\n  }\r\n\r\n  /** If the label has been manually elevated, return it to its normal state. */\r\n  private _resetLabel(): void  {\r\n    if (this._manuallyFloatingLabel) {\r\n      this._formField.floatLabel = 'auto';\r\n      this._manuallyFloatingLabel = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given that we are not actually focusing active options, we must manually adjust scroll\r\n   * to reveal options below the fold. First, we find the offset of the option from the top\r\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n   * the panel height + the option height, so the active option will be just visible at the\r\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n   * not adjusted.\r\n   */\r\n  private _scrollToOption(): void {\r\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(index,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n\r\n    const newScrollPosition = _getOptionScrollPosition(\r\n      index + labelCount,\r\n      AUTOCOMPLETE_OPTION_HEIGHT,\r\n      this.autocomplete._getScrollTop(),\r\n      AUTOCOMPLETE_PANEL_HEIGHT\r\n    );\r\n\r\n    this.autocomplete._setScrollTop(newScrollPosition);\r\n  }\r\n\r\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\r\n  private _subscribeToClosingActions(): Subscription {\r\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\r\n    const optionChanges = this.autocomplete.options.changes.pipe(\r\n      tap(() => this._positionStrategy.reapplyLastPosition()),\r\n      // Defer emitting to the stream until the next tick, because changing\r\n      // bindings in here will cause \"changed after checked\" errors.\r\n      delay(0)\r\n    );\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return merge(firstStable, optionChanges)\r\n        .pipe(\r\n            // create a new stream of panelClosingActions, replacing any previous streams\r\n            // that were created, and flatten it so our stream only emits closing events...\r\n            switchMap(() => {\r\n              const wasOpen = this.panelOpen;\r\n              this._resetActiveItem();\r\n              this.autocomplete._setVisibility();\r\n\r\n              if (this.panelOpen) {\r\n                this._overlayRef!.updatePosition();\r\n\r\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\r\n                // event, because we may not have emitted it when the panel was attached. This\r\n                // can happen if the users opens the panel and there are no options, but the\r\n                // options come in slightly later or as a result of the value changing.\r\n                if (wasOpen !== this.panelOpen) {\r\n                  this.autocomplete.opened.emit();\r\n                }\r\n              }\r\n\r\n              return this.panelClosingActions;\r\n            }),\r\n            // when the first closing event occurs...\r\n            take(1))\r\n        // set the value, close the panel, and complete.\r\n        .subscribe(event => this._setValueAndClose(event));\r\n  }\r\n\r\n  /** Destroys the autocomplete suggestion panel. */\r\n  private _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _setTriggerValue(value: any): void {\r\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\r\n      this.autocomplete.displayWith(value) :\r\n      value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n\r\n    this._previousValue = inputValue;\r\n  }\r\n\r\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\r\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\r\n  private _clearPreviousSelectedOption(skip: MatOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMatAutocompleteMissingPanelError();\r\n    }\r\n\r\n    let overlayRef = this._overlayRef;\r\n\r\n    if (!overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      overlayRef = this._overlay.create(this._getOverlayConfig());\r\n      this._overlayRef = overlayRef;\r\n\r\n      // Use the `keydownEvents` in order to take advantage of\r\n      // the overlay event targeting provided by the CDK overlay.\r\n      overlayRef.keydownEvents().subscribe(event => {\r\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\r\n          this._resetActiveItem();\r\n          this._closeKeyEventStream.next();\r\n        }\r\n      });\r\n\r\n      if (this._viewportRuler) {\r\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\r\n          if (this.panelOpen && overlayRef) {\r\n            overlayRef.updateSize({width: this._getPanelWidth()});\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Update the trigger, panel width and direction, in case anything has changed.\r\n      this._positionStrategy.setOrigin(this._getConnectedElement());\r\n      overlayRef.updateSize({width: this._getPanelWidth()});\r\n    }\r\n\r\n    if (overlayRef && !overlayRef.hasAttached()) {\r\n      overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    const wasOpen = this.panelOpen;\r\n\r\n    this.autocomplete._setVisibility();\r\n    this.autocomplete._isOpen = this._overlayAttached = true;\r\n\r\n    // We need to do an extra `panelOpen` check in here, because the\r\n    // autocomplete won't be shown if there are no options.\r\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\r\n      this.autocomplete.opened.emit();\r\n    }\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getPanelWidth(),\r\n      direction: this._dir\r\n    });\r\n  }\r\n\r\n  private _getOverlayPosition(): PositionStrategy {\r\n    const strategy = this._overlay.position()\r\n      .flexibleConnectedTo(this._getConnectedElement())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false);\r\n\r\n    this._setStrategyPositions(strategy);\r\n    this._positionStrategy = strategy;\r\n    return strategy;\r\n  }\r\n\r\n  /** Sets the positions on a position strategy based on the directive's input state. */\r\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    const belowPosition: ConnectedPosition = {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'top'\r\n    };\r\n    const abovePosition: ConnectedPosition = {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n\r\n      // The overlay edge connected to the trigger should have squared corners, while\r\n      // the opposite end has rounded corners. We apply a CSS class to swap the\r\n      // border-radius based on the overlay position.\r\n      panelClass: 'mat-autocomplete-panel-above'\r\n    };\r\n\r\n    let positions: ConnectedPosition[];\r\n\r\n    if (this.position === 'above') {\r\n      positions = [abovePosition];\r\n    } else if (this.position === 'below') {\r\n      positions = [belowPosition];\r\n    } else {\r\n      positions = [belowPosition, abovePosition];\r\n    }\r\n\r\n    positionStrategy.withPositions(positions);\r\n  }\r\n\r\n  private _getConnectedElement(): ElementRef {\r\n    if (this.connectedTo) {\r\n      return this.connectedTo.elementRef;\r\n    }\r\n\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\r\n  }\r\n\r\n  private _getPanelWidth(): number | string {\r\n    return this.autocomplete.panelWidth || this._getHostWidth();\r\n  }\r\n\r\n  /** Returns the width of the input element, so the panel width can match it. */\r\n  private _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\r\n  private _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\r\n  }\r\n\r\n  /** Determines whether the panel can be opened. */\r\n  private _canOpen(): boolean {\r\n    const element = this._element.nativeElement;\r\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\r\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\r\n * @docs-private\r\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\r\n */\r\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\r\n  OCT = 9, NOV = 10, DEC = 11;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter} from '@angular/material/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'matMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatMultiYearView<D> implements AfterContentInit {\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\r\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new year is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected year. This doesn't imply a change on the selected date */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: MatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    let activeOffset = activeYear % yearsPerPage;\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(activeYear - activeOffset + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(year: number) {\r\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  animateChild,\r\n  group,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  query,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Time and timing curve for expansion panel animations. */\r\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\r\n\r\n/**\r\n * Animations used by the Material expansion panel.\r\n *\r\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\r\n * causes the animation state of moved components to become `void` upon exit, and not update again\r\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\r\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\r\n *\r\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\r\n * are defined to have the same styles. Since angular animates from the current styles to the\r\n * destination state's style definition, in situations where we are moving from `void`'s styles to\r\n * `collapsed` this acts a noop since no style values change.\r\n *\r\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\r\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\r\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\r\n * occur as expected.\r\n *\r\n * Angular Bug: https://github.com/angular/angular/issues/18847\r\n *\r\n * @docs-private\r\n */\r\nexport const matExpansionAnimations: {\r\n  readonly indicatorRotate: AnimationTriggerMetadata;\r\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\r\n  readonly bodyExpansion: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that rotates the indicator arrow. */\r\n  indicatorRotate: trigger('indicatorRotate', [\r\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\r\n    state('expanded', style({transform: 'rotate(180deg)'})),\r\n    transition('expanded <=> collapsed, void => collapsed',\r\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n  ]),\r\n\r\n  /** Animation that expands and collapses the panel header height. */\r\n  expansionHeaderHeight: trigger('expansionHeight', [\r\n    state('collapsed, void', style({\r\n      height: '{{collapsedHeight}}',\r\n    }), {\r\n      params: {collapsedHeight: '48px'},\r\n    }),\r\n    state('expanded', style({\r\n      height: '{{expandedHeight}}'\r\n    }), {\r\n      params: {expandedHeight: '64px'}\r\n    }),\r\n    transition('expanded <=> collapsed, void => collapsed', group([\r\n      query('@indicatorRotate', animateChild(), {optional: true}),\r\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\r\n    ])),\r\n  ]),\r\n\r\n  /** Animation that expands and collapses the panel content. */\r\n  bodyExpansion: trigger('bodyExpansion', [\r\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\r\n    state('expanded', style({height: '*', visibility: 'visible'})),\r\n    transition('expanded <=> collapsed, void => collapsed',\r\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n  ])\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop  - optionOffsetFromPanelTop + optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport ;\n    this._offsetY -= distanceBelowViewport - 100;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY =  - this._triggerRect.height - 20;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  HorizontalConnectionPos,\r\n  OriginConnectionPosition,\r\n  Overlay,\r\n  OverlayConnectionPosition,\r\n  OverlayRef,\r\n  ScrollStrategy,\r\n  VerticalConnectionPos,\r\n} from '@angular/cdk/overlay';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\n\r\nimport {matTooltipAnimations} from './tooltip-animations';\r\n\r\n\r\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\r\n\r\n/** Time in ms to throttle repositioning after scroll events. */\r\nexport const SCROLL_THROTTLE_MS = 20;\r\n\r\n/** CSS class that will be attached to the overlay panel. */\r\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\r\n\r\n/**\r\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\r\n * @docs-private\r\n */\r\nexport function getMatTooltipInvalidPositionError(position: string) {\r\n  return Error(`Tooltip position \"${position}\" is invalid.`);\r\n}\r\n\r\n/** Injection token that determines the scroll handling while a tooltip is visible. */\r\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n/** Default `matTooltip` options that can be overridden. */\r\nexport interface MatTooltipDefaultOptions {\r\n  showDelay: number;\r\n  hideDelay: number;\r\n  touchendHideDelay: number;\r\n  position?: TooltipPosition;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `matTooltip`. */\r\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\r\n  return {\r\n    showDelay: 0,\r\n    hideDelay: 0,\r\n    touchendHideDelay: 1500,\r\n  };\r\n}\r\n\r\n/**\r\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\r\n * hiding of a tooltip provided position (defaults to below the element).\r\n *\r\n * https://material.io/design/components/tooltips.html\r\n */\r\n@Directive({\r\n  selector: '[matTooltip]',\r\n  exportAs: 'matTooltip',\r\n  host: {\r\n    '(longpress)': 'show()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(touchend)': '_handleTouchend()',\r\n  },\r\n})\r\nexport class MatTooltip implements OnDestroy, OnInit {\r\n  _overlayRef: OverlayRef | null;\r\n  _tooltipInstance: TooltipComponent | null;\r\n\r\n  private _portal: ComponentPortal<TooltipComponent>;\r\n  private _position: TooltipPosition = 'below';\r\n  private _disabled: boolean = false;\r\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** Allows the user to define the position of the tooltip relative to the parent element */\r\n  @Input('matTooltipPosition')\r\n  get position(): TooltipPosition { return this._position; }\r\n  set position(value: TooltipPosition) {\r\n    if (value !== this._position) {\r\n      this._position = value;\r\n\r\n      if (this._overlayRef) {\r\n        this._updatePosition();\r\n\r\n        if (this._tooltipInstance) {\r\n          this._tooltipInstance!.show(0);\r\n        }\r\n\r\n        this._overlayRef.updatePosition();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Disables the display of the tooltip. */\r\n  @Input('matTooltipDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // If tooltip is disabled, hide immediately.\r\n    if (this._disabled) {\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /** The default delay in ms before showing the tooltip after show is called */\r\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\r\n\r\n  /** The default delay in ms before hiding the tooltip after hide is called */\r\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\r\n\r\n  private _message = '';\r\n\r\n  /** The message to be displayed in the tooltip */\r\n  @Input('matTooltip')\r\n  get message() { return this._message; }\r\n  set message(value: string) {\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\r\n\r\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\r\n    this._message = value != null ? `${value}`.trim() : '';\r\n\r\n    if (!this._message && this._isTooltipVisible()) {\r\n      this.hide(0);\r\n    } else {\r\n      this._updateTooltipMessage();\r\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\r\n    }\r\n  }\r\n\r\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\r\n  @Input('matTooltipClass')\r\n  get tooltipClass() { return this._tooltipClass; }\r\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\r\n    this._tooltipClass = value;\r\n    if (this._tooltipInstance) {\r\n      this._setTooltipClass(this._tooltipClass);\r\n    }\r\n  }\r\n\r\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n    private _overlay: Overlay,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    private _ngZone: NgZone,\r\n    platform: Platform,\r\n    private _ariaDescriber: AriaDescriber,\r\n    private _focusMonitor: FocusMonitor,\r\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\r\n      private _defaultOptions: MatTooltipDefaultOptions,\r\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n    const element: HTMLElement = _elementRef.nativeElement;\r\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\r\n\r\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\r\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\r\n    if (!platform.IOS && !platform.ANDROID) {\r\n      this._manualListeners\r\n        .set('mouseenter', () => this.show())\r\n        .set('mouseleave', () => this.hide());\r\n    } else if (!hasGestures) {\r\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\r\n      // there's no way for the user to trigger the tooltip on a touch device.\r\n      this._manualListeners.set('touchstart', () => this.show());\r\n    }\r\n\r\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\r\n\r\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\r\n      // Note that the focus monitor runs outside the Angular zone.\r\n      if (!origin) {\r\n        _ngZone.run(() => this.hide(0));\r\n      } else if (origin === 'keyboard') {\r\n        _ngZone.run(() => this.show());\r\n      }\r\n    });\r\n\r\n    if (_defaultOptions && _defaultOptions.position) {\r\n      this.position = _defaultOptions.position;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup styling-specific things\r\n   */\r\n  ngOnInit() {\r\n    const element = this._elementRef.nativeElement;\r\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\r\n\r\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\r\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\r\n      // will add some inline styles by default, including `user-select: none`. This is\r\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\r\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\r\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\r\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\r\n    }\r\n\r\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\r\n    // which breaks the native drag&drop. If the consumer explicitly made\r\n    // the element draggable, clear the `-webkit-user-drag`.\r\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\r\n      elementStyle.webkitUserDrag = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispose the tooltip when destroyed.\r\n   */\r\n  ngOnDestroy() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._tooltipInstance = null;\r\n    }\r\n\r\n    // Clean up the event listeners set in the constructor\r\n    this._manualListeners.forEach((listener, event) => {\r\n      this._elementRef.nativeElement.removeEventListener(event, listener);\r\n    });\r\n    this._manualListeners.clear();\r\n\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\r\n  show(delay: number = this.showDelay): void {\r\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\r\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\r\n        return;\r\n    }\r\n\r\n    const overlayRef = this._createOverlay();\r\n\r\n    this._detach();\r\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\r\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\r\n    this._tooltipInstance.afterHidden()\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => this._detach());\r\n    this._setTooltipClass(this._tooltipClass);\r\n    this._updateTooltipMessage();\r\n    this._tooltipInstance!.show(delay);\r\n  }\r\n\r\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\r\n  hide(delay: number = this.hideDelay): void {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.hide(delay);\r\n    }\r\n  }\r\n\r\n  /** Shows/hides the tooltip */\r\n  toggle(): void {\r\n    this._isTooltipVisible() ? this.hide() : this.show();\r\n  }\r\n\r\n  /** Returns true if the tooltip is currently visible to the user */\r\n  _isTooltipVisible(): boolean {\r\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\r\n  }\r\n\r\n  /** Handles the keydown events on the host element. */\r\n  _handleKeydown(e: KeyboardEvent) {\r\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /** Handles the touchend events on the host element. */\r\n  _handleTouchend() {\r\n    this.hide(this._defaultOptions.touchendHideDelay);\r\n  }\r\n\r\n  /** Create the overlay config and position strategy */\r\n  private _createOverlay(): OverlayRef {\r\n    if (this._overlayRef) {\r\n      return this._overlayRef;\r\n    }\r\n\r\n    const scrollableAncestors =\r\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\r\n\r\n    // Create connected position strategy that listens for scroll events to reposition.\r\n    const strategy = this._overlay.position()\r\n                         .flexibleConnectedTo(this._elementRef)\r\n                         .withTransformOriginOn('.mat-tooltip')\r\n                         .withFlexibleDimensions(false)\r\n                         .withViewportMargin(8)\r\n                         .withScrollableContainers(scrollableAncestors);\r\n\r\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\r\n      if (this._tooltipInstance) {\r\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\r\n          // After position changes occur and the overlay is clipped by\r\n          // a parent scrollable then close the tooltip.\r\n          this._ngZone.run(() => this.hide(0));\r\n        }\r\n      }\r\n    });\r\n\r\n    this._overlayRef = this._overlay.create({\r\n      direction: this._dir,\r\n      positionStrategy: strategy,\r\n      panelClass: TOOLTIP_PANEL_CLASS,\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n\r\n    this._updatePosition();\r\n\r\n    this._overlayRef.detachments()\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => this._detach());\r\n\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** Detaches the currently-attached tooltip. */\r\n  private _detach() {\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n    }\r\n\r\n    this._tooltipInstance = null;\r\n  }\r\n\r\n  /** Updates the position of the current tooltip. */\r\n  private _updatePosition() {\r\n    const position =\r\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\r\n    const origin = this._getOrigin();\r\n    const overlay = this._getOverlayPosition();\r\n\r\n    position.withPositions([\r\n      {...origin.main, ...overlay.main},\r\n      {...origin.fallback, ...overlay.fallback}\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Returns the origin position and a fallback position based on the user's position preference.\r\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\r\n   */\r\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\r\n    const isLtr = !this._dir || this._dir.value == 'ltr';\r\n    const position = this.position;\r\n    let originPosition: OriginConnectionPosition;\r\n\r\n    if (position == 'above' || position == 'below') {\r\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\r\n    } else if (\r\n      position == 'before' ||\r\n      (position == 'left' && isLtr) ||\r\n      (position == 'right' && !isLtr)) {\r\n      originPosition = {originX: 'start', originY: 'center'};\r\n    } else if (\r\n      position == 'after' ||\r\n      (position == 'right' && isLtr) ||\r\n      (position == 'left' && !isLtr)) {\r\n      originPosition = {originX: 'end', originY: 'center'};\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(position);\r\n    }\r\n\r\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\r\n\r\n    return {\r\n      main: originPosition,\r\n      fallback: {originX: x, originY: y}\r\n    };\r\n  }\r\n\r\n  /** Returns the overlay position and a fallback position based on the user's preference */\r\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\r\n    const isLtr = !this._dir || this._dir.value == 'ltr';\r\n    const position = this.position;\r\n    let overlayPosition: OverlayConnectionPosition;\r\n\r\n    if (position == 'above') {\r\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\r\n    } else if (position == 'below') {\r\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\r\n    } else if (\r\n      position == 'before' ||\r\n      (position == 'left' && isLtr) ||\r\n      (position == 'right' && !isLtr)) {\r\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\r\n    } else if (\r\n      position == 'after' ||\r\n      (position == 'right' && isLtr) ||\r\n      (position == 'left' && !isLtr)) {\r\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(position);\r\n    }\r\n\r\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\r\n\r\n    return {\r\n      main: overlayPosition,\r\n      fallback: {overlayX: x, overlayY: y}\r\n    };\r\n  }\r\n\r\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\r\n  private _updateTooltipMessage() {\r\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\r\n    // calculate the correct positioning based on the size of the text.\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.message = this.message;\r\n      this._tooltipInstance._markForCheck();\r\n\r\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed)\r\n      ).subscribe(() => {\r\n        if (this._tooltipInstance) {\r\n          this._overlayRef!.updatePosition();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Updates the tooltip class */\r\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.tooltipClass = tooltipClass;\r\n      this._tooltipInstance._markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Inverts an overlay position. */\r\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\r\n    if (this.position === 'above' || this.position === 'below') {\r\n      if (y === 'top') {\r\n        y = 'bottom';\r\n      } else if (y === 'bottom') {\r\n        y = 'top';\r\n      }\r\n    } else {\r\n      if (x === 'end') {\r\n        x = 'start';\r\n      } else if (x === 'start') {\r\n        x = 'end';\r\n      }\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n}\r\n\r\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\r\n\r\n/**\r\n * Internal component that wraps the tooltip's content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tooltip-component',\r\n  templateUrl: 'tooltip.html',\r\n  styleUrls: ['tooltip.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matTooltipAnimations.tooltipState],\r\n  host: {\r\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\r\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\r\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\r\n    '(body:click)': 'this._handleBodyInteraction()',\r\n    'aria-hidden': 'true',\r\n  }\r\n})\r\nexport class TooltipComponent implements OnDestroy {\r\n  /** Message to display in the tooltip */\r\n  message: string;\r\n\r\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\r\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** The timeout ID of any current timer set to show the tooltip */\r\n  _showTimeoutId: number | null;\r\n\r\n  /** The timeout ID of any current timer set to hide the tooltip */\r\n  _hideTimeoutId: number | null;\r\n\r\n  /** Property watched by the animation framework to show or hide the tooltip */\r\n  _visibility: TooltipVisibility = 'initial';\r\n\r\n  /** Whether interactions on the page should close the tooltip */\r\n  private _closeOnInteraction: boolean = false;\r\n\r\n  /** Subject for notifying that the tooltip has been hidden from the view */\r\n  private readonly _onHide: Subject<any> = new Subject();\r\n\r\n  /** Stream that emits whether the user has a handset-sized display.  */\r\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _breakpointObserver: BreakpointObserver) {}\r\n\r\n  /**\r\n   * Shows the tooltip with an animation originating from the provided origin\r\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\r\n   */\r\n  show(delay: number): void {\r\n    // Cancel the delayed hide if it is scheduled\r\n    if (this._hideTimeoutId) {\r\n      clearTimeout(this._hideTimeoutId);\r\n      this._hideTimeoutId = null;\r\n    }\r\n\r\n    // Body interactions should cancel the tooltip if there is a delay in showing.\r\n    this._closeOnInteraction = true;\r\n    this._showTimeoutId = setTimeout(() => {\r\n      this._visibility = 'visible';\r\n      this._showTimeoutId = null;\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Begins the animation to hide the tooltip after the provided delay in ms.\r\n   * @param delay Amount of milliseconds to delay showing the tooltip.\r\n   */\r\n  hide(delay: number): void {\r\n    // Cancel the delayed show if it is scheduled\r\n    if (this._showTimeoutId) {\r\n      clearTimeout(this._showTimeoutId);\r\n      this._showTimeoutId = null;\r\n    }\r\n\r\n    this._hideTimeoutId = setTimeout(() => {\r\n      this._visibility = 'hidden';\r\n      this._hideTimeoutId = null;\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\r\n\r\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\r\n  afterHidden(): Observable<void> {\r\n    return this._onHide.asObservable();\r\n  }\r\n\r\n  /** Whether the tooltip is being displayed. */\r\n  isVisible(): boolean {\r\n    return this._visibility === 'visible';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onHide.complete();\r\n  }\r\n\r\n  _animationStart() {\r\n    this._closeOnInteraction = false;\r\n  }\r\n\r\n  _animationDone(event: AnimationEvent): void {\r\n    const toState = event.toState as TooltipVisibility;\r\n\r\n    if (toState === 'hidden' && !this.isVisible()) {\r\n      this._onHide.next();\r\n    }\r\n\r\n    if (toState === 'visible' || toState === 'hidden') {\r\n      this._closeOnInteraction = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\r\n   * material design spec.\r\n   * https://material.io/design/components/tooltips.html#behavior\r\n   */\r\n  _handleBodyInteraction(): void {\r\n    if (this._closeOnInteraction) {\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks that the tooltip needs to be checked in the next change detection run.\r\n   * Mainly used for rendering the initial text before positioning a tooltip, which\r\n   * can be problematic in components with OnPush change detection.\r\n   */\r\n  _markForCheck(): void {\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\r\n\r\n\r\n/**\r\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\r\n * bar in a set of tabs.\r\n */\r\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\r\nexport interface _MatInkBarPositioner {\r\n  (element: HTMLElement): { left: string, width: string };\r\n}\r\n\r\n/** Injection token for the MatInkBar's Positioner. */\r\nexport const _MAT_INK_BAR_POSITIONER =\r\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\r\n    providedIn: 'root',\r\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\r\n  });\r\n\r\n/**\r\n * The default positioner function for the MatInkBar.\r\n * @docs-private\r\n */\r\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\r\n  const method = (element: HTMLElement) => ({\r\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\r\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\r\n  });\r\n\r\n  return method;\r\n}\r\n\r\n/**\r\n * The ink-bar is used to display and animate the line underneath the current active tab label.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-ink-bar',\r\n  host: {\r\n    'class': 'mat-ink-bar',\r\n  },\r\n})\r\nexport class MatInkBar {\r\n  constructor(\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _ngZone: NgZone,\r\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\r\n\r\n  /**\r\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n   * Shows the ink bar if previously set as hidden.\r\n   * @param element\r\n   */\r\n  alignToElement(element: HTMLElement) {\r\n    this.show();\r\n\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => this._setStyles(element));\r\n      });\r\n    } else {\r\n      this._setStyles(element);\r\n    }\r\n  }\r\n\r\n  /** Shows the ink bar. */\r\n  show(): void {\r\n    this._elementRef.nativeElement.style.visibility = 'visible';\r\n  }\r\n\r\n  /** Hides the ink bar. */\r\n  hide(): void {\r\n    this._elementRef.nativeElement.style.visibility = 'hidden';\r\n  }\r\n\r\n  /**\r\n   * Sets the proper styles to the ink bar element.\r\n   * @param element\r\n   */\r\n  private _setStyles(element: HTMLElement) {\r\n    const positions = this._inkBarPositioner(element);\r\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    inkBar.style.left = positions.left;\r\n    inkBar.style.width = positions.width;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/** Decorates the `ng-template` tags and reads out the template from it. */\r\n@Directive({selector: '[matTabContent]'})\r\nexport class MatTabContent {\r\n  constructor(public template: TemplateRef<any>) { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\nimport {CdkPortal} from '@angular/cdk/portal';\r\n\r\n/** Used to flag tab labels for use with the portal directive */\r\n@Directive({\r\n  selector: '[mat-tab-label], [matTabLabel]',\r\n})\r\nexport class MatTabLabel extends CdkPortal {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {MatTabContent} from './tab-content';\r\nimport {MatTabLabel} from './tab-label';\r\n\r\n\r\n// Boilerplate for applying mixins to MatTab.\r\n/** @docs-private */\r\nclass MatTabBase {}\r\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\r\n    mixinDisabled(MatTabBase);\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab',\r\n  templateUrl: 'tab.html',\r\n  inputs: ['disabled'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matTab',\r\n})\r\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\r\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\r\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\r\n\r\n  /**\r\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\r\n   */\r\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\r\n  _explicitContent: TemplateRef<any>;\r\n\r\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\r\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\r\n\r\n  /** Plain text label for the tab, used when there is no template label. */\r\n  @Input('label') textLabel: string = '';\r\n\r\n  /** Aria label for the tab. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Reference to the element that the tab is labelled by.\r\n   * Will be cleared if `aria-label` is set at the same time.\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** Portal that will be the hosted content of the tab */\r\n  private _contentPortal: TemplatePortal | null = null;\r\n\r\n  /** @docs-private */\r\n  get content(): TemplatePortal | null {\r\n    return this._contentPortal;\r\n  }\r\n\r\n  /** Emits whenever the internal state of the tab changes. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  /**\r\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\r\n   * represents the right.\r\n   */\r\n  position: number | null = null;\r\n\r\n  /**\r\n   * The initial relatively index origin of the tab if it was created and selected after there\r\n   * was already a selected tab. Provides context of what position the tab should originate from.\r\n   */\r\n  origin: number | null = null;\r\n\r\n  /**\r\n   * Whether the tab is currently active.\r\n   */\r\n  isActive = false;\r\n\r\n  constructor(private _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\r\n      this._stateChanges.next();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._stateChanges.complete();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._contentPortal = new TemplatePortal(\r\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material tabs.\r\n * @docs-private\r\n */\r\nexport const matTabsAnimations: {\r\n  readonly translateTab: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation translates a tab along the X axis. */\r\n  translateTab: trigger('translateTab', [\r\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\r\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\r\n\r\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\r\n    // in order to ensure that the element has a height before its state changes. This is\r\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\r\n    // not have a static height and is not rendered. See related issue: #9465\r\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\r\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\r\n\r\n    transition('* => left, * => right, left => center, right => center',\r\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\r\n    transition('void => left-origin-center', [\r\n      style({transform: 'translate3d(-100%, 0, 0)'}),\r\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\r\n    ]),\r\n    transition('void => right-origin-center', [\r\n      style({transform: 'translate3d(100%, 0, 0)'}),\r\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\r\n    ])\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ChangeDetectorRef,\r\n  Input,\r\n  Inject,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  ElementRef,\r\n  Directive,\r\n  Optional,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ComponentFactoryResolver,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\r\nimport {Directionality, Direction} from '@angular/cdk/bidi';\r\nimport {Subscription, Subject} from 'rxjs';\r\nimport {matTabsAnimations} from './tabs-animations';\r\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\r\n\r\n/**\r\n * These position states are used internally as animation states for the tab body. Setting the\r\n * position state to left, right, or center will transition the tab body from its current\r\n * position to its respective state. If there is not current position (void, in the case of a new\r\n * tab body), then there will be no transition animation to its state.\r\n *\r\n * In the case of a new tab body that should immediately be centered with an animating transition,\r\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\r\n * psuedo-prior state.\r\n */\r\nexport type MatTabBodyPositionState =\r\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\r\n\r\n/**\r\n * The origin state is an internally used state that is set on a new tab body indicating if it\r\n * began to the left or right of the prior selected index. For example, if the selected index was\r\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\r\n * origin of right because its index was greater than the prior selected index.\r\n */\r\nexport type MatTabBodyOriginState = 'left' | 'right';\r\n\r\n/**\r\n * The portal host directive for the contents of the tab.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[matTabBodyHost]'\r\n})\r\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\r\n  /** Subscription to events for when the tab body begins centering. */\r\n  private _centeringSub = Subscription.EMPTY;\r\n  /** Subscription to events for when the tab body finishes leaving from center position. */\r\n  private _leavingSub = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    componentFactoryResolver: ComponentFactoryResolver,\r\n    viewContainerRef: ViewContainerRef,\r\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\r\n      super(componentFactoryResolver, viewContainerRef);\r\n  }\r\n\r\n  /** Set initial visibility or set up subscription for changing visibility. */\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n\r\n    this._centeringSub = this._host._beforeCentering\r\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\r\n      .subscribe((isCentering: boolean) => {\r\n        if (isCentering && !this.hasAttached()) {\r\n          this.attach(this._host._content);\r\n        }\r\n      });\r\n\r\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\r\n      this.detach();\r\n    });\r\n  }\r\n\r\n  /** Clean up centering subscription. */\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this._centeringSub.unsubscribe();\r\n    this._leavingSub.unsubscribe();\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the contents of a tab.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-body',\r\n  templateUrl: 'tab-body.html',\r\n  styleUrls: ['tab-body.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matTabsAnimations.translateTab],\r\n  host: {\r\n    'class': 'mat-tab-body',\r\n  },\r\n})\r\nexport class MatTabBody implements OnInit, OnDestroy {\r\n\r\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\r\n  private _positionIndex: number;\r\n\r\n  /** Subscription to the directionality change observable. */\r\n  private _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  /** Tab body position state. Used by the animation trigger for the current state. */\r\n  _position: MatTabBodyPositionState;\r\n\r\n  /** Emits when an animation on the tab is complete. */\r\n  _translateTabComplete = new Subject<AnimationEvent>();\r\n\r\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\r\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted when the tab completes its animation towards the center. */\r\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\r\n\r\n   /** The portal host inside of this container into which the tab body content will be loaded. */\r\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\r\n\r\n  /** The tab body content to display. */\r\n  @Input('content') _content: TemplatePortal;\r\n\r\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\r\n  @Input() origin: number;\r\n\r\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\r\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\r\n  /** Duration for the tab's animation. */\r\n  @Input() animationDuration: string = '500ms';\r\n\r\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\r\n  @Input()\r\n  set position(position: number) {\r\n    this._positionIndex = position;\r\n    this._computePositionAnimationState();\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              @Optional() private _dir: Directionality,\r\n              changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (_dir) {\r\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\r\n        this._computePositionAnimationState(dir);\r\n        changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n\r\n    // Ensure that we get unique animation events, because the `.done` callback can get\r\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\r\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\r\n      return x.fromState === y.fromState && x.toState === y.toState;\r\n    })).subscribe(event => {\r\n      // If the transition to the center is complete, emit an event.\r\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\r\n        this._onCentered.emit();\r\n      }\r\n\r\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\r\n        this._afterLeavingCenter.emit();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * After initialized, check if the content is centered and has an origin. If so, set the\r\n   * special position states that transition the tab from the left or right before centering.\r\n   */\r\n  ngOnInit() {\r\n    if (this._position == 'center' && this.origin != null) {\r\n      this._position = this._computePositionFromOrigin();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dirChangeSubscription.unsubscribe();\r\n    this._translateTabComplete.complete();\r\n  }\r\n\r\n  _onTranslateTabStarted(event: AnimationEvent): void {\r\n    const isCentering = this._isCenterPosition(event.toState);\r\n    this._beforeCentering.emit(isCentering);\r\n    if (isCentering) {\r\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\r\n    }\r\n  }\r\n\r\n  /** The text direction of the containing app. */\r\n  _getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Whether the provided position state is considered center, regardless of origin. */\r\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\r\n    return position == 'center' ||\r\n        position == 'left-origin-center' ||\r\n        position == 'right-origin-center';\r\n  }\r\n\r\n  /** Computes the position state that will be used for the tab-body animation trigger. */\r\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\r\n    if (this._positionIndex < 0) {\r\n      this._position = dir == 'ltr' ? 'left' : 'right';\r\n    } else if (this._positionIndex > 0) {\r\n      this._position = dir == 'ltr' ? 'right' : 'left';\r\n    } else {\r\n      this._position = 'center';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the position state based on the specified origin position. This is used if the\r\n   * tab is becoming visible immediately after creation.\r\n   */\r\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\r\n    const dir = this._getLayoutDirection();\r\n\r\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\r\n      return 'left-origin-center';\r\n    }\r\n\r\n    return 'right-origin-center';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\r\n\r\n\r\n// Boilerplate for applying mixins to MatTabLabelWrapper.\r\n/** @docs-private */\r\nclass MatTabLabelWrapperBase {}\r\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\r\n    mixinDisabled(MatTabLabelWrapperBase);\r\n\r\n/**\r\n * Used in the `mat-tab-group` view to display tab labels.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[matTabLabelWrapper]',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    '[class.mat-tab-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': '!!disabled',\r\n  }\r\n})\r\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\r\n  constructor(public elementRef: ElementRef) {\r\n    super();\r\n  }\r\n\r\n  /** Sets focus on the wrapper element */\r\n  focus(): void {\r\n    this.elementRef.nativeElement.focus();\r\n  }\r\n\r\n  getOffsetLeft(): number {\r\n    return this.elementRef.nativeElement.offsetLeft;\r\n  }\r\n\r\n  getOffsetWidth(): number {\r\n    return this.elementRef.nativeElement.offsetWidth;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\r\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {MatInkBar} from './ink-bar';\r\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\n\r\n\r\n/** Config used to bind passive event listeners */\r\nconst passiveEventListenerOptions =\r\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\r\n\r\n/**\r\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\r\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\r\n * beginning of the list.\r\n */\r\nexport type ScrollDirection = 'after' | 'before';\r\n\r\n/**\r\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\r\n * provide a small affordance to the label next to it.\r\n */\r\nconst EXAGGERATED_OVERSCROLL = 60;\r\n\r\n/**\r\n * Amount of milliseconds to wait before starting to scroll the header automatically.\r\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\r\n */\r\nconst HEADER_SCROLL_DELAY = 650;\r\n\r\n/**\r\n * Interval in milliseconds at which to scroll the header\r\n * while the user is holding their pointer.\r\n */\r\nconst HEADER_SCROLL_INTERVAL = 100;\r\n\r\n// Boilerplate for applying mixins to MatTabHeader.\r\n/** @docs-private */\r\nclass MatTabHeaderBase {}\r\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\r\n    mixinDisableRipple(MatTabHeaderBase);\r\n\r\n/**\r\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\r\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\r\n * width of the header container, then arrows will be displayed to allow the user to scroll\r\n * left and right across the header.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-header',\r\n  templateUrl: 'tab-header.html',\r\n  styleUrls: ['tab-header.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-tab-header',\r\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\r\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\r\n  },\r\n})\r\nexport class MatTabHeader extends _MatTabHeaderMixinBase\r\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\r\n\r\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\r\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\r\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\r\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\r\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\r\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\r\n\r\n  /** The distance in pixels that the tab labels should be translated to the left. */\r\n  private _scrollDistance = 0;\r\n\r\n  /** Whether the header should scroll to the selected index after the view has been checked. */\r\n  private _selectedIndexChanged = false;\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  /** Whether the controls for pagination should be displayed */\r\n  _showPaginationControls = false;\r\n\r\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\r\n  _disableScrollAfter = true;\r\n\r\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\r\n  _disableScrollBefore = true;\r\n\r\n  /**\r\n   * The number of tab labels that are displayed on the header. When this changes, the header\r\n   * should re-evaluate the scroll position.\r\n   */\r\n  private _tabLabelCount: number;\r\n\r\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\r\n  private _scrollDistanceChanged: boolean;\r\n\r\n  /** Used to manage focus between the tabs. */\r\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\r\n\r\n  /** Cached text content of the header. */\r\n  private _currentTextContent: string;\r\n\r\n  /** Stream that will stop the automated scrolling. */\r\n  private _stopScrolling = new Subject<void>();\r\n\r\n  /** The index of the active tab. */\r\n  @Input()\r\n  get selectedIndex(): number { return this._selectedIndex; }\r\n  set selectedIndex(value: number) {\r\n    value = coerceNumberProperty(value);\r\n    this._selectedIndexChanged = this._selectedIndex != value;\r\n    this._selectedIndex = value;\r\n\r\n    if (this._keyManager) {\r\n      this._keyManager.updateActiveItemIndex(value);\r\n    }\r\n  }\r\n  private _selectedIndex: number = 0;\r\n\r\n  /** Event emitted when the option is selected. */\r\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted when a label is focused. */\r\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _viewportRuler: ViewportRuler,\r\n              @Optional() private _dir: Directionality,\r\n              private _ngZone: NgZone,\r\n              private _platform: Platform) {\r\n    super();\r\n\r\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\r\n    _ngZone.runOutsideAngular(() => {\r\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\r\n        .pipe(takeUntil(this._destroyed))\r\n        .subscribe(() => {\r\n          this._stopInterval();\r\n        });\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    // If the number of tab labels have changed, check if scrolling should be enabled\r\n    if (this._tabLabelCount != this._labelWrappers.length) {\r\n      this.updatePagination();\r\n      this._tabLabelCount = this._labelWrappers.length;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\r\n    // should be disabled.\r\n    if (this._selectedIndexChanged) {\r\n      this._scrollToLabel(this._selectedIndex);\r\n      this._checkScrollingControls();\r\n      this._alignInkBarToSelectedTab();\r\n      this._selectedIndexChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\r\n    // then translate the header to reflect this.\r\n    if (this._scrollDistanceChanged) {\r\n      this._updateTabScrollPosition();\r\n      this._scrollDistanceChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events on the header. */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    // We don't handle any key bindings with a modifier key.\r\n    if (hasModifierKey(event)) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case HOME:\r\n        this._keyManager.setFirstItemActive();\r\n        event.preventDefault();\r\n        break;\r\n      case END:\r\n        this._keyManager.setLastItemActive();\r\n        event.preventDefault();\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this.selectFocusedIndex.emit(this.focusIndex);\r\n        event.preventDefault();\r\n        break;\r\n      default:\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Aligns the ink bar to the selected tab on load.\r\n   */\r\n  ngAfterContentInit() {\r\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\r\n    const resize = this._viewportRuler.change(150);\r\n    const realign = () => {\r\n      this.updatePagination();\r\n      this._alignInkBarToSelectedTab();\r\n    };\r\n\r\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\r\n      .withHorizontalOrientation(this._getLayoutDirection())\r\n      .withWrap();\r\n\r\n    this._keyManager.updateActiveItem(0);\r\n\r\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\r\n    // This helps in cases where the user lands directly on a page with paginated tabs.\r\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\r\n\r\n    // On dir change or window resize, realign the ink bar and update the orientation of\r\n    // the key manager if the direction has changed.\r\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n      realign();\r\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\r\n    });\r\n\r\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\r\n    // event in order to provide a public event that notifies about focus changes. Also we realign\r\n    // the tabs container by scrolling the new focused tab into the visible section.\r\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\r\n      this.indexFocused.emit(newFocusIndex);\r\n      this._setTabFocus(newFocusIndex);\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // We need to handle these events manually, because we want to bind passive event listeners.\r\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this._handlePaginatorPress('before');\r\n      });\r\n\r\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this._handlePaginatorPress('after');\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n    this._stopScrolling.complete();\r\n  }\r\n\r\n  /**\r\n   * Callback for when the MutationObserver detects that the content has changed.\r\n   */\r\n  _onContentChanges() {\r\n    const textContent = this._elementRef.nativeElement.textContent;\r\n\r\n    // We need to diff the text content of the header, because the MutationObserver callback\r\n    // will fire even if the text content didn't change which is inefficient and is prone\r\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\r\n    if (textContent !== this._currentTextContent) {\r\n      this._currentTextContent = textContent;\r\n\r\n      // The content observer runs outside the `NgZone` by default, which\r\n      // means that we need to bring the callback back in ourselves.\r\n      this._ngZone.run(() => {\r\n        this.updatePagination();\r\n        this._alignInkBarToSelectedTab();\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the view whether pagination should be enabled or not.\r\n   *\r\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\r\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\r\n   * page.\r\n   */\r\n  updatePagination() {\r\n    this._checkPaginationEnabled();\r\n    this._checkScrollingControls();\r\n    this._updateTabScrollPosition();\r\n  }\r\n\r\n  /** Tracks which element has focus; used for keyboard navigation */\r\n  get focusIndex(): number {\r\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\r\n  }\r\n\r\n  /** When the focus index is set, we must manually send focus to the correct label */\r\n  set focusIndex(value: number) {\r\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\r\n      return;\r\n    }\r\n\r\n    this._keyManager.setActiveItem(value);\r\n  }\r\n\r\n  /**\r\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\r\n   * providing a valid index and return true.\r\n   */\r\n  _isValidIndex(index: number): boolean {\r\n    if (!this._labelWrappers) { return true; }\r\n\r\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\r\n    return !!tab && !tab.disabled;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\r\n   * scrolling is enabled.\r\n   */\r\n  _setTabFocus(tabIndex: number) {\r\n    if (this._showPaginationControls) {\r\n      this._scrollToLabel(tabIndex);\r\n    }\r\n\r\n    if (this._labelWrappers && this._labelWrappers.length) {\r\n      this._labelWrappers.toArray()[tabIndex].focus();\r\n\r\n      // Do not let the browser manage scrolling to focus the element, this will be handled\r\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\r\n      // should be the full width minus the offset width.\r\n      const containerEl = this._tabListContainer.nativeElement;\r\n      const dir = this._getLayoutDirection();\r\n\r\n      if (dir == 'ltr') {\r\n        containerEl.scrollLeft = 0;\r\n      } else {\r\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** The layout direction of the containing app. */\r\n  _getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\r\n  _updateTabScrollPosition() {\r\n    const scrollDistance = this.scrollDistance;\r\n    const platform = this._platform;\r\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\r\n\r\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\r\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\r\n    // and ripples will exceed the boundaries of the visible tab bar.\r\n    // See: https://github.com/angular/components/issues/10276\r\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\r\n    // browsers to blur the content of the element.\r\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\r\n\r\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\r\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\r\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\r\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\r\n    if (platform.TRIDENT || platform.EDGE) {\r\n      this._tabListContainer.nativeElement.scrollLeft = 0;\r\n    }\r\n  }\r\n\r\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\r\n  get scrollDistance(): number { return this._scrollDistance; }\r\n  set scrollDistance(value: number) {\r\n    this._scrollTo(value);\r\n  }\r\n\r\n  /**\r\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\r\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\r\n   * length of the tab list view window.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _scrollHeader(direction: ScrollDirection) {\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    // Move the scroll distance one-third the length of the tab list's viewport.\r\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\r\n\r\n    return this._scrollTo(this._scrollDistance + scrollAmount);\r\n  }\r\n\r\n  /** Handles click events on the pagination arrows. */\r\n  _handlePaginatorClick(direction: ScrollDirection) {\r\n    this._stopInterval();\r\n    this._scrollHeader(direction);\r\n  }\r\n\r\n  /**\r\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _scrollToLabel(labelIndex: number) {\r\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\r\n\r\n    if (!selectedLabel) { return; }\r\n\r\n    // The view length is the visible width of the tab labels.\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    let labelBeforePos: number, labelAfterPos: number;\r\n    if (this._getLayoutDirection() == 'ltr') {\r\n      labelBeforePos = selectedLabel.getOffsetLeft();\r\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\r\n    } else {\r\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\r\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\r\n    }\r\n\r\n    const beforeVisiblePos = this.scrollDistance;\r\n    const afterVisiblePos = this.scrollDistance + viewLength;\r\n\r\n    if (labelBeforePos < beforeVisiblePos) {\r\n      // Scroll header to move label to the before direction\r\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\r\n    } else if (labelAfterPos > afterVisiblePos) {\r\n      // Scroll header to move label to the after direction\r\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\r\n   * tab list is wider than the size of the header container, then the pagination controls should\r\n   * be shown.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _checkPaginationEnabled() {\r\n    const isEnabled =\r\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\r\n\r\n    if (!isEnabled) {\r\n      this.scrollDistance = 0;\r\n    }\r\n\r\n    if (isEnabled !== this._showPaginationControls) {\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._showPaginationControls = isEnabled;\r\n  }\r\n\r\n  /**\r\n   * Evaluate whether the before and after controls should be enabled or disabled.\r\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\r\n   * before button. If the header is at the end of the list (scroll distance is equal to the\r\n   * maximum distance we can scroll), then disable the after button.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _checkScrollingControls() {\r\n    // Check if the pagination arrows should be activated.\r\n    this._disableScrollBefore = this.scrollDistance == 0;\r\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\r\n   * is equal to the difference in width between the tab list container and tab header container.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _getMaxScrollDistance(): number {\r\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n    return (lengthOfTabList - viewLength) || 0;\r\n  }\r\n\r\n  /** Tells the ink-bar to align itself to the current label wrapper */\r\n  _alignInkBarToSelectedTab(): void {\r\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\r\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\r\n        null;\r\n\r\n    this._inkBar.alignToElement(selectedLabelWrapper!);\r\n  }\r\n\r\n  /** Stops the currently-running paginator interval.  */\r\n  _stopInterval() {\r\n    this._stopScrolling.next();\r\n  }\r\n\r\n  /**\r\n   * Handles the user pressing down on one of the paginators.\r\n   * Starts scrolling the header after a certain amount of time.\r\n   * @param direction In which direction the paginator should be scrolled.\r\n   */\r\n  _handlePaginatorPress(direction: ScrollDirection) {\r\n    // Avoid overlapping timers.\r\n    this._stopInterval();\r\n\r\n    // Start a timer after the delay and keep firing based on the interval.\r\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\r\n      // Keep the timer going until something tells it to stop or the component is destroyed.\r\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\r\n      .subscribe(() => {\r\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\r\n\r\n        // Stop the timer if we've reached the start or the end.\r\n        if (distance === 0 || distance >= maxScrollDistance) {\r\n          this._stopInterval();\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Scrolls the header to a given position.\r\n   * @param position Position to which to scroll.\r\n   * @returns Information on the current scroll distance and the maximum.\r\n   */\r\n  private _scrollTo(position: number) {\r\n    const maxScrollDistance = this._getMaxScrollDistance();\r\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\r\n\r\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\r\n    // transformation can move the header.\r\n    this._scrollDistanceChanged = true;\r\n    this._checkScrollingControls();\r\n\r\n    return {maxScrollDistance, distance: this._scrollDistance};\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanColorCtor,\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  mixinColor,\r\n  mixinDisableRipple,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {MatTab} from './tab';\r\nimport {MatTabHeader} from './tab-header';\r\n\r\n\r\n/** Used to generate unique ID's for each tab component */\r\nlet nextId = 0;\r\n\r\n/** A simple change event emitted on focus or selection changes. */\r\nexport class MatTabChangeEvent {\r\n  /** Index of the currently-selected tab. */\r\n  index: number;\r\n  /** Reference to the currently-selected tab. */\r\n  tab: MatTab;\r\n}\r\n\r\n/** Possible positions for the tab header. */\r\nexport type MatTabHeaderPosition = 'above' | 'below';\r\n\r\n/** Object that can be used to configure the default options for the tabs module. */\r\nexport interface MatTabsConfig {\r\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\r\n  animationDuration?: string;\r\n}\r\n\r\n/** Injection token that can be used to provide the default options the tabs module. */\r\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\r\n\r\n// Boilerplate for applying mixins to MatTabGroup.\r\n/** @docs-private */\r\nclass MatTabGroupBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\r\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\r\n\r\n/**\r\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\r\n * animated ink-bar, keyboard navigation, and screen reader.\r\n * See: https://material.io/design/components/tabs.html\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-group',\r\n  exportAs: 'matTabGroup',\r\n  templateUrl: 'tab-group.html',\r\n  styleUrls: ['tab-group.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color', 'disableRipple'],\r\n  host: {\r\n    'class': 'mat-tab-group',\r\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\r\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\r\n  },\r\n})\r\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\r\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\r\n\r\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\r\n\r\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\r\n\r\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\r\n\r\n  /** The tab index that should be selected after the content has been checked. */\r\n  private _indexToSelect: number | null = 0;\r\n\r\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\r\n  private _tabBodyWrapperHeight: number = 0;\r\n\r\n  /** Subscription to tabs being added/removed. */\r\n  private _tabsSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to changes in the tab labels. */\r\n  private _tabLabelSubscription = Subscription.EMPTY;\r\n\r\n  /** Whether the tab group should grow to the size of the active tab. */\r\n  @Input()\r\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\r\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\r\n  private _dynamicHeight: boolean = false;\r\n\r\n  /** The index of the active tab. */\r\n  @Input()\r\n  get selectedIndex(): number | null { return this._selectedIndex; }\r\n  set selectedIndex(value: number | null) {\r\n    this._indexToSelect = coerceNumberProperty(value, null);\r\n  }\r\n  private _selectedIndex: number | null = null;\r\n\r\n  /** Position of the tab header. */\r\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\r\n\r\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\r\n  @Input()\r\n  get animationDuration(): string { return this._animationDuration; }\r\n  set animationDuration(value: string) {\r\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\r\n  }\r\n  private _animationDuration: string;\r\n\r\n  /** Background color of the tab group. */\r\n  @Input()\r\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\r\n  set backgroundColor(value: ThemePalette) {\r\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      nativeElement.classList.add(`mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\r\n  private _backgroundColor: ThemePalette;\r\n\r\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\r\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted when focus has changed within a tab group. */\r\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\r\n      new EventEmitter<MatTabChangeEvent>();\r\n\r\n  /** Event emitted when the body animation has completed */\r\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Event emitted when the tab selection has changed. */\r\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\r\n      new EventEmitter<MatTabChangeEvent>(true);\r\n\r\n  private _groupId: number;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\r\n    super(elementRef);\r\n    this._groupId = nextId++;\r\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\r\n        defaultConfig.animationDuration : '500ms';\r\n  }\r\n\r\n  /**\r\n   * After the content is checked, this component knows what tabs have been defined\r\n   * and what the selected index should be. This is where we can know exactly what position\r\n   * each tab should be in according to the new selected index, and additionally we know how\r\n   * a new selected tab should transition in (from the left or right).\r\n   */\r\n  ngAfterContentChecked() {\r\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\r\n    // the amount of tabs changes before the actual change detection runs.\r\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\r\n\r\n    // If there is a change in selected index, emit a change event. Should not trigger if\r\n    // the selected index has not yet been initialized.\r\n    if (this._selectedIndex != indexToSelect) {\r\n      const isFirstRun = this._selectedIndex == null;\r\n\r\n      if (!isFirstRun) {\r\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\r\n      }\r\n\r\n      // Changing these values after change detection has run\r\n      // since the checked content may contain references to them.\r\n      Promise.resolve().then(() => {\r\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\r\n\r\n        if (!isFirstRun) {\r\n          this.selectedIndexChange.emit(indexToSelect);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\r\n    this._tabs.forEach((tab: MatTab, index: number) => {\r\n      tab.position = index - indexToSelect;\r\n\r\n      // If there is already a selected tab, then set up an origin for the next selected tab\r\n      // if it doesn't have one already.\r\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\r\n        tab.origin = indexToSelect - this._selectedIndex;\r\n      }\r\n    });\r\n\r\n    if (this._selectedIndex !== indexToSelect) {\r\n      this._selectedIndex = indexToSelect;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._subscribeToTabLabels();\r\n\r\n    // Subscribe to changes in the amount of tabs, in order to be\r\n    // able to re-render the content as new tabs are added or removed.\r\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\r\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\r\n\r\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\r\n      // explicit change that selects a different tab.\r\n      if (indexToSelect === this._selectedIndex) {\r\n        const tabs = this._tabs.toArray();\r\n\r\n        for (let i = 0; i < tabs.length; i++) {\r\n          if (tabs[i].isActive) {\r\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\r\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\r\n            // adding a tab within the `selectedIndexChange` event.\r\n            this._indexToSelect = this._selectedIndex = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      this._subscribeToTabLabels();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabsSubscription.unsubscribe();\r\n    this._tabLabelSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Re-aligns the ink bar to the selected tab element. */\r\n  realignInkBar() {\r\n    if (this._tabHeader) {\r\n      this._tabHeader._alignInkBarToSelectedTab();\r\n    }\r\n  }\r\n\r\n  _focusChanged(index: number) {\r\n    this.focusChange.emit(this._createChangeEvent(index));\r\n  }\r\n\r\n  private _createChangeEvent(index: number): MatTabChangeEvent {\r\n    const event = new MatTabChangeEvent;\r\n    event.index = index;\r\n    if (this._tabs && this._tabs.length) {\r\n      event.tab = this._tabs.toArray()[index];\r\n    }\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\r\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n   * manually.\r\n   */\r\n  private _subscribeToTabLabels() {\r\n    if (this._tabLabelSubscription) {\r\n      this._tabLabelSubscription.unsubscribe();\r\n    }\r\n\r\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\r\n      .subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\r\n  private _clampTabIndex(index: number | null): number {\r\n    // Note the `|| 0`, which ensures that values like NaN can't get through\r\n    // and which would otherwise throw the component into an infinite loop\r\n    // (since Math.max(NaN, 0) === NaN).\r\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\r\n  }\r\n\r\n  /** Returns a unique id for each tab label element */\r\n  _getTabLabelId(i: number): string {\r\n    return `mat-tab-label-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /** Returns a unique id for each tab content element */\r\n  _getTabContentId(i: number): string {\r\n    return `mat-tab-content-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /**\r\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n   * height property is true.\r\n   */\r\n  _setTabBodyWrapperHeight(tabHeight: number): void {\r\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\r\n\r\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\r\n\r\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\r\n\r\n    // This conditional forces the browser to paint the height so that\r\n    // the animation to the new height can have an origin.\r\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\r\n      wrapper.style.height = tabHeight + 'px';\r\n    }\r\n  }\r\n\r\n  /** Removes the height of the tab body wrapper. */\r\n  _removeTabBodyWrapperHeight(): void {\r\n    const wrapper = this._tabBodyWrapper.nativeElement;\r\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\r\n    wrapper.style.height = '';\r\n    this.animationDone.emit();\r\n  }\r\n\r\n  /** Handle click events, setting new selected index if appropriate. */\r\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\r\n    if (!tab.disabled) {\r\n      this.selectedIndex = tabHeader.focusIndex = index;\r\n    }\r\n  }\r\n\r\n  /** Retrieves the tabindex for the tab. */\r\n  _getTabIndex(tab: MatTab, idx: number): number | null {\r\n    if (tab.disabled) {\r\n      return null;\r\n    }\r\n    return this.selectedIndex === idx ? 0 : -1;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  ViewEncapsulation,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {MatSort, MatSortable} from './sort';\r\nimport {matSortAnimations} from './sort-animations';\r\nimport {SortDirection} from './sort-direction';\r\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\r\nimport {MatSortHeaderIntl} from './sort-header-intl';\r\n\r\n\r\n// Boilerplate for applying mixins to the sort header.\r\n/** @docs-private */\r\nclass MatSortHeaderBase {}\r\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\r\n    mixinDisabled(MatSortHeaderBase);\r\n\r\n/**\r\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\r\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\r\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\r\n * be fully opaque in the center.\r\n *\r\n * @docs-private\r\n */\r\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\r\n\r\n/**\r\n * States describing the arrow's animated position (animating fromState to toState).\r\n * If the fromState is not defined, there will be no animated transition to the toState.\r\n * @docs-private\r\n */\r\nexport interface ArrowViewStateTransition {\r\n  fromState?: ArrowViewState;\r\n  toState: ArrowViewState;\r\n}\r\n\r\n/** Column definition associated with a `MatSortHeader`. */\r\ninterface MatSortHeaderColumnDef {\r\n  name: string;\r\n}\r\n\r\n/**\r\n * Applies sorting behavior (click to change sort) and styles to an element, including an\r\n * arrow to display the current sort direction.\r\n *\r\n * Must be provided with an id and contained within a parent MatSort directive.\r\n *\r\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\r\n * column definition.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-sort-header]',\r\n  exportAs: 'matSortHeader',\r\n  templateUrl: 'sort-header.html',\r\n  styleUrls: ['sort-header.css'],\r\n  host: {\r\n    '(click)': '_handleClick()',\r\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\r\n    '(longpress)': '_setIndicatorHintVisible(true)',\r\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\r\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\r\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  animations: [\r\n    matSortAnimations.indicator,\r\n    matSortAnimations.leftPointer,\r\n    matSortAnimations.rightPointer,\r\n    matSortAnimations.arrowOpacity,\r\n    matSortAnimations.arrowPosition,\r\n    matSortAnimations.allowChildren,\r\n  ]\r\n})\r\nexport class MatSortHeader extends _MatSortHeaderMixinBase\r\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\r\n  private _rerenderSubscription: Subscription;\r\n\r\n  /**\r\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\r\n   * provide an affordance that the header is sortable by showing on focus and hover.\r\n   */\r\n  _showIndicatorHint: boolean = false;\r\n\r\n  /**\r\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\r\n   * position through the animation. If animations are currently disabled, the fromState is removed\r\n   * so that there is no animation displayed.\r\n   */\r\n  _viewState: ArrowViewStateTransition;\r\n\r\n  /** The direction the arrow should be facing according to the current state. */\r\n  _arrowDirection: SortDirection = '';\r\n\r\n  /**\r\n   * Whether the view state animation should show the transition between the `from` and `to` states.\r\n   */\r\n  _disableViewStateAnimation = false;\r\n\r\n  /**\r\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\r\n   * the column's name.\r\n   */\r\n  @Input('mat-sort-header') id: string;\r\n\r\n  /** Sets the position of the arrow that displays when sorted. */\r\n  @Input() arrowPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\r\n  @Input() start: 'asc' | 'desc';\r\n\r\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\r\n  @Input()\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  constructor(public _intl: MatSortHeaderIntl,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _sort: MatSort,\r\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\r\n                  public _columnDef: MatSortHeaderColumnDef) {\r\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\r\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\r\n    // and we want to avoid having the sort header depending on the CDK table because\r\n    // of this single reference.\r\n    super();\r\n\r\n    if (!_sort) {\r\n      throw getSortHeaderNotContainedWithinSortError();\r\n    }\r\n\r\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\r\n        .subscribe(() => {\r\n          if (this._isSorted()) {\r\n            this._updateArrowDirection();\r\n          }\r\n\r\n          // If this header was recently active and now no longer sorted, animate away the arrow.\r\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\r\n            this._disableViewStateAnimation = false;\r\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\r\n          }\r\n\r\n          changeDetectorRef.markForCheck();\r\n        });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.id && this._columnDef) {\r\n      this.id = this._columnDef.name;\r\n    }\r\n\r\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\r\n    this._updateArrowDirection();\r\n    this._setAnimationTransitionState(\r\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\r\n\r\n    this._sort.register(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._sort.deregister(this);\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n   */\r\n  _setIndicatorHintVisible(visible: boolean) {\r\n    // No-op if the sort header is disabled - should not make the hint visible.\r\n    if (this._isDisabled() && visible) { return; }\r\n\r\n    this._showIndicatorHint = visible;\r\n\r\n    if (!this._isSorted()) {\r\n      this._updateArrowDirection();\r\n      if (this._showIndicatorHint) {\r\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\r\n      } else {\r\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the animation transition view state for the arrow's position and opacity. If the\r\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n   * no animation appears.\r\n   */\r\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\r\n    this._viewState = viewState;\r\n\r\n    // If the animation for arrow position state (opacity/translation) should be disabled,\r\n    // remove the fromState so that it jumps right to the toState.\r\n    if (this._disableViewStateAnimation) {\r\n      this._viewState = {toState: viewState.toState};\r\n    }\r\n  }\r\n\r\n  /** Triggers the sort on this sort header and removes the indicator hint. */\r\n  _handleClick() {\r\n    if (this._isDisabled()) { return; }\r\n\r\n    this._sort.sort(this);\r\n\r\n    // Do not show the animation if the header was already shown in the right position.\r\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\r\n      this._disableViewStateAnimation = true;\r\n    }\r\n\r\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\r\n    // the direction it is facing.\r\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\r\n        {fromState: this._arrowDirection, toState: 'active'} :\r\n        {fromState: 'active', toState: this._arrowDirection};\r\n    this._setAnimationTransitionState(viewState);\r\n\r\n    this._showIndicatorHint = false;\r\n  }\r\n\r\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\r\n  _isSorted() {\r\n    return this._sort.active == this.id &&\r\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\r\n  }\r\n\r\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\r\n  _getArrowDirectionState() {\r\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\r\n  }\r\n\r\n  /** Returns the arrow position state (opacity, translation). */\r\n  _getArrowViewState() {\r\n    const fromState = this._viewState.fromState;\r\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\r\n  }\r\n\r\n  /**\r\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n   * active sorted direction. The reason this is updated through a function is because the direction\r\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n   * preserving its direction, even though the next sort direction is actually different and should\r\n   * only be changed once the arrow displays again (hint or activation).\r\n   */\r\n  _updateArrowDirection() {\r\n    this._arrowDirection = this._isSorted() ?\r\n        this._sort.direction :\r\n        (this.start || this._sort.start);\r\n  }\r\n\r\n  _isDisabled() {\r\n    return this._sort.disabled || this.disabled;\r\n  }\r\n\r\n  /**\r\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\r\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\r\n   * says that the aria-sort property should only be present on one header at a time, so removing\r\n   * ensures this is true.\r\n   */\r\n  _getAriaSortAttribute() {\r\n    if (!this._isSorted()) { return null; }\r\n\r\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\r\n  }\r\n\r\n  /** Whether the arrow inside the sort header should be rendered. */\r\n  _renderArrow() {\r\n    return !this._isDisabled() || this._isSorted();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatSortHeader} from './sort-header';\r\nimport {MatSort} from './sort';\r\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [MatSort, MatSortHeader],\r\n  declarations: [MatSort, MatSortHeader],\r\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\r\n})\r\nexport class MatSortModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\nimport {CdkStepLabel} from '@angular/cdk/stepper';\r\n\r\n@Directive({\r\n  selector: '[matStepLabel]',\r\n})\r\nexport class MatStepLabel extends CdkStepLabel {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n\r\n/** Stepper data that is required for internationalization. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatStepperIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** Label that is rendered below optional steps. */\r\n  optionalLabel: string = 'Optional';\r\n}\r\n\r\n\r\n/** @docs-private */\r\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\r\n  return parentIntl || new MatStepperIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_STEPPER_INTL_PROVIDER = {\r\n  provide: MatStepperIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\r\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatStepLabel} from './step-label';\r\nimport {MatStepperIntl} from './stepper-intl';\r\nimport {MatStepperIconContext} from './stepper-icon';\r\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-step-header',\r\n  templateUrl: 'step-header.html',\r\n  styleUrls: ['step-header.css'],\r\n  host: {\r\n    'class': 'mat-step-header',\r\n    'role': 'tab',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\r\n  private _intlSubscription: Subscription;\r\n\r\n  /** State of the given step. */\r\n  @Input() state: StepState;\r\n\r\n  /** Label of the given step. */\r\n  @Input() label: MatStepLabel | string;\r\n\r\n  /** Error message to display when there's an error. */\r\n  @Input() errorMessage: string;\r\n\r\n  /** Overrides for the header icons, passed in via the stepper. */\r\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\r\n\r\n  /** Index of the given step. */\r\n  @Input() index: number;\r\n\r\n  /** Whether the given step is selected. */\r\n  @Input() selected: boolean;\r\n\r\n  /** Whether the given step label is active. */\r\n  @Input() active: boolean;\r\n\r\n  /** Whether the given step is optional. */\r\n  @Input() optional: boolean;\r\n\r\n  /** Whether the ripple should be disabled. */\r\n  @Input() disableRipple: boolean;\r\n\r\n  constructor(\r\n    public _intl: MatStepperIntl,\r\n    private _focusMonitor: FocusMonitor,\r\n    _elementRef: ElementRef<HTMLElement>,\r\n    changeDetectorRef: ChangeDetectorRef) {\r\n    super(_elementRef);\r\n    _focusMonitor.monitor(_elementRef, true);\r\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlSubscription.unsubscribe();\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /** Focuses the step header. */\r\n  focus() {\r\n    this._focusMonitor.focusVia(this._elementRef, 'program');\r\n  }\r\n\r\n  /** Returns string label of given step if it is a text label. */\r\n  _stringLabel(): string | null {\r\n    return this.label instanceof MatStepLabel ? null : this.label;\r\n  }\r\n\r\n  /** Returns MatStepLabel if the label of given step is a template label. */\r\n  _templateLabel(): MatStepLabel | null {\r\n    return this.label instanceof MatStepLabel ? this.label : null;\r\n  }\r\n\r\n  /** Returns the host HTML element. */\r\n  _getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\r\n  _getIconContext(): MatStepperIconContext {\r\n    return {\r\n      index: this.index,\r\n      active: this.active,\r\n      optional: this.optional\r\n    };\r\n  }\r\n\r\n  _getDefaultTextForState(state: StepState): string {\r\n    if (state == 'number') {\r\n      return `${this.index + 1}`;\r\n    }\r\n    if (state == 'edit') {\r\n      return 'create';\r\n    }\r\n    if (state == 'error') {\r\n      return 'warning';\r\n    }\r\n    return state;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material steppers.\r\n * @docs-private\r\n */\r\nexport const matStepperAnimations: {\r\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\r\n  readonly verticalStepTransition: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\r\n  horizontalStepTransition: trigger('stepTransition', [\r\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\r\n    state('current', style({transform: 'none', visibility: 'visible'})),\r\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\r\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\r\n  ]),\r\n\r\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\r\n  verticalStepTransition: trigger('stepTransition', [\r\n    state('previous', style({height: '0px', visibility: 'hidden'})),\r\n    state('next', style({height: '0px', visibility: 'hidden'})),\r\n    state('current', style({height: '*', visibility: 'visible'})),\r\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input, TemplateRef} from '@angular/core';\r\nimport {StepState} from '@angular/cdk/stepper';\r\n\r\n/** Template context available to an attached `matStepperIcon`. */\r\nexport interface MatStepperIconContext {\r\n  /** Index of the step. */\r\n  index: number;\r\n  /** Whether the step is currently active. */\r\n  active: boolean;\r\n  /** Whether the step is optional. */\r\n  optional: boolean;\r\n}\r\n\r\n/**\r\n * Template to be used to override the icons inside the step header.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matStepperIcon]',\r\n})\r\nexport class MatStepperIcon {\r\n  /** Name of the icon to be overridden. */\r\n  @Input('matStepperIcon') name: StepState;\r\n\r\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  CdkStep,\r\n  CdkStepper,\r\n  StepContentPositionState,\r\n  STEPPER_GLOBAL_OPTIONS,\r\n  StepperOptions\r\n} from '@angular/cdk/stepper';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  ViewChildren,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\r\n\r\nimport {MatStepHeader} from './step-header';\r\nimport {MatStepLabel} from './step-label';\r\nimport {matStepperAnimations} from './stepper-animations';\r\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-step',\r\n  templateUrl: 'step.html',\r\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matStep',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\r\n  /** Content for step label given by `<ng-template matStepLabel>`. */\r\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\r\n\r\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\r\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\r\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\r\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\r\n    super(stepper, stepperOptions);\r\n  }\r\n\r\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\r\n\r\n    // Custom error state checks for the validity of form that is not submitted or touched\r\n    // since user can trigger a form change by calling for another step without directly\r\n    // interacting with the current form.\r\n    const customErrorState = !!(control && control.invalid && this.interacted);\r\n\r\n    return originalErrorState || customErrorState;\r\n  }\r\n}\r\n\r\n\r\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\r\nexport class MatStepper extends CdkStepper implements AfterContentInit {\r\n  /** The list of step headers of the steps in the stepper. */\r\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\r\n\r\n  /** Steps that the stepper holds. */\r\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\r\n\r\n  /** Custom icon overrides passed in by the consumer. */\r\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\r\n\r\n  /** Event emitted when the current step is done transitioning in. */\r\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Whether ripples should be disabled for the step headers. */\r\n  @Input() disableRipple: boolean;\r\n\r\n  /** Consumer-specified template-refs to be used to override the header icons. */\r\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\r\n\r\n  /** Stream of animation `done` events when the body expands/collapses. */\r\n  _animationDone = new Subject<AnimationEvent>();\r\n\r\n  ngAfterContentInit() {\r\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\r\n\r\n    // Mark the component for change detection whenever the content children query changes\r\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\r\n\r\n    this._animationDone.pipe(\r\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\r\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\r\n      // See https://github.com/angular/angular/issues/24084\r\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\r\n      takeUntil(this._destroyed)\r\n    ).subscribe(event => {\r\n      if ((event.toState as StepContentPositionState) === 'current') {\r\n        this.animationDone.emit();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-horizontal-stepper',\r\n  exportAs: 'matHorizontalStepper',\r\n  templateUrl: 'stepper-horizontal.html',\r\n  styleUrls: ['stepper.css'],\r\n  inputs: ['selectedIndex'],\r\n  host: {\r\n    'class': 'mat-stepper-horizontal',\r\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\r\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\r\n    'aria-orientation': 'horizontal',\r\n    'role': 'tablist',\r\n  },\r\n  animations: [matStepperAnimations.horizontalStepTransition],\r\n  providers: [\r\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\r\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatHorizontalStepper extends MatStepper {\r\n  /** Whether the label should display in bottom or end position. */\r\n  @Input()\r\n  labelPosition: 'bottom' | 'end' = 'end';\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-vertical-stepper',\r\n  exportAs: 'matVerticalStepper',\r\n  templateUrl: 'stepper-vertical.html',\r\n  styleUrls: ['stepper.css'],\r\n  inputs: ['selectedIndex'],\r\n  host: {\r\n    'class': 'mat-stepper-vertical',\r\n    'aria-orientation': 'vertical',\r\n    'role': 'tablist',\r\n  },\r\n  animations: [matStepperAnimations.verticalStepTransition],\r\n  providers: [\r\n    {provide: MatStepper, useExisting: MatVerticalStepper},\r\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatVerticalStepper extends MatStepper {\r\n  constructor(\r\n    @Optional() dir: Directionality,\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\r\n    elementRef?: ElementRef<HTMLElement>,\r\n    @Inject(DOCUMENT) _document?: any) {\r\n    super(dir, changeDetectorRef, elementRef, _document);\r\n    this._orientation = 'vertical';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\r\nimport {Directive} from '@angular/core';\r\n\r\n/** Button that moves to the next step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[matStepperNext]',\r\n  host: {\r\n    '[type]': 'type',\r\n  },\r\n  inputs: ['type']\r\n})\r\nexport class MatStepperNext extends CdkStepperNext {\r\n}\r\n\r\n/** Button that moves to the previous step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[matStepperPrevious]',\r\n  host: {\r\n    '[type]': 'type',\r\n  },\r\n  inputs: ['type']\r\n})\r\nexport class MatStepperPrevious extends CdkStepperPrevious {\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatStepHeader} from './step-header';\r\nimport {MatStepLabel} from './step-label';\r\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\r\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\r\nimport {MatStepperIcon} from './stepper-icon';\r\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatCommonModule,\r\n    CommonModule,\r\n    PortalModule,\r\n    MatButtonModule,\r\n    CdkStepperModule,\r\n    MatIconModule,\r\n    MatRippleModule,\r\n  ],\r\n  exports: [\r\n    MatCommonModule,\r\n    MatHorizontalStepper,\r\n    MatVerticalStepper,\r\n    MatStep,\r\n    MatStepLabel,\r\n    MatStepper,\r\n    MatStepperNext,\r\n    MatStepperPrevious,\r\n    MatStepHeader,\r\n    MatStepperIcon,\r\n  ],\r\n  declarations: [\r\n    MatHorizontalStepper,\r\n    MatVerticalStepper,\r\n    MatStep,\r\n    MatStepLabel,\r\n    MatStepper,\r\n    MatStepperNext,\r\n    MatStepperPrevious,\r\n    MatStepHeader,\r\n    MatStepperIcon,\r\n  ],\r\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\r\n})\r\nexport class MatStepperModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\r\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\r\n\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-table, table[mat-table]',\r\n  exportAs: 'matTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  styleUrls: ['table.css'],\r\n  host: {\r\n    'class': 'mat-table',\r\n  },\r\n  providers: [{provide: CdkTable, useExisting: MatTable}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class MatTable<T> extends CdkTable<T> {\r\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\r\n  protected stickyCssClass = 'mat-table-sticky';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Input} from '@angular/core';\r\nimport {\r\n  CdkCell,\r\n  CdkCellDef,\r\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\r\n  CdkHeaderCell,\r\n  CdkHeaderCellDef,\r\n} from '@angular/cdk/table';\r\n\r\n/**\r\n * Cell definition for the mat-table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matCellDef]',\r\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\r\n})\r\nexport class MatCellDef extends CdkCellDef {}\r\n\r\n/**\r\n * Header cell definition for the mat-table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderCellDef]',\r\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\r\n})\r\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\r\n\r\n/**\r\n * Footer cell definition for the mat-table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matFooterCellDef]',\r\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\r\n})\r\nexport class MatFooterCellDef extends CdkFooterCellDef {}\r\n\r\n/**\r\n * Column definition for the mat-table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[matColumnDef]',\r\n  providers: [\r\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\r\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\r\n  ],\r\n})\r\nexport class MatColumnDef extends CdkColumnDef {\r\n  /** Unique name for this column. */\r\n  @Input('matColumnDef') name: string;\r\n\r\n  /** Whether this column should be sticky positioned at the start of the row */\r\n  @Input() sticky: boolean;\r\n\r\n  /** Whether this column should be sticky positioned on the end of the row */\r\n  @Input() stickyEnd: boolean;\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-header-cell, th[mat-header-cell]',\r\n  host: {\r\n    'class': 'mat-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class MatHeaderCell extends CdkHeaderCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef<HTMLElement>) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n\r\n/** Footer cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\r\n  host: {\r\n    'class': 'mat-footer-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class MatFooterCell extends CdkFooterCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-cell, td[mat-cell]',\r\n  host: {\r\n    'class': 'mat-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class MatCell extends CdkCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef<HTMLElement>) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  CDK_ROW_TEMPLATE,\r\n  CdkFooterRow,\r\n  CdkFooterRowDef,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkRow,\r\n  CdkRowDef\r\n} from '@angular/cdk/table';\r\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\r\n\r\n/**\r\n * Header row definition for the mat-table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderRowDef]',\r\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\r\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\r\n})\r\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\r\n}\r\n\r\n/**\r\n * Footer row definition for the mat-table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[matFooterRowDef]',\r\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\r\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\r\n})\r\nexport class MatFooterRowDef extends CdkFooterRowDef {\r\n}\r\n\r\n/**\r\n * Data row definition for the mat-table.\r\n * Captures the data row's template and other properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[matRowDef]',\r\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\r\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\r\n})\r\nexport class MatRowDef<T> extends CdkRowDef<T> {\r\n}\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-header-row, tr[mat-header-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-header-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matHeaderRow',\r\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\r\n})\r\nexport class MatHeaderRow extends CdkHeaderRow {\r\n}\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-footer-row, tr[mat-footer-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-footer-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matFooterRow',\r\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\r\n})\r\nexport class MatFooterRow extends CdkFooterRow {\r\n}\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-row, tr[mat-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matRow',\r\n  providers: [{provide: CdkRow, useExisting: MatRow}],\r\n})\r\nexport class MatRow extends CdkRow {\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkTextColumn} from '@angular/cdk/table';\r\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\r\n\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-text-column',\r\n  template: `\r\n    <ng-container matColumnDef>\r\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\r\n        {{headerText}}\r\n      </th>\r\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\r\n        {{dataAccessor(data, name)}}\r\n      </td>\r\n    </ng-container>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n  // to the table to be inserted into its view. This is problematic when change detection runs since\r\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n  // an ExpressionChangedAfterItHasBeenCheckedError).\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatTable} from './table';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {\r\n  MatCell,\r\n  MatCellDef,\r\n  MatColumnDef,\r\n  MatFooterCell,\r\n  MatFooterCellDef,\r\n  MatHeaderCell,\r\n  MatHeaderCellDef\r\n} from './cell';\r\nimport {\r\n  MatFooterRow,\r\n  MatFooterRowDef,\r\n  MatHeaderRow,\r\n  MatHeaderRowDef,\r\n  MatRow,\r\n  MatRowDef\r\n} from './row';\r\nimport {MatTextColumn} from './text-column';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  // Table\r\n  MatTable,\r\n\r\n  // Template defs\r\n  MatHeaderCellDef,\r\n  MatHeaderRowDef,\r\n  MatColumnDef,\r\n  MatCellDef,\r\n  MatRowDef,\r\n  MatFooterCellDef,\r\n  MatFooterRowDef,\r\n\r\n  // Cell directives\r\n  MatHeaderCell,\r\n  MatCell,\r\n  MatFooterCell,\r\n\r\n  // Row directives\r\n  MatHeaderRow,\r\n  MatRow,\r\n  MatFooterRow,\r\n\r\n  MatTextColumn,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CdkTableModule,\r\n    CommonModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS,\r\n})\r\nexport class MatTableModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\nimport {DataSource} from '@angular/cdk/table';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  merge,\r\n  Observable,\r\n  of as observableOf,\r\n  Subscription,\r\n  Subject,\r\n} from 'rxjs';\r\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\r\nimport {MatSort, Sort} from '@angular/material/sort';\r\nimport {map} from 'rxjs/operators';\r\n\r\n/**\r\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\r\n * flaky browser support and the value not being defined in Closure's typings.\r\n */\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\r\n * which defines how row data is converted to a string for filter matching.\r\n */\r\nexport class MatTableDataSource<T> extends DataSource<T> {\r\n  /** Stream that emits when a new data array is set on the data source. */\r\n  private readonly _data: BehaviorSubject<T[]>;\r\n\r\n  /** Stream emitting render data to the table (depends on ordered data changes). */\r\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\r\n\r\n  /** Stream that emits when a new filter string is set on the data source. */\r\n  private readonly _filter = new BehaviorSubject<string>('');\r\n\r\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\r\n  private readonly _internalPageChanges = new Subject<void>();\r\n\r\n  /**\r\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n   * as filtering, sorting, pagination, or base data changes.\r\n   */\r\n  _renderChangesSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * The filtered set of data that has been matched by the filter string, or all the data if there\r\n   * is no filter. Useful for knowing the set of data the table represents.\r\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\r\n   * shown to the user rather than all the data.\r\n   */\r\n  filteredData: T[];\r\n\r\n  /** Array of data that should be rendered by the table, where each object represents one row. */\r\n  get data() { return this._data.value; }\r\n  set data(data: T[]) { this._data.next(data); }\r\n\r\n  /**\r\n   * Filter term that should be used to filter out objects from the data array. To override how\r\n   * data objects match to this filter string, provide a custom function for filterPredicate.\r\n   */\r\n  get filter(): string { return this._filter.value; }\r\n  set filter(filter: string) { this._filter.next(filter); }\r\n\r\n  /**\r\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n   * emitted by the MatSort will trigger an update to the table's rendered data.\r\n   */\r\n  get sort(): MatSort | null { return this._sort; }\r\n  set sort(sort: MatSort|null) {\r\n    this._sort = sort;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _sort: MatSort|null;\r\n\r\n  /**\r\n   * Instance of the MatPaginator component used by the table to control what page of the data is\r\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\r\n   * table's rendered data.\r\n   *\r\n   * Note that the data source uses the paginator's properties to calculate which page of data\r\n   * should be displayed. If the paginator receives its properties as template inputs,\r\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n   * initialized before assigning it to this data source.\r\n   */\r\n  get paginator(): MatPaginator | null { return this._paginator; }\r\n  set paginator(paginator: MatPaginator|null) {\r\n    this._paginator = paginator;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _paginator: MatPaginator|null;\r\n\r\n  /**\r\n   * Data accessor function that is used for accessing data properties for sorting through\r\n   * the default sortData function.\r\n   * This default function assumes that the sort header IDs (which defaults to the column name)\r\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n   * May be set to a custom function for different behavior.\r\n   * @param data Data object that is being accessed.\r\n   * @param sortHeaderId The name of the column that represents the data.\r\n   */\r\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\r\n      (data: T, sortHeaderId: string): string|number => {\r\n    const value = (data as {[key: string]: any})[sortHeaderId];\r\n\r\n    if (_isNumberValue(value)) {\r\n      const numberValue = Number(value);\r\n\r\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n   * By default, the function retrieves the active sort and its direction and compares data\r\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n   * of data ordering.\r\n   * @param data The array of data that should be sorted.\r\n   * @param sort The connected MatSort that holds the current sort state.\r\n   */\r\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\r\n    const active = sort.active;\r\n    const direction = sort.direction;\r\n    if (!active || direction == '') { return data; }\r\n\r\n    return data.sort((a, b) => {\r\n      let valueA = this.sortingDataAccessor(a, active);\r\n      let valueB = this.sortingDataAccessor(b, active);\r\n\r\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n      // one value exists while the other doesn't. In this case, existing value should come first.\r\n      // This avoids inconsistent results when comparing values to undefined/null.\r\n      // If neither value exists, return 0 (equal).\r\n      let comparatorResult = 0;\r\n      if (valueA != null && valueB != null) {\r\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n        if (valueA > valueB) {\r\n          comparatorResult = 1;\r\n        } else if (valueA < valueB) {\r\n          comparatorResult = -1;\r\n        }\r\n      } else if (valueA != null) {\r\n        comparatorResult = 1;\r\n      } else if (valueB != null) {\r\n        comparatorResult = -1;\r\n      }\r\n\r\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if a data object matches the data source's filter string. By default, each data object\r\n   * is converted to a string of its properties and returns true if the filter has\r\n   * at least one occurrence in that string. By default, the filter string has its whitespace\r\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n   * filter matching.\r\n   * @param data Data object used to check against the filter.\r\n   * @param filter Filter string that has been set on the data source.\r\n   * @returns Whether the filter matches against the data\r\n   */\r\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\r\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\r\n      // This avoids matches where the values of two columns combined will match the user's query\r\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\r\n      // that has a very low chance of being typed in by somebody in a text field. This one in\r\n      // particular is \"White up-pointing triangle with dot\" from\r\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\r\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\r\n    }, '').toLowerCase();\r\n\r\n    // Transform the filter by converting it to lowercase and removing whitespace.\r\n    const transformedFilter = filter.trim().toLowerCase();\r\n\r\n    return dataStr.indexOf(transformedFilter) != -1;\r\n  }\r\n\r\n  constructor(initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n    this._updateChangeSubscription();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n   * changes occur, process the current state of the filter, sort, and pagination along with\r\n   * the provided base data and send it to the table for rendering.\r\n   */\r\n  _updateChangeSubscription() {\r\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\r\n    // The events should emit whenever the component emits a change or initializes, or if no\r\n    // component is provided, a stream with just a null event should be provided.\r\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\r\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\r\n    // they purely act as a signal to progress in the pipeline.\r\n    const sortChange: Observable<Sort|null|void> = this._sort ?\r\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\r\n        observableOf(null);\r\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\r\n        merge(\r\n          this._paginator.page,\r\n          this._internalPageChanges,\r\n          this._paginator.initialized\r\n        ) as Observable<PageEvent|void> :\r\n        observableOf(null);\r\n    const dataStream = this._data;\r\n    // Watch for base data or filter changes to provide a filtered set of data.\r\n    const filteredData = combineLatest(dataStream, this._filter)\r\n      .pipe(map(([data]) => this._filterData(data)));\r\n    // Watch for filtered data or sort changes to provide an ordered set of data.\r\n    const orderedData = combineLatest(filteredData, sortChange)\r\n      .pipe(map(([data]) => this._orderData(data)));\r\n    // Watch for ordered data or page changes to provide a paged set of data.\r\n    const paginatedData = combineLatest(orderedData, pageChange)\r\n      .pipe(map(([data]) => this._pageData(data)));\r\n    // Watched for paged data changes and send the result to the table to render.\r\n    this._renderChangesSubscription.unsubscribe();\r\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\r\n  }\r\n\r\n  /**\r\n   * Returns a filtered data array where each filter object contains the filter string within\r\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n   * as provided.\r\n   */\r\n  _filterData(data: T[]) {\r\n    // If there is a filter string, filter out data that does not contain it.\r\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\r\n    // May be overridden for customization.\r\n    this.filteredData =\r\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\r\n\r\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\r\n\r\n    return this.filteredData;\r\n  }\r\n\r\n  /**\r\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n   * data array as provided. Uses the default data accessor for data lookup, unless a\r\n   * sortDataAccessor function is defined.\r\n   */\r\n  _orderData(data: T[]): T[] {\r\n    // If there is no active sort or direction, return the data without trying to sort.\r\n    if (!this.sort) { return data; }\r\n\r\n    return this.sortData(data.slice(), this.sort);\r\n  }\r\n\r\n  /**\r\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\r\n   * index and length. If there is no paginator provided, returns the data array as provided.\r\n   */\r\n  _pageData(data: T[]): T[] {\r\n    if (!this.paginator) { return data; }\r\n\r\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n    return data.slice().splice(startIndex, this.paginator.pageSize);\r\n  }\r\n\r\n  /**\r\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n   * guard against making property changes within a round of change detection.\r\n   */\r\n  _updatePaginator(filteredDataLength: number) {\r\n    Promise.resolve().then(() => {\r\n      const paginator = this.paginator;\r\n\r\n      if (!paginator) { return; }\r\n\r\n      paginator.length = filteredDataLength;\r\n\r\n      // If the page index is set beyond the page, reduce it to the last page.\r\n      if (paginator.pageIndex > 0) {\r\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\r\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\r\n\r\n        if (newPageIndex !== paginator.pageIndex) {\r\n          paginator.pageIndex = newPageIndex;\r\n\r\n          // Since the paginator only emits after user-generated changes,\r\n          // we need our own stream so we know to should re-render the data.\r\n          this._internalPageChanges.next();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it connects to the data source.\r\n   * @docs-private\r\n   */\r\n  connect() { return this._renderData; }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it is destroyed. No-op.\r\n   * @docs-private\r\n   */\r\n  disconnect() { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanColorCtor,\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  HammerInput,\r\n  HasTabIndex,\r\n  HasTabIndexCtor,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {Subscription} from 'rxjs';\r\n\r\n/**\r\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\r\n * the default separation we chose.\r\n */\r\nconst MIN_AUTO_TICK_SEPARATION = 30;\r\n\r\n/** The thumb gap size for a disabled slider. */\r\nconst DISABLED_THUMB_GAP = 7;\r\n\r\n/** The thumb gap size for a non-active slider at its minimum value. */\r\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\r\n\r\n/** The thumb gap size for an active slider at its minimum value. */\r\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\r\n\r\n/**\r\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)] and [formControl].\r\n * @docs-private\r\n */\r\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSlider),\r\n  multi: true\r\n};\r\n\r\n/** A simple change event emitted by the MatSlider component. */\r\nexport class MatSliderChange {\r\n  /** The MatSlider that changed. */\r\n  source: MatSlider;\r\n\r\n  /** The new value of the source slider. */\r\n  value: number | null;\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatSlider.\r\n/** @docs-private */\r\nclass MatSliderBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatSliderMixinBase:\r\n    HasTabIndexCtor &\r\n    CanColorCtor &\r\n    CanDisableCtor &\r\n    typeof MatSliderBase =\r\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\r\n\r\n/**\r\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\r\n * behavior to the native `<input type=\"range\">` element.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-slider',\r\n  exportAs: 'matSlider',\r\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\r\n  host: {\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n    '(mousedown)': '_onMousedown($event)',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '(keyup)': '_onKeyup()',\r\n    '(mouseenter)': '_onMouseenter()',\r\n    '(slide)': '_onSlide($event)',\r\n    '(slideend)': '_onSlideEnd()',\r\n    '(slidestart)': '_onSlideStart($event)',\r\n    'class': 'mat-slider',\r\n    'role': 'slider',\r\n    '[tabIndex]': 'tabIndex',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[attr.aria-valuemin]': 'min',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-slider-disabled]': 'disabled',\r\n    '[class.mat-slider-has-ticks]': 'tickInterval',\r\n    '[class.mat-slider-horizontal]': '!vertical',\r\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\r\n    '[class.mat-slider-sliding]': '_isSliding',\r\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\r\n    '[class.mat-slider-vertical]': 'vertical',\r\n    '[class.mat-slider-min-value]': '_isMinValue',\r\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  templateUrl: 'slider.html',\r\n  styleUrls: ['slider.css'],\r\n  inputs: ['disabled', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatSlider extends _MatSliderMixinBase\r\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\r\n  /** Whether the slider is inverted. */\r\n  @Input()\r\n  get invert(): boolean { return this._invert; }\r\n  set invert(value: boolean) {\r\n    this._invert = coerceBooleanProperty(value);\r\n  }\r\n  private _invert = false;\r\n\r\n  /** The maximum value that the slider can have. */\r\n  @Input()\r\n  get max(): number { return this._max; }\r\n  set max(v: number) {\r\n    this._max = coerceNumberProperty(v, this._max);\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _max: number = 100;\r\n\r\n  /** The minimum value that the slider can have. */\r\n  @Input()\r\n  get min(): number { return this._min; }\r\n  set min(v: number) {\r\n    this._min = coerceNumberProperty(v, this._min);\r\n\r\n    // If the value wasn't explicitly set by the user, set it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _min: number = 0;\r\n\r\n  /** The values at which the thumb will snap. */\r\n  @Input()\r\n  get step(): number { return this._step; }\r\n  set step(v: number) {\r\n    this._step = coerceNumberProperty(v, this._step);\r\n\r\n    if (this._step % 1 !== 0) {\r\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\r\n    }\r\n\r\n    // Since this could modify the label, we need to notify the change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _step: number = 1;\r\n\r\n  /** Whether or not to show the thumb label. */\r\n  @Input()\r\n  get thumbLabel(): boolean { return this._thumbLabel; }\r\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\r\n  private _thumbLabel: boolean = false;\r\n\r\n  /**\r\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\r\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\r\n   */\r\n  @Input()\r\n  get tickInterval() { return this._tickInterval; }\r\n  set tickInterval(value: 'auto' | number) {\r\n    if (value === 'auto') {\r\n      this._tickInterval = 'auto';\r\n    } else if (typeof value === 'number' || typeof value === 'string') {\r\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\r\n    } else {\r\n      this._tickInterval = 0;\r\n    }\r\n  }\r\n  private _tickInterval: 'auto' | number = 0;\r\n\r\n  /** Value of the slider. */\r\n  @Input()\r\n  get value(): number | null {\r\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    return this._value;\r\n  }\r\n  set value(v: number | null) {\r\n    if (v !== this._value) {\r\n      let value = coerceNumberProperty(v);\r\n\r\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\r\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\r\n      if (this._roundToDecimal) {\r\n        value = parseFloat(value.toFixed(this._roundToDecimal));\r\n      }\r\n\r\n      this._value = value;\r\n      this._percent = this._calculatePercentage(this._value);\r\n\r\n      // Since this also modifies the percentage, we need to let the change detection know.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _value: number | null = null;\r\n\r\n  /**\r\n   * Function that will be used to format the value before it is displayed\r\n   * in the thumb label. Can be used to format very large number in order\r\n   * for them to fit into the slider thumb.\r\n   */\r\n  @Input() displayWith: (value: number | null) => string | number;\r\n\r\n  /** Whether the slider is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n  private _vertical = false;\r\n\r\n  /** Event emitted when the slider value has changed. */\r\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\r\n\r\n  /** Event emitted when the slider thumb moves. */\r\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\r\n\r\n  /**\r\n   * Emits when the raw value of the slider changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\r\n\r\n  /** The value to be used for display purposes. */\r\n  get displayValue(): string | number {\r\n    if (this.displayWith) {\r\n      return this.displayWith(this.value);\r\n    }\r\n\r\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\r\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\r\n    // every change detection cycle.\r\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\r\n      return this.value.toFixed(this._roundToDecimal);\r\n    }\r\n\r\n    return this.value || 0;\r\n  }\r\n\r\n  /** set focus to the host element */\r\n  focus() {\r\n    this._focusHostElement();\r\n  }\r\n\r\n  /** blur the host element */\r\n  blur() {\r\n    this._blurHostElement();\r\n  }\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  onTouched: () => any = () => {};\r\n\r\n  /** The percentage of the slider that coincides with the value. */\r\n  get percent(): number { return this._clamp(this._percent); }\r\n  private _percent: number = 0;\r\n\r\n  /**\r\n   * Whether or not the thumb is sliding.\r\n   * Used to determine if there should be a transition for the thumb and fill track.\r\n   */\r\n  _isSliding: boolean = false;\r\n\r\n  /**\r\n   * Whether or not the slider is active (clicked or sliding).\r\n   * Used to shrink and grow the thumb as according to the Material Design spec.\r\n   */\r\n  _isActive: boolean = false;\r\n\r\n  /**\r\n   * Whether the axis of the slider is inverted.\r\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\r\n   */\r\n  get _invertAxis() {\r\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\r\n    // top. However from a y-axis standpoint this is inverted.\r\n    return this.vertical ? !this.invert : this.invert;\r\n  }\r\n\r\n\r\n  /** Whether the slider is at its minimum value. */\r\n  get _isMinValue() {\r\n    return this.percent === 0;\r\n  }\r\n\r\n  /**\r\n   * The amount of space to leave between the slider thumb and the track fill & track background\r\n   * elements.\r\n   */\r\n  get _thumbGap() {\r\n    if (this.disabled) {\r\n      return DISABLED_THUMB_GAP;\r\n    }\r\n    if (this._isMinValue && !this.thumbLabel) {\r\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /** CSS styles for the track background element. */\r\n  get _trackBackgroundStyles(): { [key: string]: string } {\r\n    const axis = this.vertical ? 'Y' : 'X';\r\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\r\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\r\n\r\n    return {\r\n      // scale3d avoids some rendering issues in Chrome. See #12071.\r\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the track fill element. */\r\n  get _trackFillStyles(): { [key: string]: string } {\r\n    const axis = this.vertical ? 'Y' : 'X';\r\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\r\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\r\n\r\n    return {\r\n      // scale3d avoids some rendering issues in Chrome. See #12071.\r\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the ticks container element. */\r\n  get _ticksContainerStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\r\n    let offset = this._tickIntervalPercent / 2 * 100;\r\n    return {\r\n      'transform': `translate${axis}(${sign}${offset}%)`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the ticks element. */\r\n  get _ticksStyles(): { [key: string]: string } {\r\n    let tickSize = this._tickIntervalPercent * 100;\r\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\r\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\r\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\r\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\r\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\r\n    let styles: { [key: string]: string } = {\r\n      'backgroundSize': backgroundSize,\r\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\r\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\r\n    };\r\n\r\n    if (this._isMinValue && this._thumbGap) {\r\n      let side = this.vertical ?\r\n          (this._invertAxis ? 'Bottom' : 'Top') :\r\n          (this._invertAxis ? 'Right' : 'Left');\r\n      styles[`padding${side}`] = `${this._thumbGap}px`;\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  get _thumbContainerStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let invertOffset =\r\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\r\n    return {\r\n      'transform': `translate${axis}(-${offset}%)`\r\n    };\r\n  }\r\n\r\n  /** The size of a tick interval as a percentage of the size of the track. */\r\n  private _tickIntervalPercent: number = 0;\r\n\r\n  /** The dimensions of the slider. */\r\n  private _sliderDimensions: ClientRect | null = null;\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** Decimal places to round to, based on the step amount. */\r\n  private _roundToDecimal: number;\r\n\r\n  /** Subscription to the Directionality change EventEmitter. */\r\n  private _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  /** The value of the slider when the slide start event fires. */\r\n  private _valueOnSlideStart: number | null;\r\n\r\n  /** Reference to the inner slider wrapper element. */\r\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\r\n\r\n  /**\r\n   * Whether mouse events should be converted to a slider position by calculating their distance\r\n   * from the right or bottom edge of the slider as opposed to the top or left.\r\n   */\r\n  private _shouldInvertMouseCoords() {\r\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n  }\r\n\r\n  /** The language direction for this slider element. */\r\n  private _getDirection() {\r\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir: Directionality,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\r\n    super(elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._focusMonitor\r\n        .monitor(this._elementRef, true)\r\n        .subscribe((origin: FocusOrigin) => {\r\n          this._isActive = !!origin && origin !== 'keyboard';\r\n          this._changeDetectorRef.detectChanges();\r\n        });\r\n    if (this._dir) {\r\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\r\n\r\n  _onMouseenter() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\r\n\r\n  _onMousedown(event: MouseEvent) {\r\n    // Don't do anything if the slider is disabled or the\r\n    // user is using anything other than the main mouse button.\r\n    if (this.disabled || event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    const oldValue = this.value;\r\n    this._isSliding = false;\r\n    this._focusHostElement();\r\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\r\n\r\n    // Emit a change and input event if the value changed.\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n  }\r\n\r\n  _onSlide(event: HammerInput) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\r\n    // state, call the slide start handler manually.\r\n    if (!this._isSliding) {\r\n      this._onSlideStart(null);\r\n    }\r\n\r\n    // Prevent the slide from selecting anything else.\r\n    event.preventDefault();\r\n\r\n    let oldValue = this.value;\r\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n\r\n    // Native range elements always emit `input` events when the value changed while sliding.\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n    }\r\n  }\r\n\r\n  _onSlideStart(event: HammerInput | null) {\r\n    if (this.disabled || this._isSliding) {\r\n      return;\r\n    }\r\n\r\n    // Simulate mouseenter in case this is a mobile device.\r\n    this._onMouseenter();\r\n\r\n    this._isSliding = true;\r\n    this._focusHostElement();\r\n    this._valueOnSlideStart = this.value;\r\n\r\n    if (event) {\r\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onSlideEnd() {\r\n    this._isSliding = false;\r\n\r\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\r\n      this._emitChangeEvent();\r\n    }\r\n    this._valueOnSlideStart = null;\r\n  }\r\n\r\n  _onFocus() {\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\r\n\r\n  _onBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (this.disabled || hasModifierKey(event)) {\r\n      return;\r\n    }\r\n\r\n    const oldValue = this.value;\r\n\r\n    switch (event.keyCode) {\r\n      case PAGE_UP:\r\n        this._increment(10);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._increment(-10);\r\n        break;\r\n      case END:\r\n        this.value = this.max;\r\n        break;\r\n      case HOME:\r\n        this.value = this.min;\r\n        break;\r\n      case LEFT_ARROW:\r\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\r\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\r\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\r\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\r\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\r\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\r\n        // sighted users, therefore we do not swap the meaning.\r\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._increment(1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\r\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._increment(-1);\r\n        break;\r\n      default:\r\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\r\n        // it.\r\n        return;\r\n    }\r\n\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    this._isSliding = true;\r\n    event.preventDefault();\r\n  }\r\n\r\n  _onKeyup() {\r\n    this._isSliding = false;\r\n  }\r\n\r\n  /** Increments the slider by the given number of steps (negative number decrements). */\r\n  private _increment(numSteps: number) {\r\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\r\n  }\r\n\r\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\r\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\r\n    if (!this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\r\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n    let posComponent = this.vertical ? pos.y : pos.x;\r\n\r\n    // The exact value is calculated from the event and used to find the closest snap value.\r\n    let percent = this._clamp((posComponent - offset) / size);\r\n\r\n    if (this._shouldInvertMouseCoords()) {\r\n      percent = 1 - percent;\r\n    }\r\n\r\n    // Since the steps may not divide cleanly into the max value, if the user\r\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\r\n    // is slightly more intuitive than using `Math.ceil` below, because it\r\n    // follows the user's pointer closer.\r\n    if (percent === 0) {\r\n      this.value = this.min;\r\n    } else if (percent === 1) {\r\n      this.value = this.max;\r\n    } else {\r\n      const exactValue = this._calculateValue(percent);\r\n\r\n      // This calculation finds the closest step by finding the closest\r\n      // whole number divisible by the step relative to the min.\r\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\r\n\r\n      // The value needs to snap to the min and max.\r\n      this.value = this._clamp(closestValue, this.min, this.max);\r\n    }\r\n  }\r\n\r\n  /** Emits a change event if the current value is different from the last emitted value. */\r\n  private _emitChangeEvent() {\r\n    this._controlValueAccessorChangeFn(this.value);\r\n    this.valueChange.emit(this.value);\r\n    this.change.emit(this._createChangeEvent());\r\n  }\r\n\r\n  /** Emits an input event when the current value is different from the last emitted value. */\r\n  private _emitInputEvent() {\r\n    this.input.emit(this._createChangeEvent());\r\n  }\r\n\r\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\r\n  private _updateTickIntervalPercent() {\r\n    if (!this.tickInterval || !this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    if (this.tickInterval == 'auto') {\r\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\r\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\r\n      let pixelsPerTick = stepsPerTick * this.step;\r\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\r\n    } else {\r\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\r\n    }\r\n  }\r\n\r\n  /** Creates a slider change object from the specified value. */\r\n  private _createChangeEvent(value = this.value): MatSliderChange {\r\n    let event = new MatSliderChange();\r\n\r\n    event.source = this;\r\n    event.value = value;\r\n\r\n    return event;\r\n  }\r\n\r\n  /** Calculates the percentage of the slider that a value is. */\r\n  private _calculatePercentage(value: number | null) {\r\n    return ((value || 0) - this.min) / (this.max - this.min);\r\n  }\r\n\r\n  /** Calculates the value a percentage of the slider corresponds to. */\r\n  private _calculateValue(percentage: number) {\r\n    return this.min + percentage * (this.max - this.min);\r\n  }\r\n\r\n  /** Return a number between two numbers. */\r\n  private _clamp(value: number, min = 0, max = 1) {\r\n    return Math.max(min, Math.min(value, max));\r\n  }\r\n\r\n  /**\r\n   * Get the bounding client rect of the slider track element.\r\n   * The track is used rather than the native element to ignore the extra space that the thumb can\r\n   * take up.\r\n   */\r\n  private _getSliderDimensions() {\r\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\r\n  }\r\n\r\n  /**\r\n   * Focuses the native element.\r\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\r\n   */\r\n  private _focusHostElement() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Blurs the native element. */\r\n  private _blurHostElement() {\r\n    this._elementRef.nativeElement.blur();\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the value has changed.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the component is touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the component should be disabled.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param isDisabled\r\n   */\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {MatSlider} from './slider';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCommonModule],\r\n  exports: [MatSlider, MatCommonModule],\r\n  declarations: [MatSlider],\r\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\r\n})\r\nexport class MatSliderModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayRef} from '@angular/cdk/overlay';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\n\r\n\r\n/** Event that is emitted when a snack bar is dismissed. */\r\nexport interface MatSnackBarDismiss {\r\n  /** Whether the snack bar was dismissed using the action button. */\r\n  dismissedByAction: boolean;\r\n}\r\n\r\n/**\r\n * Reference to a snack bar dispatched from the snack bar service.\r\n */\r\nexport class MatSnackBarRef<T> {\r\n  /** The instance of the component making up the content of the snack bar. */\r\n  instance: T;\r\n\r\n  /**\r\n   * The instance of the component making up the content of the snack bar.\r\n   * @docs-private\r\n   */\r\n  containerInstance: MatSnackBarContainer;\r\n\r\n  /** Subject for notifying the user that the snack bar has been dismissed. */\r\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\r\n\r\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\r\n  private readonly _afterOpened = new Subject<void>();\r\n\r\n  /** Subject for notifying the user that the snack bar action was called. */\r\n  private readonly _onAction = new Subject<void>();\r\n\r\n  /**\r\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\r\n   * dismissed before the duration passes.\r\n   */\r\n  private _durationTimeoutId: number;\r\n\r\n  /** Whether the snack bar was dismissed using the action button. */\r\n  private _dismissedByAction = false;\r\n\r\n  constructor(containerInstance: MatSnackBarContainer,\r\n              private _overlayRef: OverlayRef) {\r\n    this.containerInstance = containerInstance;\r\n    // Dismiss snackbar on action.\r\n    this.onAction().subscribe(() => this.dismiss());\r\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\r\n  }\r\n\r\n  /** Dismisses the snack bar. */\r\n  dismiss(): void {\r\n    if (!this._afterDismissed.closed) {\r\n      this.containerInstance.exit();\r\n    }\r\n    clearTimeout(this._durationTimeoutId);\r\n  }\r\n\r\n  /** Marks the snackbar action clicked. */\r\n  dismissWithAction(): void {\r\n    if (!this._onAction.closed) {\r\n      this._dismissedByAction = true;\r\n      this._onAction.next();\r\n      this._onAction.complete();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Marks the snackbar action clicked.\r\n   * @deprecated Use `dismissWithAction` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  closeWithAction(): void {\r\n    this.dismissWithAction();\r\n  }\r\n\r\n  /** Dismisses the snack bar after some duration */\r\n  _dismissAfter(duration: number): void {\r\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\r\n  }\r\n\r\n  /** Marks the snackbar as opened */\r\n  _open(): void {\r\n    if (!this._afterOpened.closed) {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    }\r\n  }\r\n\r\n  /** Cleans up the DOM after closing. */\r\n  private _finishDismiss(): void {\r\n    this._overlayRef.dispose();\r\n\r\n    if (!this._onAction.closed) {\r\n      this._onAction.complete();\r\n    }\r\n\r\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\r\n    this._afterDismissed.complete();\r\n    this._dismissedByAction = false;\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar is finished closing. */\r\n  afterDismissed(): Observable<MatSnackBarDismiss> {\r\n    return this._afterDismissed.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\r\n  afterOpened(): Observable<void> {\r\n    return this.containerInstance._onEnter;\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar action is called. */\r\n  onAction(): Observable<void> {\r\n    return this._onAction.asObservable();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\r\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\r\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\r\n\r\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\r\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\r\n\r\n/** Possible values for verticalPosition on MatSnackBarConfig. */\r\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\r\n\r\n/**\r\n * Configuration used when opening a snack-bar.\r\n */\r\nexport class MatSnackBarConfig<D = any> {\r\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\r\n  politeness?: AriaLivePoliteness = 'assertive';\r\n\r\n  /**\r\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\r\n   * component or template, the announcement message will default to the specified message.\r\n   */\r\n  announcementMessage?: string = '';\r\n\r\n  /** The view container to place the overlay for the snack bar into. */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\r\n  duration?: number = 0;\r\n\r\n  /** Extra CSS classes to be added to the snack bar container. */\r\n  panelClass?: string | string[];\r\n\r\n  /** Text layout direction for the snack bar. */\r\n  direction?: Direction;\r\n\r\n  /** Data being injected into the child component. */\r\n  data?: D | null = null;\r\n\r\n  /** The horizontal position to place the snack bar. */\r\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\r\n\r\n  /** The vertical position to place the snack bar. */\r\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\r\n\r\n\r\n/**\r\n * A component used to open as the default snack bar, matching material spec.\r\n * This should only be used internally by the snack bar service.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'simple-snack-bar',\r\n  templateUrl: 'simple-snack-bar.html',\r\n  styleUrls: ['simple-snack-bar.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-simple-snackbar',\r\n  }\r\n})\r\nexport class SimpleSnackBar {\r\n  /** Data that was injected into the snack bar. */\r\n  data: {message: string, action: string};\r\n\r\n  constructor(\r\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\r\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\r\n    this.data = data;\r\n  }\r\n\r\n  /** Performs the action on the snack bar. */\r\n  action(): void {\r\n    this.snackBarRef.dismissWithAction();\r\n  }\r\n\r\n  /** If the action button should be shown. */\r\n  get hasAction(): boolean {\r\n    return !!this.data.action;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material snack bar.\r\n * @docs-private\r\n */\r\nexport const matSnackBarAnimations: {\r\n  readonly snackBarState: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that shows and hides a snack bar. */\r\n  snackBarState: trigger('state', [\r\n    state('void, hidden', style({\r\n      transform: 'scale(0.8)',\r\n      opacity: 0,\r\n    })),\r\n    state('visible', style({\r\n      transform: 'scale(1)',\r\n      opacity: 1,\r\n    })),\r\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\r\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\r\n      opacity: 0\r\n    }))),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  CdkPortalOutlet,\r\n  ComponentPortal,\r\n  TemplatePortal,\r\n} from '@angular/cdk/portal';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  NgZone,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\nimport {matSnackBarAnimations} from './snack-bar-animations';\r\nimport {MatSnackBarConfig} from './snack-bar-config';\r\n\r\n\r\n/**\r\n * Internal component that wraps user-provided snack bar content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'snack-bar-container',\r\n  templateUrl: 'snack-bar-container.html',\r\n  styleUrls: ['snack-bar-container.css'],\r\n  // In Ivy embedded views will be change detected from their declaration place, rather than\r\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\r\n  // because it might cause snack bars that were opened from a template not to be out of date.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [matSnackBarAnimations.snackBarState],\r\n  host: {\r\n    '[attr.role]': '_role',\r\n    'class': 'mat-snack-bar-container',\r\n    '[@state]': '_animationState',\r\n    '(@state.done)': 'onAnimationEnd($event)'\r\n  },\r\n})\r\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\r\n  /** Whether the component has been destroyed. */\r\n  private _destroyed = false;\r\n\r\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** Subject for notifying that the snack bar has exited from view. */\r\n  readonly _onExit: Subject<any> = new Subject();\r\n\r\n  /** Subject for notifying that the snack bar has finished entering the view. */\r\n  readonly _onEnter: Subject<any> = new Subject();\r\n\r\n  /** The state of the snack bar animations. */\r\n  _animationState = 'void';\r\n\r\n  /** ARIA role for the snack bar container. */\r\n  _role: 'alert' | 'status' | null;\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    /** The snack bar configuration. */\r\n    public snackBarConfig: MatSnackBarConfig) {\r\n\r\n    super();\r\n\r\n    // Based on the ARIA spec, `alert` and `status` roles have an\r\n    // implicit `assertive` and `polite` politeness respectively.\r\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\r\n      this._role = 'alert';\r\n    } else if (snackBarConfig.politeness === 'off') {\r\n      this._role = null;\r\n    } else {\r\n      this._role = 'status';\r\n    }\r\n  }\r\n\r\n  /** Attach a component portal as content to this snack bar container. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    this._assertNotAttached();\r\n    this._applySnackBarClasses();\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /** Attach a template portal as content to this snack bar container. */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    this._assertNotAttached();\r\n    this._applySnackBarClasses();\r\n    return this._portalOutlet.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Handle end of animations, updating the state of the snackbar. */\r\n  onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\r\n      this._completeExit();\r\n    }\r\n\r\n    if (toState === 'visible') {\r\n      // Note: we shouldn't use `this` inside the zone callback,\r\n      // because it can cause a memory leak.\r\n      const onEnter = this._onEnter;\r\n\r\n      this._ngZone.run(() => {\r\n        onEnter.next();\r\n        onEnter.complete();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Begin animation of snack bar entrance into view. */\r\n  enter(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = 'visible';\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Begin animation of the snack bar exiting from view. */\r\n  exit(): Observable<void> {\r\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\r\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\r\n    // `MatSnackBar.open`).\r\n    this._animationState = 'hidden';\r\n    return this._onExit;\r\n  }\r\n\r\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\r\n  ngOnDestroy() {\r\n    this._destroyed = true;\r\n    this._completeExit();\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to settle before removing the element. Helps prevent\r\n   * errors where we end up removing an element which is in the middle of an animation.\r\n   */\r\n  private _completeExit() {\r\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n      this._onExit.next();\r\n      this._onExit.complete();\r\n    });\r\n  }\r\n\r\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\r\n  private _applySnackBarClasses() {\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n    const panelClasses = this.snackBarConfig.panelClass;\r\n\r\n    if (panelClasses) {\r\n      if (Array.isArray(panelClasses)) {\r\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\r\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\r\n      } else {\r\n        element.classList.add(panelClasses);\r\n      }\r\n    }\r\n\r\n    if (this.snackBarConfig.horizontalPosition === 'center') {\r\n      element.classList.add('mat-snack-bar-center');\r\n    }\r\n\r\n    if (this.snackBarConfig.verticalPosition === 'top') {\r\n      element.classList.add('mat-snack-bar-top');\r\n    }\r\n  }\r\n\r\n  /** Asserts that no content is already attached to the container. */\r\n  private _assertNotAttached() {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throw Error('Attempting to attach snack bar content after content is already attached');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    OverlayModule,\r\n    PortalModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatSnackBarContainer, MatCommonModule],\r\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\r\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\r\n})\r\nexport class MatSnackBarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\r\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\nimport {MatSnackBarModule} from './snack-bar-module';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\n\r\n\r\n/** Injection token that can be used to specify default snack bar. */\r\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\r\n  return new MatSnackBarConfig();\r\n}\r\n\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\n@Injectable({providedIn: MatSnackBarModule})\r\nexport class MatSnackBar implements OnDestroy {\r\n  /**\r\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n   * If there is a parent snack-bar service, all operations should delegate to that parent\r\n   * via `_openedSnackBarRef`.\r\n   */\r\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\r\n\r\n  /** Reference to the currently opened snackbar at *any* level. */\r\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\r\n    const parent = this._parentSnackBar;\r\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n  }\r\n\r\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\r\n    if (this._parentSnackBar) {\r\n      this._parentSnackBar._openedSnackBarRef = value;\r\n    } else {\r\n      this._snackBarRefAtThisLevel = value;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _live: LiveAnnouncer,\r\n      private _injector: Injector,\r\n      private _breakpointObserver: BreakpointObserver,\r\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\r\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param component Component to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\r\n    MatSnackBarRef<T> {\r\n    return this._attach(component, config) as MatSnackBarRef<T>;\r\n  }\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param template Template to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\r\n    MatSnackBarRef<EmbeddedViewRef<any>> {\r\n    return this._attach(template, config);\r\n  }\r\n\r\n  /**\r\n   * Opens a snackbar with a message and an optional action.\r\n   * @param message The message to show in the snackbar.\r\n   * @param action The label for the snackbar action.\r\n   * @param config Additional configuration options for the snackbar.\r\n   */\r\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\r\n      MatSnackBarRef<SimpleSnackBar> {\r\n    const _config = {...this._defaultConfig, ...config};\r\n\r\n    // Since the user doesn't have access to the component, we can\r\n    // override the data to pass in our own message and action.\r\n    _config.data = {message, action};\r\n\r\n    if (!_config.announcementMessage) {\r\n      _config.announcementMessage = message;\r\n    }\r\n\r\n    return this.openFromComponent(SimpleSnackBar, _config);\r\n  }\r\n\r\n  /**\r\n   * Dismisses the currently-visible snack bar.\r\n   */\r\n  dismiss(): void {\r\n    if (this._openedSnackBarRef) {\r\n      this._openedSnackBarRef.dismiss();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Only dismiss the snack bar at the current level on destroy.\r\n    if (this._snackBarRefAtThisLevel) {\r\n      this._snackBarRefAtThisLevel.dismiss();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attaches the snack bar container component to the overlay.\r\n   */\r\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n      [MatSnackBarConfig, config]\r\n    ]));\r\n\r\n    const containerPortal =\r\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\r\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Places a new component or a template as the content of the snack bar container.\r\n   */\r\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\r\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\r\n\r\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\r\n    const overlayRef = this._createOverlay(config);\r\n    const container = this._attachSnackBarContainer(overlayRef, config);\r\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\r\n\r\n    if (content instanceof TemplateRef) {\r\n      const portal = new TemplatePortal(content, null!, {\r\n        $implicit: config.data,\r\n        snackBarRef\r\n      } as any);\r\n\r\n      snackBarRef.instance = container.attachTemplatePortal(portal);\r\n    } else {\r\n      const injector = this._createInjector(config, snackBarRef);\r\n      const portal = new ComponentPortal(content, undefined, injector);\r\n      const contentRef = container.attachComponentPortal<T>(portal);\r\n\r\n      // We can't pass this via the injector, because the injector is created earlier.\r\n      snackBarRef.instance = contentRef.instance;\r\n    }\r\n\r\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\r\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\r\n    // fill the width of the screen for full width snackbars.\r\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\r\n      takeUntil(overlayRef.detachments().pipe(take(1)))\r\n    ).subscribe(state => {\r\n      if (state.matches) {\r\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\r\n      } else {\r\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\r\n      }\r\n    });\r\n\r\n    this._animateSnackBar(snackBarRef, config);\r\n    this._openedSnackBarRef = snackBarRef;\r\n    return this._openedSnackBarRef;\r\n  }\r\n\r\n  /** Animates the old snack bar out and the new one in. */\r\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\r\n    // When the snackbar is dismissed, clear the reference to it.\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n      if (this._openedSnackBarRef == snackBarRef) {\r\n        this._openedSnackBarRef = null;\r\n      }\r\n\r\n      if (config.announcementMessage) {\r\n        this._live.clear();\r\n      }\r\n    });\r\n\r\n    if (this._openedSnackBarRef) {\r\n      // If a snack bar is already in view, dismiss it and enter the\r\n      // new snack bar after exit animation is complete.\r\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n        snackBarRef.containerInstance.enter();\r\n      });\r\n      this._openedSnackBarRef.dismiss();\r\n    } else {\r\n      // If no snack bar is in view, enter the new snack bar.\r\n      snackBarRef.containerInstance.enter();\r\n    }\r\n\r\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n    if (config.duration && config.duration > 0) {\r\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\r\n    }\r\n\r\n    if (config.announcementMessage) {\r\n      this._live.announce(config.announcementMessage, config.politeness);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new overlay and places it in the correct location.\r\n   * @param config The user-specified snack bar config.\r\n   */\r\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig();\r\n    overlayConfig.direction = config.direction;\r\n\r\n    let positionStrategy = this._overlay.position().global();\r\n    // Set horizontal position.\r\n    const isRtl = config.direction === 'rtl';\r\n    const isLeft = (\r\n      config.horizontalPosition === 'left' ||\r\n      (config.horizontalPosition === 'start' && !isRtl) ||\r\n      (config.horizontalPosition === 'end' && isRtl));\r\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\r\n    if (isLeft) {\r\n      positionStrategy.left('0');\r\n    } else if (isRight) {\r\n      positionStrategy.right('0');\r\n    } else {\r\n      positionStrategy.centerHorizontally();\r\n    }\r\n    // Set horizontal position.\r\n    if (config.verticalPosition === 'top') {\r\n      positionStrategy.top('0');\r\n    } else {\r\n      positionStrategy.bottom('0');\r\n    }\r\n\r\n    overlayConfig.positionStrategy = positionStrategy;\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an injector to be used inside of a snack bar component.\r\n   * @param config Config that was used to create the snack bar.\r\n   * @param snackBarRef Reference to the snack bar.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatSnackBarConfig,\r\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n\r\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\r\n      [MatSnackBarRef, snackBarRef],\r\n      [MAT_SNACK_BAR_DATA, config.data]\r\n    ]));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  isDevMode,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  HasInitialized,\r\n  HasInitializedCtor,\r\n  mixinDisabled,\r\n  mixinInitialized,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {SortDirection} from './sort-direction';\r\nimport {\r\n  getSortDuplicateSortableIdError,\r\n  getSortHeaderMissingIdError,\r\n  getSortInvalidDirectionError,\r\n} from './sort-errors';\r\n\r\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\r\nexport interface MatSortable {\r\n  /** The id of the column being sorted. */\r\n  id: string;\r\n\r\n  /** Starting sort direction. */\r\n  start: 'asc' | 'desc';\r\n\r\n  /** Whether to disable clearing the sorting state. */\r\n  disableClear: boolean;\r\n}\r\n\r\n/** The current sort state. */\r\nexport interface Sort {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n\r\n  /** The sort direction. */\r\n  direction: SortDirection;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSort.\r\n/** @docs-private */\r\nclass MatSortBase {}\r\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\r\n    mixinInitialized(mixinDisabled(MatSortBase));\r\n\r\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\r\n@Directive({\r\n  selector: '[matSort]',\r\n  exportAs: 'matSort',\r\n  inputs: ['disabled: matSortDisabled']\r\n})\r\nexport class MatSort extends _MatSortMixinBase\r\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\r\n  /** Collection of all registered sortables that this directive manages. */\r\n  sortables = new Map<string, MatSortable>();\r\n\r\n  /** Used to notify any child components listening to state changes. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  /** The id of the most recently sorted MatSortable. */\r\n  @Input('matSortActive') active: string;\r\n\r\n  /**\r\n   * The direction to set when an MatSortable is initially sorted.\r\n   * May be overriden by the MatSortable's sort start.\r\n   */\r\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\r\n\r\n  /** The sort direction of the currently active MatSortable. */\r\n  @Input('matSortDirection')\r\n  get direction(): SortDirection { return this._direction; }\r\n  set direction(direction: SortDirection) {\r\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\r\n      throw getSortInvalidDirectionError(direction);\r\n    }\r\n    this._direction = direction;\r\n  }\r\n  private _direction: SortDirection = '';\r\n\r\n  /**\r\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n   * May be overriden by the MatSortable's disable clear input.\r\n   */\r\n  @Input('matSortDisableClear')\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  /** Event emitted when the user changes either the active sort or sort direction. */\r\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\r\n\r\n  /**\r\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n   * collection of MatSortables.\r\n   */\r\n  register(sortable: MatSortable): void {\r\n    if (!sortable.id) {\r\n      throw getSortHeaderMissingIdError();\r\n    }\r\n\r\n    if (this.sortables.has(sortable.id)) {\r\n      throw getSortDuplicateSortableIdError(sortable.id);\r\n    }\r\n    this.sortables.set(sortable.id, sortable);\r\n  }\r\n\r\n  /**\r\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n   * collection of contained MatSortables.\r\n   */\r\n  deregister(sortable: MatSortable): void {\r\n    this.sortables.delete(sortable.id);\r\n  }\r\n\r\n  /** Sets the active sort id and determines the new sort direction. */\r\n  sort(sortable: MatSortable): void {\r\n    if (this.active != sortable.id) {\r\n      this.active = sortable.id;\r\n      this.direction = sortable.start ? sortable.start : this.start;\r\n    } else {\r\n      this.direction = this.getNextSortDirection(sortable);\r\n    }\r\n\r\n    this.sortChange.emit({active: this.active, direction: this.direction});\r\n  }\r\n\r\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\r\n  getNextSortDirection(sortable: MatSortable): SortDirection {\r\n    if (!sortable) { return ''; }\r\n\r\n    // Get the sort direction cycle with the potential sortable overrides.\r\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\r\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n\r\n    // Get and return the next direction in the cycle\r\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\r\n    return sortDirectionCycle[nextDirectionIndex];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._markInitialized();\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\r\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\r\n                               disableClear: boolean): SortDirection[] {\r\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\r\n  if (start == 'desc') { sortOrder.reverse(); }\r\n  if (!disableClear) { sortOrder.push(''); }\r\n\r\n  return sortOrder;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  keyframes,\r\n  AnimationTriggerMetadata, query, animateChild,\r\n} from '@angular/animations';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\r\n                                  AnimationCurves.STANDARD_CURVE;\r\n\r\n/**\r\n * Animations used by MatSort.\r\n * @docs-private\r\n */\r\nexport const matSortAnimations: {\r\n  readonly indicator: AnimationTriggerMetadata;\r\n  readonly leftPointer: AnimationTriggerMetadata;\r\n  readonly rightPointer: AnimationTriggerMetadata;\r\n  readonly arrowOpacity: AnimationTriggerMetadata;\r\n  readonly arrowPosition: AnimationTriggerMetadata;\r\n  readonly allowChildren: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that moves the sort indicator. */\r\n  indicator: trigger('indicator', [\r\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\r\n    // 10px is the height of the sort indicator, minus the width of the pointers\r\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\r\n  leftPointer: trigger('leftPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\r\n  rightPointer: trigger('rightPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that controls the arrow opacity. */\r\n  arrowOpacity: trigger('arrowOpacity', [\r\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\r\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\r\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\r\n        style({opacity: 0})),\r\n    // Transition between all states except for immediate transitions\r\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\r\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\r\n  ]),\r\n\r\n  /**\r\n   * Animation for the translation of the arrow as a whole. States are separated into two\r\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\r\n   * peek, and active. The other states define a specific animation (source-to-destination)\r\n   * and are determined as a function of their prev user-perceived state and what the next state\r\n   * should be.\r\n   */\r\n  arrowPosition: trigger('arrowPosition', [\r\n    // Hidden Above => Hint Center\r\n    transition('* => desc-to-hint, * => desc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(-25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Below\r\n    transition('* => hint-to-desc, * => active-to-desc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(25%)'})\r\n        ]))),\r\n    // Hidden Below => Hint Center\r\n    transition('* => asc-to-hint, * => asc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Above\r\n    transition('* => hint-to-asc, * => active-to-asc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(-25%)'})\r\n        ]))),\r\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\r\n        style({transform: 'translateY(0)'})),\r\n    state('hint-to-desc, active-to-desc, desc',\r\n        style({transform: 'translateY(-25%)'})),\r\n    state('hint-to-asc, active-to-asc, asc',\r\n        style({transform: 'translateY(25%)'})),\r\n  ]),\r\n\r\n  /** Necessary trigger that calls animate on children animations. */\r\n  allowChildren: trigger('allowChildren', [\r\n    transition('* <=> *', [\r\n      query('@*', animateChild(), {optional: true})\r\n    ])\r\n  ]),\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\r\n * include it in a custom provider.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatSortHeaderIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** ARIA label for the sorting button. */\r\n  sortButtonLabel = (id: string) => {\r\n    return `Change sorting for ${id}`;\r\n  }\r\n}\r\n/** @docs-private */\r\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\r\n  return parentIntl || new MatSortHeaderIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\r\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatSortHeaderIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\r\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\r\n};\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  HostBinding,\r\n} from '@angular/core';\r\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\r\nimport {\r\n  debounceTime,\r\n  filter,\r\n  map,\r\n  startWith,\r\n  take,\r\n  takeUntil,\r\n  distinctUntilChanged,\r\n} from 'rxjs/operators';\r\nimport {matDrawerAnimations} from './drawer-animations';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\n/**\r\n * Throws an exception when two MatDrawer are matching the same position.\r\n * @docs-private\r\n */\r\nexport function throwMatDuplicatedDrawerError(position: string) {\r\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\r\n}\r\n\r\n\r\n/** Result of the toggle promise that indicates the state of the drawer. */\r\nexport type MatDrawerToggleResult = 'open' | 'close';\r\n\r\n/** Configures whether drawers should use auto sizing by default. */\r\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\r\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\r\n      providedIn: 'root',\r\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\r\n  return false;\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content',\r\n    '[style.margin-left.px]': '_container._contentMargins.left',\r\n    '[style.margin-right.px]': '_container._contentMargins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\r\n  constructor(\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\r\n      elementRef: ElementRef<HTMLElement>,\r\n      scrollDispatcher: ScrollDispatcher,\r\n      ngZone: NgZone) {\r\n    super(elementRef, scrollDispatcher, ngZone);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._container._contentMarginChanges.subscribe(() => {\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * This component corresponds to a drawer that can be opened on the drawer container.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer',\r\n  exportAs: 'matDrawer',\r\n  templateUrl: 'drawer.html',\r\n  animations: [matDrawerAnimations.transformDrawer],\r\n  host: {\r\n    'class': 'mat-drawer',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    'tabIndex': '-1',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\r\n  private _focusTrap: FocusTrap;\r\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\r\n\r\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\r\n  private _enableAnimations = false;\r\n\r\n  /** The side that the drawer is attached to. */\r\n  @Input()\r\n  get position(): 'start' | 'end' { return this._position; }\r\n  set position(value: 'start' | 'end') {\r\n    // Make sure we have a valid value.\r\n    value = value === 'end' ? 'end' : 'start';\r\n    if (value != this._position) {\r\n      this._position = value;\r\n      this.onPositionChanged.emit();\r\n    }\r\n  }\r\n  private _position: 'start' | 'end' = 'start';\r\n\r\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\r\n  @Input()\r\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\r\n  set mode(value: 'over' | 'push' | 'side') {\r\n    this._mode = value;\r\n    this._modeChanged.next();\r\n  }\r\n  private _mode: 'over' | 'push' | 'side' = 'over';\r\n\r\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\r\n  @Input()\r\n  get disableClose(): boolean { return this._disableClose; }\r\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\r\n  private _disableClose: boolean = false;\r\n\r\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\r\n  @Input()\r\n  get autoFocus(): boolean { return this._autoFocus; }\r\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\r\n  private _autoFocus: boolean = true;\r\n\r\n  /** How the sidenav was opened (keypress, mouse click etc.) */\r\n  private _openedVia: FocusOrigin | null;\r\n\r\n  /** Emits whenever the drawer has started animating. */\r\n  _animationStarted = new Subject<AnimationEvent>();\r\n\r\n  /** Emits whenever the drawer is done animating. */\r\n  _animationEnd = new Subject<AnimationEvent>();\r\n\r\n  /** Current state of the sidenav animation. */\r\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\r\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\r\n  // that can be inherited.\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n  @HostBinding('@transform')\r\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\r\n\r\n  /** Event emitted when the drawer open state is changed. */\r\n  @Output() readonly openedChange: EventEmitter<boolean> =\r\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\r\n      new EventEmitter<boolean>(/* isAsync */true);\r\n\r\n  /** Event emitted when the drawer has been opened. */\r\n  @Output('opened')\r\n  get _openedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the drawer has started opening. */\r\n  @Output()\r\n  get openedStart(): Observable<void> {\r\n    return this._animationStarted.pipe(\r\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\r\n      map(() => {})\r\n    );\r\n  }\r\n\r\n  /** Event emitted when the drawer has been closed. */\r\n  @Output('closed')\r\n  get _closedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the drawer has started closing. */\r\n  @Output()\r\n  get closedStart(): Observable<void> {\r\n    return this._animationStarted.pipe(\r\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\r\n      map(() => {})\r\n    );\r\n  }\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  /** Event emitted when the drawer's position changes. */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\r\n   * to know when to when the mode changes so it can adapt the margins on the content.\r\n   */\r\n  readonly _modeChanged = new Subject();\r\n\r\n  get _isFocusTrapEnabled(): boolean {\r\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\r\n    return this.opened && this.mode !== 'side';\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              private _focusTrapFactory: FocusTrapFactory,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _platform: Platform,\r\n              private _ngZone: NgZone,\r\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\r\n\r\n    this.openedChange.subscribe((opened: boolean) => {\r\n      if (opened) {\r\n        if (this._doc) {\r\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\r\n        }\r\n\r\n        if (this._isFocusTrapEnabled && this._focusTrap) {\r\n          this._trapFocus();\r\n        }\r\n      } else {\r\n        this._restoreFocus();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Listen to `keydown` events outside the zone so that change detection is not run every\r\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\r\n     * and we don't have close disabled.\r\n     */\r\n    this._ngZone.runOutsideAngular(() => {\r\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\r\n            filter(event => {\r\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\r\n            }),\r\n            takeUntil(this._destroyed)\r\n        ).subscribe(event => this._ngZone.run(() => {\r\n            this.close();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }));\r\n    });\r\n\r\n    // We need a Subject with distinctUntilChanged, because the `done` event\r\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\r\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\r\n      return x.fromState === y.fromState && x.toState === y.toState;\r\n    })).subscribe((event: AnimationEvent) => {\r\n      const {fromState, toState} = event;\r\n\r\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\r\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\r\n        this.openedChange.emit(this._opened);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Traps focus inside the drawer. */\r\n  private _trapFocus() {\r\n    if (!this.autoFocus) {\r\n      return;\r\n    }\r\n\r\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\r\n      // still works. We need to check that `focus` is a function due to Universal.\r\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\r\n   * opened.\r\n   */\r\n  private _restoreFocus() {\r\n    if (!this.autoFocus) {\r\n      return;\r\n    }\r\n\r\n    const activeEl = this._doc && this._doc.activeElement;\r\n\r\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\r\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\r\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\r\n      } else {\r\n        this._elementRef.nativeElement.blur();\r\n      }\r\n    }\r\n\r\n    this._elementFocusedBeforeDrawerWasOpened = null;\r\n    this._openedVia = null;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\r\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\r\n    // animations, because we don't want the drawer to animate the first time the user sees\r\n    // the page.\r\n    if (this._platform.isBrowser) {\r\n      this._enableAnimations = true;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n\r\n    this._animationStarted.complete();\r\n    this._animationEnd.complete();\r\n    this._modeChanged.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Whether the drawer is opened. We overload this because we trigger an event when it\r\n   * starts or end.\r\n   */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\r\n  private _opened: boolean = false;\r\n\r\n  /**\r\n   * Open the drawer.\r\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\r\n   * Used for focus management after the sidenav is closed.\r\n   */\r\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\r\n    return this.toggle(true, openedVia);\r\n  }\r\n\r\n  /** Close the drawer. */\r\n  close(): Promise<MatDrawerToggleResult> {\r\n    return this.toggle(false);\r\n  }\r\n\r\n  /**\r\n   * Toggle this drawer.\r\n   * @param isOpen Whether the drawer should be open.\r\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\r\n   * Used for focus management after the sidenav is closed.\r\n   */\r\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\r\n    Promise<MatDrawerToggleResult> {\r\n\r\n    this._opened = isOpen;\r\n\r\n    if (isOpen) {\r\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\r\n      this._openedVia = openedVia;\r\n    } else {\r\n      this._animationState = 'void';\r\n      this._restoreFocus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\r\n    }\r\n\r\n    return new Promise<MatDrawerToggleResult>(resolve => {\r\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\r\n    });\r\n  }\r\n\r\n  get _width(): number {\r\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\r\n  }\r\n\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('@transform.start', ['$event'])\r\n  _animationStartListener(event: AnimationEvent) {\r\n    this._animationStarted.next(event);\r\n  }\r\n\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('@transform.done', ['$event'])\r\n  _animationDoneListener(event: AnimationEvent) {\r\n    this._animationEnd.next(event);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `<mat-drawer-container>` component.\r\n *\r\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\r\n * and coordinates the backdrop and content styling.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer-container',\r\n  exportAs: 'matDrawerContainer',\r\n  templateUrl: 'drawer-container.html',\r\n  styleUrls: ['drawer.css'],\r\n  host: {\r\n    'class': 'mat-drawer-container',\r\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\r\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\r\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\r\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\r\n\r\n  /** The drawer child with the `start` position. */\r\n  get start(): MatDrawer | null { return this._start; }\r\n\r\n  /** The drawer child with the `end` position. */\r\n  get end(): MatDrawer | null { return this._end; }\r\n\r\n  /**\r\n   * Whether to automatically resize the container whenever\r\n   * the size of any of its drawers changes.\r\n   *\r\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\r\n   * the drawers on every change detection cycle. Can be configured globally via the\r\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\r\n   */\r\n  @Input()\r\n  get autosize(): boolean { return this._autosize; }\r\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\r\n  private _autosize: boolean;\r\n\r\n  /**\r\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\r\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\r\n   * mode as well.\r\n   */\r\n  @Input()\r\n  get hasBackdrop() {\r\n    if (this._backdropOverride == null) {\r\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\r\n    }\r\n\r\n    return this._backdropOverride;\r\n  }\r\n  set hasBackdrop(value: any) {\r\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\r\n  }\r\n  _backdropOverride: boolean | null;\r\n\r\n  /** Event emitted when the drawer backdrop is clicked. */\r\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** The drawer at the start/end position, independent of direction. */\r\n  private _start: MatDrawer | null;\r\n  private _end: MatDrawer | null;\r\n\r\n  /**\r\n   * The drawer at the left/right. When direction changes, these will change as well.\r\n   * They're used as aliases for the above to set the left/right style properly.\r\n   * In LTR, _left == _start and _right == _end.\r\n   * In RTL, _left == _end and _right == _start.\r\n   */\r\n  private _left: MatDrawer | null;\r\n  private _right: MatDrawer | null;\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\r\n  private readonly _doCheckSubject = new Subject<void>();\r\n\r\n  /**\r\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\r\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\r\n   * fixed position elements inside of the transformed element.\r\n   */\r\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\r\n\r\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\r\n\r\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\r\n  get scrollable(): CdkScrollable {\r\n    return this._userContent || this._content;\r\n  }\r\n\r\n  constructor(@Optional() private _dir: Directionality,\r\n              private _element: ElementRef<HTMLElement>,\r\n              private _ngZone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              viewportRuler: ViewportRuler,\r\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\r\n\r\n    // If a `Dir` directive exists up the tree, listen direction changes\r\n    // and update the left/right properties to point to the proper start/end.\r\n    if (_dir) {\r\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n        this._validateDrawers();\r\n        this.updateContentMargins();\r\n      });\r\n    }\r\n\r\n    // Since the minimum width of the sidenav depends on the viewport width,\r\n    // we need to recompute the margins if the viewport changes.\r\n    viewportRuler.change()\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => this.updateContentMargins());\r\n\r\n    this._autosize = defaultAutosize;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._validateDrawers();\r\n\r\n      this._drawers.forEach((drawer: MatDrawer) => {\r\n        this._watchDrawerToggle(drawer);\r\n        this._watchDrawerPosition(drawer);\r\n        this._watchDrawerMode(drawer);\r\n      });\r\n\r\n      if (!this._drawers.length ||\r\n          this._isDrawerOpen(this._start) ||\r\n          this._isDrawerOpen(this._end)) {\r\n        this.updateContentMargins();\r\n      }\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    this._doCheckSubject.pipe(\r\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\r\n      takeUntil(this._destroyed)\r\n    ).subscribe(() => this.updateContentMargins());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._contentMarginChanges.complete();\r\n    this._doCheckSubject.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Calls `open` of both start and end drawers */\r\n  open(): void {\r\n    this._drawers.forEach(drawer => drawer.open());\r\n  }\r\n\r\n  /** Calls `close` of both start and end drawers */\r\n  close(): void {\r\n    this._drawers.forEach(drawer => drawer.close());\r\n  }\r\n\r\n  /**\r\n   * Recalculates and updates the inline styles for the content. Note that this should be used\r\n   * sparingly, because it causes a reflow.\r\n   */\r\n  updateContentMargins() {\r\n    // 1. For drawers in `over` mode, they don't affect the content.\r\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\r\n    //    left margin (for left drawer) or right margin (for right the drawer).\r\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\r\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\r\n    //    margin from the other side.\r\n    let left = 0;\r\n    let right = 0;\r\n\r\n    if (this._left && this._left.opened) {\r\n      if (this._left.mode == 'side') {\r\n        left += this._left._width;\r\n      } else if (this._left.mode == 'push') {\r\n        const width = this._left._width;\r\n        left += width;\r\n        right -= width;\r\n      }\r\n    }\r\n\r\n    if (this._right && this._right.opened) {\r\n      if (this._right.mode == 'side') {\r\n        right += this._right._width;\r\n      } else if (this._right.mode == 'push') {\r\n        const width = this._right._width;\r\n        right += width;\r\n        left -= width;\r\n      }\r\n    }\r\n\r\n    // If either `right` or `left` is zero, don't set a style to the element. This\r\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\r\n    // measured widths will always be zero. Note that we reset to `null` here, rather\r\n    // than below, in order to ensure that the types in the `if` below are consistent.\r\n    left = left || null!;\r\n    right = right || null!;\r\n\r\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\r\n      this._contentMargins = {left, right};\r\n\r\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\r\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\r\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // If users opted into autosizing, do a check every change detection cycle.\r\n    if (this._autosize && this._isPushed()) {\r\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\r\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribes to drawer events in order to set a class on the main container element when the\r\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\r\n   * is properly hidden.\r\n   */\r\n  private _watchDrawerToggle(drawer: MatDrawer): void {\r\n    drawer._animationStarted.pipe(\r\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\r\n      takeUntil(this._drawers.changes),\r\n    )\r\n    .subscribe((event: AnimationEvent) => {\r\n      // Set the transition class on the container so that the animations occur. This should not\r\n      // be set initially because animations should only be triggered via a change in state.\r\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\r\n        this._element.nativeElement.classList.add('mat-drawer-transition');\r\n      }\r\n\r\n      this.updateContentMargins();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (drawer.mode !== 'side') {\r\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\r\n          this._setContainerClass(drawer.opened));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribes to drawer onPositionChanged event in order to\r\n   * re-validate drawers when the position changes.\r\n   */\r\n  private _watchDrawerPosition(drawer: MatDrawer): void {\r\n    if (!drawer) {\r\n      return;\r\n    }\r\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\r\n    // since both drawers may be swapping positions at the same time.\r\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\r\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._validateDrawers();\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Subscribes to changes in drawer mode so we can run change detection. */\r\n  private _watchDrawerMode(drawer: MatDrawer): void {\r\n    if (drawer) {\r\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\r\n        .subscribe(() => {\r\n          this.updateContentMargins();\r\n          this._changeDetectorRef.markForCheck();\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\r\n  private _setContainerClass(isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._element.nativeElement.classList.add('mat-drawer-opened');\r\n    } else {\r\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\r\n    }\r\n  }\r\n\r\n  /** Validate the state of the drawer children components. */\r\n  private _validateDrawers() {\r\n    this._start = this._end = null;\r\n\r\n    // Ensure that we have at most one start and one end drawer.\r\n    this._drawers.forEach(drawer => {\r\n      if (drawer.position == 'end') {\r\n        if (this._end != null) {\r\n          throwMatDuplicatedDrawerError('end');\r\n        }\r\n        this._end = drawer;\r\n      } else {\r\n        if (this._start != null) {\r\n          throwMatDuplicatedDrawerError('start');\r\n        }\r\n        this._start = drawer;\r\n      }\r\n    });\r\n\r\n    this._right = this._left = null;\r\n\r\n    // Detect if we're LTR or RTL.\r\n    if (this._dir && this._dir.value === 'rtl') {\r\n      this._left = this._end;\r\n      this._right = this._start;\r\n    } else {\r\n      this._left = this._start;\r\n      this._right = this._end;\r\n    }\r\n  }\r\n\r\n  /** Whether the container is being pushed to the side by one of the drawers. */\r\n  private _isPushed() {\r\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\r\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\r\n  }\r\n\r\n  _onBackdropClicked() {\r\n    this.backdropClick.emit();\r\n    this._closeModalDrawer();\r\n  }\r\n\r\n  _closeModalDrawer() {\r\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\r\n    [this._start, this._end]\r\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\r\n      .forEach(drawer => drawer!.close());\r\n  }\r\n\r\n  _isShowingBackdrop(): boolean {\r\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\r\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\r\n  }\r\n\r\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\r\n    return drawer.mode !== 'side' || !!this._backdropOverride;\r\n  }\r\n\r\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\r\n    return drawer != null && drawer.opened;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  ViewEncapsulation,\r\n  QueryList,\r\n  ElementRef,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\r\nimport {matDrawerAnimations} from './drawer-animations';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content mat-sidenav-content',\r\n    '[style.margin-left.px]': '_container._contentMargins.left',\r\n    '[style.margin-right.px]': '_container._contentMargins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSidenavContent extends MatDrawerContent {\r\n  constructor(\r\n      changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\r\n      elementRef: ElementRef<HTMLElement>,\r\n      scrollDispatcher: ScrollDispatcher,\r\n      ngZone: NgZone) {\r\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav',\r\n  exportAs: 'matSidenav',\r\n  templateUrl: 'drawer.html',\r\n  animations: [matDrawerAnimations.transformDrawer],\r\n  host: {\r\n    'class': 'mat-drawer mat-sidenav',\r\n    'tabIndex': '-1',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\r\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\r\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSidenav extends MatDrawer {\r\n  /** Whether the sidenav is fixed in the viewport. */\r\n  @Input()\r\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\r\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\r\n  private _fixedInViewport = false;\r\n\r\n  /**\r\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\r\n   * mode.\r\n   */\r\n  @Input()\r\n  get fixedTopGap(): number { return this._fixedTopGap; }\r\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\r\n  private _fixedTopGap = 0;\r\n\r\n  /**\r\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\r\n   * fixed mode.\r\n   */\r\n  @Input()\r\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\r\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\r\n  private _fixedBottomGap = 0;\r\n}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav-container',\r\n  exportAs: 'matSidenavContainer',\r\n  templateUrl: 'sidenav-container.html',\r\n  styleUrls: ['drawer.css'],\r\n  host: {\r\n    'class': 'mat-drawer-container mat-sidenav-container',\r\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSidenavContainer extends MatDrawerContainer {\r\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\r\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\r\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    ScrollingModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MatCommonModule,\r\n    MatDrawer,\r\n    MatDrawerContainer,\r\n    MatDrawerContent,\r\n    MatSidenav,\r\n    MatSidenavContainer,\r\n    MatSidenavContent,\r\n  ],\r\n  declarations: [\r\n    MatDrawer,\r\n    MatDrawerContainer,\r\n    MatDrawerContent,\r\n    MatSidenav,\r\n    MatSidenavContainer,\r\n    MatSidenavContent,\r\n  ],\r\n})\r\nexport class MatSidenavModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/** Default `mat-slide-toggle` options that can be overridden. */\r\nexport interface MatSlideToggleDefaultOptions {\r\n  /** Whether toggle action triggers value changes in slide toggle. */\r\n  disableToggleValue?: boolean;\r\n  /** Whether drag action triggers value changes in slide toggle. */\r\n  disableDragValue?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\r\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\r\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\r\n    providedIn: 'root',\r\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\r\n  });\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  Optional,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor, CanColorCtor,\r\n  CanDisable, CanDisableCtor,\r\n  CanDisableRipple, CanDisableRippleCtor,\r\n  HammerInput,\r\n  HasTabIndex, HasTabIndexCtor,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {\r\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\r\n  MatSlideToggleDefaultOptions\r\n} from './slide-toggle-config';\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet nextUniqueId = 0;\r\n\r\n/** @docs-private */\r\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSlideToggle),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by a MatSlideToggle. */\r\nexport class MatSlideToggleChange {\r\n  constructor(\r\n    /** The source MatSlideToggle of the event. */\r\n    public source: MatSlideToggle,\r\n    /** The new `checked` value of the MatSlideToggle. */\r\n    public checked: boolean) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSlideToggle.\r\n/** @docs-private */\r\nclass MatSlideToggleBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatSlideToggleMixinBase:\r\n    HasTabIndexCtor &\r\n    CanColorCtor &\r\n    CanDisableRippleCtor &\r\n    CanDisableCtor &\r\n    typeof MatSlideToggleBase =\r\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\r\n\r\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-slide-toggle',\r\n  exportAs: 'matSlideToggle',\r\n  host: {\r\n    'class': 'mat-slide-toggle',\r\n    '[id]': 'id',\r\n    // Needs to be `-1` so it can still receive programmatic focus.\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    '[class.mat-checked]': 'checked',\r\n    '[class.mat-disabled]': 'disabled',\r\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n    '(focus)': '_inputElement.nativeElement.focus()',\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\r\n                                                                        ControlValueAccessor,\r\n                                                                        CanDisable, CanColor,\r\n                                                                        HasTabIndex,\r\n                                                                        CanDisableRipple {\r\n  private _onChange = (_: any) => {};\r\n  private _onTouched = () => {};\r\n\r\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\r\n  private _required: boolean = false;\r\n  private _checked: boolean = false;\r\n\r\n  /** Whether the thumb is currently being dragged. */\r\n  private _dragging = false;\r\n\r\n  /** Previous checked state before drag started. */\r\n  private _previousChecked: boolean;\r\n\r\n  /** Width of the thumb bar of the slide-toggle. */\r\n  private _thumbBarWidth: number;\r\n\r\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\r\n  private _dragPercentage: number;\r\n\r\n  /** Reference to the thumb HTMLElement. */\r\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\r\n\r\n  /** Reference to the thumb bar HTMLElement. */\r\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\r\n\r\n  /** Name value will be applied to the input element if present. */\r\n  @Input() name: string | null = null;\r\n\r\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Used to set the aria-label attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string | null = null;\r\n\r\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Whether the slide-toggle is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value) { this._required = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the slide-toggle element is checked or not. */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value) {\r\n    this._checked = coerceBooleanProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  /** An event will be dispatched each time the slide-toggle changes its value. */\r\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\r\n      new EventEmitter<MatSlideToggleChange>();\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle input is toggled.\r\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\r\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\r\n   * the slide toggle value.\r\n   */\r\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * An event will be dispatched each time the slide-toggle is dragged.\r\n   * This event is always emitted when the user drags the slide toggle to make a change greater\r\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\r\n   * the user toggles the slide toggle to change its value.\r\n   */\r\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Reference to the underlying input element. */\r\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              private _ngZone: NgZone,\r\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\r\n                  public defaults: MatSlideToggleDefaultOptions,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              @Optional() private _dir?: Directionality) {\r\n    super(elementRef);\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._focusMonitor\r\n      .monitor(this._elementRef, true)\r\n      .subscribe(focusOrigin => {\r\n        if (!focusOrigin) {\r\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n          // Angular does not expect events to be raised during change detection, so any state\r\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\r\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\r\n          // we defer telling the form control it has been touched until the next tick.\r\n          Promise.resolve().then(() => this._onTouched());\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /** Method being called whenever the underlying input emits a change event. */\r\n  _onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    if (!this._dragging) {\r\n      this.toggleChange.emit();\r\n    }\r\n    // Releasing the pointer over the `<label>` element while dragging triggers another\r\n    // click event on the `<label>` element. This means that the checked state of the underlying\r\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\r\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\r\n    // does not change, and the checked state of the underlying input needs to be changed back.\r\n    if (this._dragging || this.defaults.disableToggleValue) {\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      return;\r\n    }\r\n\r\n    // Sync the value from the underlying input element with the component instance.\r\n    this.checked = this._inputElement.nativeElement.checked;\r\n\r\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\r\n    // there is no change event, when the checked state changes programmatically.\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /** Method being called whenever the slide-toggle has been clicked. */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(value: any): void {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: any): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: any): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the slide-toggle. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\r\n  }\r\n\r\n  /** Toggles the checked state of the slide-toggle. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n    this._onChange(this.checked);\r\n  }\r\n\r\n  /**\r\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\r\n   */\r\n  private _emitChangeEvent() {\r\n    this._onChange(this.checked);\r\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\r\n  }\r\n\r\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\r\n  private _getDragPercentage(distance: number) {\r\n    let percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._previousChecked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n  _onDragStart() {\r\n    if (!this.disabled && !this._dragging) {\r\n      const thumbEl = this._thumbEl.nativeElement;\r\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\r\n      thumbEl.classList.add('mat-dragging');\r\n\r\n      this._previousChecked = this.checked;\r\n      this._dragging = true;\r\n    }\r\n  }\r\n\r\n  _onDrag(event: HammerInput) {\r\n    if (this._dragging) {\r\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\r\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\r\n      // Calculate the moved distance based on the thumb bar width.\r\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\r\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\r\n    }\r\n  }\r\n\r\n  _onDragEnd() {\r\n    if (this._dragging) {\r\n      const newCheckedValue = this._dragPercentage > 50;\r\n\r\n      if (newCheckedValue !== this.checked) {\r\n        this.dragChange.emit();\r\n        if (!this.defaults.disableDragValue) {\r\n          this.checked = newCheckedValue;\r\n          this._emitChangeEvent();\r\n        }\r\n      }\r\n\r\n      // The drag should be stopped outside of the current event handler, otherwise the\r\n      // click event will be fired before it and will revert the drag change.\r\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\r\n        if (this._dragging) {\r\n          this._dragging = false;\r\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\r\n\r\n          // Reset the transform because the component will take care\r\n          // of the thumb position after drag.\r\n          this._thumbEl.nativeElement.style.transform = '';\r\n        }\r\n      }));\r\n    }\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\r\n    // slide-toggle component will be only marked for check, but no actual change detection runs\r\n    // automatically. Instead of going back into the zone in order to trigger a change detection\r\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\r\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {NgModule} from '@angular/core';\r\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {MatSlideToggle} from './slide-toggle';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\r\n  exports: [MatSlideToggle, MatCommonModule],\r\n  declarations: [MatSlideToggle],\r\n  providers: [\r\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\r\n  ],\r\n})\r\nexport class MatSlideToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  Optional,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\n/** Possible mode for a progress spinner. */\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\n/**\r\n * Base reference size of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_SIZE = 100;\r\n\r\n/**\r\n * Base reference stroke width of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_STROKE_WIDTH = 10;\r\n\r\n// Boilerplate for applying mixins to MatProgressSpinner.\r\n/** @docs-private */\r\nclass MatProgressSpinnerBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\r\n    mixinColor(MatProgressSpinnerBase, 'primary');\r\n\r\n/** Default `mat-progress-spinner` options that can be overridden. */\r\nexport interface MatProgressSpinnerDefaultOptions {\r\n  /** Diameter of the spinner. */\r\n  diameter?: number;\r\n  /** Width of the spinner's stroke. */\r\n  strokeWidth?: number;\r\n  /**\r\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\r\n   * using NoopAnimationsModule.\r\n   */\r\n  _forceAnimations?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\r\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\r\n  return {diameter: BASE_SIZE};\r\n}\r\n\r\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\r\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\r\n// which are enough to see the flicker described in\r\n// https://github.com/angular/components/issues/8984\r\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\r\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\r\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\r\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\r\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\r\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\r\n\r\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\r\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\r\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\r\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\r\n\r\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\r\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\r\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\r\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\r\n\r\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\r\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\r\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\r\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\r\n  }\r\n`;\r\n\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-spinner',\r\n  exportAs: 'matProgressSpinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'class': 'mat-progress-spinner',\r\n    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n    '[style.width.px]': 'diameter',\r\n    '[style.height.px]': 'diameter',\r\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\r\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\r\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\r\n    '[attr.mode]': 'mode',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\r\n  private _value = 0;\r\n  private _strokeWidth: number;\r\n  private _fallbackAnimation = false;\r\n\r\n  /**\r\n   * Element to which we should add the generated style tags for the indeterminate animation.\r\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\r\n   * use the shadow root.\r\n   */\r\n  private _styleRoot: Node;\r\n\r\n  /**\r\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\r\n   * We need to keep track of which elements the diameters were attached to, because for\r\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\r\n   * than the document head.\r\n   */\r\n  private static _diameters = new WeakMap<Node, Set<number>>();\r\n\r\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\r\n  _noopAnimations: boolean;\r\n\r\n  /** The diameter of the progress spinner (will set width and height of svg). */\r\n  @Input()\r\n  get diameter(): number { return this._diameter; }\r\n  set diameter(size: number) {\r\n    this._diameter = coerceNumberProperty(size);\r\n\r\n    if (!this._fallbackAnimation) {\r\n      const trackedDiameters = MatProgressSpinner._diameters;\r\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\r\n\r\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\r\n        this._attachStyleNode();\r\n      }\r\n    }\r\n  }\r\n  private _diameter = BASE_SIZE;\r\n\r\n  /** Stroke width of the progress spinner. */\r\n  @Input()\r\n  get strokeWidth(): number {\r\n    return this._strokeWidth || this.diameter / 10;\r\n  }\r\n  set strokeWidth(value: number) {\r\n    this._strokeWidth = coerceNumberProperty(value);\r\n  }\r\n\r\n  /** Mode of the progress circle */\r\n  @Input() mode: ProgressSpinnerMode = 'determinate';\r\n\r\n  /** Value of the progress circle. */\r\n  @Input()\r\n  get value(): number {\r\n    return this.mode === 'determinate' ? this._value : 0;\r\n  }\r\n  set value(newValue: number) {\r\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef<HTMLElement>,\r\n              platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\r\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\r\n                  defaults?: MatProgressSpinnerDefaultOptions) {\r\n\r\n    super(_elementRef);\r\n\r\n    const trackedDiameters = MatProgressSpinner._diameters;\r\n\r\n    // The base size is already inserted via the component's structural styles. We still\r\n    // need to track it so we don't end up adding the same styles again.\r\n    if (!trackedDiameters.has(_document.head)) {\r\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\r\n    }\r\n\r\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\r\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\r\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\r\n        (!!defaults && !defaults._forceAnimations);\r\n\r\n    if (defaults) {\r\n      if (defaults.diameter) {\r\n        this.diameter = defaults.diameter;\r\n      }\r\n\r\n      if (defaults.strokeWidth) {\r\n        this.strokeWidth = defaults.strokeWidth;\r\n      }\r\n    }\r\n\r\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\r\n    // reliably so we fall back to a non-spec animation.\r\n    const animationClass =\r\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\r\n\r\n    _elementRef.nativeElement.classList.add(animationClass);\r\n  }\r\n\r\n  /** The radius of the spinner, adjusted for stroke width. */\r\n  get _circleRadius() {\r\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\r\n  }\r\n\r\n  /** The view box of the spinner's svg element. */\r\n  get _viewBox() {\r\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\r\n    return `0 0 ${viewBox} ${viewBox}`;\r\n  }\r\n\r\n  /** The stroke circumference of the svg circle. */\r\n  get _strokeCircumference(): number {\r\n    return 2 * Math.PI * this._circleRadius;\r\n  }\r\n\r\n  /** The dash offset of the svg circle. */\r\n  get _strokeDashOffset() {\r\n    if (this.mode === 'determinate') {\r\n      return this._strokeCircumference * (100 - this._value) / 100;\r\n    }\r\n\r\n    // In fallback mode set the circle to 80% and rotate it with CSS.\r\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\r\n      return this._strokeCircumference * 0.2;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stroke width of the circle in percent. */\r\n  get _circleStrokeWidth() {\r\n    return this.strokeWidth / this.diameter * 100;\r\n  }\r\n\r\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\r\n  private _attachStyleNode(): void {\r\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\r\n    const styleRoot = this._styleRoot;\r\n    const currentDiameter = this._diameter;\r\n    const diameters = MatProgressSpinner._diameters;\r\n    let diametersForElement = diameters.get(styleRoot);\r\n\r\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\r\n    styleTag.textContent = this._getAnimationText();\r\n    styleRoot.appendChild(styleTag);\r\n\r\n    if (!diametersForElement) {\r\n      diametersForElement = new Set<number>();\r\n      diameters.set(styleRoot, diametersForElement);\r\n    }\r\n\r\n    diametersForElement.add(currentDiameter);\r\n  }\r\n\r\n  /** Generates animation styles adjusted for the spinner's diameter. */\r\n  private _getAnimationText(): string {\r\n    return INDETERMINATE_ANIMATION_TEMPLATE\r\n        // Animation should begin at 5% and end at 80%\r\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\r\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\r\n        .replace(/DIAMETER/g, `${this.diameter}`);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n    'class': 'mat-spinner mat-progress-spinner',\r\n    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n    '[style.width.px]': 'diameter',\r\n    '[style.height.px]': 'diameter',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSpinner extends MatProgressSpinner {\r\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) document: any,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\r\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\r\n                  defaults?: MatProgressSpinnerDefaultOptions) {\r\n    super(elementRef, platform, document, animationMode, defaults);\r\n    this.mode = 'indeterminate';\r\n  }\r\n}\r\n\r\n\r\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\r\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\r\n  // TODO(crisbeto): see whether we should move this into the CDK\r\n  // feature detection utilities once #15616 gets merged in.\r\n  if (typeof window !== 'undefined') {\r\n    const head = _document.head;\r\n\r\n    // Check whether the browser supports Shadow DOM.\r\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\r\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\r\n\r\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\r\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\r\n      if (rootNode instanceof (window as any).ShadowRoot) {\r\n        return rootNode;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, CommonModule],\r\n  exports: [\r\n    MatProgressSpinner,\r\n    MatSpinner,\r\n    MatCommonModule\r\n  ],\r\n  declarations: [\r\n    MatProgressSpinner,\r\n    MatSpinner\r\n  ],\r\n})\r\nclass MatProgressSpinnerModule {}\r\n\r\nexport {MatProgressSpinnerModule};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  HasTabIndex,\r\n  HasTabIndexCtor,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\nexport interface MatRadioDefaultOptions {\r\n  color: ThemePalette;\r\n}\r\n\r\nexport const MAT_RADIO_DEFAULT_OPTIONS =\r\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\r\n  providedIn: 'root',\r\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\r\n});\r\n\r\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\r\n  return {\r\n    color: 'accent'\r\n  };\r\n}\r\n\r\n// Increasing integer for generating unique ids for radio components.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n * @docs-private\r\n */\r\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatRadioGroup),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by MatRadio and MatRadioGroup. */\r\nexport class MatRadioChange {\r\n  constructor(\r\n    /** The MatRadioButton that emits the change event. */\r\n    public source: MatRadioButton,\r\n    /** The value of the MatRadioButton. */\r\n    public value: any) {}\r\n}\r\n\r\n/**\r\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\r\n */\r\n@Directive({\r\n  selector: 'mat-radio-group',\r\n  exportAs: 'matRadioGroup',\r\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-radio-group',\r\n  },\r\n})\r\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\r\n  /** Selected value for the radio group. */\r\n  private _value: any = null;\r\n\r\n  /** The HTML name attribute applied to radio buttons in this group. */\r\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\r\n\r\n  /** The currently selected radio button. Should match value. */\r\n  private _selected: MatRadioButton | null = null;\r\n\r\n  /** Whether the `value` has been set to its initial value. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n  private _labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Whether the radio group is disabled. */\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether the radio group is required. */\r\n  private _required: boolean = false;\r\n\r\n  /** The method to be called in order to update ngModel */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /**\r\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n   * @docs-private\r\n   */\r\n  onTouched: () => any = () => {};\r\n\r\n  /**\r\n   * Event emitted when the group value changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * a radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\r\n\r\n  /** Child radio buttons. */\r\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\r\n  _radios: QueryList<MatRadioButton>;\r\n\r\n  /** Theme color for all of the radio buttons in the group. */\r\n  @Input() color: ThemePalette;\r\n\r\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n    this._updateRadioButtonNames();\r\n  }\r\n\r\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n  @Input()\r\n  get labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition;\r\n  }\r\n  set labelPosition(v) {\r\n    this._labelPosition = v === 'before' ? 'before' : 'after';\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  /**\r\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\r\n   * a corresponding radio button with a matching value. If there is not such a corresponding\r\n   * radio button, this value persists to be applied in case a new radio button is added with a\r\n   * matching value.\r\n   */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (this._value !== newValue) {\r\n      // Set this before proceeding to ensure no circular loop occurs with selection.\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedRadioFromValue();\r\n      this._checkSelectedRadioButton();\r\n    }\r\n  }\r\n\r\n  _checkSelectedRadioButton() {\r\n    if (this._selected && !this._selected.checked) {\r\n      this._selected.checked = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The currently selected radio button. If set to a new radio button, the radio group value\r\n   * will be updated to match the new selected button.\r\n   */\r\n  @Input()\r\n  get selected() { return this._selected; }\r\n  set selected(selected: MatRadioButton | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n    this._checkSelectedRadioButton();\r\n  }\r\n\r\n  /** Whether the radio group is disabled */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  /** Whether the radio group is required */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  constructor(private _changeDetector: ChangeDetectorRef) { }\r\n\r\n  /**\r\n   * Initialize properties once content children are available.\r\n   * This allows us to propagate relevant attributes to associated buttons.\r\n   */\r\n  ngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial value can\r\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\r\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n   * radio buttons upon their blur.\r\n   */\r\n  _touch() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  private _updateRadioButtonNames(): void {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => {\r\n        radio.name = this.name;\r\n        radio._markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Updates the `selected` radio button from the internal _value state. */\r\n  private _updateSelectedRadioFromValue(): void {\r\n    // If the value already matches the selected radio, do nothing.\r\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\r\n\r\n    if (this._radios && !isAlreadySelected) {\r\n      this._selected = null;\r\n      this._radios.forEach(radio => {\r\n        radio.checked = this.value === radio.value;\r\n        if (radio.checked) {\r\n          this._selected = radio;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    if (this._isInitialized) {\r\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\r\n    }\r\n  }\r\n\r\n  _markRadiosForCheck() {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => radio._markForCheck());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the model value changes.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the control is touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\n   * @param isDisabled Whether the control should be disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatRadioButton.\r\n/** @docs-private */\r\nclass MatRadioButtonBase {\r\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\r\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\r\n  // defined to properly work.\r\n  disabled: boolean;\r\n\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n// As per Material design specifications the selection control radio should use the accent color\r\n// palette by default. https://material.io/guidelines/components/selection-controls.html\r\nconst _MatRadioButtonMixinBase:\r\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\r\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\r\n\r\n/**\r\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-radio-button',\r\n  templateUrl: 'radio.html',\r\n  styleUrls: ['radio.css'],\r\n  inputs: ['disableRipple', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matRadioButton',\r\n  host: {\r\n    'class': 'mat-radio-button',\r\n    '[class.mat-radio-checked]': 'checked',\r\n    '[class.mat-radio-disabled]': 'disabled',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n    '[class.mat-primary]': 'color === \"primary\"',\r\n    '[class.mat-accent]': 'color === \"accent\"',\r\n    '[class.mat-warn]': 'color === \"warn\"',\r\n    // Needs to be -1 so the `focus` event still fires.\r\n    '[attr.tabindex]': '-1',\r\n    '[attr.id]': 'id',\r\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\r\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\r\n    // the focus to the native element.\r\n    '(focus)': '_inputElement.nativeElement.focus()',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatRadioButton extends _MatRadioButtonMixinBase\r\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\r\n\r\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\r\n\r\n  /** The unique ID for the radio button. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\r\n  @Input('aria-describedby') ariaDescribedby: string;\r\n\r\n  /** Whether this radio button is checked. */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    const newCheckedState = coerceBooleanProperty(value);\r\n    if (this._checked !== newCheckedState) {\r\n      this._checked = newCheckedState;\r\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\r\n        this.radioGroup.selected = this;\r\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\r\n\r\n        // When unchecking the selected radio button, update the selected radio\r\n        // property on the group.\r\n        this.radioGroup.selected = null;\r\n      }\r\n\r\n      if (newCheckedState) {\r\n        // Notify all radio buttons with the same name to un-check.\r\n        this._radioDispatcher.notify(this.id, this.name);\r\n      }\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** The value of this radio button. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    if (this._value !== value) {\r\n      this._value = value;\r\n      if (this.radioGroup !== null) {\r\n        if (!this.checked) {\r\n          // Update checked when the value changed to match the radio group's value\r\n          this.checked = this.radioGroup.value === value;\r\n        }\r\n        if (this.checked) {\r\n          this.radioGroup.selected = this;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\r\n  @Input()\r\n  get labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n  }\r\n  set labelPosition(value) {\r\n    this._labelPosition = value;\r\n  }\r\n  private _labelPosition: 'before' | 'after';\r\n\r\n  /** Whether the radio button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newDisabledState = coerceBooleanProperty(value);\r\n    if (this._disabled !== newDisabledState) {\r\n      this._disabled = newDisabledState;\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the radio button is required. */\r\n  @Input()\r\n  get required(): boolean {\r\n    return this._required || (this.radioGroup && this.radioGroup.required);\r\n  }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Theme color of the radio button. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color ||\r\n      (this.radioGroup && this.radioGroup.color) ||\r\n      this._providerOverride && this._providerOverride.color || 'accent';\r\n  }\r\n  set color(newValue: ThemePalette) { this._color = newValue; }\r\n  private _color: ThemePalette;\r\n\r\n  /**\r\n   * Event emitted when the checked state of this radio button changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * the radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\r\n\r\n  /** The parent radio group. May or may not be present. */\r\n  radioGroup: MatRadioGroup;\r\n\r\n  /** ID of the native input element inside `<mat-radio-button>` */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether this radio is checked. */\r\n  private _checked: boolean = false;\r\n\r\n  /** Whether this radio is disabled. */\r\n  private _disabled: boolean;\r\n\r\n  /** Whether this radio is required. */\r\n  private _required: boolean;\r\n\r\n  /** Value assigned to this radio. */\r\n  private _value: any = null;\r\n\r\n  /** Unregister function for _radioDispatcher */\r\n  private _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n  /** The native `<input type=radio>` element */\r\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\r\n\r\n  constructor(@Optional() radioGroup: MatRadioGroup,\r\n              elementRef: ElementRef,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _radioDispatcher: UniqueSelectionDispatcher,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\r\n                private _providerOverride?: MatRadioDefaultOptions) {\r\n    super(elementRef);\r\n\r\n    // Assertions. Ideally these should be stripped out by the compiler.\r\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n    this.radioGroup = radioGroup;\r\n\r\n    this._removeUniqueSelectionListener =\r\n      _radioDispatcher.listen((id: string, name: string) => {\r\n        if (id !== this.id && name === this.name) {\r\n          this.checked = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  /** Focuses the radio button. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\r\n  }\r\n\r\n  /**\r\n   * Marks the radio button as needing checking for change detection.\r\n   * This method is exposed because the parent radio group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n    // update radio button's status\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.radioGroup) {\r\n      // If the radio is inside a radio group, determine if it should be checked\r\n      this.checked = this.radioGroup.value === this._value;\r\n      // Copy name from parent radio group\r\n      this.name = this.radioGroup.name;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._elementRef, true)\r\n      .subscribe(focusOrigin => {\r\n        if (!focusOrigin && this.radioGroup) {\r\n          this.radioGroup._touch();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n    this._removeUniqueSelectionListener();\r\n  }\r\n\r\n  /** Dispatch change event with current value. */\r\n  private _emitChangeEvent(): void {\r\n    this.change.emit(new MatRadioChange(this, this._value));\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `radio-button` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Triggered when the radio button received a click or the input recognized any change.\r\n   * Clicking on a label element, will trigger a change event on the associated input.\r\n   */\r\n  _onInputChange(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n\r\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\r\n    this.checked = true;\r\n    this._emitChangeEvent();\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n      if (groupValueChanged) {\r\n        this.radioGroup._emitChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatRadioButton, MatRadioGroup} from './radio';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\r\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\r\n  declarations: [MatRadioGroup, MatRadioButton],\r\n})\r\nexport class MatRadioModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material drawers.\r\n * @docs-private\r\n */\r\nexport const matDrawerAnimations: {\r\n  readonly transformDrawer: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that slides a drawer in and out. */\r\n  transformDrawer: trigger('transform', [\r\n    // We remove the `transform` here completely, rather than setting it to zero, because:\r\n    // 1. Having a transform can cause elements with ripples or an animated\r\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\r\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\r\n    state('open, open-instant', style({\r\n      'transform': 'none',\r\n      'visibility': 'visible',\r\n    })),\r\n    state('void', style({\r\n      // Avoids the shadow showing up when closed in SSR.\r\n      'box-shadow': 'none',\r\n      'visibility': 'hidden',\r\n    })),\r\n    transition('void => open-instant', animate('0ms')),\r\n    transition('void <=> open, open-instant => void',\r\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatOptionModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\r\n  declarations: [MatSelect, MatSelectTrigger],\r\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n})\r\nexport class MatSelectModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  AnimationTriggerMetadata,\r\n  keyframes,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by MatTooltip.\r\n * @docs-private\r\n */\r\nexport const matTooltipAnimations: {\r\n  readonly tooltipState: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that transitions a tooltip in and out. */\r\n  tooltipState: trigger('state', [\r\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\r\n    state('visible', style({transform: 'scale(1)'})),\r\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\r\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\r\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\r\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\r\n    ]))),\r\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {\r\n  MatTooltip,\r\n  TooltipComponent,\r\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './tooltip';\r\n\r\n@NgModule({\r\n  imports: [\r\n    A11yModule,\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\r\n  declarations: [MatTooltip, TooltipComponent],\r\n  entryComponents: [TooltipComponent],\r\n  providers: [\r\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\r\n  ]\r\n})\r\nexport class MatTooltipModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\r\n * include it in a custom provider\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatPaginatorIntl {\r\n  /**\r\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\r\n   * changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the page size selector. */\r\n  itemsPerPageLabel: string = 'Items per page:';\r\n\r\n  /** A label for the button that increments the current page. */\r\n  nextPageLabel: string = 'Next page';\r\n\r\n  /** A label for the button that decrements the current page. */\r\n  previousPageLabel: string = 'Previous page';\r\n\r\n  /** A label for the button that moves to the first page. */\r\n  firstPageLabel: string = 'First page';\r\n\r\n  /** A label for the button that moves to the last page. */\r\n  lastPageLabel: string = 'Last page';\r\n\r\n  /** A label for the range of items within the current page and the length of the whole list. */\r\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\r\n\r\n    length = Math.max(length, 0);\r\n\r\n    const startIndex = page * pageSize;\r\n\r\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n    const endIndex = startIndex < length ?\r\n        Math.min(startIndex + pageSize, length) :\r\n        startIndex + pageSize;\r\n\r\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\r\n  return parentIntl || new MatPaginatorIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\r\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatPaginatorIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\r\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatPaginatorIntl} from './paginator-intl';\r\nimport {\r\n  HasInitialized,\r\n  HasInitializedCtor,\r\n  mixinInitialized,\r\n  ThemePalette,\r\n  mixinDisabled,\r\n  CanDisableCtor,\r\n  CanDisable,\r\n} from '@angular/material/core';\r\n\r\n/** The default page size if there is no page size and there are no provided page size options. */\r\nconst DEFAULT_PAGE_SIZE = 50;\r\n\r\n/**\r\n * Change event object that is emitted when the user selects a\r\n * different page size or navigates to another page.\r\n */\r\nexport class PageEvent {\r\n  /** The current page index. */\r\n  pageIndex: number;\r\n\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n\r\n  /** The current page size */\r\n  pageSize: number;\r\n\r\n  /** The current total number of items being paged */\r\n  length: number;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatPaginator.\r\n/** @docs-private */\r\nclass MatPaginatorBase {}\r\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\r\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\r\n\r\n/**\r\n * Component to provide navigation between paged information. Displays the size of the current\r\n * page, user-selectable options to change that size, what items are being shown, and\r\n * navigational button to go to the previous or next page.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-paginator',\r\n  exportAs: 'matPaginator',\r\n  templateUrl: 'paginator.html',\r\n  styleUrls: ['paginator.css'],\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-paginator',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\r\n  HasInitialized {\r\n  private _initialized: boolean;\r\n  private _intlChanges: Subscription;\r\n\r\n  /** Theme color to be used for the underlying form controls. */\r\n  @Input() color: ThemePalette;\r\n\r\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\r\n  @Input()\r\n  get pageIndex(): number { return this._pageIndex; }\r\n  set pageIndex(value: number) {\r\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _pageIndex = 0;\r\n\r\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\r\n  @Input()\r\n  get length(): number { return this._length; }\r\n  set length(value: number) {\r\n    this._length = coerceNumberProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _length = 0;\r\n\r\n  /** Number of items to display on a page. By default set to 50. */\r\n  @Input()\r\n  get pageSize(): number { return this._pageSize; }\r\n  set pageSize(value: number) {\r\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSize: number;\r\n\r\n  /** The set of provided page size options to display to the user. */\r\n  @Input()\r\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\r\n  set pageSizeOptions(value: number[]) {\r\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSizeOptions: number[] = [];\r\n\r\n  /** Whether to hide the page size selection UI from the user. */\r\n  @Input()\r\n  get hidePageSize(): boolean { return this._hidePageSize; }\r\n  set hidePageSize(value: boolean) {\r\n    this._hidePageSize = coerceBooleanProperty(value);\r\n  }\r\n  private _hidePageSize = false;\r\n\r\n\r\n  /** Whether to show the first/last buttons UI to the user. */\r\n  @Input()\r\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\r\n  set showFirstLastButtons(value: boolean) {\r\n    this._showFirstLastButtons = coerceBooleanProperty(value);\r\n  }\r\n  private _showFirstLastButtons = false;\r\n\r\n  /** Event emitted when the paginator changes the page size or page index. */\r\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\r\n\r\n  /** Displayed set of page size options. Will be sorted and include current page size. */\r\n  _displayedPageSizeOptions: number[];\r\n\r\n  constructor(public _intl: MatPaginatorIntl,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    super();\r\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._initialized = true;\r\n    this._updateDisplayedPageSizeOptions();\r\n    this._markInitialized();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\r\n\r\n  /** Advances to the next page if it exists. */\r\n  nextPage(): void {\r\n    if (!this.hasNextPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex++;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Move back to the previous page if it exists. */\r\n  previousPage(): void {\r\n    if (!this.hasPreviousPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex--;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Move to the first page if not already there. */\r\n  firstPage(): void {\r\n    // hasPreviousPage being false implies at the start\r\n    if (!this.hasPreviousPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex = 0;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Move to the last page if not already there. */\r\n  lastPage(): void {\r\n    // hasNextPage being false implies at the end\r\n    if (!this.hasNextPage()) { return; }\r\n\r\n    const previousPageIndex = this.pageIndex;\r\n    this.pageIndex = this.getNumberOfPages() - 1;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Whether there is a previous page. */\r\n  hasPreviousPage(): boolean {\r\n    return this.pageIndex >= 1 && this.pageSize != 0;\r\n  }\r\n\r\n  /** Whether there is a next page. */\r\n  hasNextPage(): boolean {\r\n    const maxPageIndex = this.getNumberOfPages() - 1;\r\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\r\n  }\r\n\r\n  /** Calculate the number of pages */\r\n  getNumberOfPages(): number {\r\n    if (!this.pageSize) {\r\n      return 0;\r\n    }\r\n\r\n    return Math.ceil(this.length / this.pageSize);\r\n  }\r\n\r\n\r\n  /**\r\n   * Changes the page size so that the first item displayed on the page will still be\r\n   * displayed using the new page size.\r\n   *\r\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\r\n   * switching so that the page size is 5 will set the third page as the current page so\r\n   * that the 10th item will still be displayed.\r\n   */\r\n  _changePageSize(pageSize: number) {\r\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\r\n    // containing the previous page's first item.\r\n    const startIndex = this.pageIndex * this.pageSize;\r\n    const previousPageIndex = this.pageIndex;\r\n\r\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\r\n    this.pageSize = pageSize;\r\n    this._emitPageEvent(previousPageIndex);\r\n  }\r\n\r\n  /** Checks whether the buttons for going forwards should be disabled. */\r\n  _nextButtonsDisabled() {\r\n    return this.disabled || !this.hasNextPage();\r\n  }\r\n\r\n  /** Checks whether the buttons for going backwards should be disabled. */\r\n  _previousButtonsDisabled() {\r\n    return this.disabled || !this.hasPreviousPage();\r\n  }\r\n\r\n  /**\r\n   * Updates the list of page size options to display to the user. Includes making sure that\r\n   * the page size is an option and that the list is sorted.\r\n   */\r\n  private _updateDisplayedPageSizeOptions() {\r\n    if (!this._initialized) { return; }\r\n\r\n    // If no page size is provided, use the first page size option or the default page size.\r\n    if (!this.pageSize) {\r\n      this._pageSize = this.pageSizeOptions.length != 0 ?\r\n          this.pageSizeOptions[0] :\r\n          DEFAULT_PAGE_SIZE;\r\n    }\r\n\r\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\r\n\r\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\r\n      this._displayedPageSizeOptions.push(this.pageSize);\r\n    }\r\n\r\n    // Sort the numbers using a number-specific sort function.\r\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\r\n  private _emitPageEvent(previousPageIndex: number) {\r\n    this.page.emit({\r\n      previousPageIndex,\r\n      pageIndex: this.pageIndex,\r\n      pageSize: this.pageSize,\r\n      length: this.length\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatPaginator} from './paginator';\r\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n  ],\r\n  exports: [MatPaginator],\r\n  declarations: [MatPaginator],\r\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\r\n})\r\nexport class MatPaginatorModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  Optional,\r\n  NgZone,\r\n  ViewEncapsulation,\r\n  AfterViewInit,\r\n  ViewChild,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  inject,\r\n} from '@angular/core';\r\nimport {fromEvent, Subscription, Observable} from 'rxjs';\r\nimport {filter} from 'rxjs/operators';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\r\n\r\n/** Last animation end data. */\r\nexport interface ProgressAnimationEnd {\r\n  value: number;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatProgressBar.\r\n/** @docs-private */\r\nclass MatProgressBarBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\r\n    mixinColor(MatProgressBarBase, 'primary');\r\n\r\n/**\r\n * Injection token used to provide the current location to `MatProgressBar`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\r\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\r\n  'mat-progress-bar-location',\r\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\r\n);\r\n\r\n/**\r\n * Stubbed out location for `MatProgressBar`.\r\n * @docs-private\r\n */\r\nexport interface MatProgressBarLocation {\r\n  getPathname: () => string;\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\r\n  const _document = inject(DOCUMENT);\r\n  const _location = _document ? _document.location : null;\r\n\r\n  return {\r\n    // Note that this needs to be a function, rather than a property, because Angular\r\n    // will only resolve it once, but we want the current path on each call.\r\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\r\n  };\r\n}\r\n\r\n\r\n/** Counter used to generate unique IDs for progress bars. */\r\nlet progressbarId = 0;\r\n\r\n/**\r\n * `<mat-progress-bar>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-bar',\r\n  exportAs: 'matProgressBar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\r\n    '[attr.mode]': 'mode',\r\n    'class': 'mat-progress-bar',\r\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\r\n                                                      AfterViewInit, OnDestroy {\r\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\r\n              /**\r\n               * @deprecated `location` parameter to be made required.\r\n               * @breaking-change 8.0.0\r\n               */\r\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\r\n    super(_elementRef);\r\n\r\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\r\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\r\n\r\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\r\n    // we can't tell the difference between whether\r\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\r\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\r\n    const path = location ? location.getPathname().split('#')[0] : '';\r\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\r\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\r\n  }\r\n\r\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\r\n  _isNoopAnimation = false;\r\n\r\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\r\n  @Input()\r\n  get value(): number { return this._value; }\r\n  set value(v: number) {\r\n    this._value = clamp(v || 0);\r\n\r\n    // When noop animation is set to true, trigger animationEnd directly.\r\n    if (this._isNoopAnimation) {\r\n      this._emitAnimationEnd();\r\n    }\r\n  }\r\n  private _value: number = 0;\r\n\r\n  /** Buffer value of the progress bar. Defaults to zero. */\r\n  @Input()\r\n  get bufferValue(): number { return this._bufferValue; }\r\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\r\n  private _bufferValue: number = 0;\r\n\r\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\r\n\r\n  /**\r\n   * Event emitted when animation of the primary progress bar completes. This event will not\r\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\r\n   * animations (indeterminate and query).\r\n   */\r\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\r\n\r\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\r\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Mode of the progress bar.\r\n   *\r\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n   * 'determinate'.\r\n   * Mirrored to mode attribute.\r\n   */\r\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n  /** ID of the progress bar. */\r\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\r\n\r\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\r\n  _rectangleFillValue: string;\r\n\r\n  /** Gets the current transform value for the progress bar's primary indicator. */\r\n  _primaryTransform() {\r\n    const scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\r\n\r\n  /**\r\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\r\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n   */\r\n  _bufferTransform() {\r\n    if (this.mode === 'buffer') {\r\n      const scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this._isNoopAnimation) {\r\n      // Run outside angular so change detection didn't get triggered on every transition end\r\n      // instead only on the animation that we care about (primary value bar's transitionend)\r\n      this._ngZone.runOutsideAngular((() => {\r\n        const element = this._primaryValueBar.nativeElement;\r\n\r\n        this._animationEndSubscription =\r\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\r\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\r\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\r\n      }));\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._animationEndSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Emit an animationEnd event if in determinate or buffer mode. */\r\n  private _emitAnimationEnd(): void {\r\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\r\n      this.animationEnd.next({value: this.value});\r\n    }\r\n  }\r\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressBar} from './progress-bar';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCommonModule],\r\n  exports: [MatProgressBar, MatCommonModule],\r\n  declarations: [MatProgressBar],\r\n})\r\nexport class MatProgressBarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ESCAPE,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  DOWN_ARROW,\r\n  UP_ARROW,\r\n  HOME,\r\n  END,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  TemplateRef,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {startWith, switchMap, take} from 'rxjs/operators';\r\nimport {matMenuAnimations} from './menu-animations';\r\nimport {MatMenuContent} from './menu-content';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\r\nimport {AnimationEvent} from '@angular/animations';\r\n\r\n/** Default `mat-menu` options that can be overridden. */\r\nexport interface MatMenuDefaultOptions {\r\n  /** The x-axis position of the menu. */\r\n  xPosition: MenuPositionX;\r\n\r\n  /** The y-axis position of the menu. */\r\n  yPosition: MenuPositionY;\r\n\r\n  /** Whether the menu should overlap the menu trigger. */\r\n  overlapTrigger: boolean;\r\n\r\n  /** Class to be applied to the menu's backdrop. */\r\n  backdropClass: string;\r\n\r\n  /** Whether the menu has a backdrop. */\r\n  hasBackdrop?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-menu`. */\r\nexport const MAT_MENU_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\r\n  return {\r\n    overlapTrigger: false,\r\n    xPosition: 'after',\r\n    yPosition: 'below',\r\n    backdropClass: 'cdk-overlay-transparent-backdrop',\r\n  };\r\n}\r\n/**\r\n * Start elevation for the menu panel.\r\n * @docs-private\r\n */\r\nconst MAT_MENU_BASE_ELEVATION = 4;\r\n\r\n/** Base class with all of the `MatMenu` functionality. */\r\n// tslint:disable-next-line:class-name\r\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\r\n  OnDestroy {\r\n  private _keyManager: FocusKeyManager<MatMenuItem>;\r\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\r\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\r\n  private _previousElevation: string;\r\n\r\n  /** Menu items inside the current menu. */\r\n  private _items: MatMenuItem[] = [];\r\n\r\n  /** Emits whenever the amount of menu items changes. */\r\n  private _itemChanges = new Subject<MatMenuItem[]>();\r\n\r\n  /** Subscription to tab events on the menu panel */\r\n  private _tabSubscription = Subscription.EMPTY;\r\n\r\n  /** Config object to be passed into the menu's ngClass */\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Current state of the panel animation. */\r\n  _panelAnimationState: 'void' | 'enter' = 'void';\r\n\r\n  /** Emits whenever an animation on the menu completes. */\r\n  _animationDone = new Subject<AnimationEvent>();\r\n\r\n  /** Whether the menu is animating. */\r\n  _isAnimating: boolean;\r\n\r\n  /** Parent menu of the current menu panel. */\r\n  parentMenu: MatMenuPanel | undefined;\r\n\r\n  /** Layout direction of the menu. */\r\n  direction: Direction;\r\n\r\n  /** Class to be added to the backdrop element. */\r\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\r\n\r\n  /** Position of the menu in the X axis. */\r\n  @Input()\r\n  get xPosition(): MenuPositionX { return this._xPosition; }\r\n  set xPosition(value: MenuPositionX) {\r\n    if (value !== 'before' && value !== 'after') {\r\n      throwMatMenuInvalidPositionX();\r\n    }\r\n    this._xPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** Position of the menu in the Y axis. */\r\n  @Input()\r\n  get yPosition(): MenuPositionY { return this._yPosition; }\r\n  set yPosition(value: MenuPositionY) {\r\n    if (value !== 'above' && value !== 'below') {\r\n      throwMatMenuInvalidPositionY();\r\n    }\r\n    this._yPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\r\n\r\n  /**\r\n   * List of the items inside of a menu.\r\n   * @deprecated\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\r\n\r\n  /**\r\n   * Menu content that will be rendered lazily.\r\n   * @docs-private\r\n   */\r\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\r\n\r\n  /** Whether the menu should overlap its trigger. */\r\n  @Input()\r\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\r\n  set overlapTrigger(value: boolean) {\r\n    this._overlapTrigger = coerceBooleanProperty(value);\r\n  }\r\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\r\n\r\n  /** Whether the menu has a backdrop. */\r\n  @Input()\r\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\r\n  set hasBackdrop(value: boolean | undefined) {\r\n    this._hasBackdrop = coerceBooleanProperty(value);\r\n  }\r\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @param classes list of class names\r\n   */\r\n  @Input('class')\r\n  set panelClass(classes: string) {\r\n    const previousPanelClass = this._previousPanelClass;\r\n\r\n    if (previousPanelClass && previousPanelClass.length) {\r\n      previousPanelClass.split(' ').forEach((className: string) => {\r\n        this._classList[className] = false;\r\n      });\r\n    }\r\n\r\n    this._previousPanelClass = classes;\r\n\r\n    if (classes && classes.length) {\r\n      classes.split(' ').forEach((className: string) => {\r\n        this._classList[className] = true;\r\n      });\r\n\r\n      this._elementRef.nativeElement.className = '';\r\n    }\r\n  }\r\n  private _previousPanelClass: string;\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @deprecated Use `panelClass` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @Input()\r\n  get classList(): string { return this.panelClass; }\r\n  set classList(classes: string) { this.panelClass = classes; }\r\n\r\n  /** Event emitted when the menu is closed. */\r\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\r\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\r\n\r\n  /**\r\n   * Event emitted when the menu is closed.\r\n   * @deprecated Switch to `closed` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @Output() close = this.closed;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _ngZone: NgZone,\r\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\r\n\r\n  ngOnInit() {\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\r\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabSubscription.unsubscribe();\r\n    this.closed.complete();\r\n  }\r\n\r\n  /** Stream that emits whenever the hovered menu item changes. */\r\n  _hovered(): Observable<MatMenuItem> {\r\n    return this._itemChanges.pipe(\r\n      startWith(this._items),\r\n      switchMap(items => merge(...items.map(item => item._hovered)))\r\n    );\r\n  }\r\n\r\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode;\r\n    const manager = this._keyManager;\r\n\r\n    switch (keyCode) {\r\n      case ESCAPE:\r\n        if (!hasModifierKey(event)) {\r\n          event.preventDefault();\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case LEFT_ARROW:\r\n        if (this.parentMenu && this.direction === 'ltr') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case RIGHT_ARROW:\r\n        if (this.parentMenu && this.direction === 'rtl') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case HOME:\r\n      case END:\r\n        if (!hasModifierKey(event)) {\r\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n          event.preventDefault();\r\n        }\r\n      break;\r\n      default:\r\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\r\n          manager.setFocusOrigin('keyboard');\r\n        }\r\n\r\n        manager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the first item in the menu.\r\n   * @param origin Action from which the focus originated. Used to set the correct styling.\r\n   */\r\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\r\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\r\n    if (this.lazyContent) {\r\n      this._ngZone.onStable.asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\r\n    } else {\r\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\r\n   * the user to start from the first option when pressing the down arrow.\r\n   */\r\n  resetActiveItem() {\r\n    this._keyManager.setActiveItem(-1);\r\n  }\r\n\r\n  /**\r\n   * Sets the menu panel elevation.\r\n   * @param depth Number of parent menus that come before the menu.\r\n   */\r\n  setElevation(depth: number): void {\r\n    // The elevation starts at the base and increases by one for each level.\r\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\r\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\r\n\r\n    if (!customElevation || customElevation === this._previousElevation) {\r\n      if (this._previousElevation) {\r\n        this._classList[this._previousElevation] = false;\r\n      }\r\n\r\n      this._classList[newElevation] = true;\r\n      this._previousElevation = newElevation;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a menu item with the menu.\r\n   * @docs-private\r\n   */\r\n  addItem(item: MatMenuItem) {\r\n    // We register the items through this method, rather than picking them up through\r\n    // `ContentChildren`, because we need the items to be picked up by their closest\r\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\r\n    // all descendant items will bleed into the top-level menu in the case where the consumer\r\n    // has `mat-menu` instances nested inside each other.\r\n    if (this._items.indexOf(item) === -1) {\r\n      this._items.push(item);\r\n      this._itemChanges.next(this._items);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the menu.\r\n   * @docs-private\r\n   */\r\n  removeItem(item: MatMenuItem) {\r\n    const index = this._items.indexOf(item);\r\n\r\n    if (this._items.indexOf(item) > -1) {\r\n      this._items.splice(index, 1);\r\n      this._itemChanges.next(this._items);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds classes to the menu panel based on its position. Can be used by\r\n   * consumers to add specific styling based on the position.\r\n   * @param posX Position of the menu along the x axis.\r\n   * @param posY Position of the menu along the y axis.\r\n   * @docs-private\r\n   */\r\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\r\n    const classes = this._classList;\r\n    classes['mat-menu-before'] = posX === 'before';\r\n    classes['mat-menu-after'] = posX === 'after';\r\n    classes['mat-menu-above'] = posY === 'above';\r\n    classes['mat-menu-below'] = posY === 'below';\r\n  }\r\n\r\n  /** Starts the enter animation. */\r\n  _startAnimation() {\r\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\r\n    this._panelAnimationState = 'enter';\r\n  }\r\n\r\n  /** Resets the panel animation to its initial state. */\r\n  _resetAnimation() {\r\n    // @breaking-change 8.0.0 Combine with _startAnimation.\r\n    this._panelAnimationState = 'void';\r\n  }\r\n\r\n  /** Callback that is invoked when the panel animation completes. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    this._animationDone.next(event);\r\n    this._isAnimating = false;\r\n  }\r\n\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    this._isAnimating = true;\r\n\r\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\r\n    // because we move focus to the first item while it's still being animated, which can throw\r\n    // the browser off when it determines the scroll position. Alternatively we can move focus\r\n    // when the animation is done, however moving focus asynchronously will interrupt screen\r\n    // readers which are in the process of reading out the menu already. We take the `element`\r\n    // from the `event` since we can't use a `ViewChild` to access the pane.\r\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\r\n      event.element.scrollTop = 0;\r\n    }\r\n  }\r\n}\r\n\r\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\r\nexport class MatMenu extends _MatMenuBase {}\r\n\r\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\r\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\r\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\r\n// queries and DI to work correctly, while still not referencing the actual menu class.\r\n// Class responsibility is split up as follows:\r\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\r\n// * MatMenu - keeps the same name symbol name as the current menu and\r\n// is used as a provider for DI and query purposes.\r\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\r\n// be tree shaken away for MDC.\r\n\r\n/** @docs-public MatMenu */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-menu',\r\n  templateUrl: 'menu.html',\r\n  styleUrls: ['menu.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matMenu',\r\n  animations: [\r\n    matMenuAnimations.transformMenu,\r\n    matMenuAnimations.fadeInItems\r\n  ],\r\n  providers: [\r\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\r\n    {provide: MatMenu, useExisting: _MatMenu}\r\n  ]\r\n})\r\n// tslint:disable-next-line:class-name\r\nexport class _MatMenu extends MatMenu {\r\n\r\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\r\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\r\n    super(elementRef, ngZone, defaultOptions);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  HorizontalConnectionPos,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  VerticalConnectionPos,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Self,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\r\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\r\nimport {MatMenu} from './menu';\r\nimport {throwMatMenuMissingError} from './menu-errors';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MatMenuPanel} from './menu-panel';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\n\r\n/** Injection token that determines the scroll handling while the menu is open. */\r\nexport const MAT_MENU_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_MENU_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n/** Default top padding of the menu panel. */\r\nexport const MENU_PANEL_TOP_PADDING = 8;\r\n\r\n/** Options for binding a passive event listener. */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\r\n\r\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\r\n\r\n/**\r\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\r\n * responsible for toggling the display of the provided menu instance.\r\n */\r\n@Directive({\r\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\r\n  host: {\r\n    'aria-haspopup': 'true',\r\n    '[attr.aria-expanded]': 'menuOpen || null',\r\n    '(mousedown)': '_handleMousedown($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(click)': '_handleClick($event)',\r\n  },\r\n  exportAs: 'matMenuTrigger'\r\n})\r\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\r\n  private _portal: TemplatePortal;\r\n  private _overlayRef: OverlayRef | null = null;\r\n  private _menuOpen: boolean = false;\r\n  private _closingActionsSubscription = Subscription.EMPTY;\r\n  private _hoverSubscription = Subscription.EMPTY;\r\n  private _menuCloseSubscription = Subscription.EMPTY;\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /**\r\n   * Handles touch start events on the trigger.\r\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\r\n   */\r\n  private _handleTouchStart = () => this._openedBy = 'touch';\r\n\r\n  // Tracking input type is necessary so it's possible to only auto-focus\r\n  // the first item of the list when the menu is opened via the keyboard\r\n  _openedBy: 'mouse' | 'touch' | null = null;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @Input('mat-menu-trigger-for')\r\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\r\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\r\n    this.menu = v;\r\n  }\r\n\r\n  /** References the menu instance that the trigger is associated with. */\r\n  @Input('matMenuTriggerFor')\r\n  get menu() { return this._menu; }\r\n  set menu(menu: MatMenuPanel) {\r\n    if (menu === this._menu) {\r\n      return;\r\n    }\r\n\r\n    this._menu = menu;\r\n    this._menuCloseSubscription.unsubscribe();\r\n\r\n    if (menu) {\r\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\r\n        this._destroyMenu();\r\n\r\n        // If a click closed the menu, we should close the entire chain of nested menus.\r\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\r\n          this._parentMenu.closed.emit(reason);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  private _menu: MatMenuPanel;\r\n\r\n  /** Data to be passed along to any lazily-rendered content. */\r\n  @Input('matMenuTriggerData') menuData: any;\r\n\r\n  /**\r\n   * Whether focus should be restored when the menu is closed.\r\n   * Note that disabling this option can have accessibility implications\r\n   * and it's up to you to manage focus, if you decide to turn it off.\r\n   */\r\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\r\n\r\n  /** Event emitted when the associated menu is opened. */\r\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted when the associated menu is opened.\r\n   * @deprecated Switch to `menuOpened` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\r\n\r\n  /** Event emitted when the associated menu is closed. */\r\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted when the associated menu is closed.\r\n   * @deprecated Switch to `menuClosed` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\r\n\r\n  constructor(private _overlay: Overlay,\r\n              private _element: ElementRef<HTMLElement>,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\r\n              @Optional() private _parentMenu: MatMenu,\r\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\r\n              @Optional() private _dir: Directionality,\r\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\r\n              // @breaking-change 8.0.0\r\n              private _focusMonitor?: FocusMonitor) {\r\n\r\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\r\n        passiveEventListenerOptions);\r\n\r\n    if (_menuItemInstance) {\r\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._checkMenu();\r\n    this._handleHover();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n\r\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\r\n        passiveEventListenerOptions);\r\n\r\n    this._menuCloseSubscription.unsubscribe();\r\n    this._closingActionsSubscription.unsubscribe();\r\n    this._hoverSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Whether the menu is open. */\r\n  get menuOpen(): boolean {\r\n    return this._menuOpen;\r\n  }\r\n\r\n  /** The text direction of the containing app. */\r\n  get dir(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Whether the menu triggers a sub-menu or a top-level one. */\r\n  triggersSubmenu(): boolean {\r\n    return !!(this._menuItemInstance && this._parentMenu);\r\n  }\r\n\r\n  /** Toggles the menu between the open and closed states. */\r\n  toggleMenu(): void {\r\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\r\n  }\r\n\r\n  /** Opens the menu. */\r\n  openMenu(): void {\r\n    if (this._menuOpen) {\r\n      return;\r\n    }\r\n\r\n    this._checkMenu();\r\n\r\n    const overlayRef = this._createOverlay();\r\n    const overlayConfig = overlayRef.getConfig();\r\n\r\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\r\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\r\n        this.menu.hasBackdrop;\r\n    overlayRef.attach(this._getPortal());\r\n\r\n    if (this.menu.lazyContent) {\r\n      this.menu.lazyContent.attach(this.menuData);\r\n    }\r\n\r\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\r\n    this._initMenu();\r\n\r\n    if (this.menu instanceof MatMenu) {\r\n      this.menu._startAnimation();\r\n    }\r\n  }\r\n\r\n  /** Closes the menu. */\r\n  closeMenu(): void {\r\n    this.menu.close.emit();\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu trigger.\r\n   * @param origin Source of the menu trigger's focus.\r\n   */\r\n  focus(origin: FocusOrigin = 'program') {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.focusVia(this._element, origin);\r\n    } else {\r\n      this._element.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  /** Closes the menu and does the necessary cleanup. */\r\n  private _destroyMenu() {\r\n    if (!this._overlayRef || !this.menuOpen) {\r\n      return;\r\n    }\r\n\r\n    const menu = this.menu;\r\n\r\n    this._closingActionsSubscription.unsubscribe();\r\n    this._overlayRef.detach();\r\n\r\n    if (menu instanceof MatMenu) {\r\n      menu._resetAnimation();\r\n\r\n      if (menu.lazyContent) {\r\n        // Wait for the exit animation to finish before detaching the content.\r\n        menu._animationDone\r\n          .pipe(\r\n            filter(event => event.toState === 'void'),\r\n            take(1),\r\n            // Interrupt if the content got re-attached.\r\n            takeUntil(menu.lazyContent._attached)\r\n          )\r\n          .subscribe({\r\n            next: () => menu.lazyContent!.detach(),\r\n            // No matter whether the content got re-attached, reset the menu.\r\n            complete: () => this._resetMenu()\r\n          });\r\n      } else {\r\n        this._resetMenu();\r\n      }\r\n    } else {\r\n      this._resetMenu();\r\n\r\n      if (menu.lazyContent) {\r\n        menu.lazyContent.detach();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method sets the menu state to open and focuses the first item if\r\n   * the menu was opened via the keyboard.\r\n   */\r\n  private _initMenu(): void {\r\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\r\n    this.menu.direction = this.dir;\r\n    this._setMenuElevation();\r\n    this._setIsMenuOpen(true);\r\n    this.menu.focusFirstItem(this._openedBy || 'program');\r\n  }\r\n\r\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\r\n  private _setMenuElevation(): void {\r\n    if (this.menu.setElevation) {\r\n      let depth = 0;\r\n      let parentMenu = this.menu.parentMenu;\r\n\r\n      while (parentMenu) {\r\n        depth++;\r\n        parentMenu = parentMenu.parentMenu;\r\n      }\r\n\r\n      this.menu.setElevation(depth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method resets the menu when it's closed, most importantly restoring\r\n   * focus to the menu trigger if the menu was opened via the keyboard.\r\n   */\r\n  private _resetMenu(): void {\r\n    this._setIsMenuOpen(false);\r\n\r\n    // We should reset focus if the user is navigating using a keyboard or\r\n    // if we have a top-level trigger which might cause focus to be lost\r\n    // when clicking on the backdrop.\r\n    if (this.restoreFocus) {\r\n      if (!this._openedBy) {\r\n        // Note that the focus style will show up both for `program` and\r\n        // `keyboard` so we don't have to specify which one it is.\r\n        this.focus();\r\n      } else if (!this.triggersSubmenu()) {\r\n        this.focus(this._openedBy);\r\n      }\r\n    }\r\n\r\n    this._openedBy = null;\r\n  }\r\n\r\n  // set state rather than toggle to support triggers sharing a menu\r\n  private _setIsMenuOpen(isOpen: boolean): void {\r\n    this._menuOpen = isOpen;\r\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\r\n\r\n    if (this.triggersSubmenu()) {\r\n      this._menuItemInstance._highlighted = isOpen;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method checks that a valid instance of MatMenu has been passed into\r\n   * matMenuTriggerFor. If not, an exception is thrown.\r\n   */\r\n  private _checkMenu() {\r\n    if (!this.menu) {\r\n      throwMatMenuMissingError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method creates the overlay from the provided menu's template and saves its\r\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\r\n   */\r\n  private _createOverlay(): OverlayRef {\r\n    if (!this._overlayRef) {\r\n      const config = this._getOverlayConfig();\r\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\r\n      this._overlayRef = this._overlay.create(config);\r\n\r\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\r\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\r\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\r\n      this._overlayRef.keydownEvents().subscribe();\r\n    }\r\n\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /**\r\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\r\n   * @returns OverlayConfig\r\n   */\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._overlay.position()\r\n          .flexibleConnectedTo(this._element)\r\n          .withLockedPosition()\r\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\r\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\r\n      scrollStrategy: this._scrollStrategy(),\r\n      direction: this._dir\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listens to changes in the position of the overlay and sets the correct classes\r\n   * on the menu based on the new position. This ensures the animation origin is always\r\n   * correct, even if a fallback position is used for the overlay.\r\n   */\r\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\r\n    if (this.menu.setPositionClasses) {\r\n      position.positionChanges.subscribe(change => {\r\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\r\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\r\n\r\n        this.menu.setPositionClasses!(posX, posY);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the appropriate positions on a position strategy\r\n   * so the overlay connects with the trigger correctly.\r\n   * @param positionStrategy Strategy whose position to update.\r\n   */\r\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\r\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\r\n\r\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\r\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\r\n\r\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\r\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\r\n    let offsetY = 0;\r\n\r\n    if (this.triggersSubmenu()) {\r\n      // When the menu is a sub-menu, it should always align itself\r\n      // to the edges of the trigger, instead of overlapping it.\r\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\r\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\r\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\r\n    } else if (!this.menu.overlapTrigger) {\r\n      originY = overlayY === 'top' ? 'bottom' : 'top';\r\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\r\n    }\r\n\r\n    positionStrategy.withPositions([\r\n      {originX, originY, overlayX, overlayY, offsetY},\r\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\r\n      {\r\n        originX,\r\n        originY: originFallbackY,\r\n        overlayX,\r\n        overlayY: overlayFallbackY,\r\n        offsetY: -offsetY\r\n      },\r\n      {\r\n        originX: originFallbackX,\r\n        originY: originFallbackY,\r\n        overlayX: overlayFallbackX,\r\n        overlayY: overlayFallbackY,\r\n        offsetY: -offsetY\r\n      }\r\n    ]);\r\n  }\r\n\r\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\r\n  private _menuClosingActions() {\r\n    const backdrop = this._overlayRef!.backdropClick();\r\n    const detachments = this._overlayRef!.detachments();\r\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\r\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\r\n      filter(active => active !== this._menuItemInstance),\r\n      filter(() => this._menuOpen)\r\n    ) : observableOf();\r\n\r\n    return merge(backdrop, parentClose, hover, detachments);\r\n  }\r\n\r\n  /** Handles mouse presses on the trigger. */\r\n  _handleMousedown(event: MouseEvent): void {\r\n    if (!isFakeMousedownFromScreenReader(event)) {\r\n      // Since right or middle button clicks won't trigger the `click` event,\r\n      // we shouldn't consider the menu as opened by mouse in those cases.\r\n      this._openedBy = event.button === 0 ? 'mouse' : null;\r\n\r\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\r\n      // we should prevent focus from moving onto it via click to avoid the\r\n      // highlight from lingering on the menu item.\r\n      if (this.triggersSubmenu()) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Handles key presses on the trigger. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    if (this.triggersSubmenu() && (\r\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\r\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\r\n      this.openMenu();\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the trigger. */\r\n  _handleClick(event: MouseEvent): void {\r\n    if (this.triggersSubmenu()) {\r\n      // Stop event propagation to avoid closing the parent menu.\r\n      event.stopPropagation();\r\n      this.openMenu();\r\n    } else {\r\n      this.toggleMenu();\r\n    }\r\n  }\r\n\r\n  /** Handles the cases where the user hovers over the trigger. */\r\n  private _handleHover() {\r\n    // Subscribe to changes in the hovered item in order to toggle the panel.\r\n    if (!this.triggersSubmenu()) {\r\n      return;\r\n    }\r\n\r\n    this._hoverSubscription = this._parentMenu._hovered()\r\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\r\n      // with different data and triggers), we have to delay it by a tick to ensure that\r\n      // it won't be closed immediately after it is opened.\r\n      .pipe(\r\n        filter(active => active === this._menuItemInstance && !active.disabled),\r\n        delay(0, asapScheduler)\r\n      )\r\n      .subscribe(() => {\r\n        this._openedBy = 'mouse';\r\n\r\n        // If the same menu is used between multiple triggers, it might still be animating\r\n        // while the new trigger tries to re-open it. Wait for the animation to finish\r\n        // before doing so. Also interrupt if the user moves to another item.\r\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\r\n          // We need the `delay(0)` here in order to avoid\r\n          // 'changed after checked' errors in some cases. See #12194.\r\n          this.menu._animationDone\r\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\r\n            .subscribe(() => this.openMenu());\r\n        } else {\r\n          this.openMenu();\r\n        }\r\n      });\r\n  }\r\n\r\n  /** Gets the portal that should be attached to the overlay. */\r\n  private _getPortal(): TemplatePortal {\r\n    // Note that we can avoid this check by keeping the portal on the menu panel.\r\n    // While it would be cleaner, we'd have to introduce another required method on\r\n    // `MatMenuPanel`, making it harder to consume.\r\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\r\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\r\n    }\r\n\r\n    return this._portal;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatMenuContent} from './menu-content';\r\nimport {_MatMenu} from './menu';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {\r\n  MatMenuTrigger,\r\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './menu-trigger';\r\n\r\n/**\r\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\r\n * to declare the menu-related directives.\r\n */\r\n@NgModule({\r\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\r\n  declarations: [MatMenuTrigger, MatMenuContent],\r\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\r\n})\r\n// tslint:disable-next-line:class-name\r\nexport class _MatMenuDirectivesModule {}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    MatRippleModule,\r\n    OverlayModule,\r\n    _MatMenuDirectivesModule,\r\n  ],\r\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\r\n  declarations: [_MatMenu, MatMenuItem],\r\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\r\n})\r\nexport class MatMenuModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  animate,\r\n  animateChild,\r\n  AnimationTriggerMetadata,\r\n  query,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n * @docs-private\r\n */\r\nexport const matSelectAnimations: {\r\n  readonly transformPanelWrap: AnimationTriggerMetadata;\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInContent: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\r\n   * closing the select.\r\n   * This is needed due to https://github.com/angular/angular/issues/23302\r\n   */\r\n  transformPanelWrap: trigger('transformPanelWrap', [\r\n      transition('* => void', query('@transformPanel', [animateChild()],\r\n          {optional: true}))\r\n  ]),\r\n\r\n  /**\r\n   * This animation transforms the select's overlay panel on and off the page.\r\n   *\r\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n   * side to ensure the option text correctly overlaps the trigger text.\r\n   *\r\n   * When the panel is removed from the DOM, it simply fades out linearly.\r\n   */\r\n  transformPanel: trigger('transformPanel', [\r\n    state('void', style({\r\n      transform: 'scaleY(0.8)',\r\n      minWidth: '100%',\r\n      opacity: 0\r\n    })),\r\n    state('showing', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    state('showing-multiple', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\r\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n  /**\r\n   * This animation fades in the background color and text content of the\r\n   * select's options. It is time delayed to occur 100ms after the overlay\r\n   * panel has transformed in.\r\n   * @deprecated Not used anymore. To be removed.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  fadeInContent: trigger('fadeInContent', [\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => showing', [\r\n      style({opacity: 0}),\r\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const transformPanel = matSelectAnimations.transformPanel;\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const fadeInContent = matSelectAnimations.fadeInContent;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  SPACE,\r\n  ENTER,\r\n  HOME,\r\n  END,\r\n  UP_ARROW,\r\n  DOWN_ARROW,\r\n  A,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple, CanDisableRippleCtor,\r\n  MatLine,\r\n  setLines,\r\n  mixinDisableRipple,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\r\n\r\n\r\n/** @docs-private */\r\nclass MatSelectionListBase {}\r\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\r\n    mixinDisableRipple(MatSelectionListBase);\r\n\r\n/** @docs-private */\r\nclass MatListOptionBase {}\r\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\r\n    mixinDisableRipple(MatListOptionBase);\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSelectionList),\r\n  multi: true\r\n};\r\n\r\n/** Change event that is being fired whenever the selected state of an option changes. */\r\nexport class MatSelectionListChange {\r\n  constructor(\r\n    /** Reference to the selection list that emitted the event. */\r\n    public source: MatSelectionList,\r\n    /** Reference to the option that has been changed. */\r\n    public option: MatListOption) {}\r\n}\r\n\r\n/**\r\n * Component for list-options of selection-list. Each list-option can automatically\r\n * generate a checkbox and can put current item into the selectionModel of selection-list\r\n * if the current item is selected.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-option',\r\n  exportAs: 'matListOption',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'option',\r\n    'class': 'mat-list-item mat-list-option',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n    '(click)': '_handleClick()',\r\n    'tabindex': '-1',\r\n    '[class.mat-list-item-disabled]': 'disabled',\r\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\r\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\r\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\r\n    // its theme. The accent theme palette is the default and doesn't need to be set.\r\n    '[class.mat-primary]': 'color === \"primary\"',\r\n    '[class.mat-warn]': 'color === \"warn\"',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  templateUrl: 'list-option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListOption extends _MatListOptionMixinBase\r\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\r\n\r\n  private _selected = false;\r\n  private _disabled = false;\r\n  private _hasFocus = false;\r\n\r\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\r\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  /** DOM element containing the item's text. */\r\n  @ViewChild('text', {static: false}) _text: ElementRef;\r\n\r\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\r\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Theme color of the list option. This sets the color of the checkbox. */\r\n  @Input()\r\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\r\n  set color(newValue: ThemePalette) { this._color = newValue; }\r\n  private _color: ThemePalette;\r\n\r\n  /** Value of the option */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (this.selected && newValue !== this.value) {\r\n      this.selected = false;\r\n    }\r\n\r\n    this._value = newValue;\r\n  }\r\n  private _value: any;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the option is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\r\n  set selected(value: boolean) {\r\n    const isSelected = coerceBooleanProperty(value);\r\n\r\n    if (isSelected !== this._selected) {\r\n      this._setSelected(isSelected);\r\n      this.selectionList._reportValueChange();\r\n    }\r\n  }\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              /** @docs-private */\r\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // List options that are selected at initialization can't be reported properly to the form\r\n    // control. This is because it takes some time until the selection-list knows about all\r\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\r\n    // that should be used instead. Deferring the value change report to the next tick ensures\r\n    // that the form control value is not being overwritten.\r\n    const wasSelected = this._selected;\r\n\r\n    Promise.resolve().then(() => {\r\n      if (this._selected || wasSelected) {\r\n        this.selected = true;\r\n        this._changeDetector.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    setLines(this._lines, this._element);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.selected) {\r\n      // We have to delay this until the next tick in order\r\n      // to avoid changed after checked errors.\r\n      Promise.resolve().then(() => {\r\n        this.selected = false;\r\n      });\r\n    }\r\n\r\n    const hadFocus = this._hasFocus;\r\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\r\n\r\n    // Only move focus if this option was focused at the time it was destroyed.\r\n    if (hadFocus && newActiveItem) {\r\n      newActiveItem.focus();\r\n    }\r\n  }\r\n\r\n  /** Toggles the selection state of the option. */\r\n  toggle(): void {\r\n    this.selected = !this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the option. */\r\n  focus(): void {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\r\n   * @docs-private\r\n   */\r\n  getLabel() {\r\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\r\n  }\r\n\r\n  _handleClick() {\r\n    if (!this.disabled) {\r\n      this.toggle();\r\n\r\n      // Emit a change event if the selected state of the option changed through user interaction.\r\n      this.selectionList._emitChangeEvent(this);\r\n    }\r\n  }\r\n\r\n  _handleFocus() {\r\n    this.selectionList._setFocusedOption(this);\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  _handleBlur() {\r\n    this.selectionList._onTouched();\r\n    this._hasFocus = false;\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  /** Sets the selected state of the option. Returns whether the value has changed. */\r\n  _setSelected(selected: boolean): boolean {\r\n    if (selected === this._selected) {\r\n      return false;\r\n    }\r\n\r\n    this._selected = selected;\r\n\r\n    if (selected) {\r\n      this.selectionList.selectedOptions.select(this);\r\n    } else {\r\n      this.selectionList.selectedOptions.deselect(this);\r\n    }\r\n\r\n    this._changeDetector.markForCheck();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\r\n   * used to trigger an update of the list option if the disabled state of the selection list\r\n   * changed.\r\n   */\r\n  _markForCheck() {\r\n    this._changeDetector.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-selection-list',\r\n  exportAs: 'matSelectionList',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'listbox',\r\n    '[tabIndex]': 'tabIndex',\r\n    'class': 'mat-selection-list mat-list-base',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_keydown($event)',\r\n    'aria-multiselectable': 'true',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\r\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatListOption>;\r\n\r\n  /** The option components contained within this selection-list. */\r\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\r\n\r\n  /** Emits a change event whenever the selected state of an option changes. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\r\n      new EventEmitter<MatSelectionListChange>();\r\n\r\n  /** Tabindex of the selection list. */\r\n  @Input() tabIndex: number = 0;\r\n\r\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\r\n  @Input() color: ThemePalette = 'accent';\r\n\r\n  /**\r\n   * Function used for comparing an option against the selected value when determining which\r\n   * options should appear as selected. The first argument is the value of an options. The second\r\n   * one is a value from the selected value. A boolean must be returned.\r\n   */\r\n  @Input() compareWith: (o1: any, o2: any) => boolean;\r\n\r\n  /** Whether the selection list is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\r\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\r\n    // changed its state. Since we know that a change to `disabled` property of the list affects\r\n    // the state of the options, we manually mark each option for check.\r\n    this._markOptionsForCheck();\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /** The currently selected options. */\r\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\r\n\r\n  /** View to model callback that should be called whenever the selected options change. */\r\n  private _onChange: (value: any) => void = (_: any) => {};\r\n\r\n  /** Used for storing the values that were assigned before the options were initialized. */\r\n  private _tempValues: string[]|null;\r\n\r\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\r\n  private _modelChanges = Subscription.EMPTY;\r\n\r\n  /** View to model callback that should be called if the list or its options lost focus. */\r\n  _onTouched: () => void = () => {};\r\n\r\n  /** Whether the list has been destroyed. */\r\n  private _destroyed: boolean;\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\r\n    super();\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\r\n      .withWrap()\r\n      .withTypeAhead()\r\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\r\n      // screenreader users, that allows reading the different options of the list.\r\n      .skipPredicate(() => false)\r\n      .withAllowedModifierKeys(['shiftKey']);\r\n\r\n    if (this._tempValues) {\r\n      this._setOptionsFromValues(this._tempValues);\r\n      this._tempValues = null;\r\n    }\r\n\r\n    // Sync external changes to the model back to the options.\r\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\r\n      if (event.added) {\r\n        for (let item of event.added) {\r\n          item.selected = true;\r\n        }\r\n      }\r\n\r\n      if (event.removed) {\r\n        for (let item of event.removed) {\r\n          item.selected = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const disableRippleChanges = changes['disableRipple'];\r\n    const colorChanges = changes['color'];\r\n\r\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\r\n        (colorChanges && !colorChanges.firstChange)) {\r\n      this._markOptionsForCheck();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed = true;\r\n    this._modelChanges.unsubscribe();\r\n  }\r\n\r\n  /** Focuses the selection list. */\r\n  focus() {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /** Selects all of the options. */\r\n  selectAll() {\r\n    this._setAllOptionsSelected(true);\r\n  }\r\n\r\n  /** Deselects all of the options. */\r\n  deselectAll() {\r\n    this._setAllOptionsSelected(false);\r\n  }\r\n\r\n  /** Sets the focused option of the selection-list. */\r\n  _setFocusedOption(option: MatListOption) {\r\n    this._keyManager.updateActiveItem(option);\r\n  }\r\n\r\n  /**\r\n   * Removes an option from the selection list and updates the active item.\r\n   * @returns Currently-active item.\r\n   */\r\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\r\n    const optionIndex = this._getOptionIndex(option);\r\n\r\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\r\n      // Check whether the option is the last item\r\n      if (optionIndex > 0) {\r\n        this._keyManager.updateActiveItem(optionIndex - 1);\r\n      } else if (optionIndex === 0 && this.options.length > 1) {\r\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\r\n      }\r\n    }\r\n\r\n    return this._keyManager.activeItem;\r\n  }\r\n\r\n  /** Passes relevant key presses to our key manager. */\r\n  _keydown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode;\r\n    const manager = this._keyManager;\r\n    const previousFocusIndex = manager.activeItemIndex;\r\n    const hasModifier = hasModifierKey(event);\r\n\r\n    switch (keyCode) {\r\n      case SPACE:\r\n      case ENTER:\r\n        if (!hasModifier) {\r\n          this._toggleFocusedOption();\r\n          // Always prevent space from scrolling the page since the list has focus\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case HOME:\r\n      case END:\r\n        if (!hasModifier) {\r\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case A:\r\n        if (hasModifierKey(event, 'ctrlKey')) {\r\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      default:\r\n        manager.onKeydown(event);\r\n    }\r\n\r\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\r\n        manager.activeItemIndex !== previousFocusIndex) {\r\n      this._toggleFocusedOption();\r\n    }\r\n  }\r\n\r\n  /** Reports a value change to the ControlValueAccessor */\r\n  _reportValueChange() {\r\n    // Stop reporting value changes after the list has been destroyed. This avoids\r\n    // cases where the list might wrongly reset its value once it is removed, but\r\n    // the form control is still live.\r\n    if (this.options && !this._destroyed) {\r\n      this._onChange(this._getSelectedOptionValues());\r\n    }\r\n  }\r\n\r\n  /** Emits a change event if the selected state of an option changed. */\r\n  _emitChangeEvent(option: MatListOption) {\r\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(values: string[]): void {\r\n    if (this.options) {\r\n      this._setOptionsFromValues(values || []);\r\n    } else {\r\n      this._tempValues = values;\r\n    }\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Sets the selected options based on the specified values. */\r\n  private _setOptionsFromValues(values: string[]) {\r\n    this.options.forEach(option => option._setSelected(false));\r\n\r\n    values.forEach(value => {\r\n      const correspondingOption = this.options.find(option => {\r\n        // Skip options that are already in the model. This allows us to handle cases\r\n        // where the same primitive value is selected multiple times.\r\n        if (option.selected) {\r\n          return false;\r\n        }\r\n\r\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\r\n      });\r\n\r\n      if (correspondingOption) {\r\n        correspondingOption._setSelected(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Returns the values of the selected options. */\r\n  private _getSelectedOptionValues(): string[] {\r\n    return this.options.filter(option => option.selected).map(option => option.value);\r\n  }\r\n\r\n  /** Toggles the state of the currently focused option if enabled. */\r\n  private _toggleFocusedOption(): void {\r\n    let focusedIndex = this._keyManager.activeItemIndex;\r\n\r\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\r\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\r\n\r\n      if (focusedOption && !focusedOption.disabled) {\r\n        focusedOption.toggle();\r\n\r\n        // Emit a change event because the focused option changed its state through user\r\n        // interaction.\r\n        this._emitChangeEvent(focusedOption);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selected state on all of the options\r\n   * and emits an event if anything changed.\r\n   */\r\n  private _setAllOptionsSelected(isSelected: boolean) {\r\n    // Keep track of whether anything changed, because we only want to\r\n    // emit the changed event when something actually changed.\r\n    let hasChanged = false;\r\n\r\n    this.options.forEach(option => {\r\n      if (option._setSelected(isSelected)) {\r\n        hasChanged = true;\r\n      }\r\n    });\r\n\r\n    if (hasChanged) {\r\n      this._reportValueChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of options.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.options.length;\r\n  }\r\n\r\n  /** Returns the index of the specified list option. */\r\n  private _getOptionIndex(option: MatListOption): number {\r\n    return this.options.toArray().indexOf(option);\r\n  }\r\n\r\n  /** Marks all the options to be checked in the next change detection run. */\r\n  private _markOptionsForCheck() {\r\n    if (this.options) {\r\n      this.options.forEach(option => option._markForCheck());\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  MatCommonModule,\r\n  MatLineModule,\r\n  MatPseudoCheckboxModule,\r\n  MatRippleModule,\r\n} from '@angular/material/core';\r\nimport {\r\n  MatList,\r\n  MatNavList,\r\n  MatListAvatarCssMatStyler,\r\n  MatListIconCssMatStyler,\r\n  MatListItem,\r\n  MatListSubheaderCssMatStyler,\r\n} from './list';\r\nimport {MatListOption, MatSelectionList} from './selection-list';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\r\n  exports: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatLineModule,\r\n    MatCommonModule,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatPseudoCheckboxModule,\r\n    MatSelectionList,\r\n    MatListOption,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatSelectionList,\r\n    MatListOption\r\n  ],\r\n})\r\nexport class MatListModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport{\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n  query,\r\n  group,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the mat-menu component.\r\n * Animation duration and timing values are based on:\r\n * https://material.io/guidelines/components/menus.html#menus-usage\r\n * @docs-private\r\n */\r\nexport const matMenuAnimations: {\r\n  readonly transformMenu: AnimationTriggerMetadata;\r\n  readonly fadeInItems: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation controls the menu panel's entry and exit from the page.\r\n   *\r\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\r\n   *\r\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\r\n   * delay to display the ripple.\r\n   */\r\n  transformMenu: trigger('transformMenu', [\r\n    state('void', style({\r\n      opacity: 0,\r\n      transform: 'scale(0.8)'\r\n    })),\r\n    transition('void => enter', group([\r\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\r\n        opacity: 1\r\n      }))),\r\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\r\n    ])),\r\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n\r\n  /**\r\n   * This animation fades in the background color and content of the menu panel\r\n   * after its containing element is scaled in.\r\n   */\r\n  fadeInItems: trigger('fadeInItems', [\r\n    // TODO(crisbeto): this is inside the `transformMenu`\r\n    // now. Remove next time we do breaking changes.\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => *', [\r\n      style({opacity: 0}),\r\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const fadeInItems = matMenuAnimations.fadeInItems;\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const transformMenu = matMenuAnimations.transformMenu;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  TemplateRef,\r\n  ComponentFactoryResolver,\r\n  ApplicationRef,\r\n  Injector,\r\n  ViewContainerRef,\r\n  Inject,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * Menu content that will be rendered lazily once the menu is opened.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matMenuContent]'\r\n})\r\nexport class MatMenuContent implements OnDestroy {\r\n  private _portal: TemplatePortal<any>;\r\n  private _outlet: DomPortalOutlet;\r\n\r\n  /** Emits when the menu content has been attached. */\r\n  _attached = new Subject<void>();\r\n\r\n  constructor(\r\n    private _template: TemplateRef<any>,\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private _appRef: ApplicationRef,\r\n    private _injector: Injector,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(DOCUMENT) private _document: any) {}\r\n\r\n  /**\r\n   * Attaches the content with a particular context.\r\n   * @docs-private\r\n   */\r\n  attach(context: any = {}) {\r\n    if (!this._portal) {\r\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\r\n    }\r\n\r\n    this.detach();\r\n\r\n    if (!this._outlet) {\r\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\r\n          this._componentFactoryResolver, this._appRef, this._injector);\r\n    }\r\n\r\n    const element: HTMLElement = this._template.elementRef.nativeElement;\r\n\r\n    // Because we support opening the same menu from different triggers (which in turn have their\r\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\r\n    // risk it staying attached to a pane that's no longer in the DOM.\r\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\r\n    this._portal.attach(this._outlet, context);\r\n    this._attached.next();\r\n  }\r\n\r\n  /**\r\n   * Detaches the content.\r\n   * @docs-private\r\n   */\r\n  detach() {\r\n    if (this._portal.isAttached) {\r\n      this._portal.detach();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._outlet) {\r\n      this._outlet.dispose();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {FocusOrigin} from '@angular/cdk/a11y';\r\nimport {MatMenuContent} from './menu-content';\r\n\r\n/**\r\n * Injection token used to provide the parent menu to menu-specific components.\r\n * @docs-private\r\n */\r\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\r\n\r\n/**\r\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\r\n * @docs-private\r\n */\r\nexport interface MatMenuPanel<T = any> {\r\n  xPosition: MenuPositionX;\r\n  yPosition: MenuPositionY;\r\n  overlapTrigger: boolean;\r\n  templateRef: TemplateRef<any>;\r\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\r\n  parentMenu?: MatMenuPanel | undefined;\r\n  direction?: Direction;\r\n  focusFirstItem: (origin?: FocusOrigin) => void;\r\n  resetActiveItem: () => void;\r\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\r\n  setElevation?(depth: number): void;\r\n  lazyContent?: MatMenuContent;\r\n  backdropClass?: string;\r\n  hasBackdrop?: boolean;\r\n  addItem?: (item: T) => void;\r\n  removeItem?: (item: T) => void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n  Inject,\r\n  Optional,\r\n  Input,\r\n  HostListener,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable, CanDisableCtor,\r\n  CanDisableRipple, CanDisableRippleCtor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\r\n\r\n// Boilerplate for applying mixins to MatMenuItem.\r\n/** @docs-private */\r\nclass MatMenuItemBase {}\r\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\r\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\r\n\r\n/**\r\n * This directive is intended to be used inside an mat-menu tag.\r\n * It exists mostly to set the role attribute.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-menu-item]',\r\n  exportAs: 'matMenuItem',\r\n  inputs: ['disabled', 'disableRipple'],\r\n  host: {\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-menu-item',\r\n    '[class.mat-menu-item-highlighted]': '_highlighted',\r\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.disabled]': 'disabled || null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: 'menu-item.html',\r\n})\r\nexport class MatMenuItem extends _MatMenuItemMixinBase\r\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\r\n\r\n  /** ARIA role for the menu item. */\r\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\r\n\r\n  private _document: Document;\r\n\r\n  /** Stream that emits when the menu item is hovered. */\r\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\r\n\r\n  /** Whether the menu item is highlighted. */\r\n  _highlighted: boolean = false;\r\n\r\n  /** Whether the menu item acts as a trigger for a sub-menu. */\r\n  _triggersSubmenu: boolean = false;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    @Inject(DOCUMENT) document?: any,\r\n    private _focusMonitor?: FocusMonitor,\r\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\r\n\r\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\r\n    super();\r\n\r\n    if (_focusMonitor) {\r\n      // Start monitoring the element so it gets the appropriate focused classes. We want\r\n      // to show the focus style for menu items only when the focus was not caused by a\r\n      // mouse or touch interaction.\r\n      _focusMonitor.monitor(this._elementRef, false);\r\n    }\r\n\r\n    if (_parentMenu && _parentMenu.addItem) {\r\n      _parentMenu.addItem(this);\r\n    }\r\n\r\n    this._document = document;\r\n  }\r\n\r\n  /** Focuses the menu item. */\r\n  focus(origin: FocusOrigin = 'program'): void {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\r\n    } else {\r\n      this._getHostElement().focus();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.stopMonitoring(this._elementRef);\r\n    }\r\n\r\n    if (this._parentMenu && this._parentMenu.removeItem) {\r\n      this._parentMenu.removeItem(this);\r\n    }\r\n\r\n    this._hovered.complete();\r\n  }\r\n\r\n  /** Used to set the `tabindex`. */\r\n  _getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\r\n\r\n  /** Returns the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  /** Prevents the default element actions if it is disabled. */\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('click', ['$event'])\r\n  _checkDisabled(event: Event): void {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /** Emits to the hover stream. */\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('mouseenter')\r\n  _handleMouseEnter() {\r\n    this._hovered.next(this);\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\r\n    let output = '';\r\n\r\n    if (element.childNodes) {\r\n      const length = element.childNodes.length;\r\n\r\n      // Go through all the top-level text nodes and extract their text.\r\n      // We skip anything that's not a text node to prevent the text from\r\n      // being thrown off by something like an icon.\r\n      for (let i = 0; i < length; i++) {\r\n        if (element.childNodes[i].nodeType === textNodeType) {\r\n          output += element.childNodes[i].textContent;\r\n        }\r\n      }\r\n    }\r\n\r\n    return output.trim();\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Optional,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  MatLine,\r\n  setLines,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\n// Boilerplate for applying mixins to MatList.\r\n/** @docs-private */\r\nclass MatListBase {}\r\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\r\n    mixinDisableRipple(MatListBase);\r\n\r\n// Boilerplate for applying mixins to MatListItem.\r\n/** @docs-private */\r\nclass MatListItemBase {}\r\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\r\n    mixinDisableRipple(MatListItemBase);\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-nav-list',\r\n  exportAs: 'matNavList',\r\n  host: {\r\n    'role': 'navigation',\r\n    'class': 'mat-nav-list mat-list-base'\r\n  },\r\n  templateUrl: 'list.html',\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\r\n  OnDestroy {\r\n  /** Emits when the state of the list changes. */\r\n  _stateChanges = new Subject<void>();\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list, mat-action-list',\r\n  exportAs: 'matList',\r\n  templateUrl: 'list.html',\r\n  host: {\r\n    'class': 'mat-list mat-list-base'\r\n  },\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\r\n  /** Emits when the state of the list changes. */\r\n  _stateChanges = new Subject<void>();\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\r\n    super();\r\n\r\n    if (this._getListType() === 'action-list') {\r\n      _elementRef.nativeElement.classList.add('mat-action-list');\r\n    }\r\n  }\r\n\r\n  _getListType(): 'list' | 'action-list' | null {\r\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\r\n\r\n    if (nodeName === 'mat-list') {\r\n      return 'list';\r\n    }\r\n\r\n    if (nodeName === 'mat-action-list') {\r\n      return 'action-list';\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-avatar], [matListAvatar]',\r\n  host: {'class': 'mat-list-avatar'}\r\n})\r\nexport class MatListAvatarCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-icon], [matListIcon]',\r\n  host: {'class': 'mat-list-icon'}\r\n})\r\nexport class MatListIconCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-subheader], [matSubheader]',\r\n  host: {'class': 'mat-subheader'}\r\n})\r\nexport class MatListSubheaderCssMatStyler {}\r\n\r\n/** An item within a Material Design list. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\r\n  exportAs: 'matListItem',\r\n  host: {\r\n    'class': 'mat-list-item',\r\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\r\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\r\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\r\n  },\r\n  inputs: ['disableRipple'],\r\n  templateUrl: 'list-item.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\r\n    CanDisableRipple, OnDestroy {\r\n  private _isInteractiveList: boolean = false;\r\n  private _list?: MatNavList | MatList;\r\n  private _destroyed = new Subject<void>();\r\n\r\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\r\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\r\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() navList?: MatNavList,\r\n              @Optional() list?: MatList) {\r\n    super();\r\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\r\n    this._list = navList || list;\r\n\r\n    // If no type attributed is specified for <button>, set it to \"button\".\r\n    // If a type attribute is already specified, do nothing.\r\n    const element = this._getHostElement();\r\n\r\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\r\n      element.setAttribute('type', 'button');\r\n    }\r\n\r\n    if (this._list) {\r\n      // React to changes in the state of the parent list since\r\n      // some of the item's properties depend on it (e.g. `disableRipple`).\r\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n        _changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    setLines(this._lines, this._element);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return !this._isInteractiveList || this.disableRipple ||\r\n           !!(this._list && this._list.disableRipple);\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {merge, Subscription, EMPTY} from 'rxjs';\r\nimport {filter} from 'rxjs/operators';\r\nimport {matExpansionAnimations} from './expansion-animations';\r\nimport {\r\n  MatExpansionPanel,\r\n  MatExpansionPanelDefaultOptions,\r\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\r\n} from './expansion-panel';\r\nimport {MatAccordionTogglePosition} from './accordion-base';\r\n\r\n\r\n/**\r\n * `<mat-expansion-panel-header>`\r\n *\r\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-expansion-panel-header',\r\n  styleUrls: ['./expansion-panel-header.css'],\r\n  templateUrl: './expansion-panel-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    matExpansionAnimations.indicatorRotate,\r\n    matExpansionAnimations.expansionHeaderHeight\r\n  ],\r\n  host: {\r\n    'class': 'mat-expansion-panel-header',\r\n    'role': 'button',\r\n    '[attr.id]': 'panel._headerId',\r\n    '[attr.tabindex]': 'disabled ? -1 : 0',\r\n    '[attr.aria-controls]': '_getPanelId()',\r\n    '[attr.aria-expanded]': '_isExpanded()',\r\n    '[attr.aria-disabled]': 'panel.disabled',\r\n    '[class.mat-expanded]': '_isExpanded()',\r\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\r\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\r\n    '(click)': '_toggle()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[@expansionHeight]': `{\r\n        value: _getExpandedState(),\r\n        params: {\r\n          collapsedHeight: collapsedHeight,\r\n          expandedHeight: expandedHeight\r\n        }\r\n    }`,\r\n  },\r\n})\r\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\r\n  private _parentChangeSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n      @Host() public panel: MatExpansionPanel,\r\n      private _element: ElementRef,\r\n      private _focusMonitor: FocusMonitor,\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\r\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\r\n    const accordionHideToggleChange = panel.accordion ?\r\n        panel.accordion._stateChanges.pipe(\r\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\r\n        EMPTY;\r\n\r\n    // Since the toggle state depends on an @Input on the panel, we\r\n    // need to subscribe and trigger change detection manually.\r\n    this._parentChangeSubscription =\r\n        merge(\r\n            panel.opened, panel.closed, accordionHideToggleChange,\r\n            panel._inputChanges.pipe(filter(\r\n                changes => {\r\n                  return !!(\r\n                    changes['hideToggle'] ||\r\n                    changes['disabled'] ||\r\n                    changes['togglePosition']);\r\n                  })))\r\n    .subscribe(() => this._changeDetectorRef.markForCheck());\r\n\r\n    // Avoids focus being lost if the panel contained the focused element and was closed.\r\n    panel.closed\r\n      .pipe(filter(() => panel._containsFocus()))\r\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\r\n\r\n    _focusMonitor.monitor(_element).subscribe(origin => {\r\n      if (origin && panel.accordion) {\r\n        panel.accordion._handleHeaderFocus(this);\r\n      }\r\n    });\r\n\r\n    if (defaultOptions) {\r\n      this.expandedHeight = defaultOptions.expandedHeight;\r\n      this.collapsedHeight = defaultOptions.collapsedHeight;\r\n    }\r\n  }\r\n\r\n  /** Height of the header while the panel is expanded. */\r\n  @Input() expandedHeight: string;\r\n\r\n  /** Height of the header while the panel is collapsed. */\r\n  @Input() collapsedHeight: string;\r\n\r\n  /**\r\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\r\n   * @docs-private\r\n   */\r\n  get disabled() {\r\n    return this.panel.disabled;\r\n  }\r\n\r\n  /** Toggles the expanded state of the panel. */\r\n  _toggle(): void {\r\n    this.panel.toggle();\r\n  }\r\n\r\n  /** Gets whether the panel is expanded. */\r\n  _isExpanded(): boolean {\r\n    return this.panel.expanded;\r\n  }\r\n\r\n  /** Gets the expanded state string of the panel. */\r\n  _getExpandedState(): string {\r\n    return this.panel._getExpandedState();\r\n  }\r\n\r\n  /** Gets the panel id. */\r\n  _getPanelId(): string {\r\n    return this.panel.id;\r\n  }\r\n\r\n  /** Gets the toggle position for the header. */\r\n  _getTogglePosition(): MatAccordionTogglePosition {\r\n    return this.panel.togglePosition;\r\n  }\r\n\r\n  /** Gets whether the expand indicator should be shown. */\r\n  _showToggle(): boolean {\r\n    return !this.panel.hideToggle && !this.panel.disabled;\r\n  }\r\n\r\n  /** Handle keydown event calling to toggle() if appropriate. */\r\n  _keydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      // Toggle for space and enter keys.\r\n      case SPACE:\r\n      case ENTER:\r\n        if (!hasModifierKey(event)) {\r\n          event.preventDefault();\r\n          this._toggle();\r\n        }\r\n\r\n        break;\r\n      default:\r\n        if (this.panel.accordion) {\r\n          this.panel.accordion._handleHeaderKeydown(event);\r\n        }\r\n\r\n        return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\r\n   * @param origin Origin of the action that triggered the focus.\r\n   * @docs-private\r\n   */\r\n  focus(origin: FocusOrigin = 'program') {\r\n    this._focusMonitor.focusVia(this._element, origin);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._parentChangeSubscription.unsubscribe();\r\n    this._focusMonitor.stopMonitoring(this._element);\r\n  }\r\n}\r\n\r\n/**\r\n * `<mat-panel-description>`\r\n *\r\n * This directive is to be used inside of the MatExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  selector: 'mat-panel-description',\r\n  host: {\r\n    class: 'mat-expansion-panel-header-description'\r\n  }\r\n})\r\nexport class MatExpansionPanelDescription {}\r\n\r\n/**\r\n * `<mat-panel-title>`\r\n *\r\n * This directive is to be used inside of the MatExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  selector: 'mat-panel-title',\r\n  host: {\r\n    class: 'mat-expansion-panel-header-title'\r\n  }\r\n})\r\nexport class MatExpansionPanelTitle {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CdkAccordion} from '@angular/cdk/accordion';\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {\r\n  MAT_ACCORDION,\r\n  MatAccordionBase,\r\n  MatAccordionDisplayMode,\r\n  MatAccordionTogglePosition\r\n} from './accordion-base';\r\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\r\n\r\n/**\r\n * Directive for a Material Design Accordion.\r\n */\r\n@Directive({\r\n  selector: 'mat-accordion',\r\n  exportAs: 'matAccordion',\r\n  inputs: ['multi'],\r\n  providers: [{\r\n    provide: MAT_ACCORDION,\r\n    useExisting: MatAccordion\r\n  }],\r\n  host: {\r\n    class: 'mat-accordion'\r\n  }\r\n})\r\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\r\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\r\n\r\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\r\n  _headers: QueryList<MatExpansionPanelHeader>;\r\n\r\n  /** Whether the expansion indicator should be hidden. */\r\n  @Input()\r\n  get hideToggle(): boolean { return this._hideToggle; }\r\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\r\n  private _hideToggle: boolean = false;\r\n\r\n  /**\r\n   * Display mode used for all expansion panels in the accordion. Currently two display\r\n   * modes exist:\r\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r\n   *     panel at a different elevation from the rest of the accordion.\r\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\r\n   *     elevation.\r\n   */\r\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\r\n\r\n  /** The position of the expansion indicator. */\r\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\r\n  }\r\n\r\n  /** Handles keyboard events coming in from the panel headers. */\r\n  _handleHeaderKeydown(event: KeyboardEvent) {\r\n    const {keyCode} = event;\r\n    const manager = this._keyManager;\r\n\r\n    if (keyCode === HOME) {\r\n      if (!hasModifierKey(event)) {\r\n        manager.setFirstItemActive();\r\n        event.preventDefault();\r\n      }\r\n    } else if (keyCode === END) {\r\n      if (!hasModifierKey(event)) {\r\n        manager.setLastItemActive();\r\n        event.preventDefault();\r\n      }\r\n    } else {\r\n      this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\r\n    this._keyManager.updateActiveItem(header);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatAccordion} from './accordion';\r\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\r\nimport {MatExpansionPanelContent} from './expansion-panel-content';\r\nimport {\r\n  MatExpansionPanelDescription,\r\n  MatExpansionPanelHeader,\r\n  MatExpansionPanelTitle,\r\n} from './expansion-panel-header';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\r\n  exports: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelActionRow,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    MatExpansionPanelDescription,\r\n    MatExpansionPanelContent,\r\n  ],\r\n  declarations: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelActionRow,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    MatExpansionPanelDescription,\r\n    MatExpansionPanelContent,\r\n  ],\r\n})\r\nexport class MatExpansionModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\r\n * @docs-private\r\n */\r\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\r\n\r\n/**\r\n * Base interface for a `MatGridList`.\r\n * @docs-private\r\n */\r\nexport interface MatGridListBase {\r\n  cols: number;\r\n  gutterSize: string;\r\n  rowHeight: number | string;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  ElementRef,\r\n  Input,\r\n  Optional,\r\n  ContentChildren,\r\n  QueryList,\r\n  AfterContentInit,\r\n  Directive,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {MatLine, setLines} from '@angular/material/core';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-tile',\r\n  exportAs: 'matGridTile',\r\n  host: {\r\n    'class': 'mat-grid-tile',\r\n  },\r\n  templateUrl: 'grid-tile.html',\r\n  styleUrls: ['grid-list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatGridTile {\r\n  _rowspan: number = 1;\r\n  _colspan: number = 1;\r\n\r\n  constructor(\r\n    private _element: ElementRef<HTMLElement>,\r\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\r\n\r\n  /** Amount of rows that the grid tile takes up. */\r\n  @Input()\r\n  get rowspan(): number { return this._rowspan; }\r\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\r\n\r\n  /** Amount of columns that the grid tile takes up. */\r\n  @Input()\r\n  get colspan(): number { return this._colspan; }\r\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\r\n\r\n  /**\r\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\r\n   * \"Changed after checked\" errors that would occur with HostBinding.\r\n   */\r\n  _setStyle(property: string, value: any): void {\r\n    (this._element.nativeElement.style as any)[property] = value;\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\r\n  templateUrl: 'grid-tile-text.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatGridTileText implements AfterContentInit {\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>) {}\r\n\r\n  ngAfterContentInit() {\r\n    setLines(this._lines, this._element);\r\n  }\r\n}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-grid-avatar], [matGridAvatar]',\r\n  host: {'class': 'mat-grid-avatar'}\r\n})\r\nexport class MatGridAvatarCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-grid-tile-header',\r\n  host: {'class': 'mat-grid-tile-header'}\r\n})\r\nexport class MatGridTileHeaderCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-grid-tile-footer',\r\n  host: {'class': 'mat-grid-tile-footer'}\r\n})\r\nexport class MatGridTileFooterCssMatStyler {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {MatGridTile} from './grid-tile';\r\n\r\n/**\r\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\r\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\r\n * because the tiles can have a rowspan.\r\n *\r\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\r\n * large enough to accommodate it so that the tiles still render in the same order in which they\r\n * are given.\r\n *\r\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\r\n * element of the array corresponds to a column, and the value indicates how many cells in that\r\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\r\n * decrements each value in the tracking array (indicating that the column is one cell closer to\r\n * being free).\r\n *\r\n * @docs-private\r\n */\r\nexport class TileCoordinator {\r\n  /** Tracking array (see class description). */\r\n  tracker: number[];\r\n\r\n  /** Index at which the search for the next gap will start. */\r\n  columnIndex: number = 0;\r\n\r\n  /** The current row index. */\r\n  rowIndex: number = 0;\r\n\r\n  /** Gets the total number of rows occupied by tiles */\r\n  get rowCount(): number { return this.rowIndex + 1; }\r\n\r\n  /**\r\n   * Gets the total span of rows occupied by tiles.\r\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\r\n   */\r\n  get rowspan() {\r\n    const lastRowMax = Math.max(...this.tracker);\r\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\r\n    // add the difference to the rowcount\r\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\r\n  }\r\n\r\n  /** The computed (row, col) position of each tile (the output). */\r\n  positions: TilePosition[];\r\n\r\n  /**\r\n   * Updates the tile positions.\r\n   * @param numColumns Amount of columns in the grid.\r\n   */\r\n  update(numColumns: number, tiles: MatGridTile[]) {\r\n    this.columnIndex = 0;\r\n    this.rowIndex = 0;\r\n\r\n    this.tracker = new Array(numColumns);\r\n    this.tracker.fill(0, 0, this.tracker.length);\r\n    this.positions = tiles.map(tile => this._trackTile(tile));\r\n  }\r\n\r\n  /** Calculates the row and col position of a tile. */\r\n  private _trackTile(tile: MatGridTile): TilePosition {\r\n    // Find a gap large enough for this tile.\r\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\r\n\r\n    // Place tile in the resulting gap.\r\n    this._markTilePosition(gapStartIndex, tile);\r\n\r\n    // The next time we look for a gap, the search will start at columnIndex, which should be\r\n    // immediately after the tile that has just been placed.\r\n    this.columnIndex = gapStartIndex + tile.colspan;\r\n\r\n    return new TilePosition(this.rowIndex, gapStartIndex);\r\n  }\r\n\r\n  /** Finds the next available space large enough to fit the tile. */\r\n  private _findMatchingGap(tileCols: number): number {\r\n    if (tileCols > this.tracker.length) {\r\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\r\n                      `grid with cols=\"${this.tracker.length}\".`);\r\n    }\r\n\r\n    // Start index is inclusive, end index is exclusive.\r\n    let gapStartIndex = -1;\r\n    let gapEndIndex = -1;\r\n\r\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\r\n    do {\r\n      // If we've reached the end of the row, go to the next row.\r\n      if (this.columnIndex + tileCols > this.tracker.length) {\r\n        this._nextRow();\r\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n        continue;\r\n      }\r\n\r\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n\r\n      // If there are no more empty spaces in this row at all, move on to the next row.\r\n      if (gapStartIndex == -1) {\r\n        this._nextRow();\r\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n        continue;\r\n      }\r\n\r\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n\r\n      // If a gap large enough isn't found, we want to start looking immediately after the current\r\n      // gap on the next iteration.\r\n      this.columnIndex = gapStartIndex + 1;\r\n\r\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\r\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\r\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\r\n\r\n    // If we still didn't manage to find a gap, ensure that the index is\r\n    // at least zero so the tile doesn't get pulled out of the grid.\r\n    return Math.max(gapStartIndex, 0);\r\n  }\r\n\r\n  /** Move \"down\" to the next row. */\r\n  private _nextRow(): void {\r\n    this.columnIndex = 0;\r\n    this.rowIndex++;\r\n\r\n    // Decrement all spaces by one to reflect moving down one row.\r\n    for (let i = 0; i < this.tracker.length; i++) {\r\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n   * The gap ends when a non-zero value is found.\r\n   */\r\n  private _findGapEndIndex(gapStartIndex: number): number {\r\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\r\n      if (this.tracker[i] != 0) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // The gap ends with the end of the row.\r\n    return this.tracker.length;\r\n  }\r\n\r\n  /** Update the tile tracker to account for the given tile in the given space. */\r\n  private _markTilePosition(start: number, tile: MatGridTile): void {\r\n    for (let i = 0; i < tile.colspan; i++) {\r\n      this.tracker[start + i] = tile.rowspan;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Simple data structure for tile position (row, col).\r\n * @docs-private\r\n */\r\nexport class TilePosition {\r\n  constructor(public row: number, public col: number) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {MatGridList} from './grid-list';\r\nimport {MatGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\n\r\n/**\r\n * RegExp that can be used to check whether a value will\r\n * be allowed inside a CSS `calc()` expression.\r\n */\r\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\r\n\r\n/**\r\n * Sets the style properties for an individual tile, given the position calculated by the\r\n * Tile Coordinator.\r\n * @docs-private\r\n */\r\nexport abstract class TileStyler {\r\n  _gutterSize: string;\r\n  _rows: number = 0;\r\n  _rowspan: number = 0;\r\n  _cols: number;\r\n  _direction: string;\r\n\r\n  /**\r\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\r\n   * because these properties haven't been calculated by that point.\r\n   *\r\n   * @param gutterSize Size of the grid's gutter.\r\n   * @param tracker Instance of the TileCoordinator.\r\n   * @param cols Amount of columns in the grid.\r\n   * @param direction Layout direction of the grid.\r\n   */\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\r\n    this._gutterSize = normalizeUnits(gutterSize);\r\n    this._rows = tracker.rowCount;\r\n    this._rowspan = tracker.rowspan;\r\n    this._cols = cols;\r\n    this._direction = direction;\r\n  }\r\n\r\n  /**\r\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n   * Used as a basis for other calculations.\r\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n   */\r\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\r\n    // Take the base size percent (as would be if evenly dividing the size between cells),\r\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\r\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\r\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\r\n    // edge evenly among the cells).\r\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n   * @param offset Number of tiles that have already been rendered in the row/column.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @return Position of the tile as a CSS calc() expression.\r\n   */\r\n  getTilePosition(baseSize: string, offset: number): string {\r\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\r\n    // row/column (offset).\r\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @param span The tile's rowspan or colspan.\r\n   * @return Size of the tile as a CSS calc() expression.\r\n   */\r\n  getTileSize(baseSize: string, span: number): string {\r\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the style properties to be applied to a tile for the given row and column index.\r\n   * @param tile Tile to which to apply the styling.\r\n   * @param rowIndex Index of the tile's row.\r\n   * @param colIndex Index of the tile's column.\r\n   */\r\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\r\n    // Percent of the available horizontal space that one column takes up.\r\n    let percentWidthPerTile = 100 / this._cols;\r\n\r\n    // Fraction of the vertical gutter size that each column takes up.\r\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\r\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\r\n\r\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n  }\r\n\r\n  /** Sets the horizontal placement of the tile in the list. */\r\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\r\n               gutterWidth: number) {\r\n    // Base horizontal size of a column.\r\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\r\n\r\n    // The width and horizontal position of each tile is always calculated the same way, but the\r\n    // height and vertical position depends on the rowMode.\r\n    let side = this._direction === 'rtl' ? 'right' : 'left';\r\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\r\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by gutters across one axis of a list.\r\n   */\r\n  getGutterSpan(): string {\r\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by tiles across one axis of a list.\r\n   * @param tileHeight Height of the tile.\r\n   */\r\n  getTileSpan(tileHeight: string): string {\r\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\r\n  }\r\n\r\n  /**\r\n   * Sets the vertical placement of the tile in the list.\r\n   * This method will be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\r\n                        gutterWidth: number): void;\r\n\r\n  /**\r\n   * Calculates the computed height and returns the correct style property to set.\r\n   * This method can be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  getComputedHeight(): [string, string] | null { return null; }\r\n\r\n  /**\r\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\r\n   * @param list Grid list that the styler was attached to.\r\n   * @docs-private\r\n   */\r\n  abstract reset(list: MatGridList): void;\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a fixed row height.\r\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\r\n * @docs-private\r\n */\r\nexport class FixedTileStyler extends TileStyler {\r\n\r\n  constructor(public fixedRowHeight: string) { super(); }\r\n\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\r\n    super.init(gutterSize, tracker, cols, direction);\r\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\r\n\r\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\r\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\r\n    }\r\n  }\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\r\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._setListStyle(['height', null]);\r\n\r\n    if (list._tiles) {\r\n      list._tiles.forEach(tile => {\r\n        tile._setStyle('top', null);\r\n        tile._setStyle('height', null);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a width:height ratio\r\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\r\n * @docs-private\r\n */\r\nexport class RatioTileStyler extends TileStyler {\r\n\r\n  /** Ratio width:height given by user to determine row height. */\r\n  rowHeightRatio: number;\r\n  baseTileHeight: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this._parseRatio(value);\r\n  }\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\r\n               gutterWidth: number): void {\r\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\r\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\r\n\r\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\r\n    // a percentage-based value for these properties is applied versus the *width* of the\r\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\r\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\r\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._setListStyle(['paddingBottom', null]);\r\n\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('marginTop', null);\r\n      tile._setStyle('paddingTop', null);\r\n    });\r\n  }\r\n\r\n  private _parseRatio(value: string): void {\r\n    const ratioParts = value.split(':');\r\n\r\n    if (ratioParts.length !== 2) {\r\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\r\n    }\r\n\r\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\r\n * In other words, the row height will reflect the total height of the container divided\r\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\r\n *\r\n * @docs-private\r\n */\r\nexport class FitTileStyler extends TileStyler {\r\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\r\n    // Percent of the available vertical space that one row takes up.\r\n    let percentHeightPerTile = 100 / this._rowspan;\r\n\r\n    // Fraction of the horizontal gutter size that each column takes up.\r\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\r\n\r\n    // Base vertical size of a column.\r\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\r\n\r\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    if (list._tiles) {\r\n      list._tiles.forEach(tile => {\r\n        tile._setStyle('top', null);\r\n        tile._setStyle('height', null);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** Wraps a CSS string in a calc function */\r\nfunction calc(exp: string): string {\r\n  return `calc(${exp})`;\r\n}\r\n\r\n\r\n/** Appends pixels to a CSS string if no units are given. */\r\nfunction normalizeUnits(value: string): string {\r\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  AfterContentChecked,\r\n  OnInit,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  Optional,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MatGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\r\n\r\n\r\n// TODO(kara): Conditional (responsive) column count / row size.\r\n// TODO(kara): Re-layout on window resize / media change (debounced).\r\n// TODO(kara): gridTileHeader and gridTileFooter.\r\n\r\nconst MAT_FIT_MODE = 'fit';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-list',\r\n  exportAs: 'matGridList',\r\n  templateUrl: 'grid-list.html',\r\n  styleUrls: ['grid-list.css'],\r\n  host: {\r\n    'class': 'mat-grid-list',\r\n  },\r\n  providers: [{\r\n    provide: MAT_GRID_LIST,\r\n    useExisting: MatGridList\r\n  }],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\r\n  /** Number of columns being rendered. */\r\n  private _cols: number;\r\n\r\n  /** Used for determiningthe position of each tile in the grid. */\r\n  private _tileCoordinator: TileCoordinator;\r\n\r\n  /**\r\n   * Row height value passed in by user. This can be one of three types:\r\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\r\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\r\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\r\n   */\r\n  private _rowHeight: string;\r\n\r\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\r\n  private _gutter: string = '1px';\r\n\r\n  /** Sets position and size styles for a tile */\r\n  private _tileStyler: TileStyler;\r\n\r\n  /** Query list of tiles that are being rendered. */\r\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\r\n\r\n  constructor(private _element: ElementRef<HTMLElement>,\r\n              @Optional() private _dir: Directionality) {}\r\n\r\n  /** Amount of columns in the grid list. */\r\n  @Input()\r\n  get cols(): number { return this._cols; }\r\n  set cols(value: number) {\r\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\r\n  }\r\n\r\n  /** Size of the grid list's gutter in pixels. */\r\n  @Input()\r\n  get gutterSize(): string { return this._gutter; }\r\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\r\n\r\n  /** Set internal representation of row height from the user-provided value. */\r\n  @Input()\r\n  get rowHeight(): string | number { return this._rowHeight; }\r\n  set rowHeight(value: string | number) {\r\n    const newValue = `${value == null ? '' : value}`;\r\n\r\n    if (newValue !== this._rowHeight) {\r\n      this._rowHeight = newValue;\r\n      this._setTileStyler(this._rowHeight);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._checkCols();\r\n    this._checkRowHeight();\r\n  }\r\n\r\n  /**\r\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n   * to run it frequently.\r\n   */\r\n  ngAfterContentChecked() {\r\n    this._layoutTiles();\r\n  }\r\n\r\n  /** Throw a friendly error if cols property is missing */\r\n  private _checkCols() {\r\n    if (!this.cols) {\r\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\r\n                  `Example: <mat-grid-list cols=\"3\">`);\r\n    }\r\n  }\r\n\r\n  /** Default to equal width:height if rowHeight property is missing */\r\n  private _checkRowHeight(): void {\r\n    if (!this._rowHeight) {\r\n      this._setTileStyler('1:1');\r\n    }\r\n  }\r\n\r\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\r\n  private _setTileStyler(rowHeight: string): void {\r\n    if (this._tileStyler) {\r\n      this._tileStyler.reset(this);\r\n    }\r\n\r\n    if (rowHeight === MAT_FIT_MODE) {\r\n      this._tileStyler = new FitTileStyler();\r\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\r\n      this._tileStyler = new RatioTileStyler(rowHeight);\r\n    } else {\r\n      this._tileStyler = new FixedTileStyler(rowHeight);\r\n    }\r\n  }\r\n\r\n  /** Computes and applies the size and position for all children grid tiles. */\r\n  private _layoutTiles(): void {\r\n    if (!this._tileCoordinator) {\r\n      this._tileCoordinator = new TileCoordinator();\r\n    }\r\n\r\n\r\n    const tracker = this._tileCoordinator;\r\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\r\n    const direction = this._dir ? this._dir.value : 'ltr';\r\n\r\n    this._tileCoordinator.update(this.cols, tiles);\r\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\r\n\r\n    tiles.forEach((tile, index) => {\r\n      const pos = tracker.positions[index];\r\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\r\n    });\r\n\r\n    this._setListStyle(this._tileStyler.getComputedHeight());\r\n  }\r\n\r\n  /** Sets style on the main grid-list element, given the style name and value. */\r\n  _setListStyle(style: [string, string | null] | null): void {\r\n    if (style) {\r\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\r\nimport {\r\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\r\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\r\n} from './grid-tile';\r\nimport {MatGridList} from './grid-list';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatLineModule, MatCommonModule],\r\n  exports: [\r\n    MatGridList,\r\n    MatGridTile,\r\n    MatGridTileText,\r\n    MatLineModule,\r\n    MatCommonModule,\r\n    MatGridTileHeaderCssMatStyler,\r\n    MatGridTileFooterCssMatStyler,\r\n    MatGridAvatarCssMatStyler\r\n  ],\r\n  declarations: [\r\n    MatGridList,\r\n    MatGridTile,\r\n    MatGridTileText,\r\n    MatGridTileHeaderCssMatStyler,\r\n    MatGridTileFooterCssMatStyler,\r\n    MatGridAvatarCssMatStyler\r\n  ],\r\n})\r\nexport class MatGridListModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Optional,\r\n  SecurityContext,\r\n  SkipSelf,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\r\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\r\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\r\nexport function getMatIconNameNotFoundError(iconName: string): Error {\r\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/common/http.\r\n * @docs-private\r\n */\r\nexport function getMatIconNoHttpProviderError(): Error {\r\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\r\n               'Please include the HttpClientModule from @angular/common/http in your ' +\r\n               'app imports.');\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\r\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\r\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\r\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\r\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\r\n}\r\n\r\n\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\r\nclass SvgIconConfig {\r\n  url: SafeResourceUrl | null;\r\n  svgElement: SVGElement | null;\r\n\r\n  constructor(url: SafeResourceUrl);\r\n  constructor(svgElement: SVGElement);\r\n  constructor(data: SafeResourceUrl | SVGElement) {\r\n    // Note that we can't use `instanceof SVGElement` here,\r\n    // because it'll break during server-side rendering.\r\n    if (!!(data as any).nodeName) {\r\n      this.svgElement = data as SVGElement;\r\n    } else {\r\n      this.url = data as SafeResourceUrl;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatIconRegistry implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /**\r\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n   */\r\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\r\n\r\n  /**\r\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n   * Multiple icon sets can be registered under the same namespace.\r\n   */\r\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\r\n\r\n  /** Cache for icons loaded by direct URLs. */\r\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\r\n\r\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\r\n\r\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n  private _fontCssClassesByAlias = new Map<string, string>();\r\n\r\n  /**\r\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\r\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n   */\r\n  private _defaultFontSetClass = 'material-icons';\r\n\r\n  constructor(\r\n    @Optional() private _httpClient: HttpClient,\r\n    private _sanitizer: DomSanitizer,\r\n    @Optional() @Inject(DOCUMENT) document: any) {\r\n      this._document = document;\r\n    }\r\n\r\n  /**\r\n   * Registers an icon by URL in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\r\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon by URL in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\r\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMatIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\r\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the default namespace.\r\n   * @param url\r\n   */\r\n  addSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the default namespace.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteral(literal: SafeHtml): this {\r\n    return this.addSvgIconSetLiteralInNamespace('', literal);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param url\r\n   */\r\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param literal SVG source of the icon set.\r\n   */\r\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\r\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n\r\n    if (!sanitizedLiteral) {\r\n      throw getMatIconFailedToSanitizeLiteralError(literal);\r\n    }\r\n\r\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\r\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\r\n  }\r\n\r\n  /**\r\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n   * component with the alias as the fontSet input will cause the class name to be applied\r\n   * to the `<mat-icon>` element.\r\n   *\r\n   * @param alias Alias for the font.\r\n   * @param className Class name override to be used instead of the alias.\r\n   */\r\n  registerFontClassAlias(alias: string, className: string = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name associated with the alias by a previous call to\r\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n   */\r\n  classNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\r\n\r\n  /**\r\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   *\r\n   * @param className\r\n   */\r\n  setDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\r\n  getDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n   * it will not contain any modifications made to elements previously returned).\r\n   *\r\n   * @param safeUrl URL from which to fetch the SVG icon.\r\n   */\r\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    const cachedIcon = this._cachedIconsByUrl.get(url);\r\n\r\n    if (cachedIcon) {\r\n      return observableOf(cloneSvg(cachedIcon));\r\n    }\r\n\r\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\r\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\r\n      map(svg => cloneSvg(svg)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n   * if not, the Observable will throw an error.\r\n   *\r\n   * @param name Name of the icon to be retrieved.\r\n   * @param namespace Namespace in which to look for the icon.\r\n   */\r\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const key = iconKey(namespace, name);\r\n    const config = this._svgIconConfigs.get(key);\r\n\r\n    if (config) {\r\n      return this._getSvgFromConfig(config);\r\n    }\r\n\r\n    // See if we have any icon sets registered for the namespace.\r\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n\r\n    return observableThrow(getMatIconNameNotFoundError(key));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n   this._svgIconConfigs.clear();\r\n   this._iconSetConfigs.clear();\r\n   this._cachedIconsByUrl.clear();\r\n  }\r\n\r\n  /**\r\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n   */\r\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return observableOf(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return this._loadSvgIconFromConfig(config).pipe(\r\n        tap(svg => config.svgElement = svg),\r\n        map(svg => cloneSvg(svg)),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n   * First searches the available cached icons for a nested element with a matching name, and\r\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n   * that have not been cached, and searches again after all fetches are completed.\r\n   * The returned Observable produces the SVG element if possible, and throws\r\n   * an error if no icon with the specified name can be found.\r\n   */\r\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return observableOf(namedIcon);\r\n    }\r\n\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\r\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n      .map(iconSetConfig => {\r\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\r\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\r\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n            // Swallow errors fetching individual URLs so the\r\n            // combined Observable won't necessarily fail.\r\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\r\n            return observableOf(null);\r\n          })\r\n        );\r\n      });\r\n\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\r\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n      if (!foundIcon) {\r\n        throw getMatIconNameNotFoundError(name);\r\n      }\r\n\r\n      return foundIcon;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement | null {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return this._fetchUrl(config.url)\r\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    // If the SVG for this icon set has already been parsed, do nothing.\r\n    if (config.svgElement) {\r\n      return observableOf(config.svgElement);\r\n    }\r\n\r\n    return this._fetchUrl(config.url).pipe(map(svgText => {\r\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\r\n      // only needs to occur if the cache is yet unset.\r\n      if (!config.svgElement) {\r\n        config.svgElement = this._svgElementFromString(svgText);\r\n      }\r\n\r\n      return config.svgElement;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string, and adds default attributes.\r\n   */\r\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\r\n    // Use the `id=\"iconName\"` syntax in order to escape special\r\n    // characters in the ID (versus using the #iconName syntax).\r\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\r\n\r\n    if (!iconSource) {\r\n      return null;\r\n    }\r\n\r\n    // Clone the element and remove the ID to prevent multiple elements from being added\r\n    // to the page with the same ID.\r\n    const iconElement = iconSource.cloneNode(true) as Element;\r\n    iconElement.removeAttribute('id');\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes(iconElement as SVGElement);\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconElement);\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\r\n  private _svgElementFromString(str: string): SVGElement {\r\n    const div = this._document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n\r\n    if (!svg) {\r\n      throw Error('<svg> tag not found');\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Converts an element into an SVG node by cloning all of its children.\r\n   */\r\n  private _toSvgElement(element: Element): SVGElement {\r\n    let svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Sets the default attributes for an SVG element to be used as an icon.\r\n   */\r\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable which produces the string contents of the given URL. Results may be\r\n   * cached, so future calls with the same URL may not cause another HTTP request.\r\n   */\r\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\r\n    if (!this._httpClient) {\r\n      throw getMatIconNoHttpProviderError();\r\n    }\r\n\r\n    if (safeUrl == null) {\r\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\r\n    }\r\n\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n    }\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\r\n\r\n    if (inProgressFetch) {\r\n      return inProgressFetch;\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\r\n      finalize(() => this._inProgressUrlFetches.delete(url)),\r\n      share(),\r\n    );\r\n\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon config by name in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param iconName Name under which to register the config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\r\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set config in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param config Config to be registered.\r\n   */\r\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\r\n    const configNamespace = this._iconSetConfigs.get(namespace);\r\n\r\n    if (configNamespace) {\r\n      configNamespace.push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n  parentRegistry: MatIconRegistry,\r\n  httpClient: HttpClient,\r\n  sanitizer: DomSanitizer,\r\n  document?: any) {\r\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\r\n}\r\n\r\n/** @docs-private */\r\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MatIconRegistry,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), MatIconRegistry],\r\n    [new Optional(), HttpClient],\r\n    DomSanitizer,\r\n    [new Optional(), DOCUMENT as InjectionToken<any>],\r\n  ],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Clones an SVGElement while preserving type information. */\r\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return svg.cloneNode(true) as SVGElement;\r\n}\r\n\r\n/** Returns the cache key to use for an icon namespace and name. */\r\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {take} from 'rxjs/operators';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  InjectionToken,\r\n  inject,\r\n  Inject,\r\n  OnDestroy,\r\n  AfterViewChecked,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatIconRegistry} from './icon-registry';\r\n\r\n\r\n// Boilerplate for applying mixins to MatIcon.\r\n/** @docs-private */\r\nclass MatIconBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\r\n\r\n/**\r\n * Injection token used to provide the current location to `MatIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\r\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\r\n  providedIn: 'root',\r\n  factory: MAT_ICON_LOCATION_FACTORY\r\n});\r\n\r\n/**\r\n * Stubbed out location for `MatIcon`.\r\n * @docs-private\r\n */\r\nexport interface MatIconLocation {\r\n  getPathname: () => string;\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\r\n  const _document = inject(DOCUMENT);\r\n  const _location = _document ? _document.location : null;\r\n\r\n  return {\r\n    // Note that this needs to be a function, rather than a property, because Angular\r\n    // will only resolve it once, but we want the current path on each call.\r\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\r\n  };\r\n}\r\n\r\n\r\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\r\nconst funcIriAttributes = [\r\n  'clip-path',\r\n  'color-profile',\r\n  'src',\r\n  'cursor',\r\n  'fill',\r\n  'filter',\r\n  'marker',\r\n  'marker-start',\r\n  'marker-mid',\r\n  'marker-end',\r\n  'mask',\r\n  'stroke'\r\n];\r\n\r\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\r\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\r\n\r\n/** Regex that can be used to extract the id out of a FuncIRI. */\r\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\r\n\r\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\r\n *   component. By default the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  template: '<ng-content></ng-content>',\r\n  selector: 'mat-icon',\r\n  exportAs: 'matIcon',\r\n  styleUrls: ['icon.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'role': 'img',\r\n    'class': 'mat-icon notranslate',\r\n    '[class.mat-icon-inline]': 'inline',\r\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\r\n  CanColor, OnDestroy {\r\n\r\n  /**\r\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n   * the element the icon is contained in.\r\n   */\r\n  @Input()\r\n  get inline(): boolean {\r\n    return this._inline;\r\n  }\r\n  set inline(inline: boolean) {\r\n    this._inline = coerceBooleanProperty(inline);\r\n  }\r\n  private _inline: boolean = false;\r\n\r\n  /** Name of the icon in the SVG icon set. */\r\n  @Input() svgIcon: string;\r\n\r\n  /** Font set that the icon is a part of. */\r\n  @Input()\r\n  get fontSet(): string { return this._fontSet; }\r\n  set fontSet(value: string) {\r\n    this._fontSet = this._cleanupFontValue(value);\r\n  }\r\n  private _fontSet: string;\r\n\r\n  /** Name of an icon within a font set. */\r\n  @Input()\r\n  get fontIcon(): string { return this._fontIcon; }\r\n  set fontIcon(value: string) {\r\n    this._fontIcon = this._cleanupFontValue(value);\r\n  }\r\n  private _fontIcon: string;\r\n\r\n  private _previousFontSetClass: string;\r\n  private _previousFontIconClass: string;\r\n\r\n  /** Keeps track of the current page path. */\r\n  private _previousPath?: string;\r\n\r\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\r\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\r\n\r\n  constructor(\r\n      elementRef: ElementRef<HTMLElement>,\r\n      private _iconRegistry: MatIconRegistry,\r\n      @Attribute('aria-hidden') ariaHidden: string,\r\n      /**\r\n       * @deprecated `location` parameter to be made required.\r\n       * @breaking-change 8.0.0\r\n       */\r\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\r\n    super(elementRef);\r\n\r\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\r\n    // the right thing to do for the majority of icon use-cases.\r\n    if (!ariaHidden) {\r\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Splits an svgIcon binding value into its icon set and icon name components.\r\n   * Returns a 2-element array of [(icon set), (icon name)].\r\n   * The separator for the two fields is ':'. If there is no separator, an empty\r\n   * string is returned for the icon set and the entire value is returned for\r\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n   * Throws an error if the name contains two or more ':' separators.\r\n   * Examples:\r\n   *   `'social:cake' -> ['social', 'cake']\r\n   *   'penguin' -> ['', 'penguin']\r\n   *   null -> ['', '']\r\n   *   'a:b:c' -> (throws Error)`\r\n   */\r\n  private _splitIconName(iconName: string): [string, string] {\r\n    if (!iconName) {\r\n      return ['', ''];\r\n    }\r\n    const parts = iconName.split(':');\r\n    switch (parts.length) {\r\n      case 1: return ['', parts[0]]; // Use default namespace.\r\n      case 2: return <[string, string]>parts;\r\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n    const svgIconChanges = changes['svgIcon'];\r\n\r\n    if (svgIconChanges) {\r\n      if (this.svgIcon) {\r\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\r\n\r\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\r\n          svg => this._setSvgElement(svg),\r\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\r\n        );\r\n      } else if (svgIconChanges.previousValue) {\r\n        this._clearSvgElement();\r\n      }\r\n    }\r\n\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    const cachedElements = this._elementsWithExternalReferences;\r\n\r\n    if (cachedElements && this._location && cachedElements.size) {\r\n      const newPath = this._location.getPathname();\r\n\r\n      // We need to check whether the URL has changed on each change detection since\r\n      // the browser doesn't have an API that will let us react on link clicks and\r\n      // we can't depend on the Angular router. The references need to be updated,\r\n      // because while most browsers don't care whether the URL is correct after\r\n      // the first render, Safari will break if the user navigates to a different\r\n      // page and the SVG isn't re-rendered.\r\n      if (newPath !== this._previousPath) {\r\n        this._previousPath = newPath;\r\n        this._prependPathToReferences(newPath);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._elementsWithExternalReferences) {\r\n      this._elementsWithExternalReferences.clear();\r\n    }\r\n  }\r\n\r\n  private _usingFontIcon(): boolean {\r\n    return !this.svgIcon;\r\n  }\r\n\r\n  private _setSvgElement(svg: SVGElement) {\r\n    this._clearSvgElement();\r\n\r\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\r\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\r\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\r\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\r\n\r\n    for (let i = 0; i < styleTags.length; i++) {\r\n      styleTags[i].textContent += ' ';\r\n    }\r\n\r\n    // Note: we do this fix here, rather than the icon registry, because the\r\n    // references have to point to the URL at the time that the icon was created.\r\n    if (this._location) {\r\n      const path = this._location.getPathname();\r\n      this._previousPath = path;\r\n      this._cacheChildrenWithExternalReferences(svg);\r\n      this._prependPathToReferences(path);\r\n    }\r\n\r\n    this._elementRef.nativeElement.appendChild(svg);\r\n  }\r\n\r\n  private _clearSvgElement() {\r\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\r\n    let childCount = layoutElement.childNodes.length;\r\n\r\n    if (this._elementsWithExternalReferences) {\r\n      this._elementsWithExternalReferences.clear();\r\n    }\r\n\r\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\r\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\r\n    while (childCount--) {\r\n      const child = layoutElement.childNodes[childCount];\r\n\r\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\r\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\r\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\r\n        layoutElement.removeChild(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _updateFontIconClasses() {\r\n    if (!this._usingFontIcon()) {\r\n      return;\r\n    }\r\n\r\n    const elem: HTMLElement = this._elementRef.nativeElement;\r\n    const fontSetClass = this.fontSet ?\r\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\r\n        this._iconRegistry.getDefaultFontSetClass();\r\n\r\n    if (fontSetClass != this._previousFontSetClass) {\r\n      if (this._previousFontSetClass) {\r\n        elem.classList.remove(this._previousFontSetClass);\r\n      }\r\n      if (fontSetClass) {\r\n        elem.classList.add(fontSetClass);\r\n      }\r\n      this._previousFontSetClass = fontSetClass;\r\n    }\r\n\r\n    if (this.fontIcon != this._previousFontIconClass) {\r\n      if (this._previousFontIconClass) {\r\n        elem.classList.remove(this._previousFontIconClass);\r\n      }\r\n      if (this.fontIcon) {\r\n        elem.classList.add(this.fontIcon);\r\n      }\r\n      this._previousFontIconClass = this.fontIcon;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleans up a value to be used as a fontIcon or fontSet.\r\n   * Since the value ends up being assigned as a CSS class, we\r\n   * have to trim the value and omit space-separated values.\r\n   */\r\n  private _cleanupFontValue(value: string) {\r\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\r\n  }\r\n\r\n  /**\r\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n   * reference. This is required because WebKit browsers require references to be prefixed with\r\n   * the current path, if the page has a `base` tag.\r\n   */\r\n  private _prependPathToReferences(path: string) {\r\n    const elements = this._elementsWithExternalReferences;\r\n\r\n    if (elements) {\r\n      elements.forEach((attrs, element) => {\r\n        attrs.forEach(attr => {\r\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Caches the children of an SVG element that have `url()`\r\n   * references that we need to prefix with the current path.\r\n   */\r\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\r\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\r\n    const elements = this._elementsWithExternalReferences =\r\n        this._elementsWithExternalReferences || new Map();\r\n\r\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\r\n      funcIriAttributes.forEach(attr => {\r\n        const elementWithReference = elementsWithFuncIri[i];\r\n        const value = elementWithReference.getAttribute(attr);\r\n        const match = value ? value.match(funcIriPattern) : null;\r\n\r\n        if (match) {\r\n          let attributes = elements.get(elementWithReference);\r\n\r\n          if (!attributes) {\r\n            attributes = [];\r\n            elements.set(elementWithReference, attributes);\r\n          }\r\n\r\n          attributes!.push({name: attr, value: match[1]});\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatIcon} from './icon';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [MatIcon, MatCommonModule],\r\n  declarations: [MatIcon],\r\n})\r\nexport class MatIconModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {Subject, Subscription} from 'rxjs';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\nimport {MatCalendarCellCssClasses} from './calendar-body';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\r\n\r\n/** Default header for MatCalendar */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-calendar-header',\r\n  templateUrl: 'calendar-header.html',\r\n  exportAs: 'matCalendarHeader',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendarHeader<D> {\r\n  constructor(private _intl: MatDatepickerIntl,\r\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** The label for the current calendar view. */\r\n  get periodButtonText(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n              .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n    const firstYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\r\n    const lastYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\r\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\r\n  }\r\n\r\n  get periodButtonLabel(): string {\r\n    return this.calendar.currentView == 'month' ?\r\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the previous button. */\r\n  get prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** The label for the next button. */\r\n  get nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  currentPeriodClicked(): void {\r\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  previousClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n            this._dateAdapter.addCalendarYears(\r\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\r\n            );\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  nextClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n            this._dateAdapter.addCalendarYears(\r\n                this.calendar.activeDate,\r\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\r\n            );\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  previousEnabled(): boolean {\r\n    if (!this.calendar.minDate) {\r\n      return true;\r\n    }\r\n    return !this.calendar.minDate ||\r\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  nextEnabled(): boolean {\r\n    return !this.calendar.maxDate ||\r\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\r\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\r\n  }\r\n}\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.css'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'matCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n  /** An input indicating the type of the header component, if set. */\r\n  @Input() headerComponent: ComponentType<any>;\r\n\r\n  /** A portal containing the header component type for this calendar. */\r\n  _calendarHeaderPortal: Portal<any>;\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the year chosen in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the month chosen in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D { return this._clampedActiveDate; }\r\n  set activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this.stateChanges.next();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView { return this._currentView; }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  constructor(_intl: MatDatepickerIntl,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      _changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    // Assign to the private property since we don't want to move focus on init.\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change =\r\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n\r\n      if (view) {\r\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n        this._changeDetectorRef.detectChanges();\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  /** Updates today's date after an update of the active date */\r\n  updateTodaysDate() {\r\n    let view = this.currentView == 'month' ? this.monthView :\r\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\r\n\r\n    view.ngAfterContentInit();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D): void {\r\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** Handles year selection in the multiyear view. */\r\n  _yearSelectedInMultiYearView(normalizedYear: D) {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelectedInYearView(normalizedMonth: D) {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles year/month selection in the multi-year/year views. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this.activeDate = date;\r\n    this.currentView = view;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.monthView || this.yearView || this.multiYearView;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material datepicker.\r\n * @docs-private\r\n */\r\nexport const matDatepickerAnimations: {\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInCalendar: AnimationTriggerMetadata;\r\n} = {\r\n  /** Transforms the height of the datepicker's calendar. */\r\n  transformPanel: trigger('transformPanel', [\r\n    state('void', style({\r\n      opacity: 0,\r\n      transform: 'scale(1, 0.8)'\r\n    })),\r\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\r\n      opacity: 1,\r\n      transform: 'scale(1, 1)'\r\n    }))),\r\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n  /** Fades in the content of the calendar. */\r\n  fadeInCalendar: trigger('fadeInCalendar', [\r\n    state('void', style({opacity: 0})),\r\n    state('enter', style({opacity: 1})),\r\n\r\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\r\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\r\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanColorCtor,\r\n  DateAdapter,\r\n  mixinColor,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {merge, Subject, Subscription} from 'rxjs';\r\nimport {filter, take} from 'rxjs/operators';\r\nimport {MatCalendar} from './calendar';\r\nimport {matDatepickerAnimations} from './datepicker-animations';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\nimport {MatCalendarCellCssClasses} from './calendar-body';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nclass MatDatepickerContentBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\r\n    mixinColor(MatDatepickerContentBase);\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  animations: [\r\n    matDatepickerAnimations.transformPanel,\r\n    matDatepickerAnimations.fadeInCalendar,\r\n  ],\r\n  exportAs: 'matDatepickerContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color'],\r\n})\r\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\r\n  implements AfterViewInit, CanColor {\r\n\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    super(elementRef);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n  }\r\n}\r\n\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker',\r\n  template: '',\r\n  exportAs: 'matDatepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** An input indicating the type of the custom header component for the calendar, if set. */\r\n  @Input() calendarHeaderComponent: ComponentType<any>;\r\n\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color ||\r\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput ?\r\n        this._datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /**\r\n   * Emits selected year in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits selected month in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: MatDatepickerInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  constructor(private _dialog: MatDialog,\r\n              private _overlay: Overlay,\r\n              private _ngZone: NgZone,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(date: D): void {\r\n    let oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\r\n      this._selectedChanged.next(date);\r\n    }\r\n  }\r\n\r\n  /** Emits the selected year in multiyear view */\r\n  _selectYear(normalizedYear: D): void {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Emits selected month in year view */\r\n  _selectMonth(normalizedMonth: D): void {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: MatDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\r\n    // open at a time, however since we reset the variables in async handlers some overlays\r\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\r\n    // by holding down the enter key).\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n    }\r\n\r\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n    this._setColor();\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\r\n                                                                          this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n      this._popupComponentRef.instance.datepicker = this;\r\n      this._setColor();\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n        return event.keyCode === ESCAPE ||\r\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(event => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      this.close();\r\n    });\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the calendar overlay. */\r\n  private _setColor(): void {\r\n    const color = this.color;\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = color;\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.componentInstance.color = color;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\r\nimport {Subscription} from 'rxjs';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    public target: MatDatepickerInput<D>,\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[matDatepicker]',\r\n  providers: [\r\n    MAT_DATEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATEPICKER_VALIDATORS,\r\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\r\n  ],\r\n  host: {\r\n    'aria-haspopup': 'dialog',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onBlur()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'matDatepickerInput',\r\n})\r\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this._datepicker = value;\r\n    this._datepicker._registerInput(this);\r\n    this._datepickerSubscription.unsubscribe();\r\n\r\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n      this.value = selected;\r\n      this._cvaOnChange(selected);\r\n      this._onTouched();\r\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n    });\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  /** Function that can be used to filter out dates within the datepicker. */\r\n  @Input()\r\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\r\n    this._dateFilter = value;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null { return this._value; }\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n    const oldDate = this.value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\r\n  private _value: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null { return this._min; }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null { return this._max; }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return !!this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n\r\n    // We need to null check the `blur` method, because it's undefined during SSR.\r\n    if (newValue && element.blur) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      element.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.min || !controlValue ||\r\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\r\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.max || !controlValue ||\r\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\r\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n        null : {'matDatepickerFilter': true};\r\n  }\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null =\r\n      Validators.compose(\r\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef<HTMLInputElement>,\r\n      @Optional() public _dateAdapter: DateAdapter<D>,\r\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n      @Optional() private _formField: MatFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  /** @docs-private */\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  /** @docs-private */\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this.getConnectedOverlayOrigin();\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: D): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n\r\n    if (!this._dateAdapter.sameDate(date, this._value)) {\r\n      this._value = date;\r\n      this._cvaOnChange(date);\r\n      this._valueChange.emit(date);\r\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n    } else {\r\n      this._validatorOnChange();\r\n    }\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /** Returns the palette used by the input's form field, if any. */\r\n  _getThemePalette(): ThemePalette {\r\n    return this._formField ? this._formField.color : undefined;\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: D | null) {\r\n    this._elementRef.nativeElement.value =\r\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {MatButton} from '@angular/material/button';\r\nimport {merge, of as observableOf, Subscription} from 'rxjs';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\n\r\n\r\n/** Can be used to override the icon of a `matDatepickerToggle`. */\r\n@Directive({\r\n  selector: '[matDatepickerToggleIcon]'\r\n})\r\nexport class MatDatepickerToggleIcon {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  styleUrls: ['datepicker-toggle.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\r\n    // consumer may have provided, while still being able to receive focus.\r\n    '[attr.tabindex]': '-1',\r\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\r\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\r\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\r\n    '(focus)': '_button.focus()',\r\n  },\r\n  exportAs: 'matDatepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input('for') datepicker: MatDatepicker<D>;\r\n\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    if (this._disabled === undefined && this.datepicker) {\r\n      return this.datepicker.disabled;\r\n    }\r\n\r\n    return !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Whether ripples on the toggle should be disabled. */\r\n  @Input() disableRipple: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\r\n\r\n  /** Underlying button element. */\r\n  @ViewChild('button', {static: false}) _button: MatButton;\r\n\r\n  constructor(\r\n    public _intl: MatDatepickerIntl,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Attribute('tabindex') defaultTabIndex: string) {\r\n\r\n    const parsedTabIndex = Number(defaultTabIndex);\r\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['datepicker']) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\r\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\r\n        this.datepicker._datepickerInput._disabledChange : observableOf();\r\n    const datepickerToggled = this.datepicker ?\r\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\r\n        observableOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerDisabled,\r\n      inputDisabled,\r\n      datepickerToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatCalendar, MatCalendarHeader} from './calendar';\r\nimport {MatCalendarBody} from './calendar-body';\r\nimport {\r\n  MatDatepicker,\r\n  MatDatepickerContent,\r\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './datepicker';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n    PortalModule,\r\n  ],\r\n  exports: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n    MatCalendarHeader,\r\n  ],\r\n  declarations: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n    MatCalendarHeader,\r\n  ],\r\n  providers: [\r\n    MatDatepickerIntl,\r\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    MatDatepickerContent,\r\n    MatCalendarHeader,\r\n  ]\r\n})\r\nexport class MatDatepickerModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-divider',\r\n  host: {\r\n    'role': 'separator',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-divider-vertical]': 'vertical',\r\n    '[class.mat-divider-horizontal]': '!vertical',\r\n    '[class.mat-divider-inset]': 'inset',\r\n    'class': 'mat-divider'\r\n  },\r\n  template: '',\r\n  styleUrls: ['divider.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDivider {\r\n  /** Whether the divider is vertically aligned. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical: boolean = false;\r\n\r\n  /** Whether the divider is an inset divider. */\r\n  @Input()\r\n  get inset(): boolean { return this._inset; }\r\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\r\n  private _inset: boolean = false;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatDivider} from './divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, CommonModule],\r\n  exports: [MatDivider, MatCommonModule],\r\n  declarations: [MatDivider],\r\n})\r\nexport class MatDividerModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\nimport {CdkAccordion} from '@angular/cdk/accordion';\r\n\r\n/** MatAccordion's display modes. */\r\nexport type MatAccordionDisplayMode = 'default' | 'flat';\r\n\r\n/** MatAccordion's toggle positions. */\r\nexport type MatAccordionTogglePosition = 'before' | 'after';\r\n\r\n/**\r\n * Base interface for a `MatAccordion`.\r\n * @docs-private\r\n */\r\nexport interface MatAccordionBase extends CdkAccordion {\r\n  /** Whether the expansion indicator should be hidden. */\r\n  hideToggle: boolean;\r\n\r\n  /** Display mode used for all expansion panels in the accordion. */\r\n  displayMode: MatAccordionDisplayMode;\r\n\r\n  /** The position of the expansion indicator. */\r\n  togglePosition: MatAccordionTogglePosition;\r\n\r\n  /** Handles keyboard events coming in from the panel headers. */\r\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\r\n\r\n  /** Handles focus events on the panel headers. */\r\n  _handleHeaderFocus: (header: any) => void;\r\n}\r\n\r\n\r\n/**\r\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\r\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\r\n */\r\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * Expansion panel content that will be rendered lazily\r\n * after the panel is opened for the first time.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matExpansionPanelContent]'\r\n})\r\nexport class MatExpansionPanelContent {\r\n  constructor(public _template: TemplateRef<any>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  EventEmitter,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  ViewChild,\r\n  InjectionToken,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {Subject} from 'rxjs';\r\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\r\nimport {matExpansionAnimations} from './expansion-animations';\r\nimport {MatExpansionPanelContent} from './expansion-panel-content';\r\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\r\n\r\n/** MatExpansionPanel's states. */\r\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\r\n\r\n/** Counter for generating unique element ids. */\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Object that can be used to override the default options\r\n * for all of the expansion panels in a module.\r\n */\r\nexport interface MatExpansionPanelDefaultOptions {\r\n  /** Height of the header while the panel is expanded. */\r\n  expandedHeight: string;\r\n\r\n  /** Height of the header while the panel is collapsed. */\r\n  collapsedHeight: string;\r\n\r\n  /** Whether the toggle indicator should be hidden. */\r\n  hideToggle: boolean;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the defalt\r\n * options for the expansion panel component.\r\n */\r\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\r\n\r\n/**\r\n * `<mat-expansion-panel>`\r\n *\r\n * This component can be used as a single element to show expandable content, or as one of\r\n * multiple children of an element with the MatAccordion directive attached.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  styleUrls: ['./expansion-panel.css'],\r\n  selector: 'mat-expansion-panel',\r\n  exportAs: 'matExpansionPanel',\r\n  templateUrl: './expansion-panel.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled', 'expanded'],\r\n  outputs: ['opened', 'closed', 'expandedChange'],\r\n  animations: [matExpansionAnimations.bodyExpansion],\r\n  providers: [\r\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\r\n    // to the same accordion.\r\n    {provide: MAT_ACCORDION, useValue: undefined},\r\n  ],\r\n  host: {\r\n    'class': 'mat-expansion-panel',\r\n    '[class.mat-expanded]': 'expanded',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\r\n  }\r\n})\r\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\r\n  OnDestroy {\r\n  private _document: Document;\r\n  private _hideToggle = false;\r\n  private _togglePosition: MatAccordionTogglePosition;\r\n\r\n  /** Whether the toggle indicator should be hidden. */\r\n  @Input()\r\n  get hideToggle(): boolean {\r\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\r\n  }\r\n  set hideToggle(value: boolean) {\r\n    this._hideToggle = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether the toggle indicator should be hidden. */\r\n  @Input()\r\n  get togglePosition(): MatAccordionTogglePosition {\r\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\r\n  }\r\n  set togglePosition(value: MatAccordionTogglePosition) {\r\n    this._togglePosition = value;\r\n  }\r\n\r\n  /** An event emitted after the body's expansion animation happens. */\r\n  @Output() afterExpand = new EventEmitter<void>();\r\n\r\n  /** An event emitted after the body's collapse animation happens. */\r\n  @Output() afterCollapse = new EventEmitter<void>();\r\n\r\n  /** Stream that emits for changes in `@Input` properties. */\r\n  readonly _inputChanges = new Subject<SimpleChanges>();\r\n\r\n  /** Optionally defined accordion the expansion panel belongs to. */\r\n  accordion: MatAccordionBase;\r\n\r\n  /** Content that will be rendered lazily. */\r\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\r\n\r\n  /** Element containing the panel's user-provided content. */\r\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\r\n\r\n  /** Portal holding the user's content. */\r\n  _portal: TemplatePortal;\r\n\r\n  /** ID for the associated header element. Used for a11y labelling. */\r\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\r\n\r\n  /** Stream of body animation done events. */\r\n  _bodyAnimationDone = new Subject<AnimationEvent>();\r\n\r\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(DOCUMENT) _document: any,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\r\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\r\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n    this.accordion = accordion;\r\n    this._document = _document;\r\n\r\n    // We need a Subject with distinctUntilChanged, because the `done` event\r\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\r\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\r\n      return x.fromState === y.fromState && x.toState === y.toState;\r\n    })).subscribe(event => {\r\n      if (event.fromState !== 'void') {\r\n        if (event.toState === 'expanded') {\r\n          this.afterExpand.emit();\r\n        } else if (event.toState === 'collapsed') {\r\n          this.afterCollapse.emit();\r\n        }\r\n      }\r\n    });\r\n\r\n    if (defaultOptions) {\r\n      this.hideToggle = defaultOptions.hideToggle;\r\n    }\r\n  }\r\n\r\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\r\n  _hasSpacing(): boolean {\r\n    if (this.accordion) {\r\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\r\n      // the [displayMode] input changes, the change detection will also cover the host bindings\r\n      // of this expansion panel.\r\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Gets the expanded state string. */\r\n  _getExpandedState(): MatExpansionPanelState {\r\n    return this.expanded ? 'expanded' : 'collapsed';\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._lazyContent) {\r\n      // Render the content as soon as the panel becomes open.\r\n      this.opened.pipe(\r\n        startWith(null!),\r\n        filter(() => this.expanded && !this._portal),\r\n        take(1)\r\n      ).subscribe(() => {\r\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this._inputChanges.next(changes);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n    this._bodyAnimationDone.complete();\r\n    this._inputChanges.complete();\r\n  }\r\n\r\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\r\n  _containsFocus(): boolean {\r\n    if (this._body) {\r\n      const focusedElement = this._document.activeElement;\r\n      const bodyElement = this._body.nativeElement;\r\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: 'mat-action-row',\r\n  host: {\r\n    class: 'mat-action-row'\r\n  }\r\n})\r\nexport class MatExpansionPanelActionRow {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {take} from 'rxjs/operators';\r\n\r\n/**\r\n * Extra CSS classes that can be associated with a calendar cell.\r\n */\r\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatCalendarCell {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean,\r\n              public cssClasses?: MatCalendarCellCssClasses) {}\r\n}\r\n\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'mat-calendar-body',\r\n    'role': 'grid',\r\n    'aria-readonly': 'true'\r\n  },\r\n  exportAs: 'matCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendarBody implements OnChanges {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio = 1;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  _firstRowOffset: number;\r\n\r\n  /** Padding for the individual date cells. */\r\n  _cellPadding: string;\r\n\r\n  /** Width of an individual cell. */\r\n  _cellWidth: string;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\r\n\r\n  _cellClicked(cell: MatCalendarCell): void {\r\n    if (cell.enabled) {\r\n      this.selectedValueChange.emit(cell.value);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const columnChanges = changes['numCols'];\r\n    const {rows, numCols} = this;\r\n\r\n    if (changes['rows'] || columnChanges) {\r\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\r\n    }\r\n\r\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\r\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\r\n    }\r\n\r\n    if (columnChanges || !this._cellWidth) {\r\n      this._cellWidth = `${100 / numCols}%`;\r\n    }\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        const activeCell: HTMLElement | null =\r\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\r\n\r\n        if (activeCell) {\r\n          activeCell.focus();\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'matMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: {long: string, narrow: string}[];\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              @Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n              this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\r\n          this._userSelection.emit();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n            this._dateAdapter.getYear(this.activeDate),\r\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\r\n\r\n      this._weeks[this._weeks.length - 1]\r\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n        (!this.dateFilter || this.dateFilter(date)) &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'matYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected month. This doesn't imply a change on the selected date */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              @Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const normalizedDate =\r\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    this.monthSelected.emit(normalizedDate);\r\n\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n        month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n        this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n        this._dateFormats.display.monthYearA11yLabel);\r\n    return new MatCalendarCell(\r\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  CanUpdateErrorState,\r\n  CanUpdateErrorStateCtor,\r\n  ErrorStateMatcher,\r\n  mixinErrorState,\r\n} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\r\nimport {MatChipTextControl} from './chip-text-control';\r\n\r\n\r\n// Boilerplate for applying mixins to MatChipList.\r\n/** @docs-private */\r\nclass MatChipListBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\r\n    mixinErrorState(MatChipListBase);\r\n\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet nextUniqueId = 0;\r\n\r\n/** Change event object that is emitted when the chip list value has changed. */\r\nexport class MatChipListChange {\r\n  constructor(\r\n    /** Chip list that emitted the event. */\r\n    public source: MatChipList,\r\n    /** Value of the chip list when the event was emitted. */\r\n    public value: any) { }\r\n}\r\n\r\n\r\n/**\r\n * A material design chips component (named ChipList for its similarity to the List component).\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'matChipList',\r\n  host: {\r\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.role]': 'role',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[id]': '_uid',\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\r\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly controlType: string = 'mat-chip-list';\r\n\r\n  /**\r\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\r\n   * query list notifies about the update. This is necessary because we cannot determine an\r\n   * appropriate chip that should receive focus until the array of chips updated completely.\r\n   */\r\n  private _lastDestroyedChipIndex: number | null = null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Subscription to focus changes in the chips. */\r\n  private _chipFocusSubscription: Subscription | null;\r\n\r\n  /** Subscription to blur changes in the chips. */\r\n  private _chipBlurSubscription: Subscription | null;\r\n\r\n  /** Subscription to selection changes in chips. */\r\n  private _chipSelectionSubscription: Subscription | null;\r\n\r\n  /** Subscription to remove changes in chips. */\r\n  private _chipRemoveSubscription: Subscription | null;\r\n\r\n  /** The chip input to add more chips */\r\n  protected _chipInput: MatChipTextControl;\r\n\r\n  /** Uid of the chip list */\r\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\r\n\r\n  /** The aria-describedby attribute on the chip list for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Tab index for the chip list. */\r\n  _tabIndex = 0;\r\n\r\n  /**\r\n   * User defined tab index.\r\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\r\n   */\r\n  _userTabIndex: number | null = null;\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatChip>;\r\n\r\n  /** Function when touched */\r\n  _onTouched = () => {};\r\n\r\n  /** Function when changed */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MatChip>;\r\n\r\n  /** The array of selected chips inside chip list. */\r\n  get selected(): MatChip[] | MatChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The ARIA role applied to the chip list. */\r\n  get role(): string | null { return this.empty ? null : 'listbox'; }\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /** Whether the user should be allowed to select multiple chips. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n    this._syncChipsState();\r\n  }\r\n  private _multiple: boolean = false;\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    this.writeValue(value);\r\n    this._value = value;\r\n  }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get id(): string {\r\n    return this._chipInput ? this._chipInput.id : this._uid;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n  protected _required: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get placeholder(): string {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n  protected _placeholder: string;\r\n\r\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\r\n  get focused(): boolean {\r\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._syncChipsState();\r\n  }\r\n  protected _disabled: boolean = false;\r\n\r\n  /** Orientation of the chip list. */\r\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  /**\r\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\r\n   * the selected states for all the chips inside the chip list are always ignored.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n\r\n    if (this.chips) {\r\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\r\n    }\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  @Input()\r\n  set tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' selection change events. */\r\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' focus change events. */\r\n  get chipFocusChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' blur change events. */\r\n  get chipBlurChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' remove change events. */\r\n  get chipRemoveChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroyed));\r\n  }\r\n\r\n  /** Event emitted when the selected chip list value has been changed by the user. */\r\n  @Output() readonly change: EventEmitter<MatChipListChange> =\r\n      new EventEmitter<MatChipListChange>();\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /** The chip components contained within this chip list. */\r\n  @ContentChildren(MatChip, {\r\n    // We need to use `descendants: true`, because Ivy will no longer match\r\n    // indirect descendants if it's left as false.\r\n    descendants: true\r\n  }) chips: QueryList<MatChip>;\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              /** @docs-private */\r\n              @Optional() @Self() public ngControl: NgControl) {\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\r\n      .withWrap()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\r\n\r\n    if (this._dir) {\r\n      this._dir.change\r\n        .pipe(takeUntil(this._destroyed))\r\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\r\n    }\r\n\r\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n      this._allowFocusEscape();\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\r\n      if (this.disabled) {\r\n        // Since this happens after the content has been\r\n        // checked, we need to defer it to the next tick.\r\n        Promise.resolve().then(() => {\r\n          this._syncChipsState();\r\n        });\r\n      }\r\n\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n    this.stateChanges.complete();\r\n\r\n    this._dropSubscriptions();\r\n  }\r\n\r\n\r\n  /** Associates an HTML input element with this chip list. */\r\n  registerInput(inputElement: MatChipTextControl): void {\r\n    this._chipInput = inputElement;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick(event: MouseEvent) {\r\n    if (!this._originatesFromChip(event)) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\r\n   * are no eligible chips.\r\n   */\r\n  focus(): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Attempt to focus an input if we have one. */\r\n  _focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pass events to the keyboard manager. Available here for tests.\r\n   */\r\n  _keydown(event: KeyboardEvent) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    // If they are on an empty input and hit backspace, focus the last chip\r\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else if (target && target.classList.contains('mat-chip')) {\r\n      if (event.keyCode === HOME) {\r\n        this._keyManager.setFirstItemActive();\r\n        event.preventDefault();\r\n      } else if (event.keyCode === END) {\r\n        this._keyManager.setLastItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        this._keyManager.onKeydown(event);\r\n      }\r\n\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Check the tab index as you should not be allowed to focus an empty list.\r\n   */\r\n  protected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\r\n\r\n  /**\r\n   * If the amount of chips changed, we need to update the\r\n   * key manager state and focus the next closest chip.\r\n   */\r\n  protected _updateFocusForDestroyedChips() {\r\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\r\n    if (this._lastDestroyedChipIndex != null) {\r\n      if (this.chips.length) {\r\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\r\n        this._keyManager.setActiveItem(newChipIndex);\r\n      } else {\r\n        this.focus();\r\n      }\r\n    }\r\n\r\n    this._lastDestroyedChipIndex = null;\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   *\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of chips.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\r\n\r\n  private _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let input = element as HTMLInputElement;\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        if (isUserInput) {\r\n          this._keyManager.setActiveItem(correspondingChip);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and selects the chip based on its value.\r\n   * @returns Chip that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\r\n\r\n    const correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      if (this.ngControl || this._value) {\r\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n        this.stateChanges.next();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deselects every chip in the list.\r\n   * @param skip Chip that should not be deselected.\r\n   */\r\n  private _clearSelection(skip?: MatChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Sorts the model values, ensuring that they keep the same\r\n   * order that they have in the panel.\r\n   */\r\n  private _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MatChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\r\n  _blur() {\r\n    if (!this._hasFocusedChip()) {\r\n      this._keyManager.setActiveItem(-1);\r\n    }\r\n\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Mark the field as touched */\r\n  _markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\r\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\r\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\r\n   */\r\n  _allowFocusEscape() {\r\n    if (this._tabIndex !== -1) {\r\n      this._tabIndex = -1;\r\n\r\n      setTimeout(() => {\r\n        this._tabIndex = this._userTabIndex || 0;\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  private _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\r\n\r\n  private _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n\r\n    if (this._chipRemoveSubscription) {\r\n      this._chipRemoveSubscription.unsubscribe();\r\n      this._chipRemoveSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  private _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\r\n      const chip = event.chip;\r\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\r\n\r\n      // In case the chip that will be removed is currently focused, we temporarily store\r\n      // the index in order to be able to determine an appropriate sibling chip that will\r\n      // receive focus.\r\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\r\n        this._lastDestroyedChipIndex = chipIndex;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Checks whether an event comes from inside a chip element. */\r\n  private _originatesFromChip(event: Event): boolean {\r\n    let currentElement = event.target as HTMLElement | null;\r\n\r\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\r\n      if (currentElement.classList.contains('mat-chip')) {\r\n        return true;\r\n      }\r\n\r\n      currentElement = currentElement.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Checks whether any of the chips is focused. */\r\n  private _hasFocusedChip() {\r\n    return this.chips.some(chip => chip._hasFocus);\r\n  }\r\n\r\n  /** Syncs the list's state with the individual chips. */\r\n  private _syncChipsState() {\r\n    if (this.chips) {\r\n      this.chips.forEach(chip => {\r\n        chip.disabled = this._disabled;\r\n        chip._chipListMultiple = this.multiple;\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\r\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\r\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\r\nimport {MatChipList} from './chip-list';\r\nimport {MatChipTextControl} from './chip-text-control';\r\n\r\n\r\n/** Represents an input event on a `matChipInput`. */\r\nexport interface MatChipInputEvent {\r\n  /** The native `<input>` element that the event is being fired for. */\r\n  input: HTMLInputElement;\r\n\r\n  /** The value of the input. */\r\n  value: string;\r\n}\r\n\r\n// Increasing integer for generating unique ids.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\n@Directive({\r\n  selector: 'input[matChipInputFor]',\r\n  exportAs: 'matChipInput, matChipInputFor',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n    '(input)': '_onInput()',\r\n    '[id]': 'id',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.placeholder]': 'placeholder || null',\r\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\r\n  }\r\n})\r\nexport class MatChipInput implements MatChipTextControl, OnChanges {\r\n  /** Whether the control is focused. */\r\n  focused: boolean = false;\r\n  _chipList: MatChipList;\r\n\r\n  /** Register input for chip list */\r\n  @Input('matChipInputFor')\r\n  set chipList(value: MatChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n   */\r\n  @Input('matChipInputAddOnBlur')\r\n  get addOnBlur(): boolean { return this._addOnBlur; }\r\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  @Input('matChipInputSeparatorKeyCodes')\r\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\r\n\r\n  /** Emitted when a chip is to be added. */\r\n  @Output('matChipInputTokenEnd')\r\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\r\n\r\n  /** The input's placeholder text. */\r\n  @Input() placeholder: string = '';\r\n\r\n  /** Unique id for the input. */\r\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\r\n\r\n  /** Whether the input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether the input is empty. */\r\n  get empty(): boolean { return !this._inputElement.value; }\r\n\r\n  /** The native input element to which this directive is attached. */\r\n  protected _inputElement: HTMLInputElement;\r\n\r\n  constructor(\r\n    protected _elementRef: ElementRef<HTMLInputElement>,\r\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Utility method to make host definition/tests more clear. */\r\n  _keydown(event?: KeyboardEvent) {\r\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\r\n    // want to do this when going backwards, because focus should go back to the first chip.\r\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\r\n      this._chipList._allowFocusEscape();\r\n    }\r\n\r\n    this._emitChipEnd(event);\r\n  }\r\n\r\n  /** Checks to see if the blur should emit the (chipEnd) event. */\r\n  _blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  _focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n  _emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this._isSeparatorKey(event)) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // Let chip list know whenever the value changes.\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void {\r\n    this._inputElement.focus();\r\n  }\r\n\r\n  /** Checks whether a keycode is one of the configured separators. */\r\n  private _isSeparatorKey(event: KeyboardEvent) {\r\n    if (hasModifierKey(event)) {\r\n      return false;\r\n    }\r\n\r\n    const separators = this.separatorKeyCodes;\r\n    const keyCode = event.keyCode;\r\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {NgModule} from '@angular/core';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\r\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\r\nimport {MatChipInput} from './chip-input';\r\nimport {MatChipList} from './chip-list';\r\n\r\nconst CHIP_DECLARATIONS = [\r\n  MatChipList,\r\n  MatChip,\r\n  MatChipInput,\r\n  MatChipRemove,\r\n  MatChipAvatar,\r\n  MatChipTrailingIcon,\r\n];\r\n\r\n@NgModule({\r\n  exports: CHIP_DECLARATIONS,\r\n  declarations: CHIP_DECLARATIONS,\r\n  providers: [\r\n    ErrorStateMatcher,\r\n    {\r\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        separatorKeyCodes: [ENTER]\r\n      } as MatChipsDefaultOptions\r\n    }\r\n  ]\r\n})\r\nexport class MatChipsModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy} from '@angular/cdk/overlay';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  /** Override for the dialog's top position. */\r\n  top?: string;\r\n\r\n  /** Override for the dialog's bottom position. */\r\n  bottom?: string;\r\n\r\n  /** Override for the dialog's left position. */\r\n  left?: string;\r\n\r\n  /** Override for the dialog's right position. */\r\n  right?: string;\r\n}\r\n\r\n/**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n */\r\nexport class MatDialogConfig<D = any> {\r\n\r\n  /**\r\n   * Where the attached component should live in Angular's *logical* component tree.\r\n   * This affects what is available for injection and the change detection order for the\r\n   * component instantiated inside of the dialog. This does not affect where the dialog\r\n   * content will be rendered.\r\n   */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** ID for the dialog. If omitted, a unique one will be generated. */\r\n  id?: string;\r\n\r\n  /** The ARIA role of the dialog element. */\r\n  role?: DialogRole = 'dialog';\r\n\r\n  /** Custom class for the overlay pane. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the dialog has a backdrop. */\r\n  hasBackdrop?: boolean = true;\r\n\r\n  /** Custom class for the backdrop, */\r\n  backdropClass?: string = '';\r\n\r\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\r\n  disableClose?: boolean = false;\r\n\r\n  /** Width of the dialog. */\r\n  width?: string = '';\r\n\r\n  /** Height of the dialog. */\r\n  height?: string = '';\r\n\r\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\r\n  minWidth?: number | string;\r\n\r\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\r\n  minHeight?: number | string;\r\n\r\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\r\n  maxWidth?: number | string = '80vw';\r\n\r\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\r\n  maxHeight?: number | string;\r\n\r\n  /** Position overrides. */\r\n  position?: DialogPosition;\r\n\r\n  /** Data being injected into the child component. */\r\n  data?: D | null = null;\r\n\r\n  /** Layout direction for the dialog's content. */\r\n  direction?: Direction;\r\n\r\n  /** ID of the element that describes the dialog. */\r\n  ariaDescribedBy?: string | null = null;\r\n\r\n  /** ID of the element that labels the dialog. */\r\n  ariaLabelledBy?: string | null = null;\r\n\r\n  /** Aria label to assign to the dialog element */\r\n  ariaLabel?: string | null = null;\r\n\r\n  /** Whether the dialog should focus the first focusable element on open. */\r\n  autoFocus?: boolean = true;\r\n\r\n  /**\r\n   * Whether the dialog should restore focus to the\r\n   * previously-focused element, after it's closed.\r\n   */\r\n  restoreFocus?: boolean = true;\r\n\r\n  /** Scroll strategy to be used for the dialog. */\r\n  scrollStrategy?: ScrollStrategy;\r\n\r\n  /**\r\n   * Whether the dialog should close when the user goes backwards/forwards in history.\r\n   * Note that this usually doesn't include clicking on links (unless the user is using\r\n   * the `HashLocationStrategy`).\r\n   */\r\n  closeOnNavigation?: boolean = true;\r\n\r\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\nconst animationBody = [\r\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\r\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\r\n  // decimate the animation performance. Leaving it as `none` solves both issues.\r\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\r\n  state('enter', style({transform: 'none'})),\r\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\r\n      style({transform: 'none', opacity: 1}))),\r\n  transition('* => void, * => exit',\r\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\r\n];\r\n\r\n/**\r\n * Animations used by MatDialog.\r\n * @docs-private\r\n */\r\nexport const matDialogAnimations: {\r\n  readonly dialogContainer: AnimationTriggerMetadata;\r\n  readonly slideDialog: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that is applied on the dialog container by defalt. */\r\n  dialogContainer: trigger('dialogContainer', animationBody),\r\n\r\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\r\n  slideDialog: trigger('slideDialog', animationBody)\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {matDialogAnimations} from './dialog-animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  CdkPortalOutlet,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {MatDialogConfig} from './dialog-config';\r\n\r\n\r\n/**\r\n * Throws an exception for the case when a ComponentPortal is\r\n * attached to a DomPortalOutlet without an origin.\r\n * @docs-private\r\n */\r\nexport function throwMatDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-dialog-container',\r\n  templateUrl: 'dialog-container.html',\r\n  styleUrls: ['dialog.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  animations: [matDialogAnimations.dialogContainer],\r\n  host: {\r\n    'class': 'mat-dialog-container',\r\n    'tabindex': '-1',\r\n    'aria-modal': 'true',\r\n    '[attr.id]': '_id',\r\n    '[attr.role]': '_config.role',\r\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\r\n    '[attr.aria-label]': '_config.ariaLabel',\r\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\r\n    '[@dialogContainer]': '_state',\r\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\r\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\r\n  },\r\n})\r\nexport class MatDialogContainer extends BasePortalOutlet {\r\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** The class that traps and manages focus within the dialog. */\r\n  private _focusTrap: FocusTrap;\r\n\r\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\r\n\r\n  /** State of the dialog animation. */\r\n  _state: 'void' | 'enter' | 'exit' = 'enter';\r\n\r\n  /** Emits when an animation state changes. */\r\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\r\n\r\n  /** ID of the element that should be considered as the dialog's label. */\r\n  _ariaLabelledBy: string | null;\r\n\r\n  /** ID for the container DOM element. */\r\n  _id: string;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _focusTrapFactory: FocusTrapFactory,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(DOCUMENT) private _document: any,\r\n    /** The dialog configuration. */\r\n    public _config: MatDialogConfig) {\r\n\r\n    super();\r\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\r\n  }\r\n\r\n  /**\r\n   * Attach a ComponentPortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throwMatDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /**\r\n   * Attach a TemplatePortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throwMatDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Moves the focus inside the focus trap. */\r\n  private _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    if (this._config.autoFocus) {\r\n      this._focusTrap.focusInitialElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /** Restores focus to the element that was focused before the dialog opened. */\r\n  private _restoreFocus() {\r\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the dialog was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\r\n\r\n      // Note that there is no focus method when rendering on the server.\r\n      if (this._elementRef.nativeElement.focus) {\r\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\r\n        // opening multiple dialogs at the same time. Needs to be async, because the element\r\n        // may not be focusable immediately.\r\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Callback, invoked whenever an animation on the host completes. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._trapFocus();\r\n    } else if (event.toState === 'exit') {\r\n      this._restoreFocus();\r\n    }\r\n\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  /** Callback, invoked when an animation on the host starts. */\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  /** Starts the dialog exit animation. */\r\n  _startExitAnimation(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\r\nimport {Location} from '@angular/common';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {filter, take} from 'rxjs/operators';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {MatDialogContainer} from './dialog-container';\r\n\r\n\r\n// TODO(jelbourn): resizing\r\n\r\n// Counter for unique dialog ids.\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Reference to a dialog opened via the MatDialog service.\r\n */\r\nexport class MatDialogRef<T, R = any> {\r\n  /** The instance of component opened into the dialog. */\r\n  componentInstance: T;\r\n\r\n  /** Whether the user is allowed to close the dialog. */\r\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\r\n\r\n  /** Subject for notifying the user that the dialog has finished opening. */\r\n  private readonly _afterOpened = new Subject<void>();\r\n\r\n  /** Subject for notifying the user that the dialog has finished closing. */\r\n  private readonly _afterClosed = new Subject<R | undefined>();\r\n\r\n  /** Subject for notifying the user that the dialog has started closing. */\r\n  private readonly _beforeClosed = new Subject<R | undefined>();\r\n\r\n  /** Result to be passed to afterClosed. */\r\n  private _result: R | undefined;\r\n\r\n  constructor(\r\n    private _overlayRef: OverlayRef,\r\n    public _containerInstance: MatDialogContainer,\r\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\r\n    _location?: Location,\r\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\r\n\r\n    // Pass the id along to the container.\r\n    _containerInstance._id = id;\r\n\r\n    // Emit when opening animation completes\r\n    _containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    });\r\n\r\n    // Dispose overlay when closing animation is complete\r\n    _containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\r\n      take(1)\r\n    ).subscribe(() => this._overlayRef.dispose());\r\n\r\n    _overlayRef.detachments().subscribe(() => {\r\n      this._beforeClosed.next(this._result);\r\n      this._beforeClosed.complete();\r\n      this._afterClosed.next(this._result);\r\n      this._afterClosed.complete();\r\n      this.componentInstance = null!;\r\n      this._overlayRef.dispose();\r\n    });\r\n\r\n    _overlayRef.keydownEvents()\r\n      .pipe(filter(event => {\r\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\r\n      }))\r\n      .subscribe(event => {\r\n        event.preventDefault();\r\n        this.close();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Close the dialog.\r\n   * @param dialogResult Optional result to return to the dialog opener.\r\n   */\r\n  close(dialogResult?: R): void {\r\n    this._result = dialogResult;\r\n\r\n    // Transition the backdrop in parallel to the dialog.\r\n    this._containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'start'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._beforeClosed.next(dialogResult);\r\n      this._beforeClosed.complete();\r\n      this._overlayRef.detachBackdrop();\r\n    });\r\n\r\n    this._containerInstance._startExitAnimation();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished opening.\r\n   */\r\n  afterOpened(): Observable<void> {\r\n    return this._afterOpened.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished closing.\r\n   */\r\n  afterClosed(): Observable<R | undefined> {\r\n    return this._afterClosed.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog has started closing.\r\n   */\r\n  beforeClosed(): Observable<R | undefined> {\r\n    return this._beforeClosed.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n   */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._overlayRef.backdropClick();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._overlayRef.keydownEvents();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's position.\r\n   * @param position New dialog position.\r\n   */\r\n  updatePosition(position?: DialogPosition): this {\r\n    let strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's width and height.\r\n   * @param width New width of the dialog.\r\n   * @param height New height of the dialog.\r\n   */\r\n  updateSize(width: string = '', height: string = ''): this {\r\n    this._getPositionStrategy().width(width).height(height);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\r\n\r\n  /** Add a CSS class or an array of classes to the overlay pane. */\r\n  addPanelClass(classes: string | string[]): this {\r\n    this._overlayRef.addPanelClass(classes);\r\n    return this;\r\n  }\r\n\r\n  /** Remove a CSS class or an array of classes from the overlay pane. */\r\n  removePanelClass(classes: string | string[]): this {\r\n    this._overlayRef.removePanelClass(classes);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished opening.\r\n   * @deprecated Use `afterOpened` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  afterOpen(): Observable<void> {\r\n    return this.afterOpened();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog has started closing.\r\n   * @deprecated Use `beforeClosed` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  beforeClose(): Observable<R | undefined> {\r\n    return this.beforeClosed();\r\n  }\r\n\r\n  /** Fetches the position strategy object from the overlay ref. */\r\n  private _getPositionStrategy(): GlobalPositionStrategy {\r\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayContainer,\r\n  OverlayRef,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {Location} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport {MatDialogConfig} from './dialog-config';\r\nimport {MatDialogContainer} from './dialog-container';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n\r\n/** Injection token that can be used to access the data that was passed in to a dialog. */\r\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\r\n\r\n/** Injection token that can be used to specify default dialog options. */\r\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\r\n\r\n/** Injection token that determines the scroll handling while the dialog is open. */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n  () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\n@Injectable()\r\nexport class MatDialog implements OnDestroy {\r\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\r\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\r\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\r\n  private _ariaHiddenElements = new Map<Element, string|null>();\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** Keeps track of the currently-open dialogs. */\r\n  get openDialogs(): MatDialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n  }\r\n\r\n  /** Stream that emits when a dialog has been opened. */\r\n  get afterOpened(): Subject<MatDialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\r\n  }\r\n\r\n  /**\r\n   * Stream that emits when a dialog has been opened.\r\n   * @deprecated Use `afterOpened` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  get afterOpen(): Subject<MatDialogRef<any>> {\r\n    return this.afterOpened;\r\n  }\r\n\r\n  get _afterAllClosed(): Subject<void> {\r\n    const parent = this._parentDialog;\r\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n  }\r\n\r\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\r\n  /**\r\n   * Stream that emits when all open dialog have finished closing.\r\n   * Will emit on subscribe if there are no open dialogs to begin with.\r\n   */\r\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\r\n      this._afterAllClosed :\r\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _injector: Injector,\r\n      @Optional() private _location: Location,\r\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\r\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\r\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\r\n      private _overlayContainer: OverlayContainer) {\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  /**\r\n   * Opens a modal dialog containing the given component.\r\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\r\n   *     or a TemplateRef to instantiate as the dialog content.\r\n   * @param config Extra configuration options.\r\n   * @returns Reference to the newly-opened dialog.\r\n   */\r\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\r\n\r\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\r\n\r\n    if (config.id && this.getDialogById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\r\n                                                      dialogContainer,\r\n                                                      overlayRef,\r\n                                                      config);\r\n\r\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\r\n    if (!this.openDialogs.length) {\r\n      this._hideNonDialogContentFromAssistiveTechnology();\r\n    }\r\n\r\n    this.openDialogs.push(dialogRef);\r\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n    this.afterOpened.next(dialogRef);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Closes all of the currently-open dialogs.\r\n   */\r\n  closeAll(): void {\r\n    this._closeDialogs(this.openDialogs);\r\n  }\r\n\r\n  /**\r\n   * Finds an open dialog by its id.\r\n   * @param id ID to use when looking up the dialog.\r\n   */\r\n  getDialogById(id: string): MatDialogRef<any> | undefined {\r\n    return this.openDialogs.find(dialog => dialog.id === id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Only close the dialogs at this level on destroy\r\n    // since the parent service may still be active.\r\n    this._closeDialogs(this._openDialogsAtThisLevel);\r\n    this._afterAllClosedAtThisLevel.complete();\r\n    this._afterOpenedAtThisLevel.complete();\r\n  }\r\n\r\n  /**\r\n   * Creates the overlay into which the dialog will be loaded.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the OverlayRef for the created overlay.\r\n   */\r\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\r\n    const overlayConfig = this._getOverlayConfig(config);\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an overlay config from a dialog config.\r\n   * @param dialogConfig The dialog configuration.\r\n   * @returns The overlay configuration.\r\n   */\r\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\r\n    const state = new OverlayConfig({\r\n      positionStrategy: this._overlay.position().global(),\r\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\r\n      panelClass: dialogConfig.panelClass,\r\n      hasBackdrop: dialogConfig.hasBackdrop,\r\n      direction: dialogConfig.direction,\r\n      minWidth: dialogConfig.minWidth,\r\n      minHeight: dialogConfig.minHeight,\r\n      maxWidth: dialogConfig.maxWidth,\r\n      maxHeight: dialogConfig.maxHeight,\r\n      disposeOnNavigation: dialogConfig.closeOnNavigation\r\n    });\r\n\r\n    if (dialogConfig.backdropClass) {\r\n      state.backdropClass = dialogConfig.backdropClass;\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n   * @param overlay Reference to the dialog's underlying overlay.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to a ComponentRef for the attached container.\r\n   */\r\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n      [MatDialogConfig, config]\r\n    ]));\r\n    const containerPortal =\r\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\r\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  private _attachDialogContent<T, R>(\r\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n      dialogContainer: MatDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: MatDialogConfig): MatDialogRef<T, R> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef =\r\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\r\n\r\n    // When the dialog backdrop is clicked, we want to close it.\r\n    if (config.hasBackdrop) {\r\n      overlayRef.backdropClick().subscribe(() => {\r\n        if (!dialogRef.disableClose) {\r\n          dialogRef.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      dialogContainer.attachTemplatePortal(\r\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\r\n          <any>{ $implicit: config.data, dialogRef }));\r\n    } else {\r\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n      const contentRef = dialogContainer.attachComponentPortal<T>(\r\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n      dialogRef.componentInstance = contentRef.instance;\r\n    }\r\n\r\n    dialogRef\r\n      .updateSize(config.width, config.height)\r\n      .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n   * of a dialog to close itself and, optionally, to return a value.\r\n   * @param config Config object that is used to construct the dialog.\r\n   * @param dialogRef Reference to the dialog.\r\n   * @param container Dialog container element that wraps all of the contents.\r\n   * @returns The custom injector that can be used inside the dialog.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatDialogConfig,\r\n      dialogRef: MatDialogRef<T>,\r\n      dialogContainer: MatDialogContainer): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n\r\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\r\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\r\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\r\n    // added to the injection tokens.\r\n    const injectionTokens = new WeakMap<any, any>([\r\n      [MatDialogContainer, dialogContainer],\r\n      [MAT_DIALOG_DATA, config.data],\r\n      [MatDialogRef, dialogRef]\r\n    ]);\r\n\r\n    if (config.direction &&\r\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\n\r\n  /**\r\n   * Removes a dialog from the array of open dialogs.\r\n   * @param dialogRef Dialog to be removed.\r\n   */\r\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\r\n    const index = this.openDialogs.indexOf(dialogRef);\r\n\r\n    if (index > -1) {\r\n      this.openDialogs.splice(index, 1);\r\n\r\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\r\n      // to a the siblings and emit to the `afterAllClosed` stream.\r\n      if (!this.openDialogs.length) {\r\n        this._ariaHiddenElements.forEach((previousValue, element) => {\r\n          if (previousValue) {\r\n            element.setAttribute('aria-hidden', previousValue);\r\n          } else {\r\n            element.removeAttribute('aria-hidden');\r\n          }\r\n        });\r\n\r\n        this._ariaHiddenElements.clear();\r\n        this._afterAllClosed.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides all of the content that isn't an overlay from assistive technology.\r\n   */\r\n  private _hideNonDialogContentFromAssistiveTechnology() {\r\n    const overlayContainer = this._overlayContainer.getContainerElement();\r\n\r\n    // Ensure that the overlay container is attached to the DOM.\r\n    if (overlayContainer.parentElement) {\r\n      const siblings = overlayContainer.parentElement.children;\r\n\r\n      for (let i = siblings.length - 1; i > -1; i--) {\r\n        let sibling = siblings[i];\r\n\r\n        if (sibling !== overlayContainer &&\r\n          sibling.nodeName !== 'SCRIPT' &&\r\n          sibling.nodeName !== 'STYLE' &&\r\n          !sibling.hasAttribute('aria-live')) {\r\n\r\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\r\n          sibling.setAttribute('aria-hidden', 'true');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Closes all of the dialogs in an array. */\r\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\r\n    let i = dialogs.length;\r\n\r\n    while (i--) {\r\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n      // runs on the next microtask, in addition to modifying the array as we're going\r\n      // through it. We loop through all of them and call close without assuming that\r\n      // they'll be removed from the list instantaneously.\r\n      dialogs[i].close();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Applies default options to the dialog config.\r\n * @param config Config to be modified.\r\n * @param defaultOptions Default options provided.\r\n * @returns The new configuration object.\r\n */\r\nfunction _applyConfigDefaults(\r\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\r\n  return {...defaultOptions, ...config};\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Optional,\r\n  SimpleChanges,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport {MatDialog} from './dialog';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n/** Counter used to generate unique IDs for dialog elements. */\r\nlet dialogElementUid = 0;\r\n\r\n/**\r\n * Button that will close the current dialog.\r\n */\r\n@Directive({\r\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\r\n  exportAs: 'matDialogClose',\r\n  host: {\r\n    '(click)': 'dialogRef.close(dialogResult)',\r\n    '[attr.aria-label]': 'ariaLabel || null',\r\n    'type': 'button', // Prevents accidental form submits.\r\n  }\r\n})\r\nexport class MatDialogClose implements OnInit, OnChanges {\r\n  /** Screenreader label for the button. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** Dialog close input. */\r\n  @Input('mat-dialog-close') dialogResult: any;\r\n\r\n  @Input('matDialogClose') _matDialogClose: any;\r\n\r\n  constructor(\r\n    @Optional() public dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.dialogRef) {\r\n      // When this directive is included in a dialog via TemplateRef (rather than being\r\n      // in a Component), the DialogRef isn't available via injection because embedded\r\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\r\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\r\n      // be resolved at constructor time.\r\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\r\n\r\n    if (proxiedChange) {\r\n      this.dialogResult = proxiedChange.currentValue;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\r\n@Directive({\r\n  selector: '[mat-dialog-title], [matDialogTitle]',\r\n  exportAs: 'matDialogTitle',\r\n  host: {\r\n    'class': 'mat-dialog-title',\r\n    '[id]': 'id',\r\n  },\r\n})\r\nexport class MatDialogTitle implements OnInit {\r\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\r\n\r\n  constructor(\r\n    @Optional() private _dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this._dialogRef) {\r\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n\r\n    if (this._dialogRef) {\r\n      Promise.resolve().then(() => {\r\n        const container = this._dialogRef._containerInstance;\r\n\r\n        if (container && !container._ariaLabelledBy) {\r\n          container._ariaLabelledBy = this.id;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Scrollable content container of a dialog.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\r\n  host: {'class': 'mat-dialog-content'}\r\n})\r\nexport class MatDialogContent {}\r\n\r\n\r\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\r\n  host: {'class': 'mat-dialog-actions'}\r\n})\r\nexport class MatDialogActions {}\r\n\r\n\r\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param element Element relative to which to look for a dialog.\r\n * @param openDialogs References to the currently-open dialogs.\r\n */\r\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\r\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\r\n\r\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\r\n    parent = parent.parentElement;\r\n  }\r\n\r\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\r\nimport {MatDialogContainer} from './dialog-container';\r\nimport {\r\n  MatDialogActions,\r\n  MatDialogClose,\r\n  MatDialogContent,\r\n  MatDialogTitle,\r\n} from './dialog-content-directives';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [\r\n    MatDialogContainer,\r\n    MatDialogClose,\r\n    MatDialogTitle,\r\n    MatDialogContent,\r\n    MatDialogActions,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatDialogContainer,\r\n    MatDialogClose,\r\n    MatDialogTitle,\r\n    MatDialogActions,\r\n    MatDialogContent,\r\n  ],\r\n  providers: [\r\n    MatDialog,\r\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [MatDialogContainer],\r\n})\r\nexport class MatDialogModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n/**\r\n * Directive to automatically resize a textarea to fit its content.\r\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\r\n * @breaking-change 8.0.0\r\n */\r\n@Directive({\r\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\r\n  exportAs: 'matTextareaAutosize',\r\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\r\n  host: {\r\n    'class': 'cdk-textarea-autosize mat-autosize',\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n    '(input)': '_noopInputHandler()',\r\n  },\r\n})\r\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\r\n  @Input()\r\n  get matAutosizeMinRows(): number { return this.minRows; }\r\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\r\n\r\n  @Input()\r\n  get matAutosizeMaxRows(): number { return this.maxRows; }\r\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\r\n\r\n  @Input('mat-autosize')\r\n  get matAutosize(): boolean { return this.enabled; }\r\n  set matAutosize(value: boolean) { this.enabled = value; }\r\n\r\n  @Input()\r\n  get matTextareaAutosize(): boolean { return this.enabled; }\r\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/**\r\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\r\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\r\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\r\n * value to them.\r\n */\r\nexport const MAT_INPUT_VALUE_ACCESSOR =\r\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\r\nimport {AutofillMonitor} from '@angular/cdk/text-field';\r\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Self,\r\n} from '@angular/core';\r\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  CanUpdateErrorState,\r\n  CanUpdateErrorStateCtor,\r\n  ErrorStateMatcher,\r\n  mixinErrorState,\r\n} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {Subject} from 'rxjs';\r\nimport {getMatInputUnsupportedTypeError} from './input-errors';\r\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\r\n\r\n\r\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\r\nconst MAT_INPUT_INVALID_TYPES = [\r\n  'button',\r\n  'checkbox',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'submit'\r\n];\r\n\r\nlet nextUniqueId = 0;\r\n\r\n// Boilerplate for applying mixins to MatInput.\r\n/** @docs-private */\r\nclass MatInputBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\r\n    mixinErrorState(MatInputBase);\r\n\r\n/** Directive that allows a native input to work inside a `MatFormField`. */\r\n@Directive({\r\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\r\n      input[matNativeControl], textarea[matNativeControl]`,\r\n  exportAs: 'matInput',\r\n  host: {\r\n    /**\r\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\r\n     */\r\n    'class': 'mat-input-element mat-form-field-autofill-control',\r\n    '[class.mat-input-server]': '_isServer',\r\n    // Native input properties that are overwritten by Angular inputs need to be synced with\r\n    // the native input element. Otherwise property bindings for those don't work.\r\n    '[attr.id]': 'id',\r\n    '[attr.placeholder]': 'placeholder',\r\n    '[disabled]': 'disabled',\r\n    '[required]': 'required',\r\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '(blur)': '_focusChanged(false)',\r\n    '(focus)': '_focusChanged(true)',\r\n    '(input)': '_onInput()',\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\r\n})\r\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\r\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\r\n  protected _uid = `mat-input-${nextUniqueId++}`;\r\n  protected _previousNativeValue: any;\r\n  private _inputValueAccessor: {value: any};\r\n  /** The aria-describedby attribute on the input for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Whether the component is being rendered on the server. */\r\n  _isServer = false;\r\n\r\n  /** Whether the component is a native html select. */\r\n  _isNativeSelect = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  focused: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly stateChanges: Subject<void> = new Subject<void>();\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  controlType: string = 'mat-input';\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  autofilled = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    if (this.ngControl && this.ngControl.disabled !== null) {\r\n      return this.ngControl.disabled;\r\n    }\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // Browsers may not fire the blur event if the input is disabled too quickly.\r\n    // Reset from here to ensure that the element doesn't become stuck.\r\n    if (this.focused) {\r\n      this.focused = false;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n  protected _disabled = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) { this._id = value || this._uid; }\r\n  protected _id: string;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input() placeholder: string;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  protected _required = false;\r\n\r\n  /** Input type of the element. */\r\n  @Input()\r\n  get type(): string { return this._type; }\r\n  set type(value: string) {\r\n    this._type = value || 'text';\r\n    this._validateType();\r\n\r\n    // When using Angular inputs, developers are no longer able to set the properties on the native\r\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\r\n    // with the native property. Textarea elements don't support the type property or attribute.\r\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\r\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\r\n    }\r\n  }\r\n  protected _type = 'text';\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): string { return this._inputValueAccessor.value; }\r\n  set value(value: string) {\r\n    if (value !== this.value) {\r\n      this._inputValueAccessor.value = value;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Whether the element is readonly. */\r\n  @Input()\r\n  get readonly(): boolean { return this._readonly; }\r\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\r\n  private _readonly = false;\r\n\r\n  protected _neverEmptyInputTypes = [\r\n    'date',\r\n    'datetime',\r\n    'datetime-local',\r\n    'month',\r\n    'time',\r\n    'week'\r\n  ].filter(t => getSupportedInputTypes().has(t));\r\n\r\n  constructor(\r\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\r\n    protected _platform: Platform,\r\n    /** @docs-private */\r\n    @Optional() @Self() public ngControl: NgControl,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    _defaultErrorStateMatcher: ErrorStateMatcher,\r\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\r\n    private _autofillMonitor: AutofillMonitor,\r\n    ngZone: NgZone) {\r\n\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    // If no input value accessor was explicitly specified, use the element as the input value\r\n    // accessor.\r\n    this._inputValueAccessor = inputValueAccessor || element;\r\n\r\n    this._previousNativeValue = this.value;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n\r\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\r\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\r\n    // exists on iOS, we only bother to install the listener on iOS.\r\n    if (_platform.IOS) {\r\n      ngZone.runOutsideAngular(() => {\r\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\r\n          let el = event.target as HTMLInputElement;\r\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\r\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\r\n            // `1, 1` fixes it for the first time that you type text and\r\n            // then hold delete. Toggling to `1, 1` and then back to\r\n            // `0, 0` seems to completely fix it.\r\n            el.setSelectionRange(1, 1);\r\n            el.setSelectionRange(0, 0);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    this._isServer = !this._platform.isBrowser;\r\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\r\n\r\n    if (this._isNativeSelect) {\r\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\r\n                                                                   'mat-native-select';\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this._platform.isBrowser) {\r\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\r\n        this.autofilled = event.isAutofilled;\r\n        this.stateChanges.next();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stateChanges.complete();\r\n\r\n    if (this._platform.isBrowser) {\r\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n\r\n    // We need to dirty-check the native element's value, because there are some cases where\r\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\r\n    // updating the value using `emitEvent: false`).\r\n    this._dirtyCheckNativeValue();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Callback for the cases where the focused state of the input changes. */\r\n  _focusChanged(isFocused: boolean) {\r\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\r\n      this.focused = isFocused;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // This is a noop function and is used to let Angular know whenever the value changes.\r\n    // Angular will run a new change detection each time the `input` event has been dispatched.\r\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\r\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\r\n    // value changes and will not disappear.\r\n    // Listening to the input event wouldn't be necessary when the input is using the\r\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\r\n  }\r\n\r\n  /** Does some manual dirty checking on the native input `value` property. */\r\n  protected _dirtyCheckNativeValue() {\r\n    const newValue = this._elementRef.nativeElement.value;\r\n\r\n    if (this._previousNativeValue !== newValue) {\r\n      this._previousNativeValue = newValue;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Make sure the input is a supported type. */\r\n  protected _validateType() {\r\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\r\n      throw getMatInputUnsupportedTypeError(this._type);\r\n    }\r\n  }\r\n\r\n  /** Checks whether the input type is one of the types that are never empty. */\r\n  protected _isNeverEmpty() {\r\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\r\n  }\r\n\r\n  /** Checks whether the input is invalid based on the native validation. */\r\n  protected _isBadInput() {\r\n    // The `validity` property won't be present on platform-server.\r\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\r\n    return validity && validity.badInput;\r\n  }\r\n\r\n  /** Determines if the component host is a textarea. */\r\n  protected _isTextarea() {\r\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\r\n        !this.autofilled;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean {\r\n    if (this._isNativeSelect) {\r\n      // For a single-selection `<select>`, the label should float when the selected option has\r\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\r\n      // overlapping the label with the options.\r\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\r\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\r\n\r\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\r\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\r\n      return this.focused || selectElement.multiple || !this.empty ||\r\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\r\n    } else {\r\n      return this.focused || !this.empty;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) {\r\n    this._ariaDescribedby = ids.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() {\r\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\r\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\r\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\r\n    if (!this.focused) {\r\n      this.focus();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {TextFieldModule} from '@angular/cdk/text-field';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatTextareaAutosize} from './autosize';\r\nimport {MatInput} from './input';\r\n\r\n\r\n@NgModule({\r\n  declarations: [MatInput, MatTextareaAutosize],\r\n  imports: [\r\n    CommonModule,\r\n    TextFieldModule,\r\n    MatFormFieldModule,\r\n  ],\r\n  exports: [\r\n    TextFieldModule,\r\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\r\n    // be used together with `MatFormField`.\r\n    MatFormFieldModule,\r\n    MatInput,\r\n    MatTextareaAutosize,\r\n  ],\r\n  providers: [ErrorStateMatcher],\r\n})\r\nexport class MatInputModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n\r\n/** Datepicker data that requires internationalization. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MatDatepickerIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the calendar popup (used by screen readers). */\r\n  calendarLabel: string = 'Calendar';\r\n\r\n  /** A label for the button used to open the calendar popup (used by screen readers). */\r\n  openCalendarLabel: string = 'Open calendar';\r\n\r\n  /** A label for the previous month button (used by screen readers). */\r\n  prevMonthLabel: string = 'Previous month';\r\n\r\n  /** A label for the next month button (used by screen readers). */\r\n  nextMonthLabel: string = 'Next month';\r\n\r\n  /** A label for the previous year button (used by screen readers). */\r\n  prevYearLabel: string = 'Previous year';\r\n\r\n  /** A label for the next year button (used by screen readers). */\r\n  nextYearLabel: string = 'Next year';\r\n\r\n  /** A label for the previous multi-year button (used by screen readers). */\r\n  prevMultiYearLabel: string = 'Previous 20 years';\r\n\r\n  /** A label for the next multi-year button (used by screen readers). */\r\n  nextMultiYearLabel: string = 'Next 20 years';\r\n\r\n  /** A label for the 'switch to month view' button (used by screen readers). */\r\n  switchToMonthViewLabel: string = 'Choose date';\r\n\r\n  /** A label for the 'switch to year view' button (used by screen readers). */\r\n  switchToMultiYearViewLabel: string = 'Choose month and year';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Directive,\r\n  Input,\r\n} from '@angular/core';\r\n\r\n\r\n/**\r\n * Content of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-card-content',\r\n  host: {'class': 'mat-card-content'}\r\n})\r\nexport class MatCardContent {}\r\n\r\n/**\r\n * Title of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\r\n  host: {\r\n    'class': 'mat-card-title'\r\n  }\r\n})\r\nexport class MatCardTitle {}\r\n\r\n/**\r\n * Sub-title of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\r\n  host: {\r\n    'class': 'mat-card-subtitle'\r\n  }\r\n})\r\nexport class MatCardSubtitle {}\r\n\r\n/**\r\n * Action section of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-card-actions',\r\n  exportAs: 'matCardActions',\r\n  host: {\r\n    'class': 'mat-card-actions',\r\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\r\n  }\r\n})\r\nexport class MatCardActions {\r\n  /** Position of the actions inside the card. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n}\r\n\r\n/**\r\n * Footer of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-card-footer',\r\n  host: {'class': 'mat-card-footer'}\r\n})\r\nexport class MatCardFooter {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-image], [matCardImage]',\r\n  host: {'class': 'mat-card-image'}\r\n})\r\nexport class MatCardImage {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\r\n  host: {'class': 'mat-card-sm-image'}\r\n})\r\nexport class MatCardSmImage {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-md-image], [matCardImageMedium]',\r\n  host: {'class': 'mat-card-md-image'}\r\n})\r\nexport class MatCardMdImage {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\r\n  host: {'class': 'mat-card-lg-image'}\r\n})\r\nexport class MatCardLgImage {}\r\n\r\n/**\r\n * Large image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\r\n  host: {'class': 'mat-card-xl-image'}\r\n})\r\nexport class MatCardXlImage {}\r\n\r\n/**\r\n * Avatar image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-avatar], [matCardAvatar]',\r\n  host: {'class': 'mat-card-avatar'}\r\n})\r\nexport class MatCardAvatar {}\r\n\r\n\r\n/**\r\n * A basic content container component that adds the styles of a Material design card.\r\n *\r\n * While this component can be used alone, it also provides a number\r\n * of preset styles for common card sections, including:\r\n * - mat-card-title\r\n * - mat-card-subtitle\r\n * - mat-card-content\r\n * - mat-card-actions\r\n * - mat-card-footer\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-card',\r\n  exportAs: 'matCard',\r\n  templateUrl: 'card.html',\r\n  styleUrls: ['card.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card'}\r\n})\r\nexport class MatCard {}\r\n\r\n\r\n/**\r\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\r\n * preset header section (i.e. a title, subtitle, and avatar layout).\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-card-header',\r\n  templateUrl: 'card-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card-header'}\r\n})\r\nexport class MatCardHeader {}\r\n\r\n\r\n/**\r\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\r\n * layout that groups an image with a title section.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-card-title-group',\r\n  templateUrl: 'card-title-group.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card-title-group'}\r\n})\r\nexport class MatCardTitleGroup {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {\r\n  MatCard,\r\n  MatCardActions,\r\n  MatCardAvatar,\r\n  MatCardContent,\r\n  MatCardFooter,\r\n  MatCardHeader,\r\n  MatCardImage,\r\n  MatCardLgImage,\r\n  MatCardMdImage,\r\n  MatCardSmImage,\r\n  MatCardSubtitle,\r\n  MatCardTitle,\r\n  MatCardTitleGroup,\r\n  MatCardXlImage,\r\n} from './card';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [\r\n    MatCard,\r\n    MatCardHeader,\r\n    MatCardTitleGroup,\r\n    MatCardContent,\r\n    MatCardTitle,\r\n    MatCardSubtitle,\r\n    MatCardActions,\r\n    MatCardFooter,\r\n    MatCardSmImage,\r\n    MatCardMdImage,\r\n    MatCardLgImage,\r\n    MatCardImage,\r\n    MatCardXlImage,\r\n    MatCardAvatar,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\r\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\r\n    MatCardXlImage, MatCardAvatar,\r\n  ],\r\n})\r\nexport class MatCardModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/**\r\n * Checkbox click action when user click on input element.\r\n * noop: Do not toggle checked or indeterminate.\r\n * check: Only toggle checked status, ignore indeterminate.\r\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\r\n * undefined: Same as `check-indeterminate`.\r\n */\r\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\r\n\r\n/**\r\n * Injection token that can be used to specify the checkbox click behavior.\r\n */\r\nexport const MAT_CHECKBOX_CLICK_ACTION =\r\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  AfterViewChecked,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanColorCtor,\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  HasTabIndex,\r\n  HasTabIndexCtor,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\r\n\r\n\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatCheckbox),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Represents the different states that require custom transitions between them.\r\n * @docs-private\r\n */\r\nexport enum TransitionCheckState {\r\n  /** The initial state of the component before any user interaction. */\r\n  Init,\r\n  /** The state representing the component when it's becoming checked. */\r\n  Checked,\r\n  /** The state representing the component when it's becoming unchecked. */\r\n  Unchecked,\r\n  /** The state representing the component when it's becoming indeterminate. */\r\n  Indeterminate\r\n}\r\n\r\n/** Change event object emitted by MatCheckbox. */\r\nexport class MatCheckboxChange {\r\n  /** The source MatCheckbox of the event. */\r\n  source: MatCheckbox;\r\n  /** The new `checked` value of the checkbox. */\r\n  checked: boolean;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatCheckbox.\r\n/** @docs-private */\r\nclass MatCheckboxBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nconst _MatCheckboxMixinBase:\r\n    HasTabIndexCtor &\r\n    CanColorCtor &\r\n    CanDisableRippleCtor &\r\n    CanDisableCtor &\r\n    typeof MatCheckboxBase =\r\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\r\n\r\n\r\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://material.io/design/components/selection-controls.html\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-checkbox',\r\n  templateUrl: 'checkbox.html',\r\n  styleUrls: ['checkbox.css'],\r\n  exportAs: 'matCheckbox',\r\n  host: {\r\n    'class': 'mat-checkbox',\r\n    '[id]': 'id',\r\n    '[attr.tabindex]': 'null',\r\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n    '[class.mat-checkbox-checked]': 'checked',\r\n    '[class.mat-checkbox-disabled]': 'disabled',\r\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\r\n  },\r\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  inputs: ['disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\r\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\r\n\r\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether the checkbox is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  private _required: boolean;\r\n\r\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** Event emitted when the checkbox's `checked` value changes. */\r\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\r\n      new EventEmitter<MatCheckboxChange>();\r\n\r\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\r\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** The value attribute of the native input element */\r\n  @Input() value: string;\r\n\r\n  /** The native `<input type=\"checkbox\">` element */\r\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\r\n\r\n  /** Reference to the ripple instance of the checkbox. */\r\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\r\n\r\n  /**\r\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n   * @docs-private\r\n   */\r\n  _onTouched: () => any = () => {};\r\n\r\n  private _currentAnimationClass: string = '';\r\n\r\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  constructor(elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _ngZone: NgZone,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\r\n                  private _clickAction: MatCheckboxClickAction,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\r\n    super(elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\r\n      if (!focusOrigin) {\r\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n        // Angular does not expect events to be raised during change detection, so any state change\r\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\r\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\r\n        // telling the form control it has been touched until the next tick.\r\n        Promise.resolve().then(() => {\r\n          this._onTouched();\r\n          _changeDetectorRef.markForCheck();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // TODO: Delete next major revision.\r\n  ngAfterViewChecked() {}\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /**\r\n   * Whether the checkbox is checked.\r\n   */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    if (value != this.checked) {\r\n      this._checked = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\r\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\r\n   */\r\n  @Input()\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this.disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n   * set to false.\r\n   */\r\n  @Input()\r\n  get indeterminate(): boolean { return this._indeterminate; }\r\n  set indeterminate(value: boolean) {\r\n    const changed = value != this._indeterminate;\r\n    this._indeterminate = value;\r\n\r\n    if (changed) {\r\n      if (this._indeterminate) {\r\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\r\n      } else {\r\n        this._transitionCheckState(\r\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n      }\r\n      this.indeterminateChange.emit(this._indeterminate);\r\n    }\r\n  }\r\n  private _indeterminate: boolean = false;\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\r\n    // component will be only marked for check, but no actual change detection runs automatically.\r\n    // Instead of going back into the zone in order to trigger a change detection which causes\r\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\r\n    // an explicit change detection for the checkbox view and it's children.\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any) {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\r\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\r\n  }\r\n\r\n  private _transitionCheckState(newState: TransitionCheckState) {\r\n    let oldState = this._currentCheckState;\r\n    let element: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    if (oldState === newState) {\r\n      return;\r\n    }\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.remove(this._currentAnimationClass);\r\n    }\r\n\r\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\r\n        oldState, newState);\r\n    this._currentCheckState = newState;\r\n\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.add(this._currentAnimationClass);\r\n\r\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\r\n      const animationClass = this._currentAnimationClass;\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        setTimeout(() => {\r\n          element.classList.remove(animationClass);\r\n        }, 1000);\r\n      });\r\n    }\r\n  }\r\n\r\n  private _emitChangeEvent() {\r\n    const event = new MatCheckboxChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n\r\n    this._controlValueAccessorChangeFn(this.checked);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /** Toggles the `checked` state of the checkbox. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /**\r\n   * Event handler for checkbox input element.\r\n   * Toggles checked state if element is not disabled.\r\n   * Do not toggle on (change) event since IE doesn't fire change event when\r\n   *   indeterminate checkbox is clicked.\r\n   * @param event\r\n   */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `checkbox` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n\r\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\r\n    if (!this.disabled && this._clickAction !== 'noop') {\r\n      // When user manually click on the checkbox, `indeterminate` is set to false.\r\n      if (this.indeterminate && this._clickAction !== 'check') {\r\n\r\n        Promise.resolve().then(() => {\r\n          this._indeterminate = false;\r\n          this.indeterminateChange.emit(this._indeterminate);\r\n        });\r\n      }\r\n\r\n      this.toggle();\r\n      this._transitionCheckState(\r\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    } else if (!this.disabled && this._clickAction === 'noop') {\r\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\r\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n    }\r\n  }\r\n\r\n  /** Focuses the checkbox. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\r\n  }\r\n\r\n  _onInteractionEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  private _getAnimationClassForCheckStateTransition(\r\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\r\n    // Don't transition if animations are disabled.\r\n    if (this._animationMode === 'NoopAnimations') {\r\n      return '';\r\n    }\r\n\r\n    let animSuffix: string = '';\r\n\r\n    switch (oldState) {\r\n      case TransitionCheckState.Init:\r\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n        // [checked] bound to it.\r\n        if (newState === TransitionCheckState.Checked) {\r\n          animSuffix = 'unchecked-checked';\r\n        } else if (newState == TransitionCheckState.Indeterminate) {\r\n          animSuffix = 'unchecked-indeterminate';\r\n        } else {\r\n          return '';\r\n        }\r\n        break;\r\n      case TransitionCheckState.Unchecked:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'unchecked-checked' : 'unchecked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Checked:\r\n        animSuffix = newState === TransitionCheckState.Unchecked ?\r\n            'checked-unchecked' : 'checked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Indeterminate:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'indeterminate-checked' : 'indeterminate-unchecked';\r\n        break;\r\n    }\r\n\r\n    return `mat-checkbox-anim-${animSuffix}`;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {\r\n  CheckboxRequiredValidator,\r\n  NG_VALIDATORS,\r\n} from '@angular/forms';\r\n\r\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Validator for Material checkbox's required attribute in template-driven checkbox.\r\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\r\n * work with `mat-checkbox`.\r\n */\r\n@Directive({\r\n  selector: `mat-checkbox[required][formControlName],\r\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\r\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\r\n  host: {'[attr.required]': 'required ? \"\" : null'}\r\n})\r\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatCheckbox} from './checkbox';\r\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\r\n\r\n/** This module is used by both original and MDC-based checkbox implementations. */\r\n@NgModule({\r\n  exports: [MatCheckboxRequiredValidator],\r\n  declarations: [MatCheckboxRequiredValidator],\r\n})\r\n// tslint:disable-next-line:class-name\r\nexport class _MatCheckboxRequiredValidatorModule {\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\r\n    _MatCheckboxRequiredValidatorModule\r\n  ],\r\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\r\n  declarations: [MatCheckbox],\r\n})\r\nexport class MatCheckboxModule {\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ContentChild,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanColorCtor,\r\n  CanDisable,\r\n  CanDisableCtor,\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  MAT_RIPPLE_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  RippleConfig,\r\n  RippleGlobalOptions,\r\n  RippleRenderer,\r\n  RippleTarget,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {take} from 'rxjs/operators';\r\n\r\n\r\n/** Represents an event fired on an individual `mat-chip`. */\r\nexport interface MatChipEvent {\r\n  /** The chip the event was fired on. */\r\n  chip: MatChip;\r\n}\r\n\r\n/** Event object emitted by MatChip when selected or deselected. */\r\nexport class MatChipSelectionChange {\r\n  constructor(\r\n    /** Reference to the chip that emitted the event. */\r\n    public source: MatChip,\r\n    /** Whether the chip that emitted the event is selected. */\r\n    public selected: boolean,\r\n    /** Whether the selection change was a result of a user interaction. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatChip.\r\n/** @docs-private */\r\nclass MatChipBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\r\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip avatar.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-avatar, [matChipAvatar]',\r\n  host: {'class': 'mat-chip-avatar'}\r\n})\r\nexport class MatChipAvatar {}\r\n\r\n/**\r\n * Dummy directive to add CSS class to chip trailing icon.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\r\n  host: {'class': 'mat-chip-trailing-icon'}\r\n})\r\nexport class MatChipTrailingIcon {}\r\n\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled', 'disableRipple'],\r\n  exportAs: 'matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[class.mat-chip-with-avatar]': 'avatar',\r\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\r\n    '[class.mat-chip-disabled]': 'disabled',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n  },\r\n})\r\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable, CanDisableRipple, RippleTarget {\r\n\r\n  /** Reference to the RippleRenderer for the chip. */\r\n  private _chipRipple: RippleRenderer;\r\n\r\n  /**\r\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\r\n   * is set to the global ripple options since we don't have any configurable options for\r\n   * the chip ripples.\r\n   * @docs-private\r\n   */\r\n  rippleConfig: RippleConfig & RippleGlobalOptions;\r\n\r\n  /**\r\n   * Whether ripples are disabled on interaction\r\n   * @docs-private\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\r\n  }\r\n\r\n  /** Whether the chip has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  /** Whether the chip list is selectable */\r\n  chipListSelectable: boolean = true;\r\n\r\n  /** Whether the chip list is in multi-selection mode. */\r\n  _chipListMultiple: boolean = false;\r\n\r\n  /** The chip avatar */\r\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\r\n\r\n  /** The chip's trailing icon. */\r\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\r\n\r\n  /** The chip's remove toggler. */\r\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\r\n\r\n  /** Whether the chip is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    const coercedValue = coerceBooleanProperty(value);\r\n\r\n    if (coercedValue !== this._selected) {\r\n      this._selected = coercedValue;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n  protected _selected: boolean = false;\r\n\r\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\r\n  set value(value: any) { this._value = value; }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Whether or not the chip is selectable. When a chip is not selectable,\r\n   * changes to its selected state are always ignored. By default a chip is\r\n   * selectable, and it becomes non-selectable if its parent chip list is\r\n   * not selectable.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  /**\r\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\r\n   */\r\n  @Input()\r\n  get removable(): boolean { return this._removable; }\r\n  set removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\r\n  protected _removable: boolean = true;\r\n\r\n  /** Emits when the chip is focused. */\r\n  readonly _onFocus = new Subject<MatChipEvent>();\r\n\r\n  /** Emits when the chip is blured. */\r\n  readonly _onBlur = new Subject<MatChipEvent>();\r\n\r\n  /** Emitted when the chip is selected or deselected. */\r\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\r\n      new EventEmitter<MatChipSelectionChange>();\r\n\r\n  /** Emitted when the chip is destroyed. */\r\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** Emitted when a chip is to be removed. */\r\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /** The ARIA selected applied to the chip. */\r\n  get ariaSelected(): string | null {\r\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\r\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\r\n    return this.selectable && (this._chipListMultiple || this.selected) ?\r\n        this.selected.toString() : null;\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              private _ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\r\n              globalRippleOptions: RippleGlobalOptions | null) {\r\n    super(_elementRef);\r\n\r\n    this._addHostClassName();\r\n\r\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\r\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n    this.rippleConfig = globalRippleOptions || {};\r\n  }\r\n\r\n  _addHostClassName() {\r\n    const basicChipAttrName = 'mat-basic-chip';\r\n    const element = this._elementRef.nativeElement as HTMLElement;\r\n\r\n    if (element.hasAttribute(basicChipAttrName) ||\r\n        element.tagName.toLowerCase() === basicChipAttrName) {\r\n      element.classList.add(basicChipAttrName);\r\n      return;\r\n    } else {\r\n      element.classList.add('mat-standard-chip');\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.emit({chip: this});\r\n    this._chipRipple._removeTriggerEvents();\r\n  }\r\n\r\n  /** Selects the chip. */\r\n  select(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n\r\n  /** Deselects the chip. */\r\n  deselect(): void {\r\n    if (this._selected) {\r\n      this._selected = false;\r\n      this._dispatchSelectionChange();\r\n    }\r\n  }\r\n\r\n  /** Select this chip and emit selected event */\r\n  selectViaInteraction(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._dispatchSelectionChange(true);\r\n    }\r\n  }\r\n\r\n  /** Toggles the current selected state of this chip. */\r\n  toggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n    this._dispatchSelectionChange(isUserInput);\r\n    return this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the chip. */\r\n  focus(): void {\r\n    if (!this._hasFocus) {\r\n      this._elementRef.nativeElement.focus();\r\n      this._onFocus.next({chip: this});\r\n    }\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  /**\r\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n   * BACKSPACE keys are pressed.\r\n   *\r\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n   */\r\n  remove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the chip. */\r\n  _handleClick(event: Event) {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n    } else {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /** Handle custom key presses. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\r\n\r\n  _blur(): void {\r\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\r\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\r\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\r\n    // as not focused until the next time the zone stabilizes.\r\n    this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        this._ngZone.run(() => {\r\n          this._hasFocus = false;\r\n          this._onBlur.next({chip: this});\r\n        });\r\n      });\r\n  }\r\n\r\n  private _dispatchSelectionChange(isUserInput = false) {\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\n@Directive({\r\n  selector: '[matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\r\n    '(click)': '_handleClick($event)',\r\n  }\r\n})\r\nexport class MatChipRemove {\r\n  constructor(protected _parentChip: MatChip) {}\r\n\r\n  /** Calls the parent chip's public `remove()` method if applicable. */\r\n  _handleClick(event: Event): void {\r\n    const parentChip = this._parentChip;\r\n\r\n    if (parentChip.removable && !parentChip.disabled) {\r\n      parentChip.remove();\r\n    }\r\n\r\n    // We need to stop event propagation because otherwise the event will bubble up to the\r\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\r\n    // reset the focused chip that has been focused after chip removal. Usually the parent\r\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\r\n    // that the chip is being removed before the event bubbles up.\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/** Default options, for the chips module, that can be overridden. */\r\nexport interface MatChipsDefaultOptions {\r\n  /** The list of key codes that will trigger a chipEnd event. */\r\n  separatorKeyCodes: number[] | Set<number>;\r\n}\r\n\r\n/** Injection token to be used to override the default options for the chips module. */\r\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Inject,\r\n  Input,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  CanColorCtor,\r\n  CanDisableCtor,\r\n  CanDisableRippleCtor,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\r\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\r\n\r\n/**\r\n * List of classes to add to MatButton instances based on host attributes to\r\n * style as different variants.\r\n */\r\nconst BUTTON_HOST_ATTRIBUTES = [\r\n  'mat-button',\r\n  'mat-flat-button',\r\n  'mat-icon-button',\r\n  'mat-raised-button',\r\n  'mat-stroked-button',\r\n  'mat-mini-fab',\r\n  'mat-fab',\r\n];\r\n\r\n// Boilerplate for applying mixins to MatButton.\r\n/** @docs-private */\r\nclass MatButtonBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\r\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\r\n\r\n/**\r\n * Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\r\n             button[mat-flat-button]`,\r\n  exportAs: 'matButton',\r\n  host: {\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatButton extends _MatButtonMixinBase\r\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\r\n\r\n  /** Whether the button is round. */\r\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\r\n\r\n  /** Whether the button is icon button. */\r\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\r\n\r\n  /** Reference to the MatRipple instance of the button. */\r\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\r\n    super(elementRef);\r\n\r\n    // For each of the variant selectors that is prevent in the button's host\r\n    // attributes, add the correct corresponding class.\r\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\r\n      if (this._hasHostAttributes(attr)) {\r\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n      }\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef, true);\r\n\r\n    if (this.isRoundButton) {\r\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._getHostElement().focus();\r\n  }\r\n\r\n  _getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Gets whether the button has one of the given attributes. */\r\n  _hasHostAttributes(...attributes: string[]) {\r\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\r\n  }\r\n}\r\n\r\n/**\r\n * Material design anchor button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\r\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\r\n  exportAs: 'matButton, matAnchor',\r\n  host: {\r\n    // Note that we ignore the user-specified tabindex when it's disabled for\r\n    // consistency with the `mat-button` applied on native buttons where even\r\n    // though they have an index, they're not tabbable.\r\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatAnchor extends MatButton {\r\n  /** Tabindex of the button. */\r\n  @Input() tabIndex: number;\r\n\r\n  constructor(\r\n    focusMonitor: FocusMonitor,\r\n    elementRef: ElementRef,\r\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\r\n    super(elementRef, focusMonitor, animationMode);\r\n  }\r\n\r\n  _haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatAnchor, MatButton} from './button';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatRippleModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [\r\n    MatButton,\r\n    MatAnchor,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatButton,\r\n    MatAnchor,\r\n  ],\r\n})\r\nexport class MatButtonModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanDisableRipple,\r\n  mixinDisableRipple,\r\n  CanDisableRippleCtor,\r\n} from '@angular/material/core';\r\n\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\r\n\r\n/** Possible appearance styles for the button toggle. */\r\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\r\n\r\n/**\r\n * Represents the default options for the button toggle that can be configured\r\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\r\n */\r\nexport interface MatButtonToggleDefaultOptions {\r\n  appearance?: MatButtonToggleAppearance;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all button toggles within an app.\r\n */\r\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\r\n\r\n\r\n\r\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * @deprecated Use `MatButtonToggleGroup` instead.\r\n * @breaking-change 8.0.0\r\n */\r\nexport class MatButtonToggleGroupMultiple {}\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Change event object emitted by MatButtonToggle. */\r\nexport class MatButtonToggleChange {\r\n  constructor(\r\n    /** The MatButtonToggle that emits the event. */\r\n    public source: MatButtonToggle,\r\n\r\n    /** The value assigned to the MatButtonToggle. */\r\n    public value: any) {}\r\n}\r\n\r\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\r\n@Directive({\r\n  selector: 'mat-button-toggle-group',\r\n  providers: [\r\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\r\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\r\n  ],\r\n  host: {\r\n    'role': 'group',\r\n    'class': 'mat-button-toggle-group',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[class.mat-button-toggle-vertical]': 'vertical',\r\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\r\n  },\r\n  exportAs: 'matButtonToggleGroup',\r\n})\r\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\r\n  private _vertical = false;\r\n  private _multiple = false;\r\n  private _disabled = false;\r\n  private _selectionModel: SelectionModel<MatButtonToggle>;\r\n\r\n  /**\r\n   * Reference to the raw value that the consumer tried to assign. The real\r\n   * value will exclude any values from this one that don't correspond to a\r\n   * toggle. Useful for the cases where the value is assigned before the toggles\r\n   * have been initialized or at the same that they're being swapped out.\r\n   */\r\n  private _rawValue: any;\r\n\r\n  /**\r\n   * The method to be called in order to update ngModel.\r\n   * Now `ngModel` binding is not supported in multiple selection mode.\r\n   */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  _onTouched: () => any = () => {};\r\n\r\n  /** Child button toggle buttons. */\r\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\r\n\r\n  /** The appearance for all the buttons in the group. */\r\n  @Input() appearance: MatButtonToggleAppearance;\r\n\r\n  /** `name` attribute for the underlying `input` element. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => {\r\n        toggle.name = this._name;\r\n        toggle._markForCheck();\r\n      });\r\n    }\r\n  }\r\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Value of the toggle group. */\r\n  @Input()\r\n  get value(): any {\r\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\r\n\r\n    if (this.multiple) {\r\n      return selected.map(toggle => toggle.value);\r\n    }\r\n\r\n    return selected[0] ? selected[0].value : undefined;\r\n  }\r\n  set value(newValue: any) {\r\n    this._setSelectionByValue(newValue);\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /**\r\n   * Event that emits whenever the value of the group changes.\r\n   * Used to facilitate two-way data binding.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange = new EventEmitter<any>();\r\n\r\n  /** Selected button toggles in the group. */\r\n  get selected() {\r\n    const selected = this._selectionModel.selected;\r\n    return this.multiple ? selected : (selected[0] || null);\r\n  }\r\n\r\n  /** Whether multiple button toggles can be selected. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether multiple button toggle group is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\r\n    }\r\n  }\r\n\r\n  /** Event emitted when the group's value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(\r\n    private _changeDetector: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\r\n        defaultOptions?: MatButtonToggleDefaultOptions) {\r\n\r\n      this.appearance =\r\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n    }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value Value to be set to the model.\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    const selected = this.selected;\r\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\r\n    const event = new MatButtonToggleChange(source!, this.value);\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Syncs a button toggle's selected state with the model value.\r\n   * @param toggle Toggle to be synced.\r\n   * @param select Whether the toggle should be selected.\r\n   * @param isUserInput Whether the change was a result of a user interaction.\r\n   * @param deferEvents Whether to defer emitting the change events.\r\n   */\r\n  _syncButtonToggle(toggle: MatButtonToggle,\r\n                    select: boolean,\r\n                    isUserInput = false,\r\n                    deferEvents = false) {\r\n    // Deselect the currently-selected toggle, if we're in single-selection\r\n    // mode and the button being toggled isn't selected at the moment.\r\n    if (!this.multiple && this.selected && !toggle.checked) {\r\n      (this.selected as MatButtonToggle).checked = false;\r\n    }\r\n\r\n    if (select) {\r\n      this._selectionModel.select(toggle);\r\n    } else {\r\n      this._selectionModel.deselect(toggle);\r\n    }\r\n\r\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\r\n    // the side-effect is that we may end up updating the model value out of sequence in others\r\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\r\n    if (deferEvents) {\r\n      Promise.resolve(() => this._updateModelValue(isUserInput));\r\n    } else {\r\n      this._updateModelValue(isUserInput);\r\n    }\r\n  }\r\n\r\n  /** Checks whether a button toggle is selected. */\r\n  _isSelected(toggle: MatButtonToggle) {\r\n    return this._selectionModel.isSelected(toggle);\r\n  }\r\n\r\n  /** Determines whether a button toggle should be checked on init. */\r\n  _isPrechecked(toggle: MatButtonToggle) {\r\n    if (typeof this._rawValue === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    if (this.multiple && Array.isArray(this._rawValue)) {\r\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\r\n    }\r\n\r\n    return toggle.value === this._rawValue;\r\n  }\r\n\r\n  /** Updates the selection state of the toggles in the group based on a value. */\r\n  private _setSelectionByValue(value: any|any[]) {\r\n    this._rawValue = value;\r\n\r\n    if (!this._buttonToggles) {\r\n      return;\r\n    }\r\n\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw Error('Value must be an array in multiple-selection mode.');\r\n      }\r\n\r\n      this._clearSelection();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\r\n    } else {\r\n      this._clearSelection();\r\n      this._selectValue(value);\r\n    }\r\n  }\r\n\r\n  /** Clears the selected toggles. */\r\n  private _clearSelection() {\r\n    this._selectionModel.clear();\r\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\r\n  }\r\n\r\n  /** Selects a value if there's a toggle that corresponds to it. */\r\n  private _selectValue(value: any) {\r\n    const correspondingOption = this._buttonToggles.find(toggle => {\r\n      return toggle.value != null && toggle.value === value;\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      correspondingOption.checked = true;\r\n      this._selectionModel.select(correspondingOption);\r\n    }\r\n  }\r\n\r\n  /** Syncs up the group's value with the model and emits the change event. */\r\n  private _updateModelValue(isUserInput: boolean) {\r\n    // Only emit the change event for user input.\r\n    if (isUserInput) {\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    // Note: we emit this one no matter whether it was a user interaction, because\r\n    // it is used by Angular to sync up the two-way data binding.\r\n    this.valueChange.emit(this.value);\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to the MatButtonToggle class.\r\n/** @docs-private */\r\nclass MatButtonToggleBase {}\r\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\r\n    mixinDisableRipple(MatButtonToggleBase);\r\n\r\n/** Single button inside of a toggle group. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matButtonToggle',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\r\n    '[class.mat-button-toggle-checked]': 'checked',\r\n    '[class.mat-button-toggle-disabled]': 'disabled',\r\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\r\n    'class': 'mat-button-toggle',\r\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\r\n    // but can still receive focus from things like cdkFocusInitial.\r\n    '[attr.tabindex]': '-1',\r\n    '[attr.id]': 'id',\r\n    '[attr.name]': 'null',\r\n    '(focus)': 'focus()',\r\n  }\r\n})\r\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\r\n  CanDisableRipple, OnDestroy {\r\n\r\n  private _isSingleSelector = false;\r\n  private _checked = false;\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\r\n  _type: ToggleType;\r\n\r\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\r\n\r\n  /** The parent button toggle group (exclusive selection). Optional. */\r\n  buttonToggleGroup: MatButtonToggleGroup;\r\n\r\n  /** Unique ID for the underlying `button` element. */\r\n  get buttonId(): string { return `${this.id}-button`; }\r\n\r\n  /** The unique ID for this button toggle. */\r\n  @Input() id: string;\r\n\r\n  /** HTML's 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** MatButtonToggleGroup reads this to assign its own value. */\r\n  @Input() value: any;\r\n\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** The appearance style of the button. */\r\n  @Input()\r\n  get appearance(): MatButtonToggleAppearance {\r\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\r\n  }\r\n  set appearance(value: MatButtonToggleAppearance) {\r\n    this._appearance = value;\r\n  }\r\n  private _appearance: MatButtonToggleAppearance;\r\n\r\n  /** Whether the button is checked. */\r\n  @Input()\r\n  get checked(): boolean {\r\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\r\n  }\r\n  set checked(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._checked) {\r\n      this._checked = newValue;\r\n\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\r\n      }\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Event emitted when the group value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _elementRef: ElementRef<HTMLElement>,\r\n              private _focusMonitor: FocusMonitor,\r\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\r\n              @Attribute('tabindex') defaultTabIndex: string,\r\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\r\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\r\n    super();\r\n\r\n    const parsedTabIndex = Number(defaultTabIndex);\r\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n    this.buttonToggleGroup = toggleGroup;\r\n    this.appearance =\r\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\r\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\r\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\r\n\r\n    if (this._isSingleSelector) {\r\n      this.name = this.buttonToggleGroup.name;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\r\n      this.checked = true;\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef, true);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const group = this.buttonToggleGroup;\r\n\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n\r\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\r\n    // on the next tick in order to avoid \"changed after checked\" errors.\r\n    if (group && group._isSelected(this)) {\r\n      group._syncButtonToggle(this, false, false, true);\r\n    }\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._buttonElement.nativeElement.focus();\r\n  }\r\n\r\n  /** Checks the button toggle due to an interaction with the underlying native button. */\r\n  _onButtonClick() {\r\n    const newChecked = this._isSingleSelector ? true : !this._checked;\r\n\r\n    if (newChecked !== this._checked) {\r\n      this._checked = newChecked;\r\n      if (this.buttonToggleGroup) {\r\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\r\n        this.buttonToggleGroup._onTouched();\r\n      }\r\n    }\r\n    // Emit a change event when it's the single selector\r\n    this.change.emit(new MatButtonToggleChange(this, this.value));\r\n  }\r\n\r\n  /**\r\n   * Marks the button toggle as needing checking for change detection.\r\n   * This method is exposed because the parent button toggle group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When the group value changes, the button will not be notified.\r\n    // Use `markForCheck` to explicit update button toggle's status.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, MatRippleModule],\r\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\r\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\r\n})\r\nexport class MatButtonToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor, CanColorCtor,\r\n  FloatLabelType,\r\n  LabelOptions,\r\n  MAT_LABEL_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n} from '@angular/material/core';\r\nimport {fromEvent, merge, Subject} from 'rxjs';\r\nimport {startWith, take, takeUntil} from 'rxjs/operators';\r\nimport {MatError} from './error';\r\nimport {matFormFieldAnimations} from './form-field-animations';\r\nimport {MatFormFieldControl} from './form-field-control';\r\nimport {\r\n  getMatFormFieldDuplicatedHintError,\r\n  getMatFormFieldMissingControlError,\r\n  getMatFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport {MatHint} from './hint';\r\nimport {MatLabel} from './label';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {NgControl} from '@angular/forms';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\nlet nextUniqueId = 0;\r\nconst floatingLabelScale = 0.75;\r\nconst outlineGapPadding = 5;\r\n\r\n\r\n/**\r\n * Boilerplate for applying mixins to MatFormField.\r\n * @docs-private\r\n */\r\nclass MatFormFieldBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\n/**\r\n * Base class to which we're applying the form field mixins.\r\n * @docs-private\r\n */\r\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\r\n    mixinColor(MatFormFieldBase, 'primary');\r\n\r\n/** Possible appearance styles for the form field. */\r\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\r\n\r\n/**\r\n * Represents the default options for the form field that can be configured\r\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\r\n */\r\nexport interface MatFormFieldDefaultOptions {\r\n  appearance?: MatFormFieldAppearance;\r\n}\r\n\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all form field within an app.\r\n */\r\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\r\n\r\n\r\n/** Container for form controls that applies Material Design styling and behavior. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-form-field',\r\n  exportAs: 'matFormField',\r\n  templateUrl: 'form-field.html',\r\n  // MatInput is a directive and can't have styles, so we need to include its styles here\r\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\r\n  // big deal for people who aren't using MatInput.\r\n  styleUrls: [\r\n    'form-field.css',\r\n    'form-field-fill.css',\r\n    'form-field-input.css',\r\n    'form-field-legacy.css',\r\n    'form-field-outline.css',\r\n    'form-field-standard.css',\r\n  ],\r\n  animations: [matFormFieldAnimations.transitionMessages],\r\n  host: {\r\n    'class': 'mat-form-field',\r\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\r\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\r\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\r\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\r\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\r\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\r\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\r\n    '[class.mat-form-field-disabled]': '_control.disabled',\r\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\r\n  },\r\n  inputs: ['color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class MatFormField extends _MatFormFieldMixinBase\r\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\r\n  private _labelOptions: LabelOptions;\r\n\r\n  /**\r\n   * Whether the outline gap needs to be calculated\r\n   * immediately on the next change detection run.\r\n   */\r\n  private _outlineGapCalculationNeededImmediately = false;\r\n\r\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\r\n  private _outlineGapCalculationNeededOnStable = false;\r\n\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** The form-field appearance style. */\r\n  @Input()\r\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\r\n  set appearance(value: MatFormFieldAppearance) {\r\n    const oldValue = this._appearance;\r\n\r\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\r\n\r\n    if (this._appearance === 'outline' && oldValue !== value) {\r\n      this._outlineGapCalculationNeededOnStable = true;\r\n    }\r\n  }\r\n  _appearance: MatFormFieldAppearance;\r\n\r\n  /** Whether the required marker should be hidden. */\r\n  @Input()\r\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\r\n  set hideRequiredMarker(value: boolean) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\r\n  private _hideRequiredMarker: boolean;\r\n\r\n  /** Override for the logic that disables the label animation in certain cases. */\r\n  private _showAlwaysAnimate = false;\r\n\r\n  /** Whether the floating label should always float or not. */\r\n  get _shouldAlwaysFloat(): boolean {\r\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\r\n  }\r\n\r\n  /** Whether the label can float or not. */\r\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\r\n\r\n  /** State of the mat-hint and mat-error animations. */\r\n  _subscriptAnimationState: string = '';\r\n\r\n  /** Text for the form field hint. */\r\n  @Input()\r\n  get hintLabel(): string { return this._hintLabel; }\r\n  set hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\r\n  private _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\r\n\r\n  // Unique id for the internal form field label.\r\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\r\n\r\n  /**\r\n   * Whether the label should always float, never float or float as the user types.\r\n   *\r\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\r\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\r\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\r\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\r\n   */\r\n  @Input()\r\n  get floatLabel(): FloatLabelType {\r\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\r\n  }\r\n  set floatLabel(value: FloatLabelType) {\r\n    if (value !== this._floatLabel) {\r\n      this._floatLabel = value || this._labelOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _floatLabel: FloatLabelType;\r\n\r\n  /** Whether the Angular animations are enabled. */\r\n  _animationsEnabled: boolean;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\r\n\r\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\r\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\r\n  @ViewChild('label', {static: false}) private _label: ElementRef;\r\n\r\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\r\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\r\n  get _control() {\r\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\r\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\r\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\r\n  }\r\n  set _control(value) {\r\n    this._explicitFormFieldControl = value;\r\n  }\r\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\r\n\r\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\r\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\r\n  get _labelChild() {\r\n    return this._labelChildNonStatic || this._labelChildStatic;\r\n  }\r\n\r\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\r\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\r\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\r\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\r\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\r\n\r\n  constructor(\r\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\r\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\r\n      @Optional() private _dir: Directionality,\r\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\r\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\r\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\r\n    super(_elementRef);\r\n\r\n    this._labelOptions = labelOptions ? labelOptions : {};\r\n    this.floatLabel = this._labelOptions.float || 'auto';\r\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\r\n\r\n    // Set the default through here so we invoke the setter on the first run.\r\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\r\n  }\r\n\r\n  /**\r\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\r\n   * positioned relative to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._connectionContainerRef || this._elementRef;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._validateControlChild();\r\n\r\n    const control = this._control;\r\n\r\n    if (control.controlType) {\r\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Run change detection if the value changes.\r\n    if (control.ngControl && control.ngControl.valueChanges) {\r\n      control.ngControl.valueChanges\r\n        .pipe(takeUntil(this._destroyed))\r\n        .subscribe(() => this._changeDetectorRef.markForCheck());\r\n    }\r\n\r\n    // Note that we have to run outside of the `NgZone` explicitly,\r\n    // in order to avoid throwing users into an infinite loop\r\n    // if `zone-patch-rxjs` is included.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n        if (this._outlineGapCalculationNeededOnStable) {\r\n          this.updateOutlineGap();\r\n        }\r\n      });\r\n    });\r\n\r\n    // Run change detection and update the outline if the suffix or prefix changes.\r\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\r\n      this._outlineGapCalculationNeededOnStable = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Re-validate when the number of hints changes.\r\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (this._dir) {\r\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    this._validateControlChild();\r\n    if (this._outlineGapCalculationNeededImmediately) {\r\n      this.updateOutlineGap();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\r\n  _shouldForward(prop: keyof NgControl): boolean {\r\n    const ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && ngControl[prop];\r\n  }\r\n\r\n  _hasPlaceholder() {\r\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\r\n  }\r\n\r\n  _hasLabel() {\r\n    return !!this._labelChild;\r\n  }\r\n\r\n  _shouldLabelFloat() {\r\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\r\n  }\r\n\r\n  _hideControlPlaceholder() {\r\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\r\n    return this.appearance === 'legacy' && !this._hasLabel() ||\r\n        this._hasLabel() && !this._shouldLabelFloat();\r\n  }\r\n\r\n  _hasFloatingLabel() {\r\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\r\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\r\n  }\r\n\r\n  /** Determines whether to display hints or errors. */\r\n  _getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n        this._control.errorState) ? 'error' : 'hint';\r\n  }\r\n\r\n  /** Animates the placeholder up and locks it in position. */\r\n  _animateAndLockLabel(): void {\r\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\r\n      // If animations are disabled, we shouldn't go in here,\r\n      // because the `transitionend` will never fire.\r\n      if (this._animationsEnabled) {\r\n        this._showAlwaysAnimate = true;\r\n\r\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\r\n          this._showAlwaysAnimate = false;\r\n        });\r\n      }\r\n\r\n      this.floatLabel = 'always';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\r\n   * or child element with the `mat-placeholder` directive).\r\n   */\r\n  private _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMatFormFieldPlaceholderConflictError();\r\n    }\r\n  }\r\n\r\n  /** Does any extra processing that is required when handling the hints. */\r\n  private _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\r\n   * attribute being considered as `align=\"start\"`.\r\n   */\r\n  private _validateHints() {\r\n    if (this._hintChildren) {\r\n      let startHint: MatHint;\r\n      let endHint: MatHint;\r\n      this._hintChildren.forEach((hint: MatHint) => {\r\n        if (hint.align === 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMatFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align === 'end') {\r\n          if (endHint) {\r\n            throw getMatFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of element IDs that describe the child control. This allows the control to update\r\n   * its `aria-describedby` attribute accordingly.\r\n   */\r\n  private _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        const startHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        const endHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(error => error.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\r\n\r\n  /** Throws an error if the form field's control is missing. */\r\n  protected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMatFormFieldMissingControlError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\r\n   * appearance.\r\n   */\r\n  updateOutlineGap() {\r\n    const labelEl = this._label ? this._label.nativeElement : null;\r\n\r\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\r\n        !labelEl.textContent.trim()) {\r\n      return;\r\n    }\r\n\r\n    if (!this._platform.isBrowser) {\r\n      // getBoundingClientRect isn't available on the server.\r\n      return;\r\n    }\r\n    // If the element is not present in the DOM, the outline gap will need to be calculated\r\n    // the next time it is checked and in the DOM.\r\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\r\n      this._outlineGapCalculationNeededImmediately = true;\r\n      return;\r\n    }\r\n\r\n    let startWidth = 0;\r\n    let gapWidth = 0;\r\n\r\n    const container = this._connectionContainerRef.nativeElement;\r\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\r\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\r\n\r\n    if (this._label && this._label.nativeElement.children.length) {\r\n      const containerRect = container.getBoundingClientRect();\r\n\r\n      // If the container's width and height are zero, it means that the element is\r\n      // invisible and we can't calculate the outline gap. Mark the element as needing\r\n      // to be checked the next time the zone stabilizes. We can't do this immediately\r\n      // on the next change detection, because even if the element becomes visible,\r\n      // the `ClientRect` won't be reclaculated immediately. We reset the\r\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\r\n      if (containerRect.width === 0 && containerRect.height === 0) {\r\n        this._outlineGapCalculationNeededOnStable = true;\r\n        this._outlineGapCalculationNeededImmediately = false;\r\n        return;\r\n      }\r\n\r\n      const containerStart = this._getStartEnd(containerRect);\r\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\r\n      let labelWidth = 0;\r\n\r\n      for (const child of labelEl.children) {\r\n        labelWidth += child.offsetWidth;\r\n      }\r\n      startWidth = labelStart - containerStart - outlineGapPadding;\r\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\r\n    }\r\n\r\n    for (let i = 0; i < startEls.length; i++) {\r\n      startEls.item(i).style.width = `${startWidth}px`;\r\n    }\r\n    for (let i = 0; i < gapEls.length; i++) {\r\n      gapEls.item(i).style.width = `${gapWidth}px`;\r\n    }\r\n\r\n    this._outlineGapCalculationNeededOnStable =\r\n        this._outlineGapCalculationNeededImmediately = false;\r\n  }\r\n\r\n  /** Gets the start end of the rect considering the current directionality. */\r\n  private _getStartEnd(rect: ClientRect): number {\r\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {MatError} from './error';\r\nimport {MatFormField} from './form-field';\r\nimport {MatHint} from './hint';\r\nimport {MatLabel} from './label';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatError,\r\n    MatFormField,\r\n    MatHint,\r\n    MatLabel,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ObserversModule,\r\n  ],\r\n  exports: [\r\n    MatError,\r\n    MatFormField,\r\n    MatHint,\r\n    MatLabel,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n  ],\r\n})\r\nexport class MatFormFieldModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  MatOptgroup,\r\n  MatOption,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\n\r\n\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nexport class MatAutocompleteSelectedEvent {\r\n  constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    public source: MatAutocomplete,\r\n    /** Option that was selected. */\r\n    public option: MatOption) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nclass MatAutocompleteBase {}\r\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\r\n    mixinDisableRipple(MatAutocompleteBase);\r\n\r\n/** Default `mat-autocomplete` options that can be overridden. */\r\nexport interface MatAutocompleteDefaultOptions {\r\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\r\n  autoActiveFirstOption?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\r\n  return {autoActiveFirstOption: false};\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'matAutocomplete',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  },\r\n  providers: [\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\r\n  ]\r\n})\r\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\r\n  CanDisableRipple {\r\n\r\n  /** Manages active item in option list based on key events. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** Whether the autocomplete panel should be visible, depending on option length. */\r\n  showPanel: boolean = false;\r\n\r\n  /** Whether the autocomplete panel is open. */\r\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\r\n  _isOpen: boolean = false;\r\n\r\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\r\n  // lead to the overlay being created before change detection has finished for this component.\r\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\r\n\r\n  /** Element for the panel containing the autocomplete options. */\r\n  @ViewChild('panel', {static: false}) panel: ElementRef;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Function that maps an option's control value to its display value in the trigger. */\r\n  @Input() displayWith: ((value: any) => string) | null = null;\r\n\r\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\r\n  @Input()\r\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\r\n  set autoActiveFirstOption(value: boolean) {\r\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n  }\r\n  private _autoActiveFirstOption: boolean;\r\n\r\n  /**\r\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\r\n   * match the width of its host.\r\n   */\r\n  @Input() panelWidth: string | number;\r\n\r\n  /** Event that is emitted whenever an option from the list is selected. */\r\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\r\n      new EventEmitter<MatAutocompleteSelectedEvent>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is opened. */\r\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is closed. */\r\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\r\n  @Input('class')\r\n  set classList(value: string) {\r\n    if (value && value.length) {\r\n      this._classList = value.split(' ').reduce((classList, className) => {\r\n        classList[className.trim()] = true;\r\n        return classList;\r\n      }, {} as {[key: string]: boolean});\r\n    } else {\r\n      this._classList = {};\r\n    }\r\n\r\n    this._setVisibilityClasses(this._classList);\r\n    this._elementRef.nativeElement.className = '';\r\n  }\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\r\n    super();\r\n\r\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\r\n    // Set the initial visibility state.\r\n    this._setVisibility();\r\n  }\r\n\r\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\r\n  _setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /** Returns the panel's scrollTop. */\r\n  _getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\r\n\r\n  /** Panel should hide itself when the option list is empty. */\r\n  _setVisibility() {\r\n    this.showPanel = !!this.options.length;\r\n    this._setVisibilityClasses(this._classList);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits the `select` event. */\r\n  _emitSelectEvent(option: MatOption): void {\r\n    const event = new MatAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\r\n\r\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\r\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\r\n    classList['mat-autocomplete-visible'] = this.showPanel;\r\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\n\r\n/**\r\n * Directive applied to an element to make it usable\r\n * as a connection point for an autocomplete panel.\r\n */\r\n@Directive({\r\n  selector: '[matAutocompleteOrigin]',\r\n  exportAs: 'matAutocompleteOrigin',\r\n})\r\nexport class MatAutocompleteOrigin {\r\n  constructor(\r\n      /** Reference to the element on which the directive is applied. */\r\n      public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {\r\n  MatAutocompleteTrigger,\r\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './autocomplete-trigger';\r\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\r\n\r\n@NgModule({\r\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\r\n  exports: [\r\n    MatAutocomplete,\r\n    MatOptionModule,\r\n    MatAutocompleteTrigger,\r\n    MatAutocompleteOrigin,\r\n    MatCommonModule\r\n  ],\r\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\r\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n})\r\nexport class MatAutocompleteModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AriaDescriber} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  isDevMode,\r\n} from '@angular/core';\r\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\nlet nextId = 0;\r\n\r\n// Boilerplate for applying mixins to MatBadge.\r\n/** @docs-private */\r\nclass MatBadgeBase {}\r\n\r\nconst _MatBadgeMixinBase:\r\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\r\n\r\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\r\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\r\n\r\n/** Directive to display a text badge. */\r\n@Directive({\r\n  selector: '[matBadge]',\r\n  inputs: ['disabled: matBadgeDisabled'],\r\n  host: {\r\n    'class': 'mat-badge',\r\n    '[class.mat-badge-overlap]': 'overlap',\r\n    '[class.mat-badge-above]': 'isAbove()',\r\n    '[class.mat-badge-below]': '!isAbove()',\r\n    '[class.mat-badge-before]': '!isAfter()',\r\n    '[class.mat-badge-after]': 'isAfter()',\r\n    '[class.mat-badge-small]': 'size === \"small\"',\r\n    '[class.mat-badge-medium]': 'size === \"medium\"',\r\n    '[class.mat-badge-large]': 'size === \"large\"',\r\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\r\n    '[class.mat-badge-disabled]': 'disabled',\r\n  },\r\n})\r\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\r\n  /** Whether the badge has any content. */\r\n  _hasContent = false;\r\n\r\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\r\n  @Input('matBadgeColor')\r\n  get color(): ThemePalette { return this._color; }\r\n  set color(value: ThemePalette) {\r\n    this._setColor(value);\r\n    this._color = value;\r\n  }\r\n  private _color: ThemePalette = 'primary';\r\n\r\n  /** Whether the badge should overlap its contents or not */\r\n  @Input('matBadgeOverlap')\r\n  get overlap(): boolean { return this._overlap; }\r\n  set overlap(val: boolean) {\r\n    this._overlap = coerceBooleanProperty(val);\r\n  }\r\n  private _overlap: boolean = true;\r\n\r\n  /**\r\n   * Position the badge should reside.\r\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\r\n   */\r\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\r\n\r\n  /** The content for the badge */\r\n  @Input('matBadge') content: string;\r\n\r\n  /** Message used to describe the decorated element via aria-describedby */\r\n  @Input('matBadgeDescription')\r\n  get description(): string { return this._description; }\r\n  set description(newDescription: string) {\r\n    if (newDescription !== this._description) {\r\n      const badgeElement = this._badgeElement;\r\n      this._updateHostAriaDescription(newDescription, this._description);\r\n      this._description = newDescription;\r\n\r\n      if (badgeElement) {\r\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\r\n            badgeElement.removeAttribute('aria-label');\r\n      }\r\n    }\r\n  }\r\n  private _description: string;\r\n\r\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\r\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\r\n\r\n  /** Whether the badge is hidden. */\r\n  @Input('matBadgeHidden')\r\n  get hidden(): boolean { return this._hidden; }\r\n  set hidden(val: boolean) {\r\n    this._hidden = coerceBooleanProperty(val);\r\n  }\r\n  private _hidden: boolean;\r\n\r\n  /** Unique id for the badge */\r\n  _id: number = nextId++;\r\n\r\n  private _badgeElement: HTMLElement | undefined;\r\n\r\n  constructor(\r\n      private _ngZone: NgZone,\r\n      private _elementRef: ElementRef<HTMLElement>,\r\n      private _ariaDescriber: AriaDescriber,\r\n      private _renderer: Renderer2,\r\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\r\n      super();\r\n\r\n      if (isDevMode()) {\r\n        const nativeElement = _elementRef.nativeElement;\r\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\r\n          throw Error('matBadge must be attached to an element node.');\r\n        }\r\n      }\r\n    }\r\n\r\n  /** Whether the badge is above the host or not */\r\n  isAbove(): boolean {\r\n    return this.position.indexOf('below') === -1;\r\n  }\r\n\r\n  /** Whether the badge is after the host or not */\r\n  isAfter(): boolean {\r\n    return this.position.indexOf('before') === -1;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const contentChange = changes['content'];\r\n\r\n    if (contentChange) {\r\n      const value = contentChange.currentValue;\r\n      this._hasContent = value != null && `${value}`.trim().length > 0;\r\n      this._updateTextContent();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const badgeElement = this._badgeElement;\r\n\r\n    if (badgeElement) {\r\n      if (this.description) {\r\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\r\n      }\r\n\r\n      // When creating a badge through the Renderer, Angular will keep it in an index.\r\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\r\n      if (this._renderer.destroyNode) {\r\n        this._renderer.destroyNode(badgeElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the element into which the badge's content is being rendered.\r\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\r\n   */\r\n  getBadgeElement(): HTMLElement | undefined {\r\n    return this._badgeElement;\r\n  }\r\n\r\n  /** Injects a span element into the DOM with the content. */\r\n  private _updateTextContent(): HTMLSpanElement {\r\n    if (!this._badgeElement) {\r\n      this._badgeElement = this._createBadgeElement();\r\n    } else {\r\n      this._badgeElement.textContent = this.content;\r\n    }\r\n    return this._badgeElement;\r\n  }\r\n\r\n  /** Creates the badge element */\r\n  private _createBadgeElement(): HTMLElement {\r\n    const badgeElement = this._renderer.createElement('span');\r\n    const activeClass = 'mat-badge-active';\r\n    const contentClass = 'mat-badge-content';\r\n\r\n    // Clear any existing badges which may have persisted from a server-side render.\r\n    this._clearExistingBadges(contentClass);\r\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\r\n    badgeElement.classList.add(contentClass);\r\n    badgeElement.textContent = this.content;\r\n\r\n    if (this._animationMode === 'NoopAnimations') {\r\n      badgeElement.classList.add('_mat-animation-noopable');\r\n    }\r\n\r\n    if (this.description) {\r\n      badgeElement.setAttribute('aria-label', this.description);\r\n    }\r\n\r\n    this._elementRef.nativeElement.appendChild(badgeElement);\r\n\r\n    // animate in after insertion\r\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          badgeElement.classList.add(activeClass);\r\n        });\r\n      });\r\n    } else {\r\n      badgeElement.classList.add(activeClass);\r\n    }\r\n\r\n    return badgeElement;\r\n  }\r\n\r\n  /** Sets the aria-label property on the element */\r\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\r\n    // ensure content available before setting label\r\n    const content = this._updateTextContent();\r\n\r\n    if (oldDescription) {\r\n      this._ariaDescriber.removeDescription(content, oldDescription);\r\n    }\r\n\r\n    if (newDescription) {\r\n      this._ariaDescriber.describe(content, newDescription);\r\n    }\r\n  }\r\n\r\n  /** Adds css theme class given the color to the component host */\r\n  private _setColor(colorPalette: ThemePalette) {\r\n    if (colorPalette !== this._color) {\r\n      if (this._color) {\r\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\r\n      }\r\n      if (colorPalette) {\r\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clears any existing badges that might be left over from server-side rendering. */\r\n  private _clearExistingBadges(cssClass: string) {\r\n    const element = this._elementRef.nativeElement;\r\n    let childCount = element.children.length;\r\n\r\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\r\n    while (childCount--) {\r\n      const currentChild = element.children[childCount];\r\n\r\n      if (currentChild.classList.contains(cssClass)) {\r\n        element.removeChild(currentChild);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MatBadge} from './badge';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    A11yModule,\r\n    MatCommonModule\r\n  ],\r\n  exports: [MatBadge],\r\n  declarations: [MatBadge],\r\n})\r\nexport class MatBadgeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy} from '@angular/cdk/overlay';\r\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\r\n\r\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\r\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\r\n\r\n/**\r\n * Configuration used when opening a bottom sheet.\r\n */\r\nexport class MatBottomSheetConfig<D = any> {\r\n  /** The view container to place the overlay for the bottom sheet into. */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** Extra CSS classes to be added to the bottom sheet container. */\r\n  panelClass?: string | string[];\r\n\r\n  /** Text layout direction for the bottom sheet. */\r\n  direction?: Direction;\r\n\r\n  /** Data being injected into the child component. */\r\n  data?: D | null = null;\r\n\r\n  /** Whether the bottom sheet has a backdrop. */\r\n  hasBackdrop?: boolean = true;\r\n\r\n  /** Custom class for the backdrop. */\r\n  backdropClass?: string;\r\n\r\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\r\n  disableClose?: boolean = false;\r\n\r\n  /** Aria label to assign to the bottom sheet element. */\r\n  ariaLabel?: string | null = null;\r\n\r\n  /**\r\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\r\n   * Note that this usually doesn't include clicking on links (unless the user is using\r\n   * the `HashLocationStrategy`).\r\n   */\r\n  closeOnNavigation?: boolean = true;\r\n\r\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\r\n  // the first focusable element, doing so prevents screen readers from reading out the\r\n  // rest of the bottom sheet content.\r\n  /** Whether the bottom sheet should focus the first focusable element on open. */\r\n  autoFocus?: boolean = false;\r\n\r\n  /**\r\n   * Whether the bottom sheet should restore focus to the\r\n   * previously-focused element, after it's closed.\r\n   */\r\n  restoreFocus?: boolean = true;\r\n\r\n  /** Scroll strategy to be used for the bottom sheet. */\r\n  scrollStrategy?: ScrollStrategy;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\n/** Animations used by the Material bottom sheet. */\r\nexport const matBottomSheetAnimations: {\r\n  readonly bottomSheetState: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that shows and hides a bottom sheet. */\r\n  bottomSheetState: trigger('state', [\r\n    state('void, hidden', style({transform: 'translateY(100%)'})),\r\n    state('visible', style({transform: 'translateY(0%)'})),\r\n    transition('visible => void, visible => hidden',\r\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\r\n    transition('void => visible',\r\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ViewChild,\r\n  OnDestroy,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  TemplatePortal,\r\n  CdkPortalOutlet,\r\n} from '@angular/cdk/portal';\r\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\r\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\r\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\r\nimport {Subscription} from 'rxjs';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\n\r\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\r\n\r\n/**\r\n * Internal component that wraps user-provided bottom sheet content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-bottom-sheet-container',\r\n  templateUrl: 'bottom-sheet-container.html',\r\n  styleUrls: ['bottom-sheet-container.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [matBottomSheetAnimations.bottomSheetState],\r\n  host: {\r\n    'class': 'mat-bottom-sheet-container',\r\n    'tabindex': '-1',\r\n    'role': 'dialog',\r\n    'aria-modal': 'true',\r\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\r\n    '[@state]': '_animationState',\r\n    '(@state.start)': '_onAnimationStart($event)',\r\n    '(@state.done)': '_onAnimationDone($event)'\r\n  },\r\n})\r\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\r\n  private _breakpointSubscription: Subscription;\r\n\r\n  /** The portal outlet inside of this container into which the content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** The state of the bottom sheet animations. */\r\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\r\n\r\n  /** Emits whenever the state of the animation changes. */\r\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\r\n\r\n  /** The class that traps and manages focus within the bottom sheet. */\r\n  private _focusTrap: FocusTrap;\r\n\r\n  /** Element that was focused before the bottom sheet was opened. */\r\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\r\n\r\n  /** Server-side rendering-compatible reference to the global document object. */\r\n  private _document: Document;\r\n\r\n  /** Whether the component has been destroyed. */\r\n  private _destroyed: boolean;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _focusTrapFactory: FocusTrapFactory,\r\n    breakpointObserver: BreakpointObserver,\r\n    @Optional() @Inject(DOCUMENT) document: any,\r\n    /** The bottom sheet configuration. */\r\n    public bottomSheetConfig: MatBottomSheetConfig) {\r\n    super();\r\n\r\n    this._document = document;\r\n    this._breakpointSubscription = breakpointObserver\r\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\r\n      .subscribe(() => {\r\n        this._toggleClass('mat-bottom-sheet-container-medium',\r\n            breakpointObserver.isMatched(Breakpoints.Medium));\r\n        this._toggleClass('mat-bottom-sheet-container-large',\r\n            breakpointObserver.isMatched(Breakpoints.Large));\r\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\r\n            breakpointObserver.isMatched(Breakpoints.XLarge));\r\n      });\r\n  }\r\n\r\n  /** Attach a component portal as content to this bottom sheet container. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    this._validatePortalAttached();\r\n    this._setPanelClass();\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /** Attach a template portal as content to this bottom sheet container. */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    this._validatePortalAttached();\r\n    this._setPanelClass();\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Begin animation of bottom sheet entrance into view. */\r\n  enter(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = 'visible';\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Begin animation of the bottom sheet exiting from view. */\r\n  exit(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = 'hidden';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._breakpointSubscription.unsubscribe();\r\n    this._destroyed = true;\r\n  }\r\n\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'hidden') {\r\n      this._restoreFocus();\r\n    } else if (event.toState === 'visible') {\r\n      this._trapFocus();\r\n    }\r\n\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  private _toggleClass(cssClass: string, add: boolean) {\r\n    const classList = this._elementRef.nativeElement.classList;\r\n    add ? classList.add(cssClass) : classList.remove(cssClass);\r\n  }\r\n\r\n  private _validatePortalAttached() {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\r\n    }\r\n  }\r\n\r\n  private _setPanelClass() {\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n    const panelClass = this.bottomSheetConfig.panelClass;\r\n\r\n    if (Array.isArray(panelClass)) {\r\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\r\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\r\n    } else if (panelClass) {\r\n      element.classList.add(panelClass);\r\n    }\r\n  }\r\n\r\n\r\n  /** Moves the focus inside the focus trap. */\r\n  private _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n\r\n    if (this.bottomSheetConfig.autoFocus) {\r\n      this._focusTrap.focusInitialElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\r\n  private _restoreFocus() {\r\n    const toFocus = this._elementFocusedBeforeOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\r\n\r\n    // The `focus` method isn't available during server-side rendering.\r\n    if (this._elementRef.nativeElement.focus) {\r\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatCommonModule,\r\n    PortalModule,\r\n  ],\r\n  exports: [MatBottomSheetContainer, MatCommonModule],\r\n  declarations: [MatBottomSheetContainer],\r\n  entryComponents: [MatBottomSheetContainer],\r\n})\r\nexport class MatBottomSheetModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Location} from '@angular/common';\r\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {OverlayRef} from '@angular/cdk/overlay';\r\nimport {merge, Observable, Subject} from 'rxjs';\r\nimport {filter, take} from 'rxjs/operators';\r\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\r\n\r\n\r\n/**\r\n * Reference to a bottom sheet dispatched from the bottom sheet service.\r\n */\r\nexport class MatBottomSheetRef<T = any, R = any> {\r\n  /** Instance of the component making up the content of the bottom sheet. */\r\n  instance: T;\r\n\r\n  /**\r\n   * Instance of the component into which the bottom sheet content is projected.\r\n   * @docs-private\r\n   */\r\n  containerInstance: MatBottomSheetContainer;\r\n\r\n  /** Whether the user is allowed to close the bottom sheet. */\r\n  disableClose: boolean | undefined;\r\n\r\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\r\n  private readonly _afterDismissed = new Subject<R | undefined>();\r\n\r\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\r\n  private readonly _afterOpened = new Subject<void>();\r\n\r\n  /** Result to be passed down to the `afterDismissed` stream. */\r\n  private _result: R | undefined;\r\n\r\n  constructor(\r\n    containerInstance: MatBottomSheetContainer,\r\n    private _overlayRef: OverlayRef,\r\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\r\n    _location?: Location) {\r\n    this.containerInstance = containerInstance;\r\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\r\n\r\n    // Emit when opening animation completes\r\n    containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    });\r\n\r\n    // Dispose overlay when closing animation is complete\r\n    containerInstance._animationStateChanged\r\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\r\n        .subscribe(() => {\r\n          _overlayRef.dispose();\r\n        });\r\n\r\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\r\n      this._afterDismissed.next(this._result);\r\n      this._afterDismissed.complete();\r\n    });\r\n\r\n    merge(\r\n      _overlayRef.backdropClick(),\r\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\r\n    ).subscribe(event => {\r\n      if (!this.disableClose &&\r\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\r\n        event.preventDefault();\r\n        this.dismiss();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dismisses the bottom sheet.\r\n   * @param result Data to be passed back to the bottom sheet opener.\r\n   */\r\n  dismiss(result?: R): void {\r\n    if (!this._afterDismissed.closed) {\r\n      // Transition the backdrop in parallel to the bottom sheet.\r\n      this.containerInstance._animationStateChanged.pipe(\r\n        filter(event => event.phaseName === 'start'),\r\n        take(1)\r\n      ).subscribe(() => this._overlayRef.detachBackdrop());\r\n\r\n      this._result = result;\r\n      this.containerInstance.exit();\r\n    }\r\n  }\r\n\r\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\r\n  afterDismissed(): Observable<R | undefined> {\r\n    return this._afterDismissed.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\r\n  afterOpened(): Observable<void> {\r\n    return this._afterOpened.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n   */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._overlayRef.backdropClick();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._overlayRef.keydownEvents();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ComponentRef,\r\n  Injectable,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  InjectionToken,\r\n  Inject,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {Location} from '@angular/common';\r\nimport {of as observableOf} from 'rxjs';\r\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\r\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\r\nimport {MatBottomSheetModule} from './bottom-sheet-module';\r\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\r\n\r\n\r\n/** Injection token that can be used to specify default bottom sheet options. */\r\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\r\n\r\n/**\r\n * Service to trigger Material Design bottom sheets.\r\n */\r\n@Injectable({providedIn: MatBottomSheetModule})\r\nexport class MatBottomSheet implements OnDestroy {\r\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\r\n\r\n  /** Reference to the currently opened bottom sheet. */\r\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\r\n    const parent = this._parentBottomSheet;\r\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\r\n  }\r\n\r\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\r\n    if (this._parentBottomSheet) {\r\n      this._parentBottomSheet._openedBottomSheetRef = value;\r\n    } else {\r\n      this._bottomSheetRefAtThisLevel = value;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _injector: Injector,\r\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\r\n      @Optional() private _location?: Location,\r\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\r\n          private _defaultOptions?: MatBottomSheetConfig) {}\r\n\r\n  open<T, D = any, R = any>(component: ComponentType<T>,\r\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\r\n  open<T, D = any, R = any>(template: TemplateRef<T>,\r\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\r\n\r\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\r\n\r\n    const _config =\r\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\r\n    const overlayRef = this._createOverlay(_config);\r\n    const container = this._attachContainer(overlayRef, _config);\r\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\r\n        $implicit: _config.data,\r\n        bottomSheetRef: ref\r\n      } as any));\r\n    } else {\r\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\r\n            this._createInjector(_config, ref));\r\n      const contentRef = container.attachComponentPortal(portal);\r\n      ref.instance = contentRef.instance;\r\n    }\r\n\r\n    // When the bottom sheet is dismissed, clear the reference to it.\r\n    ref.afterDismissed().subscribe(() => {\r\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\r\n      if (this._openedBottomSheetRef == ref) {\r\n        this._openedBottomSheetRef = null;\r\n      }\r\n    });\r\n\r\n    if (this._openedBottomSheetRef) {\r\n      // If a bottom sheet is already in view, dismiss it and enter the\r\n      // new bottom sheet after exit animation is complete.\r\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\r\n      this._openedBottomSheetRef.dismiss();\r\n    } else {\r\n      // If no bottom sheet is in view, enter the new bottom sheet.\r\n      ref.containerInstance.enter();\r\n    }\r\n\r\n    this._openedBottomSheetRef = ref;\r\n\r\n    return ref;\r\n  }\r\n\r\n  /**\r\n   * Dismisses the currently-visible bottom sheet.\r\n   */\r\n  dismiss(): void {\r\n    if (this._openedBottomSheetRef) {\r\n      this._openedBottomSheetRef.dismiss();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._bottomSheetRefAtThisLevel) {\r\n      this._bottomSheetRefAtThisLevel.dismiss();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attaches the bottom sheet container component to the overlay.\r\n   */\r\n  private _attachContainer(overlayRef: OverlayRef,\r\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n      [MatBottomSheetConfig, config]\r\n    ]));\r\n\r\n    const containerPortal =\r\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\r\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Creates a new overlay and places it in the correct location.\r\n   * @param config The user-specified bottom sheet config.\r\n   */\r\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig({\r\n      direction: config.direction,\r\n      hasBackdrop: config.hasBackdrop,\r\n      disposeOnNavigation: config.closeOnNavigation,\r\n      maxWidth: '100%',\r\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\r\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\r\n    });\r\n\r\n    if (config.backdropClass) {\r\n      overlayConfig.backdropClass = config.backdropClass;\r\n    }\r\n\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an injector to be used inside of a bottom sheet component.\r\n   * @param config Config that was used to create the bottom sheet.\r\n   * @param bottomSheetRef Reference to the bottom sheet.\r\n   */\r\n  private _createInjector<T>(config: MatBottomSheetConfig,\r\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injectionTokens = new WeakMap<any, any>([\r\n      [MatBottomSheetRef, bottomSheetRef],\r\n      [MAT_BOTTOM_SHEET_DATA, config.data]\r\n    ]);\r\n\r\n    if (config.direction &&\r\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\n}\r\n\r\n/**\r\n * Applies default options to the bottom sheet config.\r\n * @param defaults Object containing the default values to which to fall back.\r\n * @param config The configuration to which the defaults will be applied.\r\n * @returns The new configuration object with defaults applied.\r\n */\r\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\r\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\r\n  return {...defaults, ...config};\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {MatOptgroup} from './optgroup';\r\n\r\n/**\r\n * Option IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Event object emitted by MatOption when selected or deselected. */\r\nexport class MatOptionSelectionChange {\r\n  constructor(\r\n    /** Reference to the option that emitted the event. */\r\n    public source: MatOption,\r\n    /** Whether the change in the option's value was a result of a user action. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n/**\r\n * Describes a parent component that manages a list of options.\r\n * Contains properties that the options can inherit.\r\n * @docs-private\r\n */\r\nexport interface MatOptionParentComponent {\r\n  disableRipple?: boolean;\r\n  multiple?: boolean;\r\n}\r\n\r\n/**\r\n * Injection token used to provide the parent component to options.\r\n */\r\nexport const MAT_OPTION_PARENT_COMPONENT =\r\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\r\n\r\n/**\r\n * Single option inside of a `<mat-select>` element.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-option',\r\n  exportAs: 'matOption',\r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.mat-selected]': 'selected',\r\n    '[class.mat-option-multiple]': 'multiple',\r\n    '[class.mat-active]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': '_getAriaSelected()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.mat-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    'class': 'mat-option',\r\n  },\r\n  styleUrls: ['option.css'],\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatOption implements AfterViewChecked, OnDestroy {\r\n  private _selected = false;\r\n  private _active = false;\r\n  private _disabled = false;\r\n  private _mostRecentViewValue = '';\r\n\r\n  /** Whether the wrapping component is in multiple selection mode. */\r\n  get multiple() { return this._parent && this._parent.multiple; }\r\n\r\n  /** Whether or not the option is currently selected. */\r\n  get selected(): boolean { return this._selected; }\r\n\r\n  /** The form value of the option. */\r\n  @Input() value: any;\r\n\r\n  /** The unique ID of the option. */\r\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\r\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n  /** Whether ripples for the option are disabled. */\r\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\r\n\r\n  /** Event emitted when the option is selected or deselected. */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\r\n\r\n  /** Emits when the state of the option changes and any parents have to be notified. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  constructor(\r\n    private _element: ElementRef<HTMLElement>,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\r\n    @Optional() readonly group: MatOptgroup) {}\r\n\r\n  /**\r\n   * Whether or not the option is currently active and ready to be selected.\r\n   * An active option displays styles as if it is focused, but the\r\n   * focus is actually retained somewhere else. This comes in handy\r\n   * for components like autocomplete where focus must remain on the input.\r\n   */\r\n  get active(): boolean {\r\n    return this._active;\r\n  }\r\n\r\n  /**\r\n   * The displayed value of the option. It is necessary to show the selected option in the\r\n   * select's trigger.\r\n   */\r\n  get viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return (this._getHostElement().textContent || '').trim();\r\n  }\r\n\r\n  /** Selects the option. */\r\n  select(): void {\r\n    if (!this._selected) {\r\n      this._selected = true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Deselects the option. */\r\n  deselect(): void {\r\n    if (this._selected) {\r\n      this._selected = false;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent();\r\n    }\r\n  }\r\n\r\n  /** Sets focus onto this option. */\r\n  focus(): void {\r\n    const element = this._getHostElement();\r\n\r\n    if (typeof element.focus === 'function') {\r\n      element.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method sets display styles on the option to make it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setActiveStyles(): void {\r\n    if (!this._active) {\r\n      this._active = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method removes display styles on the option that made it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setInactiveStyles(): void {\r\n    if (this._active) {\r\n      this._active = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    return this.viewValue;\r\n  }\r\n\r\n  /** Ensures the option is selected when activated from the keyboard. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\r\n      this._selectViaInteraction();\r\n\r\n      // Prevent the page from scrolling down and form submits.\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `Selects the option while indicating the selection came from the user. Used to\r\n   * determine if the select's view -> model callback should be invoked.`\r\n   */\r\n  _selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\r\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\r\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\r\n   * information.\r\n   */\r\n  _getAriaSelected(): boolean|null {\r\n    return this.selected || (this.multiple ? false : null);\r\n  }\r\n\r\n  /** Returns the correct tabindex for the option depending on disabled state. */\r\n  _getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\r\n\r\n  /** Gets the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    // Since parent components could be using the option's label to display the selected values\r\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\r\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\r\n    // relatively cheap, however we still limit them only to selected options in order to avoid\r\n    // hitting the DOM too often.\r\n    if (this._selected) {\r\n      const viewValue = this.viewValue;\r\n\r\n      if (viewValue !== this._mostRecentViewValue) {\r\n        this._mostRecentViewValue = viewValue;\r\n        this._stateChanges.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n\r\n  /** Emits the selection change event. */\r\n  private _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\r\n  }\r\n}\r\n\r\n/**\r\n * Counts the amount of option group labels that precede the specified option.\r\n * @param optionIndex Index of the option at which to start counting.\r\n * @param options Flat list of all of the options.\r\n * @param optionGroups Flat list of all of the option groups.\r\n * @docs-private\r\n */\r\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\r\n  optionGroups: QueryList<MatOptgroup>): number {\r\n\r\n  if (optionGroups.length) {\r\n    let optionsArray = options.toArray();\r\n    let groups = optionGroups.toArray();\r\n    let groupCounter = 0;\r\n\r\n    for (let i = 0; i < optionIndex + 1; i++) {\r\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n        groupCounter++;\r\n      }\r\n    }\r\n\r\n    return groupCounter;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Determines the position to which to scroll a panel in order for an option to be into view.\r\n * @param optionIndex Index of the option to be scrolled into the view.\r\n * @param optionHeight Height of the options.\r\n * @param currentScrollPosition Current scroll position of the panel.\r\n * @param panelHeight Height of the panel.\r\n * @docs-private\r\n */\r\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\r\n    currentScrollPosition: number, panelHeight: number): number {\r\n  const optionOffset = optionIndex * optionHeight;\r\n\r\n  if (optionOffset < currentScrollPosition) {\r\n    return optionOffset;\r\n  }\r\n\r\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\r\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\r\n  }\r\n\r\n  return currentScrollPosition;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatRippleModule} from '../ripple/index';\r\nimport {MatPseudoCheckboxModule} from '../selection/index';\r\nimport {MatOption} from './option';\r\nimport {MatOptgroup} from './optgroup';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\r\n  exports: [MatOption, MatOptgroup],\r\n  declarations: [MatOption, MatOptgroup]\r\n})\r\nexport class MatOptionModule {}\r\n\r\n\r\nexport * from './option';\r\nexport * from './optgroup';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/** InjectionToken that can be used to specify the global label options. */\r\nexport const MAT_LABEL_GLOBAL_OPTIONS =\r\n  new InjectionToken<LabelOptions>('mat-label-global-options');\r\n\r\n/** Type for the available floatLabel values. */\r\nexport type FloatLabelType = 'always' | 'never' | 'auto';\r\n\r\n/** Configurable options for floating labels. */\r\nexport interface LabelOptions {\r\n  /**\r\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\r\n   * Default behavior is assumed to be `auto`.\r\n   */\r\n  float?: FloatLabelType;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Single error message to be shown underneath the form field. */\r\n@Directive({\r\n  selector: 'mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n})\r\nexport class MatError {\r\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the MatFormField.\r\n * @docs-private\r\n */\r\nexport const matFormFieldAnimations: {\r\n  readonly transitionMessages: AnimationTriggerMetadata\r\n} = {\r\n  /** Animation that transitions the form field's error and hint messages. */\r\n  transitionMessages: trigger('transitionMessages', [\r\n    // TODO(mmalerba): Use angular animations for label animation as well.\r\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n    transition('void => enter', [\r\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n    ]),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {NgControl} from '@angular/forms';\r\n\r\n\r\n/** An interface which allows a control to work inside of a `MatFormField`. */\r\nexport abstract class MatFormFieldControl<T> {\r\n  /** The value of the control. */\r\n  value: T | null;\r\n\r\n  /**\r\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\r\n   * needs to run change detection.\r\n   */\r\n  readonly stateChanges: Observable<void>;\r\n\r\n  /** The element ID for this control. */\r\n  readonly id: string;\r\n\r\n  /** The placeholder for this control. */\r\n  readonly placeholder: string;\r\n\r\n  /** Gets the NgControl for this control. */\r\n  readonly ngControl: NgControl | null;\r\n\r\n  /** Whether the control is focused. */\r\n  readonly focused: boolean;\r\n\r\n  /** Whether the control is empty. */\r\n  readonly empty: boolean;\r\n\r\n  /** Whether the `MatFormField` label should try to float. */\r\n  readonly shouldLabelFloat: boolean;\r\n\r\n  /** Whether the control is required. */\r\n  readonly required: boolean;\r\n\r\n  /** Whether the control is disabled. */\r\n  readonly disabled: boolean;\r\n\r\n  /** Whether the control is in an error state. */\r\n  readonly errorState: boolean;\r\n\r\n  /**\r\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\r\n   * based on their control type. The form field will add a class,\r\n   * `mat-form-field-type-{{controlType}}` to its root element.\r\n   */\r\n  readonly controlType?: string;\r\n\r\n  /**\r\n   * Whether the input is currently in an autofilled state. If property is not present on the\r\n   * control it is assumed to be false.\r\n   */\r\n  readonly autofilled?: boolean;\r\n\r\n  /** Sets the list of element IDs that currently describe this control. */\r\n  abstract setDescribedByIds(ids: string[]): void;\r\n\r\n  /** Handles a click on the control's container. */\r\n  abstract onContainerClick(event: MouseEvent): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Hint text to be shown underneath the form field control. */\r\n@Directive({\r\n  selector: 'mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n})\r\nexport class MatHint {\r\n  /** Whether to align the hint label at the start or end of the line. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n\r\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\r\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** The floating label for a `mat-form-field`. */\r\n@Directive({\r\n  selector: 'mat-label'\r\n})\r\nexport class MatLabel {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/**\r\n * The placeholder text for an `MatFormField`.\r\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\r\n *     placeholder.\r\n * @breaking-change 8.0.0\r\n */\r\n@Directive({\r\n  selector: 'mat-placeholder'\r\n})\r\nexport class MatPlaceholder {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Prefix to be placed in front of the form field. */\r\n@Directive({\r\n  selector: '[matPrefix]',\r\n})\r\nexport class MatPrefix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Suffix to be placed at the end of the form field. */\r\n@Directive({\r\n  selector: '[matSuffix]',\r\n})\r\nexport class MatSuffix {}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\r\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\r\n\r\n// Private version constant to circumvent test/build issues,\r\n// i.e. avoid core to depend on the @angular/material primary entry-point\r\n// Can be removed once the Material primary entry-point no longer\r\n// re-exports all secondary entry-points\r\nconst VERSION = new Version('8.0.1');\r\n\r\n\r\n/** Injection token that configures whether the Material sanity checks are enabled. */\r\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\r\n  providedIn: 'root',\r\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\r\n});\r\n\r\n/** @docs-private */\r\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\r\n  return true;\r\n}\r\n\r\n/**\r\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\r\n * components. This includes Bidi, etc.\r\n *\r\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\r\n */\r\n@NgModule({\r\n  imports: [BidiModule],\r\n  exports: [BidiModule],\r\n})\r\nexport class MatCommonModule {\r\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\r\n  private _hasDoneGlobalChecks = false;\r\n\r\n  /** Whether we've already checked for HammerJs availability. */\r\n  private _hasCheckedHammer = false;\r\n\r\n  /** Reference to the global `document` object. */\r\n  private _document = typeof document === 'object' && document ? document : null;\r\n\r\n  /** Reference to the global 'window' object. */\r\n  private _window = typeof window === 'object' && window ? window : null;\r\n\r\n  constructor(\r\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\r\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\r\n\r\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\r\n      this._checkDoctypeIsDefined();\r\n      this._checkThemeIsPresent();\r\n      this._checkCdkVersionMatch();\r\n      this._hasDoneGlobalChecks = true;\r\n    }\r\n  }\r\n\r\n  /** Whether any sanity checks are enabled */\r\n  private _areChecksEnabled(): boolean {\r\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\r\n  }\r\n\r\n  /** Whether the code is running in tests. */\r\n  private _isTestEnv() {\r\n    const window = this._window as any;\r\n    return window && (window.__karma__ || window.jasmine);\r\n  }\r\n\r\n  private _checkDoctypeIsDefined(): void {\r\n    if (this._document && !this._document.doctype) {\r\n      console.warn(\r\n        'Current document does not have a doctype. This may cause ' +\r\n        'some Angular Material components not to behave as expected.'\r\n      );\r\n    }\r\n  }\r\n\r\n  private _checkThemeIsPresent(): void {\r\n    // We need to assert that the `body` is defined, because these checks run very early\r\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\r\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\r\n      return;\r\n    }\r\n\r\n    const testElement = this._document.createElement('div');\r\n\r\n    testElement.classList.add('mat-theme-loaded-marker');\r\n    this._document.body.appendChild(testElement);\r\n\r\n    const computedStyle = getComputedStyle(testElement);\r\n\r\n    // In some situations the computed style of the test element can be null. For example in\r\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\r\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n    if (computedStyle && computedStyle.display !== 'none') {\r\n      console.warn(\r\n        'Could not find Angular Material core theme. Most Material ' +\r\n        'components may not work as expected. For more info refer ' +\r\n        'to the theming guide: https://material.angular.io/guide/theming'\r\n      );\r\n    }\r\n\r\n    this._document.body.removeChild(testElement);\r\n  }\r\n\r\n  /** Checks whether the material version matches the cdk version */\r\n  private _checkCdkVersionMatch(): void {\r\n    if (VERSION.full !== CDK_VERSION.full) {\r\n      console.warn(\r\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\r\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\r\n          'Please ensure the versions of these two packages exactly match.'\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Checks whether HammerJS is available. */\r\n  _checkHammerIsAvailable(): void {\r\n    if (this._hasCheckedHammer || !this._window) {\r\n      return;\r\n    }\r\n\r\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\r\n      console.warn(\r\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\r\n    }\r\n    this._hasCheckedHammer = true;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisable {\r\n  /** Whether the component is disabled. */\r\n  disabled: boolean;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanDisableCtor = Constructor<CanDisable>;\r\n\r\n/** Mixin to augment a directive with a `disabled` property. */\r\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\r\n  return class extends base {\r\n    private _disabled: boolean = false;\r\n\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {ElementRef} from '@angular/core';\r\n\r\n/** @docs-private */\r\nexport interface CanColor {\r\n  /** Theme color palette for the component. */\r\n  color: ThemePalette;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanColorCtor = Constructor<CanColor>;\r\n\r\n/** @docs-private */\r\nexport interface HasElementRef {\r\n  _elementRef: ElementRef;\r\n}\r\n\r\n/** Possible color palette values. */\r\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\r\n\r\n/** Mixin to augment a directive with a `color` property. */\r\nexport function mixinColor<T extends Constructor<HasElementRef>>(\r\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\r\n  return class extends base {\r\n    private _color: ThemePalette;\r\n\r\n    get color(): ThemePalette { return this._color; }\r\n    set color(value: ThemePalette) {\r\n      const colorPalette = value || defaultColor;\r\n\r\n      if (colorPalette !== this._color) {\r\n        if (this._color) {\r\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\r\n        }\r\n        if (colorPalette) {\r\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\r\n        }\r\n\r\n        this._color = colorPalette;\r\n      }\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      // Set the default color that can be specified from the mixin.\r\n      this.color = defaultColor;\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisableRipple {\r\n  /** Whether ripples are disabled. */\r\n  disableRipple: boolean;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\r\n\r\n/** Mixin to augment a directive with a `disableRipple` property. */\r\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\r\n  return class extends base {\r\n    private _disableRipple: boolean = false;\r\n\r\n    /** Whether the ripple effect is disabled or not. */\r\n    get disableRipple() { return this._disableRipple; }\r\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {CanDisable} from './disabled';\r\n\r\n\r\n/** @docs-private */\r\nexport interface HasTabIndex {\r\n  /** Tabindex of the component. */\r\n  tabIndex: number;\r\n}\r\n\r\n/** @docs-private */\r\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\r\n\r\n/** Mixin to augment a directive with a `tabIndex` property. */\r\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\r\n    : HasTabIndexCtor & T {\r\n  return class extends base {\r\n    private _tabIndex: number = defaultTabIndex;\r\n\r\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\r\n    set tabIndex(value: number) {\r\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n      this._tabIndex = value != null ? value : defaultTabIndex;\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {Subject} from 'rxjs';\r\nimport {ErrorStateMatcher} from '../error/error-options';\r\nimport {Constructor} from './constructor';\r\n\r\n\r\n/** @docs-private */\r\nexport interface CanUpdateErrorState {\r\n  updateErrorState(): void;\r\n  readonly stateChanges: Subject<void>;\r\n  errorState: boolean;\r\n  errorStateMatcher: ErrorStateMatcher;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\r\n\r\n/** @docs-private */\r\nexport interface HasErrorState {\r\n  _parentFormGroup: FormGroupDirective;\r\n  _parentForm: NgForm;\r\n  _defaultErrorStateMatcher: ErrorStateMatcher;\r\n  ngControl: NgControl;\r\n}\r\n\r\n/**\r\n * Mixin to augment a directive with updateErrorState method.\r\n * For component with `errorState` and need to update `errorState`.\r\n */\r\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\r\n: CanUpdateErrorStateCtor & T {\r\n  return class extends base {\r\n    /** Whether the component is in an error state. */\r\n    errorState: boolean = false;\r\n\r\n    /**\r\n     * Stream that emits whenever the state of the input changes such that the wrapping\r\n     * `MatFormField` needs to run change detection.\r\n     */\r\n    readonly stateChanges = new Subject<void>();\r\n\r\n    errorStateMatcher: ErrorStateMatcher;\r\n\r\n    updateErrorState() {\r\n      const oldState = this.errorState;\r\n      const parent = this._parentFormGroup || this._parentForm;\r\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\r\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\r\n      const newState = matcher.isErrorState(control, parent);\r\n\r\n      if (newState !== oldState) {\r\n        this.errorState = newState;\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable, Subscriber} from 'rxjs';\r\nimport {Constructor} from './constructor';\r\n\r\n\r\n/**\r\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\r\n * value once markInitialized has been called, which should be done during the ngOnInit function.\r\n * If the subscription is made after it has already been marked as initialized, then it will trigger\r\n * an emit immediately.\r\n * @docs-private\r\n */\r\nexport interface HasInitialized {\r\n  /** Stream that emits once during the directive/component's ngOnInit. */\r\n  initialized: Observable<void>;\r\n\r\n  /**\r\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\r\n   * the directive has been initialized.\r\n   * @docs-private\r\n   */\r\n  _markInitialized: () => void;\r\n}\r\n\r\n/** @docs-private */\r\nexport type HasInitializedCtor = Constructor<HasInitialized>;\r\n\r\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\r\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\r\n    HasInitializedCtor & T {\r\n  return class extends base {\r\n    /** Whether this directive has been marked as initialized. */\r\n    _isInitialized = false;\r\n\r\n    /**\r\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\r\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\r\n     * not expect to be populated after.\r\n     */\r\n    _pendingSubscribers: Subscriber<void>[] | null = [];\r\n\r\n    /**\r\n     * Observable stream that emits when the directive initializes. If already initialized, the\r\n     * subscriber is stored to be notified once _markInitialized is called.\r\n     */\r\n    initialized = new Observable<void>(subscriber => {\r\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\r\n      // when _markInitialized is called.\r\n      if (this._isInitialized) {\r\n        this._notifySubscriber(subscriber);\r\n      } else {\r\n        this._pendingSubscribers!.push(subscriber);\r\n      }\r\n    });\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n\r\n    /**\r\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\r\n     * of ngOnInit.\r\n     * @docs-private\r\n     */\r\n    _markInitialized(): void {\r\n      if (this._isInitialized) {\r\n        throw Error('This directive has already been marked as initialized and ' +\r\n            'should not be called twice.');\r\n      }\r\n\r\n      this._isInitialized = true;\r\n\r\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\r\n      this._pendingSubscribers = null;\r\n    }\r\n\r\n    /** Emits and completes the subscriber stream (should only emit once). */\r\n    _notifySubscriber(subscriber: Subscriber<void>): void {\r\n      subscriber.next();\r\n      subscriber.complete();\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n/** InjectionToken for datepicker that can be used to override default locale code. */\r\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\r\n  providedIn: 'root',\r\n  factory: MAT_DATE_LOCALE_FACTORY,\r\n});\r\n\r\n/** @docs-private */\r\nexport function MAT_DATE_LOCALE_FACTORY(): string {\r\n  return inject(LOCALE_ID);\r\n}\r\n\r\n/**\r\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\r\n * If you are importing and providing this in your code you can simply remove it.\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n */\r\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\r\n\r\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\r\nexport abstract class DateAdapter<D> {\r\n  /** The locale to use for all dates. */\r\n  protected locale: any;\r\n\r\n  /** A stream that emits when the locale changes. */\r\n  get localeChanges(): Observable<void> { return this._localeChanges; }\r\n  protected _localeChanges = new Subject<void>();\r\n\r\n  /**\r\n   * Gets the year component of the given date.\r\n   * @param date The date to extract the year from.\r\n   * @returns The year component.\r\n   */\r\n  abstract getYear(date: D): number;\r\n\r\n  /**\r\n   * Gets the month component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @returns The month component (0-indexed, 0 = January).\r\n   */\r\n  abstract getMonth(date: D): number;\r\n\r\n  /**\r\n   * Gets the date of the month component of the given date.\r\n   * @param date The date to extract the date of the month from.\r\n   * @returns The month component (1-indexed, 1 = first of month).\r\n   */\r\n  abstract getDate(date: D): number;\r\n\r\n  /**\r\n   * Gets the day of the week component of the given date.\r\n   * @param date The date to extract the day of the week from.\r\n   * @returns The month component (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getDayOfWeek(date: D): number;\r\n\r\n  /**\r\n   * Gets a list of names for the months.\r\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\n   * @returns An ordered list of all month names, starting with January.\r\n   */\r\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the dates of the month.\r\n   * @returns An ordered list of all date of the month names, starting with '1'.\r\n   */\r\n  abstract getDateNames(): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the days of the week.\r\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\n   * @returns An ordered list of all weekday names, starting with Sunday.\r\n   */\r\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets the name for the year of the given date.\r\n   * @param date The date to get the year name for.\r\n   * @returns The name of the given year (e.g. '2017').\r\n   */\r\n  abstract getYearName(date: D): string;\r\n\r\n  /**\r\n   * Gets the first day of the week.\r\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getFirstDayOfWeek(): number;\r\n\r\n  /**\r\n   * Gets the number of days in the month of the given date.\r\n   * @param date The date whose month should be checked.\r\n   * @returns The number of days in the month of the given date.\r\n   */\r\n  abstract getNumDaysInMonth(date: D): number;\r\n\r\n  /**\r\n   * Clones the given date.\r\n   * @param date The date to clone\r\n   * @returns A new date equal to the given date.\r\n   */\r\n  abstract clone(date: D): D;\r\n\r\n  /**\r\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\r\n   * month and date.\r\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\r\n   * @returns The new date, or null if invalid.\r\n   */\r\n  abstract createDate(year: number, month: number, date: number): D;\r\n\r\n  /**\r\n   * Gets today's date.\r\n   * @returns Today's date.\r\n   */\r\n  abstract today(): D;\r\n\r\n  /**\r\n   * Parses a date from a user-provided value.\r\n   * @param value The value to parse.\r\n   * @param parseFormat The expected format of the value being parsed\r\n   *     (type is implementation-dependent).\r\n   * @returns The parsed date.\r\n   */\r\n  abstract parse(value: any, parseFormat: any): D | null;\r\n\r\n  /**\r\n   * Formats a date as a string according to the given format.\r\n   * @param date The value to format.\r\n   * @param displayFormat The format to use to display the date as a string.\r\n   * @returns The formatted date string.\r\n   */\r\n  abstract format(date: D, displayFormat: any): string;\r\n\r\n  /**\r\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\r\n   * calendar for each year and then finding the closest date in the new month. For example when\r\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add years to.\r\n   * @param years The number of years to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of years added.\r\n   */\r\n  abstract addCalendarYears(date: D, years: number): D;\r\n\r\n  /**\r\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\r\n   * calendar for each month and then finding the closest date in the new month. For example when\r\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add months to.\r\n   * @param months The number of months to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of months added.\r\n   */\r\n  abstract addCalendarMonths(date: D, months: number): D;\r\n\r\n  /**\r\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\r\n   * calendar for each day.\r\n   * @param date The date to add days to.\r\n   * @param days The number of days to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of days added.\r\n   */\r\n  abstract addCalendarDays(date: D, days: number): D;\r\n\r\n  /**\r\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\n   * This method is used to generate date strings that are compatible with native HTML attributes\r\n   * such as the `min` or `max` attribute of an `<input>`.\r\n   * @param date The date to get the ISO date string for.\r\n   * @returns The ISO date string date string.\r\n   */\r\n  abstract toIso8601(date: D): string;\r\n\r\n  /**\r\n   * Checks whether the given object is considered a date instance by this DateAdapter.\r\n   * @param obj The object to check\r\n   * @returns Whether the object is a date instance.\r\n   */\r\n  abstract isDateInstance(obj: any): boolean;\r\n\r\n  /**\r\n   * Checks whether the given date is valid.\r\n   * @param date The date to check.\r\n   * @returns Whether the date is valid.\r\n   */\r\n  abstract isValid(date: D): boolean;\r\n\r\n  /**\r\n   * Gets date instance that is not valid.\r\n   * @returns An invalid date.\r\n   */\r\n  abstract invalid(): D;\r\n\r\n  /**\r\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\r\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\r\n   * string). The default implementation does not allow any deserialization, it simply checks that\r\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\r\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\r\n   * support passing values from your backend directly to these properties by overriding this method\r\n   * to also deserialize the format used by your backend.\r\n   * @param value The value to be deserialized into a date object.\r\n   * @returns The deserialized date object, either a valid date, null if the value can be\r\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\r\n   */\r\n  deserialize(value: any): D | null {\r\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\r\n      return value;\r\n    }\r\n    return this.invalid();\r\n  }\r\n\r\n  /**\r\n   * Sets the locale used for all dates.\r\n   * @param locale The new locale.\r\n   */\r\n  setLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Compares two dates.\r\n   * @param first The first date to compare.\r\n   * @param second The second date to compare.\r\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n   *     a number greater than 0 if the first date is later.\r\n   */\r\n  compareDate(first: D, second: D): number {\r\n    return this.getYear(first) - this.getYear(second) ||\r\n        this.getMonth(first) - this.getMonth(second) ||\r\n        this.getDate(first) - this.getDate(second);\r\n  }\r\n\r\n  /**\r\n   * Checks if two dates are equal.\r\n   * @param first The first date to check.\r\n   * @param second The second date to check.\r\n   * @returns Whether the two dates are equal.\r\n   *     Null dates are considered equal to other null dates.\r\n   */\r\n  sameDate(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      let firstValid = this.isValid(first);\r\n      let secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !this.compareDate(first, second);\r\n      }\r\n      return firstValid == secondValid;\r\n    }\r\n    return first == second;\r\n  }\r\n\r\n  /**\r\n   * Clamp the given date between min and max dates.\r\n   * @param date The date to clamp.\r\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\r\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\r\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n   *     otherwise `date`.\r\n   */\r\n  clampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDate(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nlet SUPPORTS_INTL_API: boolean;\r\n\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n} catch {\r\n  SUPPORTS_INTL_API = false;\r\n}\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX =\r\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NativeDateAdapter extends DateAdapter<Date> {\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from it's utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\r\n      return range(12, i =>\r\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n          this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n          this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let result = this._createDateWithOverflow(year, month, date);\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = {...displayFormat, timeZone: 'utc'};\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number) {\r\n    const result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    const d = new Date(Date.UTC(\r\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  NgModule,\r\n  Directive,\r\n  ElementRef,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {startWith} from 'rxjs/operators';\r\nimport {MatCommonModule} from '../common-behaviors/common-module';\r\n\r\n\r\n/**\r\n * Shared directive to count lines inside a text area, such as a list item.\r\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\r\n * counted by checking the query list's length.\r\n */\r\n@Directive({\r\n  selector: '[mat-line], [matLine]',\r\n  host: {'class': 'mat-line'}\r\n})\r\nexport class MatLine {}\r\n\r\n/**\r\n * Helper that takes a query list of lines and sets the correct class on the host.\r\n * @docs-private\r\n */\r\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\r\n  // Note: doesn't need to unsubscribe, because `changes`\r\n  // gets completed by Angular when the view is destroyed.\r\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\r\n    setClass(element, 'mat-2-line', false);\r\n    setClass(element, 'mat-3-line', false);\r\n    setClass(element, 'mat-multi-line', false);\r\n\r\n    if (length === 2 || length === 3) {\r\n      setClass(element, `mat-${length}-line`, true);\r\n    } else if (length > 3) {\r\n      setClass(element, `mat-multi-line`, true);\r\n    }\r\n  });\r\n}\r\n\r\n/** Adds or removes a class from an element. */\r\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\r\n  const classList = element.nativeElement.classList;\r\n  isAdd ? classList.add(className) : classList.remove(className);\r\n}\r\n\r\n/**\r\n * Helper that takes a query list of lines and sets the correct class on the host.\r\n * @docs-private\r\n * @deprecated Use `setLines` instead.\r\n * @breaking-change 8.0.0\r\n */\r\nexport class MatLineSetter {\r\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\r\n    setLines(lines, element);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [MatLine, MatCommonModule],\r\n  declarations: [MatLine],\r\n})\r\nexport class MatLineModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\r\nimport {RippleRef, RippleState} from './ripple-ref';\r\n\r\nexport type RippleConfig = {\r\n  color?: string;\r\n  centered?: boolean;\r\n  radius?: number;\r\n  persistent?: boolean;\r\n  animation?: RippleAnimationConfig;\r\n  terminateOnPointerUp?: boolean;\r\n};\r\n\r\n/**\r\n * Interface that describes the configuration for the animation of a ripple.\r\n * There are two animation phases with different durations for the ripples.\r\n */\r\nexport interface RippleAnimationConfig {\r\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\r\n  enterDuration?: number;\r\n  /** Duration in milliseconds for the exit animation (fade-out). */\r\n  exitDuration?: number;\r\n}\r\n\r\n/**\r\n * Interface that describes the target for launching ripples.\r\n * It defines the ripple configuration and disabled state for interaction ripples.\r\n * @docs-private\r\n */\r\nexport interface RippleTarget {\r\n  /** Configuration for ripples that are launched on pointer down. */\r\n  rippleConfig: RippleConfig;\r\n  /** Whether ripples on pointer down should be disabled. */\r\n  rippleDisabled: boolean;\r\n}\r\n\r\n/**\r\n * Default ripple animation configuration for ripples without an explicit\r\n * animation config specified.\r\n */\r\nexport const defaultRippleAnimationConfig = {\r\n  enterDuration: 450,\r\n  exitDuration: 400\r\n};\r\n\r\n/**\r\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\r\n * events to avoid synthetic mouse events.\r\n */\r\nconst ignoreMouseEventsTimeout = 800;\r\n\r\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\r\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\r\n\r\n/**\r\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\r\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\r\n * event handlers to be installed on the element that triggers ripple animations.\r\n * This will eventually become a custom renderer once Angular support exists.\r\n * @docs-private\r\n */\r\nexport class RippleRenderer {\r\n  /** Element where the ripples are being added to. */\r\n  private _containerElement: HTMLElement;\r\n\r\n  /** Element which triggers the ripple elements on mouse events. */\r\n  private _triggerElement: HTMLElement | null;\r\n\r\n  /** Whether the pointer is currently down or not. */\r\n  private _isPointerDown = false;\r\n\r\n  /** Events to be registered on the trigger element. */\r\n  private _triggerEvents = new Map<string, any>();\r\n\r\n  /** Set of currently active ripple references. */\r\n  private _activeRipples = new Set<RippleRef>();\r\n\r\n  /** Latest non-persistent ripple that was triggered. */\r\n  private _mostRecentTransientRipple: RippleRef | null;\r\n\r\n  /** Time in milliseconds when the last touchstart event happened. */\r\n  private _lastTouchStartEvent: number;\r\n\r\n  /**\r\n   * Cached dimensions of the ripple container. Set when the first\r\n   * ripple is shown and cleared once no more ripples are visible.\r\n   */\r\n  private _containerRect: ClientRect | null;\r\n\r\n  constructor(private _target: RippleTarget,\r\n              private _ngZone: NgZone,\r\n              elementRef: ElementRef<HTMLElement>,\r\n              platform: Platform) {\r\n\r\n    // Only do anything if we're on the browser.\r\n    if (platform.isBrowser) {\r\n      this._containerElement = elementRef.nativeElement;\r\n\r\n      // Specify events which need to be registered on the trigger.\r\n      this._triggerEvents\r\n        .set('mousedown', this._onMousedown)\r\n        .set('mouseup', this._onPointerUp)\r\n        .set('mouseleave', this._onPointerUp)\r\n\r\n        .set('touchstart', this._onTouchStart)\r\n        .set('touchend', this._onPointerUp)\r\n        .set('touchcancel', this._onPointerUp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fades in a ripple at the given coordinates.\r\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\r\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\r\n   * @param config Extra ripple options.\r\n   */\r\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\r\n    const containerRect = this._containerRect =\r\n                          this._containerRect || this._containerElement.getBoundingClientRect();\r\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\r\n\r\n    if (config.centered) {\r\n      x = containerRect.left + containerRect.width / 2;\r\n      y = containerRect.top + containerRect.height / 2;\r\n    }\r\n\r\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\r\n    const offsetX = x - containerRect.left;\r\n    const offsetY = y - containerRect.top;\r\n    const duration = animationConfig.enterDuration;\r\n\r\n    const ripple = document.createElement('div');\r\n    ripple.classList.add('mat-ripple-element');\r\n\r\n    ripple.style.left = `${offsetX - radius}px`;\r\n    ripple.style.top = `${offsetY - radius}px`;\r\n    ripple.style.height = `${radius * 2}px`;\r\n    ripple.style.width = `${radius * 2}px`;\r\n\r\n    // If the color is not set, the default CSS color will be used.\r\n    ripple.style.backgroundColor = config.color || null;\r\n    ripple.style.transitionDuration = `${duration}ms`;\r\n\r\n    this._containerElement.appendChild(ripple);\r\n\r\n    // By default the browser does not recalculate the styles of dynamically created\r\n    // ripple elements. This is critical because then the `scale` would not animate properly.\r\n    enforceStyleRecalculation(ripple);\r\n\r\n    ripple.style.transform = 'scale(1)';\r\n\r\n    // Exposed reference to the ripple that will be returned.\r\n    const rippleRef = new RippleRef(this, ripple, config);\r\n\r\n    rippleRef.state = RippleState.FADING_IN;\r\n\r\n    // Add the ripple reference to the list of all active ripples.\r\n    this._activeRipples.add(rippleRef);\r\n\r\n    if (!config.persistent) {\r\n      this._mostRecentTransientRipple = rippleRef;\r\n    }\r\n\r\n    // Wait for the ripple element to be completely faded in.\r\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\r\n    this._runTimeoutOutsideZone(() => {\r\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\r\n\r\n      rippleRef.state = RippleState.VISIBLE;\r\n\r\n      // When the timer runs out while the user has kept their pointer down, we want to\r\n      // keep only the persistent ripples and the latest transient ripple. We do this,\r\n      // because we don't want stacked transient ripples to appear after their enter\r\n      // animation has finished.\r\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\r\n        rippleRef.fadeOut();\r\n      }\r\n    }, duration);\r\n\r\n    return rippleRef;\r\n  }\r\n\r\n  /** Fades out a ripple reference. */\r\n  fadeOutRipple(rippleRef: RippleRef) {\r\n    const wasActive = this._activeRipples.delete(rippleRef);\r\n\r\n    if (rippleRef === this._mostRecentTransientRipple) {\r\n      this._mostRecentTransientRipple = null;\r\n    }\r\n\r\n    // Clear out the cached bounding rect if we have no more ripples.\r\n    if (!this._activeRipples.size) {\r\n      this._containerRect = null;\r\n    }\r\n\r\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\r\n    if (!wasActive) {\r\n      return;\r\n    }\r\n\r\n    const rippleEl = rippleRef.element;\r\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\r\n\r\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\r\n    rippleEl.style.opacity = '0';\r\n    rippleRef.state = RippleState.FADING_OUT;\r\n\r\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\r\n    this._runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.HIDDEN;\r\n      rippleEl.parentNode!.removeChild(rippleEl);\r\n    }, animationConfig.exitDuration);\r\n  }\r\n\r\n  /** Fades out all currently active ripples. */\r\n  fadeOutAll() {\r\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\r\n  }\r\n\r\n  /** Sets up the trigger event listeners */\r\n  setupTriggerEvents(element: HTMLElement) {\r\n    if (!element || element === this._triggerElement) {\r\n      return;\r\n    }\r\n\r\n    // Remove all previously registered event listeners from the trigger element.\r\n    this._removeTriggerEvents();\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._triggerEvents.forEach((fn, type) => {\r\n        element.addEventListener(type, fn, passiveEventOptions);\r\n      });\r\n    });\r\n\r\n    this._triggerElement = element;\r\n  }\r\n\r\n  /** Function being called whenever the trigger is being pressed using mouse. */\r\n  private _onMousedown = (event: MouseEvent) => {\r\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\r\n    // ripple in this case for consistency with the non-screen-reader experience.\r\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\r\n    const isSyntheticEvent = this._lastTouchStartEvent &&\r\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\r\n\r\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\r\n      this._isPointerDown = true;\r\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\r\n    }\r\n  }\r\n\r\n  /** Function being called whenever the trigger is being pressed using touch. */\r\n  private _onTouchStart = (event: TouchEvent) => {\r\n    if (!this._target.rippleDisabled) {\r\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\r\n      // events will launch a second ripple if we don't ignore mouse events for a specific\r\n      // time after a touchstart event.\r\n      this._lastTouchStartEvent = Date.now();\r\n      this._isPointerDown = true;\r\n\r\n      // Use `changedTouches` so we skip any touches where the user put\r\n      // their finger down, but used another finger to tap the element again.\r\n      const touches = event.changedTouches;\r\n\r\n      for (let i = 0; i < touches.length; i++) {\r\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Function being called whenever the trigger is being released. */\r\n  private _onPointerUp = () => {\r\n    if (!this._isPointerDown) {\r\n      return;\r\n    }\r\n\r\n    this._isPointerDown = false;\r\n\r\n    // Fade-out all ripples that are visible and not persistent.\r\n    this._activeRipples.forEach(ripple => {\r\n      // By default, only ripples that are completely visible will fade out on pointer release.\r\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\r\n      const isVisible = ripple.state === RippleState.VISIBLE ||\r\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\r\n\r\n      if (!ripple.config.persistent && isVisible) {\r\n        ripple.fadeOut();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\r\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\r\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\r\n  }\r\n\r\n  /** Removes previously registered event listeners from the trigger element. */\r\n  _removeTriggerEvents() {\r\n    if (this._triggerElement) {\r\n      this._triggerEvents.forEach((fn, type) => {\r\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/** Enforces a style recalculation of a DOM element by computing its styles. */\r\nfunction enforceStyleRecalculation(element: HTMLElement) {\r\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\r\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\r\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n  window.getComputedStyle(element).getPropertyValue('opacity');\r\n}\r\n\r\n/**\r\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\r\n */\r\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\r\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\r\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\r\n  return Math.sqrt(distX * distX + distY * distY);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldMissingControlError(): Error {\r\n  return Error('mat-form-field must contain a MatFormFieldControl.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatInputUnsupportedTypeError(type: string): Error {\r\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\r\n      `custom implementation.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\r\n * @docs-private\r\n */\r\nexport function throwMatMenuMissingError() {\r\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\r\n\r\n    Example:\r\n      <mat-menu #menu=\"matMenu\"></mat-menu>\r\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when menu's x-position value isn't valid.\r\n * In other words, it doesn't match 'before' or 'after'.\r\n * @docs-private\r\n */\r\nexport function throwMatMenuInvalidPositionX() {\r\n  throw Error(`xPosition value must be either 'before' or after'.\r\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when menu's y-position value isn't valid.\r\n * In other words, it doesn't match 'above' or 'below'.\r\n * @docs-private\r\n */\r\nexport function throwMatMenuInvalidPositionY() {\r\n  throw Error(`yPosition value must be either 'above' or below'.\r\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * @docs-private\r\n */\r\nexport function getMatSelectDynamicMultipleError(): Error {\r\n  return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * @docs-private\r\n */\r\nexport function getMatSelectNonArrayValueError(): Error {\r\n  return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n */\r\nexport function getMatSelectNonFunctionValueError(): Error {\r\n  return Error('`compareWith` must be a function.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getSortDuplicateSortableIdError(id: string): Error {\r\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderNotContainedWithinSortError(): Error {\r\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderMissingIdError(): Error {\r\n  return Error(`MatSortHeader must be provided with a unique id.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortInvalidDirectionError(direction: string): Error {\r\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Version} from '@angular/core';\r\n\r\n/** Current version of Angular Material. */\r\nexport const VERSION = new Version('8.0.1');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport class AnimationCurves {\r\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\r\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\r\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\r\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\r\n}\r\n\r\n\r\n/** @docs-private */\r\nexport class AnimationDurations {\r\n  static COMPLEX = '375ms';\r\n  static ENTERING = '225ms';\r\n  static EXITING = '195ms';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\nexport type MatDateFormats = {\r\n  parse: {\r\n    dateInput: any\r\n  },\r\n  display: {\r\n    dateInput: any,\r\n    monthYearLabel: any,\r\n    dateA11yLabel: any,\r\n    monthYearA11yLabel: any,\r\n  }\r\n};\r\n\r\n\r\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {MatDateFormats} from './date-formats';\r\n\r\n\r\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    dateInput: null,\r\n  },\r\n  display: {\r\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\r\n    monthYearLabel: {year: 'numeric', month: 'short'},\r\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {DateAdapter} from './date-adapter';\r\nimport {MAT_DATE_FORMATS} from './date-formats';\r\nimport {NativeDateAdapter} from './native-date-adapter';\r\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\r\n\r\nexport * from './date-adapter';\r\nexport * from './date-formats';\r\nexport * from './native-date-adapter';\r\nexport * from './native-date-formats';\r\n\r\n\r\n@NgModule({\r\n  imports: [PlatformModule],\r\n  providers: [\r\n    {provide: DateAdapter, useClass: NativeDateAdapter},\r\n  ],\r\n})\r\nexport class NativeDateModule {}\r\n\r\n\r\n@NgModule({\r\n  imports: [NativeDateModule],\r\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\r\n})\r\nexport class MatNativeDateModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\r\n\r\n/** Error state matcher that matches when a control is invalid and dirty. */\r\n@Injectable()\r\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\r\n  }\r\n}\r\n\r\n/** Provider that defines how form controls behave with regards to displaying error messages. */\r\n@Injectable({providedIn: 'root'})\r\nexport class ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\nimport {MatCommonModule} from '../common-behaviors/common-module';\r\nimport {\r\n  HammerStatic,\r\n  HammerInstance,\r\n  Recognizer,\r\n  RecognizerStatic,\r\n  HammerOptions,\r\n} from './gesture-annotations';\r\n\r\n/**\r\n * Injection token that can be used to provide options to the Hammerjs instance.\r\n * More info at http://hammerjs.github.io/api/.\r\n */\r\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\r\n\r\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\r\n  'longpress',\r\n  'slide',\r\n  'slidestart',\r\n  'slideend',\r\n  'slideright',\r\n  'slideleft'\r\n];\r\n\r\n/**\r\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\r\n * been loaded on the page.\r\n */\r\nconst noopHammerInstance: HammerInstance = {\r\n  on: () => {},\r\n  off: () => {},\r\n};\r\n\r\n/** Adjusts configuration of our gesture library, Hammer. */\r\n@Injectable()\r\nexport class GestureConfig extends HammerGestureConfig {\r\n  /** List of new event names to add to the gesture support list */\r\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\r\n    @Optional() commonModule?: MatCommonModule) {\r\n    super();\r\n    if (commonModule) {\r\n      commonModule._checkHammerIsAvailable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\n   *\r\n   * Our gesture names come from the Material Design gestures spec:\r\n   * https://material.io/design/#gestures-touch-mechanics\r\n   *\r\n   * More information on default recognizers can be found in Hammer docs:\r\n   * http://hammerjs.github.io/recognizer-pan/\r\n   * http://hammerjs.github.io/recognizer-press/\r\n   *\r\n   * @param element Element to which to assign the new HammerJS gestures.\r\n   * @returns Newly-created HammerJS instance.\r\n   */\r\n  buildHammer(element: HTMLElement): HammerInstance {\r\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\r\n\r\n    if (!hammer) {\r\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\r\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\r\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\r\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\r\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\r\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\r\n      // undefined).\r\n      // @breaking-change 8.0.0\r\n      return noopHammerInstance;\r\n    }\r\n\r\n    const mc = new hammer(element, this._hammerOptions || undefined);\r\n\r\n    // Default Hammer Recognizers.\r\n    const pan = new hammer.Pan();\r\n    const swipe = new hammer.Swipe();\r\n    const press = new hammer.Press();\r\n\r\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n    // Otherwise the previous `recognizeWith` will be dropped.\r\n    // TODO: Confirm threshold numbers with Material Design UX Team\r\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\r\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\r\n\r\n    // Overwrite the default `pan` event to use the swipe event.\r\n    pan.recognizeWith(swipe);\r\n\r\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\r\n    // accidentally reset the longpress recognizer. In order to make sure that the two\r\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\r\n    // recognizer to recognize while a longpress is being processed.\r\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\r\n    longpress.recognizeWith(slide);\r\n\r\n    // Add customized gestures to Hammer manager\r\n    mc.add([swipe, press, pan, slide, longpress]);\r\n\r\n    return mc as HammerInstance;\r\n  }\r\n\r\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\r\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\r\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\r\n\r\n    inheritances.push(base);\r\n    inheritances.forEach(item => recognizer.recognizeWith(item));\r\n\r\n    return recognizer;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\r\n\r\n/** Possible states for a ripple element. */\r\nexport enum RippleState {\r\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\r\n}\r\n\r\n/**\r\n * Reference to a previously launched ripple element.\r\n */\r\nexport class RippleRef {\r\n\r\n  /** Current state of the ripple. */\r\n  state: RippleState = RippleState.HIDDEN;\r\n\r\n  constructor(\r\n    private _renderer: RippleRenderer,\r\n    /** Reference to the ripple HTML element. */\r\n    public element: HTMLElement,\r\n    /** Ripple configuration used for the ripple. */\r\n    public config: RippleConfig) {\r\n  }\r\n\r\n  /** Fades out the ripple element. */\r\n  fadeOut() {\r\n    this._renderer.fadeOutRipple(this);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {RippleRef} from './ripple-ref';\r\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n/** Configurable options for `matRipple`. */\r\nexport interface RippleGlobalOptions {\r\n  /**\r\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\r\n   * the `launch()` method. Therefore focus indicators will still show up.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Configuration for the animation duration of the ripples. There are two phases with different\r\n   * durations for the ripples. The animation durations will be overwritten if the\r\n   * `NoopAnimationsModule` is being used.\r\n   */\r\n  animation?: RippleAnimationConfig;\r\n\r\n  /**\r\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\r\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\r\n   */\r\n  terminateOnPointerUp?: boolean;\r\n}\r\n\r\n/** Injection token that can be used to specify the global ripple options. */\r\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\r\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\r\n\r\n@Directive({\r\n  selector: '[mat-ripple], [matRipple]',\r\n  exportAs: 'matRipple',\r\n  host: {\r\n    'class': 'mat-ripple',\r\n    '[class.mat-ripple-unbounded]': 'unbounded'\r\n  }\r\n})\r\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\r\n\r\n  /** Custom color for all ripples. */\r\n  @Input('matRippleColor') color: string;\r\n\r\n  /** Whether the ripples should be visible outside the component's bounds. */\r\n  @Input('matRippleUnbounded') unbounded: boolean;\r\n\r\n  /**\r\n   * Whether the ripple always originates from the center of the host element's bounds, rather\r\n   * than originating from the location of the click event.\r\n   */\r\n  @Input('matRippleCentered') centered: boolean;\r\n\r\n  /**\r\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\r\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\r\n   * bounding rectangle.\r\n   */\r\n  @Input('matRippleRadius') radius: number = 0;\r\n\r\n  /**\r\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\r\n   * duration of the ripples. The animation durations will be overwritten if the\r\n   * `NoopAnimationsModule` is being used.\r\n   */\r\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\r\n\r\n  /**\r\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\r\n   * by using the `launch()` method.\r\n   */\r\n  @Input('matRippleDisabled')\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n    this._setupTriggerEventsIfEnabled();\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /**\r\n   * The element that triggers the ripple when click events are received.\r\n   * Defaults to the directive's host element.\r\n   */\r\n  @Input('matRippleTrigger')\r\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\r\n  set trigger(trigger: HTMLElement) {\r\n    this._trigger = trigger;\r\n    this._setupTriggerEventsIfEnabled();\r\n  }\r\n  private _trigger: HTMLElement;\r\n\r\n  /** Renderer for the ripple DOM manipulations. */\r\n  private _rippleRenderer: RippleRenderer;\r\n\r\n  /** Options that are set globally for all ripples. */\r\n  private _globalOptions: RippleGlobalOptions;\r\n\r\n  /** Whether ripple directive is initialized and the input bindings are set. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\r\n\r\n    this._globalOptions = globalOptions || {};\r\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n\r\n    if (animationMode === 'NoopAnimations') {\r\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isInitialized = true;\r\n    this._setupTriggerEventsIfEnabled();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rippleRenderer._removeTriggerEvents();\r\n  }\r\n\r\n  /** Fades out all currently showing ripple elements. */\r\n  fadeOutAll() {\r\n    this._rippleRenderer.fadeOutAll();\r\n  }\r\n\r\n  /**\r\n   * Ripple configuration from the directive's input values.\r\n   * @docs-private Implemented as part of RippleTarget\r\n   */\r\n  get rippleConfig(): RippleConfig {\r\n    return {\r\n      centered: this.centered,\r\n      radius: this.radius,\r\n      color: this.color,\r\n      animation: {...this._globalOptions.animation, ...this.animation},\r\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Whether ripples on pointer-down are disabled or not.\r\n   * @docs-private Implemented as part of RippleTarget\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || !!this._globalOptions.disabled;\r\n  }\r\n\r\n  /** Sets up the trigger event listeners if ripples are enabled. */\r\n  private _setupTriggerEventsIfEnabled() {\r\n    if (!this.disabled && this._isInitialized) {\r\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Launches a manual ripple using the specified ripple configuration.\r\n   * @param config Configuration for the manual ripple.\r\n   */\r\n  launch(config: RippleConfig): RippleRef;\r\n\r\n  /**\r\n   * Launches a manual ripple at the specified coordinates within the element.\r\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\r\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\r\n   * @param config Optional ripple configuration for the manual ripple.\r\n   */\r\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\r\n\r\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\r\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\r\n    if (typeof configOrX === 'number') {\r\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\r\n    } else {\r\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\r\n    }\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MatCommonModule} from '../common-behaviors/common-module';\r\nimport {MatRipple} from './ripple';\r\n\r\nexport * from './ripple';\r\nexport * from './ripple-ref';\r\nexport * from './ripple-renderer';\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, PlatformModule],\r\n  exports: [MatRipple, MatCommonModule],\r\n  declarations: [MatRipple],\r\n})\r\nexport class MatRippleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n/**\r\n * Possible states for a pseudo checkbox.\r\n * @docs-private\r\n */\r\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\r\n\r\n/**\r\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\r\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\r\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\r\n * Note that theming is meant to be handled by the parent element, e.g.\r\n * `mat-primary .mat-pseudo-checkbox`.\r\n *\r\n * Note that this component will be completely invisible to screen-reader users. This is *not*\r\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\r\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\r\n * of more complex components that appropriately handle selected / checked state.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'mat-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    'class': 'mat-pseudo-checkbox',\r\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n  },\r\n})\r\nexport class MatPseudoCheckbox {\r\n  /** Display state of the checkbox. */\r\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\r\n\r\n  /** Whether the checkbox is disabled. */\r\n  @Input() disabled: boolean = false;\r\n\r\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\r\n\r\n\r\n@NgModule({\r\n  exports: [MatPseudoCheckbox],\r\n  declarations: [MatPseudoCheckbox]\r\n})\r\nexport class MatPseudoCheckboxModule { }\r\n\r\n\r\nexport * from './pseudo-checkbox/pseudo-checkbox';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\r\n\r\n\r\n// Boilerplate for applying mixins to MatOptgroup.\r\n/** @docs-private */\r\nclass MatOptgroupBase { }\r\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\r\n    mixinDisabled(MatOptgroupBase);\r\n\r\n// Counter for unique group ids.\r\nlet _uniqueOptgroupIdCounter = 0;\r\n\r\n/**\r\n * Component that is used to group instances of `mat-option`.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-optgroup',\r\n  exportAs: 'matOptgroup',\r\n  templateUrl: 'optgroup.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  styleUrls: ['optgroup.css'],\r\n  host: {\r\n    'class': 'mat-optgroup',\r\n    'role': 'group',\r\n    '[class.mat-optgroup-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-labelledby]': '_labelId',\r\n  }\r\n})\r\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\r\n  /** Label for the option group. */\r\n  @Input() label: string;\r\n\r\n  /** Unique id for the underlying label. */\r\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\n}\r\n"],"names":["enumerable","configurable","this","_focusMonitor","stopMonitoring","_elementRef","MatTabLink","decorators","type","Directive","args","exportAs","inputs","host","class","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","NgZone","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","propDecorators","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabNav","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","selector","MatToolbar","_super","elementRef","_platform","document","_this","call","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","tabIndex","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","show","style","visibility","hide","_setStyles","element","positions","_inkBarPositioner","inkBar","left","width","_MAT_INK_BAR_POSITIONER","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","static","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","ngZone","globalRippleOptions","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","factory","_MAT_INK_BAR_POSITIONER_FACTORY","trackSize","vertical","_sliderDimensions","pixelsPerStep","step","stepsPerTick","pixelsPerTick","_tickIntervalPercent","tickInterval","MatSlider","MatSliderChange","source","_calculatePercentage","_calculateValue","percentage","_clamp","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","_blurHostElement","blur","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","thumbLabel","displayWith","input","valueChange","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","MatDrawerContainer","_validateDrawers","drawer","_drawers","_isDrawerOpen","_start","_end","updateContentMargins","_doCheckSubject","debounceTime","_contentMarginChanges","close","_left","mode","_width","_right","opened","_contentMargins","ngDoCheck","_element","openedChange","_setContainerClass","onPositionChanged","throwMatDuplicatedDrawerError","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","closestValue","MatProgressSpinner","_strokeCircumference","_fallbackAnimation","strokeWidth","diameter","_attachStyleNode","styleTag","createElement","styleRoot","_styleRoot","currentDiameter","_diameter","diameters","_diameters","diametersForElement","setAttribute","_getAnimationText","appendChild","Set","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","errorStateMatcher","sortComparator","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","trackedDiameters","head","_getShadowRoot","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelHeader","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","togglePosition","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","hideToggle","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","startAt","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_keydown","[attr.aria-controls]","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","MatChipList","_listenToChipsRemoved","_chipRemoveSubscription","chipRemoveChanges","chip","chipIndex","chips","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","_hasFocusedChip","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_allowFocusEscape","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_tabIndex","_userTabIndex","_chipInput","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","rootNode","getRootNode","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":";;;;;;;miEkKuBA,SAAgB+5F,GAAUC,EAAGzyE,GAEzB,QAAS0yE,KAAO/5F,KAAKg6F,YAAcF,EADnCG,GAAcH,EAAGzyE,GAEjByyE,EAAE/1F,UAAkB,OAANsjB,EAAa1b,OAAO4pB,OAAOlO,IAAM0yE,EAAGh2F,UAAYsjB,EAAEtjB,UAAW,GAAIg2F,ICCnF,QAAgBG,KACd,OAAO,ECPT,QAAgBxzF,GAAyCyzF,GACvD,MAAF,UAAA52F,GAMI,QAAJ62F,KAAA,IAAgB,GAAhB55F,MAAAiqD,EAAA,EAAgBA,EAAhB3hD,UAAAvE,OAAgBkmD,IAAAjqD,EAAhBiqD,GAAA3hD,UAAA2hD,EAAI,IAAJ9mD,GAAAJ,EAAAsF,MAAA7I,KAA2CQ,IAA3CR,WALY2D,GAAZ2iC,WAAiC,IAM/B,MAPqBxiC,GAAvBs2F,EAAA72F,GAGIoI,OAAJC,eAAQwuF,EAARr2F,UAAA,gBAAI,WAAiB,MAAO/D,MAAKsmC,eAC7B,SAAaz6B,GAAc7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,oCAGtEuuF,GAPuBD,GCOvB,QAAgBh3F,GACZg3F,EAASE,GACX,MAAF,UAAA92F,GAmBI,QAAJ62F,KAAA,IAAgB,GAAhB55F,MAAAiqD,EAAA,EAAgBA,EAAhB3hD,UAAAvE,OAAgBkmD,IAAAjqD,EAAhBiqD,GAAA3hD,UAAA2hD,EAAI,IAAJ9mD,GAAAJ,EAAAsF,MAAA7I,KACeQ,IADfR,WAIM2D,GAAKujC,MAAQmzD,IAEjB,MAzBqBv2F,GAAvBs2F,EAAA72F,GAGIoI,OAAJC,eAAQwuF,EAARr2F,UAAA,aAAI,WAA4B,MAAO/D,MAAK6nC,YACxC,SAAUh8B,GACd,GAAYolF,GAAeplF,GAASwuF,CAE1BpJ,KAAiBjxF,KAAK6nC,SACpB7nC,KAAK6nC,QACP7nC,KAAKG,YAAYuE,cAAcI,UAAUqW,OAAO,OAAOnb,KAAK6nC,QAE1DopD,GACFjxF,KAAKG,YAAYuE,cAAcI,UAAUuW,IAAI,OAAO41E,GAGtDjxF,KAAK6nC,OAASopD,oCAUtBmJ,GAzBuBD,GCVvB,QAAgB/mF,GAA8C+mF,GAC5D,MAAF,UAAA52F,GAOI,QAAJ62F,KAAA,IAAgB,GAAhB55F,MAAAiqD,EAAA,EAAgBA,EAAhB3hD,UAAAvE,OAAgBkmD,IAAAjqD,EAAhBiqD,GAAA3hD,UAAA2hD,EAAI,IAAJ9mD,GAAAJ,EAAAsF,MAAA7I,KAA2CQ,IAA3CR,WANY2D,GAAZ22F,gBAAsC,IAOpC,MARqBx2F,GAAvBs2F,EAAA72F,GAIIoI,OAAJC,eAAQwuF,EAARr2F,UAAA,qBAAI,WAAsB,MAAO/D,MAAKs6F,oBAClC,SAAkBzuF,GAAc7L,KAAKs6F,eAAiBv/E,EAAAA,sBAAsBlP,oCAGhFuuF,GARuBD,GCAvB,QAAgB1zF,GAAiD0zF,EAAS1xB,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAAllE,GASI,QAAJ62F,KAAA,IAAgB,GAAhB55F,MAAAiqD,EAAA,EAAgBA,EAAhB3hD,UAAAvE,OAAgBkmD,IAAAjqD,EAAhBiqD,GAAA3hD,UAAA2hD,EAAI,IAAJ9mD,GAAAJ,EAAAsF,MAAA7I,KACeQ,IADfR,WARY2D,GAAZ8gF,UAAgChc,IAW9B,MAZqB3kE,GAAvBs2F,EAAA72F,GAGIoI,OAAJC,eAAQwuF,EAARr2F,UAAA,gBAAI,WAAyB,MAAO/D,MAAKoX,UAAY,EAAIpX,KAAKykF,eAC1D,SAAa54E,GAEX7L,KAAKykF,UAAqB,MAAT54E,EAAgBA,EAAQ48D,mCAM/C2xB,GAZuBD,GCavB,QAAgB/8C,GAAsD+8C,GAEpE,MAAF,UAAA52F,GAyBI,QAAJ62F,KAAA,IAAgB,GAAhB55F,MAAAiqD,EAAA,EAAgBA,EAAhB3hD,UAAAvE,OAAgBkmD,IAAAjqD,EAAhBiqD,GAAA3hD,UAAA2hD,EAAI,IAAJ9mD,GAAAJ,EAAAsF,MAAA7I,KACeQ,IADfR,WAvBI2D,GAAJ+zF,YAA0B,EAMb/zF,EAAby7C,aAA4B,GAAIrxC,GAAAA,UAoB9B,MA5BqBjK,GAAvBs2F,EAAA72F,GAYI62F,EAAJr2F,UAAAu8C,iBAAI,WACJ,GAAYmhC,GAAWzhF,KAAK03F,WAChBnlE,EAASvyB,KAAKi9C,kBAAoBj9C,KAAKg9C,YACvCu9C,EAAUv6F,KAAKmrC,mBAAqBnrC,KAAK+8C,0BACzC76B,EAAUliB,KAAKk9C,UAAYl9C,KAAKk9C,UAAiB,QAAkB,KACnEskC,EAAW+Y,EAAQt4E,aAAaC,EAASqQ,EAE3CivD,KAAaC,IACfzhF,KAAK03F,WAAalW,EAClBxhF,KAAKo/C,aAAatzC,SAO1BsuF,GA5BuBD,GCJvB,QAAgBrkE,GAA4CqkE,GAE1D,MAAF,UAAA52F,GAyBI,QAAJ62F,KAAA,IAAgB,GAAhB55F,MAAAiqD,EAAA,EAAgBA,EAAhB3hD,UAAAvE,OAAgBkmD,IAAAjqD,EAAhBiqD,GAAA3hD,UAAA2hD,EAAI,IAAJ9mD,GAAAJ,EAAAsF,MAAA7I,KAA2CQ,IAA3CR,WAvBI2D,GAAJyiC,gBAAqB,EAOjBziC,EAAJ62F,uBAMI72F,EAAJ4kB,YAAkB,GAAIkyE,GAAAA,WAAU,SAAOC,GAG7B/2F,EAAKyiC,eACPziC,EAAKg3F,kBAAkBD,GAEvB/2F,EAAwB,oBAAEkG,KAAK6wF,OA4BrC,MAjDqB52F,GAAvBs2F,EAAA72F,GAgCI62F,EAAJr2F,UAAAmzB,iBAAI,WACE,GAAIl3B,KAAKomC,eACP,KAAM7U,OAAM,wFAIdvxB,MAAKomC,gBAAiB,EAEtBpmC,KAAwB,oBAAEoK,QAAQpK,KAAK26F,mBACvC36F,KAAKw6F,oBAAsB,MAI7BJ,EAAJr2F,UAAA42F,kBAAI,SAAkBD,GAChBA,EAAW5uF,OACX4uF,EAAWrsF,YAEjB+rF,GAjDuBD,GCnBvB,QAAgBS,KACd,MAAOC,GAAAA,OAAOC,EAAAA,WCyChB,QAASC,GAASx2F,EAAgBy2F,GAEhC,IAAK,GADCC,GAAcz2F,MAAMD,GACjB0G,EAAI,EAAGA,EAAI1G,EAAQ0G,IAC1BgwF,EAAYhwF,GAAK+vF,EAAc/vF,EAEjC,OAAOgwF,GChCT,QAAgBprC,GAASqrC,EAA2BluF,GAGlDkuF,EAAM72F,QAAQ4F,KAAK6F,EAAAA,UAAUorF,IAAQ52F,UAAS,SAAE8U,GAAlD,GAAmD7U,GAAnD6U,EAAA7U,MACI42F,GAASnuF,EAAS,cAAc,GAChCmuF,EAASnuF,EAAS,cAAc,GAChCmuF,EAASnuF,EAAS,kBAAkB,GAErB,IAAXzI,GAA2B,IAAXA,EAClB42F,EAASnuF,EAAS,OAAOzI,EAA/B,SAA8C,GAC/BA,EAAS,GAClB42F,EAASnuF,EAAS,kBAAkB,KAM1C,QAASmuF,GAASnuF,EAAkC6hD,EAAmBusC,GACvE,GAAQt2F,GAAYkI,EAAQtI,cAAcI,SACxCs2F,GAAQt2F,EAAUuW,IAAIwzC,GAAa/pD,EAAUqW,OAAO0zC,GCuQtD,QAASwsC,GAA0BruF,GAIjCggC,OAAOuT,iBAAiBvzC,GAASsuF,iBAAiB,WAMpD,QAASC,GAAyB/pF,EAAWC,EAAWunF,GACxD,GAAQwC,GAAQ3jF,KAAK0B,IAAI1B,KAAKsvC,IAAI31C,EAAIwnF,EAAK5rF,MAAOyK,KAAKsvC,IAAI31C,EAAIwnF,EAAK7jE,QAC5DsmE,EAAQ5jF,KAAK0B,IAAI1B,KAAKsvC,IAAI11C,EAAIunF,EAAK3jE,KAAMxd,KAAKsvC,IAAI11C,EAAIunF,EAAK1jE,QACjE,OAAOzd,MAAK6jF,KAAKF,EAAQA,EAAQC,EAAQA,yCtBlD3CE,GAAyBh9C,EAAzBxnC,UACQykF,EAARp3C,EAA8BrtC,UACtB0kF,EAAR,gBACAF,EAAA1wF,GAAAs7C,OAAAo1C,EAAA1wF,GAAAs7C,QAAAq1C,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,uBAcA,GAAAC,GAAAhxC,EAAAixC,aAEAD,EAGIA,EAAJC,EAAAC,EAAA/2C,EACAptC,KAAA0B,IAAA,EAAAuiF,EAAA72C,EAAA82C,GAGAC,EuB/SA,QAAgBpE,KACd,MAAOrmE,OAAM,gEAIf,QAAgB0mE,GAAmC7P,GACjD,MAAO72D,OAAM,4CAA2C62D,EAA1D,QAIA,QAAgBgQ,KACd,MAAO7mE,OAAM,sDlCqDf,QAAgBk5D,KACd,OAAQM,uBAAuB,GhILjC,QAAgBU,GAAyCz7C,GACvD,MAAA,YAAa,MAAAA,GAAQikD,iBAAiBgI,cAwBxC,QAAgBvN,KACd,MAAOn9D,OAAM,6M0IsGf,QAASqoD,GAAqBl8C,EACA/K,GAC5B,MAAFM,OAAayK,EAAa/K,GlChK1B,QAAgB0kD,KACd,KAAM9lD,OAAM,yEEOd,QAAgB2qE,GAAmClsD,GACjD,MAAA,YAAa,MAAAA,GAAQikD,iBAAiBC,SAIxC,QAAgBjb,GAA4CjpC,GAE1D,MAAA,YAAa,MAAAA,GAAQikD,iBAAiBC,SA8UxC,QAASta,GACLjnD,EAA0B48B,GAC5B,MAAFt8B,OAAas8B,EAAmB58B,GClQhC,QAASyoD,IAAiBpuE,EAAkCysE,GAG1D,IAFF,GAAMlnD,GAA6BvlB,EAAQtI,cAAc2vE,cAEhD9hD,IAAWA,EAAOztB,UAAUC,SAAS,yBAC1CwtB,EAASA,EAAO8hD,aAGlB,OAAO9hD,GAASknD,EAAY97D,KAAI,SAAC08D,GAAU,MAAAA,GAAO9jD,KAAO,EAAQA,KAAM,KwDlIzE,QAAgBsnD,IAAgCv9E,GAC9C,MAAOixB,OAAM,eAAejxB,EAA9B,mCCDA,QAAgBwiE,IAA2Bq5B,GACzC,MAAO5qE,OACH,wCAAwC4qE,EAD9C,0J7EoDA,QAAgB/5B,IAAuCpyB,GACrD,MAAA,YAAa,MAAAA,GAAQikD,iBAAiBgI,cRiOxC,QAAS5mC,IAAK+mC,GACZ,MAAO,QAAQA,EAAjB,IAKA,QAAStnC,IAAejpD,GACtB,MAAOA,GAAM20D,MAAM,iBAAmB30D,EAAWA,EAAnD,KG1QA,QAAgBqvD,IAA4BvC,GAC1C,MAAOpnC,OAAM,sCAAsConC,EAArD,KASA,QAAgBgE,MACd,MAAOprC,OAAM,8JAWf,QAAgB+oC,IAAmCtC,GACjD,MAAOzmC,OAAM,yHACkDymC,EAAjE,MAQA,QAAgBsB,IAAuCR,GACrD,MAAOvnC,OAAM,2HACkDunC,EAAjE,MAyhBA,QAAgBuE,IACdg/B,EACAC,EACAC,EACA74F,GACA,MAAO24F,IAAkB,GAAIpkC,IAAgBqkC,EAAYC,EAAW74F,GAiBtE,QAAS82D,IAASG,GAChB,MAAOA,GAAIyB,WAAU,GAIvB,QAASvB,IAAQ7B,EAAmBp3C,GAClC,MAAOo3C,GAAY,IAAMp3C,EC1jB3B,QAAgB67C,MAChB,GAAQ55D,GAAYg3F,EAAAA,OAAO50F,EAAAA,UACnBg4D,EAAYp6D,EAAYA,EAAU8wC,SAAW,IAEnD,QAGEM,YAAW,WAAQ,MAAAgpB,GAAaA,EAAUu+B,SAAWv+B,EAAUw+B,OAAU,KkFrD7E,QAAgBxiD,MACd,KAAM1oB,OAAM,0KAYd,QAAgBi9B,MACd,KAAMj9B,OAAM,kIASd,QAAgBk9B,MACd,KAAMl9B,OAAM,gIvGyCd,QAAgBs8B,MACd,OACExS,gBAAgB,EAChBV,UAAW,QACXG,UAAW,QACXR,cAAe,oCCjCnB,QAAgBlD,IAAiCpH,GAC/C,MAAA,YAAa,MAAAA,GAAQikD,iBAAiBgI,cuGrCxC,QAAgB38C,MACd,MAAO/tB,OAAM,iEASf,QAAgBsxB,MACd,MAAOtxB,OAAM,sDAQf,QAAgBguB,MACd,MAAOhuB,OAAM,qClKyGf,QAAgBqrB,IAA4C5M,GAE1D,MAAA,YAAa,MAAAA,GAAQikD,iBAAiBgI,cC/ExC,QAAgBxrD,IAAkCziC,GAChD,MAAOujB,OAAM,qBAAqBvjB,EAApC,iBAQA,QAAgBi+B,IAAoC+D,GAClD,MAAA,YAAa,MAAAA,GAAQikD,iBAAiBgI,YAAYS,eAAgB5wD,MA0BpE,QAAgBK,MACd,OACEO,UAAW,EACXC,UAAW,EACXuC,kBAAmB,MoD5CvB,QAAgBiD,IAAoCwqD,GAClD,MAAOA,IAAc,GAAIhrD,IGQ3B,QAAgB6C,MAChB,GAAQ3wC,GAAYg3F,EAAAA,OAAO50F,EAAAA,UACnBg4D,EAAYp6D,EAAYA,EAAU8wC,SAAW,IAEnD,QAGEM,YAAW,WAAQ,MAAAgpB,GAAaA,EAAUu+B,SAAWv+B,EAAUw+B,OAAU,wBAmJnD,6BAAF,KAAxBljF,IAA4CA,EAA5C,KAAA1B,KAAA0B,IAAAC,EAAA3B,KAAA2B,IAAAD,EAAA6c,IXvJA,QAAgB4f,MACd,OAAQ5R,SAAUyR,oDAmQpB,GAAAK,GAAAryC,EAAAqyC,IAEM,IAANA,IAAmB,EAAnB0mD,kBAAA1mD,EAAA2mD,cAAA,CACU,GAAIC,GAAd9vF,EAAA+vF,YAAA/vF,EAAA+vF,cAAA,uCAIY,MAAZD,IAKA,MAAA,ME7RA,QAAgBj3D,MACd,OACEqB,MAAO,URAX,QAAgBzM,IAA8BzsB,GAC5C,KAAMujB,OAAM,iDAAgDvjB,EAA9D,OAeA,QAAgB26B,MACd,OAAO,EJnCT,QAAgB7W,MACd,MAAO,IAAIrC,IgIhCb,QAAgBiH,IAAgCH,GAC9C,MAAOhF,OAAM,kDAAkDgF,EAAjE,MAIA,QAAgB6B,MACd,MAAO7G,OAAM,oFAIf,QAAgBiF,MACd,MAAOjF,OAAM,oDAIf,QAAgB2E,IAA6B/d,GAC3C,MAAOoZ,OAASpZ,EAAlB,qD/HkJA,QAAS6e,IAAsBvX,EACAC,GAC/B,GAAMs9E,IAA8B,MAAO,OAIzC,OAHa,QAATv9E,GAAmBu9E,EAAUh8C,UAC5BthC,GAAgBs9E,EAAUnzF,KAAK,IAE7BmzF,EEpJT,QAAgBnlE,IAAsC8kE,GACpD,MAAOA,IAAc,GAAIhlE,IxBH3B,QAAgBpX,IAAkCo8E,GAChD,MAAOA,IAAc,GAAI58E,IZG3B,QAAgB8J,MAMd,MALY,UAAI7c,GAAyB,OACvCI,KAAMJ,GAAWA,EAAQ4F,YAAc,GAAK,KAAO,IACnDvF,MAAOL,GAAWA,EAAQ8F,aAAe,GAAK,KAAO,kOgJlBzD,GSFImqF,ITEAhD,GAAgB,SAASH,EAAGzyE,GAI5B,OAHA4yE,GAAgBtuF,OAAOuxF,iBAChBC,uBAA2B34F,QAAS,SAAUs1F,EAAGzyE,GAAKyyE,EAAEqD,UAAY91E,IACvE,SAAUyyE,EAAGzyE,GAAK,IAAK,GAAI2rB,KAAK3rB,GAAOA,EAAEjZ,eAAe4kC,KAAI8mD,EAAE9mD,GAAK3rB,EAAE2rB,MACpD8mD,EAAGzyE,IASjB+1E,GAAW,WAQlB,MAPAA,IAAWzxF,OAAO0xF,QAAU,SAAkBtgB,GAC1C,IAAK,GAAIugB,GAAGryF,EAAI,EAAGsyF,EAAIz0F,UAAUvE,OAAQ0G,EAAIsyF,EAAGtyF,IAAK,CACjDqyF,EAAIx0F,UAAUmC,EACd,KAAK,GAAI+nC,KAAKsqD,GAAO3xF,OAAO5H,UAAUqK,eAAexK,KAAK05F,EAAGtqD,KAAI+pC,EAAE/pC,GAAKsqD,EAAEtqD,IAE9E,MAAO+pC,IAEJqgB,GAASv0F,MAAM7I,KAAM8I,YkB1BnB00F,GAAU,GAAIC,GAAAA,QAAQ,qBCFnCnmE,GAAA,WAAA,QAAAA,MAKA,MAJSA,GAATC,eAA0B,8BACjBD,EAATk7D,mBAA8B,8BACrBl7D,EAATg7D,mBAA8B,4BACrBh7D,EAATomE,YAAuB,8BACvBpmE,KAIAF,GAAA,WAAA,QAAAA,MAIA,MAHSA,GAATi7D,QAAmB,QACVj7D,EAATC,SAAoB,QACXD,EAATm7D,QAAmB,QACnBn7D,KlBLMomE,GAAU,GAAIC,GAAAA,QAAQ,qBAIfE,GAAyB,GAAI3jF,GAAAA,eAAwB,qBAChEkG,WAAY,OACZ0J,QAASswE,IAcXl4F,GAAA,WAiBE,QAAFA,GACwD47F,EACTC,GADS79F,KAAxD49F,qBAAwDA,EACT59F,KAA/C69F,cAA+CA,EAbrC79F,KAAV89F,sBAAiC,EAGvB99F,KAAV+9F,mBAA8B,EAGpB/9F,KAAV6D,UAA0C,gBAAbH,WAAyBA,SAAWA,SAAW,KAGlE1D,KAAVg+F,QAAsC,gBAAXhxD,SAAuBA,OAASA,OAAS,KAM5DhtC,KAAKi+F,sBAAwBj+F,KAAK89F,uBACpC99F,KAAKk+F,yBACLl+F,KAAKm+F,uBACLn+F,KAAKo+F,wBACLp+F,KAAK89F,sBAAuB,GA2ElC,MAtEU97F,GAAV+B,UAAAk6F,kBAAE,WACE,MAAOj+F,MAAK49F,sBAAwB35F,EAAAA,cAAgBjE,KAAKq+F,cAInDr8F,EAAV+B,UAAAs6F,WAAE,WACF,GAAUrxD,GAAShtC,KAAY,OAC3B,OAAOgtC,KAAWA,EAAOsxD,WAAatxD,EAAOuxD,UAGvCv8F,EAAV+B,UAAAm6F,uBAAE,WACMl+F,KAAK6D,YAAc7D,KAAK6D,UAAU26F,SACpCr7C,QAAQC,KACN,yHAMEphD,EAAV+B,UAAAo6F,qBAAE,WAGE,GAAKn+F,KAAK6D,WAAc7D,KAAK6D,UAAU46F,MAAoC,kBAArBl+C,kBAAtD,CAIJ,GAAUm+C,GAAc1+F,KAAK6D,UAAU0gC,cAAc,MAEjDm6D,GAAY55F,UAAUuW,IAAI,2BAC1Brb,KAAK6D,UAAU46F,KAAKx5D,YAAYy5D,EAEpC,IAAUC,GAAgBp+C,iBAAiBm+C,EAKnCC,IAA2C,SAA1BA,EAAc92B,SACjC1kB,QAAQC,KACN,sLAMJpjD,KAAK6D,UAAU46F,KAAK7+B,YAAY8+B,KAI1B18F,EAAV+B,UAAAq6F,sBAAE,WACMZ,GAAQoB,OAASC,EAAAA,QAAYD,MAC/Bz7C,QAAQC,KACJ,iCAAmCo6C,GAAQoB,KAAO,6CACpBC,EAAAA,QAAYD,KAAO,wEAOzD58F,EAAF+B,UAAA+6F,wBAAE,YACM9+F,KAAK+9F,mBAAsB/9F,KAAKg+F,WAIhCh+F,KAAKi+F,qBAAyBj+F,KAAY,QAAiB,QAAMA,KAAK69F,eACxE16C,QAAQC,KACN,wFAEJpjD,KAAK+9F,mBAAoB,mBAlG7Bz9F,KAACuB,EAAAA,SAADrB,OACEsB,SAAUi9F,EAAAA,YACV18F,SAAU08F,EAAAA,oDAgBZz+F,KAAA0+F,QAAA3+F,aAAAC,KAAKe,EAAAA,WAALf,KAAiBgB,EAAAA,OAAjBd,MAAwBm9F,QACxBr9F,SAAAc,GAAAf,aAAAC,KAAKe,EAAAA,WAALf,KAAiBgB,EAAAA,OAAjBd,MAAwBywC,EAAAA,oBAiFxBjvC,KO7Hai9F,GAAkB,GAAIjlF,GAAAA,eAAuB,mBACxDkG,WAAY,OACZ0J,QAASgxE,IAcEsE,IAA4B33F,QAAS03F,GAAiBz3F,YAAaszF,EAAAA,yBAGhF,QAAAn2B,KAMY3kE,KAAZm/F,eAA6B,GAAIpxF,GAAAA,QAqPjC,MAtPEpC,QAAFC,eAAM+4D,EAAN5gE,UAAA,qBAAE,WAAwC,MAAO/D,MAAKm/F,gDAqLpDx6B,EAAF5gE,UAAAoiE,YAAE,SAAYt6D,GACV,MAAa,OAATA,GAAiB7L,KAAK8nE,eAAej8D,IAAU7L,KAAKknE,QAAQr7D,GACvDA,EAEF7L,KAAKsiB,WAOdqiD,EAAF5gE,UAAAq7F,UAAE,SAAUC,GACRr/F,KAAKq/F,OAASA,EACdr/F,KAAKm/F,eAAerzF,QAUtB64D,EAAF5gE,UAAAqiE,YAAE,SAAY9f,EAAUg5C,GACpB,MAAOt/F,MAAK+tE,QAAQznB,GAAStmD,KAAK+tE,QAAQuxB,IACtCt/F,KAAKkuE,SAAS5nB,GAAStmD,KAAKkuE,SAASoxB,IACrCt/F,KAAKuuE,QAAQjoB,GAAStmD,KAAKuuE,QAAQ+wB,IAUzC36B,EAAF5gE,UAAAw/D,SAAE,SAASjd,EAAiBg5C,GACxB,GAAIh5C,GAASg5C,EAAQ,CACzB,GAAUC,GAAav/F,KAAKknE,QAAQ5gB,GAC1Bk5C,EAAcx/F,KAAKknE,QAAQo4B,EAC/B,OAAIC,IAAcC,GACRx/F,KAAKomE,YAAY9f,EAAOg5C,GAE3BC,GAAcC,EAEvB,MAAOl5C,IAASg5C,GAWlB36B,EAAF5gE,UAAAupE,UAAE,SAAU7J,EAASjqD,EAAgBD,GACjC,MAAIC,IAAOxZ,KAAKomE,YAAY3C,EAAMjqD,GAAO,EAChCA,EAELD,GAAOvZ,KAAKomE,YAAY3C,EAAMlqD,GAAO,EAChCA,EAEFkqD,GAEXkB,KYlQa0D,GAAmB,GAAIruD,GAAAA,eAA+B,mBXHnE,KACEijF,GAAmC,mBAARwC,MAC3B,MAAFrmF,GACE6jF,IAAoB,EAItB,GAAMyC,KACJ5yB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzB6yB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvF5yB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,SAK/B,SAAA9hE,GAAK,MAAAzJ,QAAOyJ,EAAI,IAA/C20F,GAAqB7E,EAAM,GAAE,IAI7B8E,IACJ/yB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3E6yB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpD5yB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrC+yB,GACF,qFAaJC,GAAA,SAAAx8F,GAkBE,QAAFw8F,GAAmDC,EAAuBtoF,GAAxE,GAAF/T,GACIJ,EADJK,KAAA5D,OAAAA,WAFE2D,GAAFs8F,kBAA8B,EAI1B18F,EAAJQ,UAAUq7F,UAAVx7F,KAAAD,EAAoBq8F,GAGhBr8F,EAAKs8F,kBAAoBvoF,EAASK,QAClCpU,EAAKu8F,WAAaxoF,EAASK,SAAWL,EAASM,OA6OnD,MApQuClU,GAAvCi8F,EAAAx8F,GA0BEw8F,EAAFh8F,UAAAgqE,QAAE,SAAQtK,GACN,MAAOA,GAAK08B,eAGdJ,EAAFh8F,UAAAmqE,SAAE,SAASzK,GACP,MAAOA,GAAKyK,YAGd6xB,EAAFh8F,UAAAwqE,QAAE,SAAQ9K,GACN,MAAOA,GAAK8K,WAGdwxB,EAAFh8F,UAAAmrE,aAAE,SAAazL,GACX,MAAOA,GAAK28B,UAGdL,EAAFh8F,UAAA+qE,cAAE,SAAcliE,GAAd,GAAFjJ,GAAA3D,IACI,IAAIi9F,GAAmB,CAC3B,GAAYoD,GAAM,GAAIZ,MAAKa,eAAetgG,KAAKq/F,QAAS7uB,MAAO5jE,EAAO2zF,SAAU,OAC1E,OAAOxF,GAAM,GAAE,SAAE9vF,GACb,MAAAtH,GAAK68F,+BAA+B78F,EAAK88F,QAAQJ,EAAK,GAAIK,MAAK,KAAMz1F,EAAG,OAE9E,MAAOy0F,IAAoB9yF,IAG7BmzF,EAAFh8F,UAAAwrE,aAAE,WAAA,GAAF5rE,GAAA3D,IACI,IAAIi9F,GAAmB,CAC3B,GAAY0D,GAAM,GAAIlB,MAAKa,eAAetgG,KAAKq/F,QAASuB,IAAK,UAAWL,SAAU,OAC5E,OAAOxF,GAAM,GAAE,SAAE9vF,GAAK,MAAAtH,GAAK68F,+BACvB78F,EAAK88F,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAGz1F,EAAI,OAE9C,MAAO20F,KAGTG,EAAFh8F,UAAA4oE,kBAAE,SAAkB//D,GAAlB,GAAFjJ,GAAA3D,IACI,IAAIi9F,GAAmB,CAC3B,GAAY4D,GAAM,GAAIpB,MAAKa,eAAetgG,KAAKq/F,QAASyB,QAASl0F,EAAO2zF,SAAU,OAC5E,OAAOxF,GAAM,EAAC,SAAE9vF,GAAK,MAAAtH,GAAK68F,+BACtB78F,EAAK88F,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAGz1F,EAAI,OAE9C,MAAO40F,IAA0BjzF,IAGnCmzF,EAAFh8F,UAAA6sE,YAAE,SAAYnN,GACV,GAAIw5B,GAAmB,CAC3B,GAAY8D,GAAM,GAAItB,MAAKa,eAAetgG,KAAKq/F,QAAShvB,KAAM,UAAWkwB,SAAU,OAC7E,OAAOvgG,MAAKwgG,+BAA+BxgG,KAAKygG,QAAQM,EAAKt9B,IAE/D,MAAOjiE,QAAOxB,KAAK+tE,QAAQtK,KAG7Bs8B,EAAFh8F,UAAA0oE,kBAAE,WAEE,MAAO,IAGTszB,EAAFh8F,UAAAyqE,kBAAE,SAAkB/K,GAChB,MAAOzjE,MAAKuuE,QAAQvuE,KAAKghG,wBACrBhhG,KAAK+tE,QAAQtK,GAAOzjE,KAAKkuE,SAASzK,GAAQ,EAAG,KAGnDs8B,EAAFh8F,UAAAk9F,MAAE,SAAMx9B,GACJ,MAAO,IAAIi9B,MAAKj9B,EAAKy9B,YAGvBnB,EAAFh8F,UAAAqqE,WAAE,SAAWiC,EAAcG,EAAe/M,GAGtC,GAAI+M,EAAQ,GAAKA,EAAQ,GACvB,KAAMj/C,OAAM,wBAAwBi/C,EAA1C,6CAGI,IAAI/M,EAAO,EACT,KAAMlyC,OAAM,iBAAiBkyC,EAAnC,oCAGA,IAAQ7e,GAAS5kD,KAAKghG,wBAAwB3wB,EAAMG,EAAO/M,EAEvD,IAAI7e,EAAOspB,YAAcsC,EACvB,KAAMj/C,OAAM,iBAAiBkyC,EAAnC,2BAAkE+M,EAAlE,KAGI,OAAO5rB,IAGTm7C,EAAFh8F,UAAAopE,MAAE,WACE,MAAO,IAAIuzB,OAGbX,EAAFh8F,UAAA4jE,MAAE,SAAM97D,GAGJ,MAAoB,gBAATA,GACF,GAAI60F,MAAK70F,GAEXA,EAAQ,GAAI60F,MAAKA,KAAK/4B,MAAM97D,IAAU,MAG/Ck0F,EAAFh8F,UAAA6jE,OAAE,SAAOnE,EAAY09B,GACjB,IAAKnhG,KAAKknE,QAAQzD,GAChB,KAAMlyC,OAAM,iDAGd,IAAI0rE,GAAmB,CAGjBj9F,KAAKkgG,aAAez8B,EAAK08B,cAAgB,GAAK18B,EAAK08B,cAAgB,QACrE18B,EAAOzjE,KAAKihG,MAAMx9B,GAClBA,EAAK29B,YAAYvpF,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAI,KAAMiqD,EAAK08B,kBAGnDgB,EAANluE,MAA0BkuE,GAAeZ,SAAU,OAEnD,IAAYQ,GAAM,GAAItB,MAAKa,eAAetgG,KAAKq/F,OAAQ8B,EACjD,OAAOnhG,MAAKwgG,+BAA+BxgG,KAAKygG,QAAQM,EAAKt9B,IAE/D,MAAOzjE,MAAKwgG,+BAA+B/8B,EAAK49B,iBAGlDtB,EAAFh8F,UAAA0qE,iBAAE,SAAiBhL,EAAY69B,GAC3B,MAAOthG,MAAK0uE,kBAAkBjL,EAAc,GAAR69B,IAGtCvB,EAAFh8F,UAAA2qE,kBAAE,SAAkBjL,EAAY89B,GAChC,GAAQC,GAAUxhG,KAAKghG,wBACfhhG,KAAK+tE,QAAQtK,GAAOzjE,KAAKkuE,SAASzK,GAAQ89B,EAAQvhG,KAAKuuE,QAAQ9K,GAUnE,OAJIzjE,MAAKkuE,SAASszB,MAAcxhG,KAAKkuE,SAASzK,GAAQ89B,GAAU,GAAK,IAAM,KACzEC,EAAUxhG,KAAKghG,wBAAwBhhG,KAAK+tE,QAAQyzB,GAAUxhG,KAAKkuE,SAASszB,GAAU,IAGjFA,GAGTzB,EAAFh8F,UAAAuqE,gBAAE,SAAgB7K,EAAYg+B,GAC1B,MAAOzhG,MAAKghG,wBACRhhG,KAAK+tE,QAAQtK,GAAOzjE,KAAKkuE,SAASzK,GAAOzjE,KAAKuuE,QAAQ9K,GAAQg+B,IAGpE1B,EAAFh8F,UAAA29F,UAAE,SAAUj+B,GACR,OACEA,EAAKk+B,iBACL3hG,KAAK4hG,QAAQn+B,EAAKo+B,cAAgB,GAClC7hG,KAAK4hG,QAAQn+B,EAAKq+B,eAClB7gD,KAAK,MAQT8+C,EAAFh8F,UAAAoiE,YAAE,SAAYt6D,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAIi0F,GAAe7kF,KAAKpP,GAAQ,CACtC,GAAY43D,GAAO,GAAIi9B,MAAK70F,EACpB,IAAI7L,KAAKknE,QAAQzD,GACf,MAAOA,IAIb,MAAOlgE,GAAXQ,UAAiBoiE,YAAjBviE,KAAA5D,KAA6B6L,IAG3Bk0F,EAAFh8F,UAAA+jE,eAAE,SAAe5+C,GACb,MAAOA,aAAew3E,OAGxBX,EAAFh8F,UAAAmjE,QAAE,SAAQzD,GACN,OAAQs+B,MAAMt+B,EAAKy9B,YAGrBnB,EAAFh8F,UAAAue,QAAE,WACE,MAAO,IAAIo+E,MAAKsB,MAIVjC,EAAVh8F,UAAAi9F,wBAAE,SAAgC3wB,EAAcG,EAAe/M,GAC/D,GAAU7e,GAAS,GAAI87C,MAAKrwB,EAAMG,EAAO/M,EAOrC,OAHI4M,IAAQ,GAAKA,EAAO,KACtBzrB,EAAOw8C,YAAYphG,KAAK+tE,QAAQnpB,GAAU,MAErCA,GAQDm7C,EAAVh8F,UAAA69F,QAAE,SAAgBrE,GACd,OAAQ,KAAOA,GAAG/yF,OAAO,IAUnBu1F,EAAVh8F,UAAAy8F,+BAAE,SAAuCjkC,GACrC,MAAOA,GAAIn3B,QAAQ,kBAAmB,KAchC26D,EAAVh8F,UAAA08F,QAAE,SAAgBM,EAA0Bt9B,GAC5C,GAAUq2B,GAAI,GAAI4G,MAAKA,KAAKuB,IACpBx+B,EAAK08B,cAAe18B,EAAKyK,WAAYzK,EAAK8K,UAAW9K,EAAKy+B,WAC1Dz+B,EAAK0+B,aAAc1+B,EAAK2+B,aAAc3+B,EAAK4+B,mBAC/C,OAAOtB,GAAIn5B,OAAOkyB,mBAnQtBx5F,KAAC2f,EAAAA,iDAkBD3f,KAAAkB,OAAAnB,aAAAC,KAAee,EAAAA,WAAff,KAA2BgB,EAAAA,OAA3Bd,MAAkCy+F,QA/ElC3+F,KAAQa,EAAAA,YAkUR4+F,GApQuCp7B,IY3D1B29B,IACX36B,OACEpC,UAAW,MAEbsC,SACEtC,WAAY8K,KAAM,UAAWG,MAAO,UAAWowB,IAAK,WACpDzuB,gBAAiB9B,KAAM,UAAWG,MAAO,SACzCb,eAAgBU,KAAM,UAAWG,MAAO,OAAQowB,IAAK,WACrDnvB,oBAAqBpB,KAAM,UAAWG,MAAO,UCEjD+xB,GAAA,WAAA,QAAAA,MAM+B,sBAN/BjiG,KAACuB,EAAAA,SAADrB,OACEsB,SAAU+6B,EAAAA,gBACVv1B,YACGC,QAASo9D,GAAah3C,SAAUoyE,SAGrCwC,KAKAlsB,GAAoDisB,GAFpDE,GAAA,WAAA,QAAAA,MAIkC,sBAJlCliG,KAACuB,EAAAA,SAADrB,OACEsB,SAAUygG,IACVj7F,YAAaC,QAAS8gE,GAAkB+C,SAA1CiL,SAEAmsB,KCtBAC,GAAA,WAAA,QAAAA,MAKA,MAHEA,GAAF1+F,UAAAke,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQwgF,OAAUvgF,GAAQA,EAAKwgF,4BAH5EriG,KAAC2f,EAAAA,aAKDwiF,KAGAjgF,GAAA,WAAA,QAAAA,MApBA,MAsBEA,GAAFze,UAAAke,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQ0gF,SAAYzgF,GAAQA,EAAKwgF,4BAH9EriG,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAY,gHApBzBsC,KCuBaqgF,GAAqB,GAAI7oF,GAAAA,eAA8B,sBAE9D8oF,IACJ,YACA,QACA,aACA,WACA,aACA,gBAQI,aAANC,GACO,aAFDC,IACJC,GAAE,GACFC,IAAG,IAILt1E,GAAA,SAAArqB,GAKE,QAAFqqB,GACoDu1E,EACpCC,GAFd,GAAFz/F,GAGIJ,EAHJK,KAAA5D,OAAAA,WACoD2D,GAApDw/F,eAAoDA,EAHlDx/F,EAAF0/F,OAAWP,GAMHM,GACFA,EAAatE,4BAuEnB,MAhFmCh7F,GAAnC8pB,EAAArqB,GA0BEqqB,EAAF7pB,UAAAu/F,YAAE,SAAYt2F,GACd,GAAUu2F,GAAyC,mBAAXv2D,QAAyB,OAAgBC,OAAS,IAEtF,KAAKs2D,EASH,MAAOP,GAGb,IAAUQ,GAAK,GAAID,GAAOv2F,EAAShN,KAAKmjG,oBAAkB/hG,IAGhDqiG,EAAM,GAAIF,GAAOG,IACjBC,EAAQ,GAAIJ,GAAOK,MACnBC,EAAQ,GAAIN,GAAOO,MAKnBC,EAAQ/jG,KAAKgkG,kBAAkBP,GAAM7xF,MAAO,QAASqyF,UAAW,GAAIN,GACpEO,EAAYlkG,KAAKgkG,kBAAkBH,GAAQjyF,MAAO,YAAauyF,KAAM,KAe3E,OAZAV,GAAIW,cAAcT,GAOlBO,EAAUE,cAAcL,GAGxBP,EAAGnoF,KAAKsoF,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMt2E,EAAV7pB,UAAAigG,kBAAE,SAA0B7J,EAAkBx7C,GAA9C,IAA4D,GAA5D0lD,MAAA55C,EAAA,EAA4DA,EAA5D3hD,UAAAvE,OAA4DkmD,IAAA45C,EAA5D55C,EAAA,GAAA3hD,UAAA2hD,EACA,IAAQ65C,GAAa,GAAKnK,GAAgB,YAAsBx7C,EAK5D,OAHA0lD,GAAax6F,KAAKswF,GAClBkK,EAAaj6F,QAAO,SAACsgD,GAAQ,MAAA45C,GAAWF,cAAc15C,KAE/C45C,kBA9EXhkG,KAAC2f,EAAAA,iDAMD3f,SAAAc,GAAAf,aAAAC,KAAKe,EAAAA,WAALf,KAAiBgB,EAAAA,OAAjBd,MAAwBqiG,QAxCxBviG,KAAQ0B,GAAR3B,aAAAC,KAyCKe,EAAAA,cA0ELusB,GAhFmC22E,EAAAA,qBdtBnCt6C,GAAA,WAAA,QAAAA,MAIsB,sBAJtB3pD,KAACC,EAAAA,UAADC,OACE6C,SAAU,wBACV1C,MAAOC,MAAS,gBAElBqpD,mBAmCE,QAAFu6C,GAActJ,EAA2BluF,GACrC6iD,EAASqrC,EAAOluF,GAEpB,MAAAw3F,MAEA54C,GAAA,WAAA,QAAAA,MAK6B,sBAL7BtrD,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,IACVK,SAAU4nD,GAASjoD,IACnBW,cAAesnD,QAEjB2B,Se5DE64C,UAAF,EAAaC,QAAb,EAAsBC,WAAtB,EAAkCC,OAAlC,8GAMA,mBAKE,QAAFC,GACYhV,EAED7iF,EAEA2lB,GAJC3yB,KAAZ6vF,UAAYA,EAED7vF,KAAXgN,QAAWA,EAEAhN,KAAX2yB,OAAWA,EAPT3yB,KAAFiP,MAAuB61F,GAAYF,OAcnC,MAHEC,GAAF9gG,UAAAghG,QAAE,WACE/kG,KAAK6vF,UAAUmV,cAAchlG,OAEjC6kG,KdaaI,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IAG3BC,GAAsBryF,EAAAA,iCAAiCC,SAAS,kBAqCpE,QAAFkwE,GAAsBmiB,EACA/xF,EACR/P,EACAkU,GAHZ,GAAF/T,GAAA3D,IAAsBA,MAAtBslG,QAAsBA,EACAtlG,KAAtBuT,QAAsBA,EArBZvT,KAAVulG,gBAA2B,EAGjBvlG,KAAVwlG,eAA2B,GAAIxvE,KAGrBh2B,KAAVylG,eAA2B,GAAIvgE,KAmKrBllC,KAAVkiC,aAAsB,SAAItwB,GAG1B,GAAU8zF,GAAkB/pD,EAAAA,gCAAgC/pC,GAClD+zF,EAAmBhiG,EAAKiiG,sBAC1BlF,KAAKmF,MAAQliG,EAAKiiG,qBAAuBR,EAExCzhG,GAAK2hG,QAAQQ,gBAAmBJ,GAAoBC,IACvDhiG,EAAK4hG,gBAAiB,EACtB5hG,EAAKoiG,aAAan0F,EAAM0wB,QAAS1wB,EAAM2wB,QAAS5+B,EAAK2hG,QAAQjnF,gBAKzDre,KAAVgmG,cAAuB,SAAIp0F,GACvB,IAAKjO,EAAK2hG,QAAQQ,eAAgB,CAIhCniG,EAAKiiG,qBAAuBlF,KAAKmF,MACjCliG,EAAK4hG,gBAAiB,CAMtB,KAAK,GAFCU,GAAUr0F,EAAMs0F,eAEbj7F,EAAI,EAAGA,EAAIg7F,EAAQ1hG,OAAQ0G,IAClCtH,EAAKoiG,aAAaE,EAAQh7F,GAAGq3B,QAAS2jE,EAAQh7F,GAAGs3B,QAAS5+B,EAAK2hG,QAAQjnF,gBAMrEre,KAAVmmG,aAAsB,WACbxiG,EAAK4hG,iBAIV5hG,EAAK4hG,gBAAiB,EAGtB5hG,EAAK8hG,eAAer7F,QAAO,SAAC83E,GAGhC,GAAYpzC,GAAYozC,EAAOjzE,QAAU61F,GAAYJ,SAC7CxiB,EAAOvvD,OAAOyzE,sBAAwBlkB,EAAOjzE,QAAU61F,GAAYL,WAEhEviB,EAAOvvD,OAAO0zE,YAAcv3D,GAC/BozC,EAAO6iB,cA/LPrtF,EAASxT,YACXlE,KAAKsmG,kBAAoB9iG,EAAWkB,cAGpC1E,KAAKwlG,eACF7uE,IAAI,YAAa32B,KAAKkiC,cACtBvL,IAAI,UAAW32B,KAAKmmG,cACpBxvE,IAAI,aAAc32B,KAAKmmG,cAEvBxvE,IAAI,aAAc32B,KAAKgmG,eACvBrvE,IAAI,WAAY32B,KAAKmmG,cACrBxvE,IAAI,cAAe32B,KAAKmmG,eAsMjC,MA5LEhjB,GAAFp/E,UAAAgiG,aAAE,SAAav0F,EAAWC,EAAWkhB,GAAnC,GAAFhvB,GAAA3D,SAAA,KAAA2yB,IAAqCA,KACrC,IAAU+lE,GAAgB14F,KAAKumG,eACLvmG,KAAKumG,gBAAkBvmG,KAAKsmG,kBAAkBt7E,wBAC9Dw7E,EAAVvzE,MAAgCgyE,GAAiCtyE,EAAO8zE,UAEhE9zE,GAAO+zE,WACTl1F,EAAIknF,EAActrF,KAAOsrF,EAAcrrF,MAAQ,EAC/CoE,EAAIinF,EAAcrjE,IAAMqjE,EAAcj8E,OAAS,EAGrD,IAAUkqF,GAASh0E,EAAOg0E,QAAUpL,EAAyB/pF,EAAGC,EAAGinF,GACzD54C,EAAUtuC,EAAIknF,EAActrF,KAC5BguC,EAAU3pC,EAAIinF,EAAcrjE,IAC5BtG,EAAWy3E,EAAgBtB,cAE3BhjB,EAASx+E,SAAS6gC,cAAc,MACtC29C,GAAOp9E,UAAUuW,IAAI,sBAErB6mE,EAAOt1E,MAAMQ,KAAU0yC,EAAU6mD,EAArC,KACIzkB,EAAOt1E,MAAMyoB,IAAS+lB,EAAUurD,EAApC,KACIzkB,EAAOt1E,MAAM6P,OAAqB,EAATkqF,EAA7B,KACIzkB,EAAOt1E,MAAMS,MAAoB,EAATs5F,EAA5B,KAGIzkB,EAAOt1E,MAAMwO,gBAAkBuX,EAAOuU,OAAS,KAC/Cg7C,EAAOt1E,MAAMg6F,mBAAwB73E,EAAzC,KAEI/uB,KAAKsmG,kBAAkBrhE,YAAYi9C,GAInCmZ,EAA0BnZ,GAE1BA,EAAOt1E,MAAMsC,UAAY,UAG7B,IAAU23F,GAAY,GAAIhC,IAAU7kG,KAAMkiF,EAAQvvD,EA2B9C,OAzBAk0E,GAAU53F,MAAQ61F,GAAYL,UAG9BzkG,KAAKylG,eAAepqF,IAAIwrF,GAEnBl0E,EAAO0zE,aACVrmG,KAAK8mG,2BAA6BD,GAKpC7mG,KAAK+mG,uBAAsB,WAC/B,GAAYC,GAA8BH,IAAcljG,EAAKmjG,0BAEvDD,GAAU53F,MAAQ61F,GAAYJ,QAMzB/xE,EAAO0zE,YAAgBW,GAAgCrjG,EAAK4hG,gBAC/DsB,EAAU9B,WAEXh2E,GAEI83E,GAIT1jB,EAAFp/E,UAAAihG,cAAE,SAAc6B,GAChB,GAAUI,GAAYjnG,KAAKylG,eAAe5uE,OAAOgwE,EAY7C,IAVIA,IAAc7mG,KAAK8mG,6BACrB9mG,KAAK8mG,2BAA6B,MAI/B9mG,KAAKylG,eAAe7hE,OACvB5jC,KAAKumG,eAAiB,MAInBU,EAAL,CAIJ,GAAUC,GAAWL,EAAU75F,QACrBw5F,EAAVvzE,MAAgCgyE,GAAiC4B,EAAUl0E,OAAO8zE,UAE9ES,GAASt6F,MAAMg6F,mBAAwBJ,EAAgBrB,aAA3D,KACI+B,EAASt6F,MAAMujB,QAAU,IACzB02E,EAAU53F,MAAQ61F,GAAYH,WAG9B3kG,KAAK+mG,uBAAsB,WACzBF,EAAU53F,MAAQ61F,GAAYF,OAC9BsC,EAAmB,WAAEtnC,YAAYsnC,IAChCV,EAAgBrB,gBAIrBhiB,EAAFp/E,UAAAojG,WAAE,WACEnnG,KAAKylG,eAAer7F,QAAO,SAAC83E,GAAU,MAAAA,GAAO6iB,aAI/C5hB,EAAFp/E,UAAAqa,mBAAE,SAAmBpR,GAAnB,GAAFrJ,GAAA3D,IACSgN,IAAWA,IAAYhN,KAAKonG,kBAKjCpnG,KAAKujF,uBAELvjF,KAAKuT,QAAQW,kBAAiB,WAC5BvQ,EAAK6hG,eAAep7F,QAAO,SAAEkhB,EAAIhrB,GAC/B0M,EAAQqgC,iBAAiB/sC,EAAMgrB,EAAI+5E,QAIvCrlG,KAAKonG,gBAAkBp6F,IA0DjBm2E,EAAVp/E,UAAAgjG,uBAAE,SAA+Bz7E,EAAcijB,OAA/C,KAAAA,IAA+CA,EAA/C,GACIvuC,KAAKuT,QAAQW,kBAAiB,WAAO,MAAA8a,YAAW1D,EAAIijB,MAItD40C,EAAFp/E,UAAAw/E,qBAAE,WAAA,GAAF5/E,GAAA3D,IACQA,MAAKonG,iBACPpnG,KAAKwlG,eAAep7F,QAAO,SAAEkhB,EAAIhrB,GAC/BqD,EAAoB,gBAAE2qC,oBAAoBhuC,EAAMgrB,EAAI+5E,OAI5DliB,KezQa5hF,GACT,GAAIyY,GAAAA,eAAoC,6BAE5CmoE,GAAA,WAqEE,QAAFA,GAAsBhiF,EACR8d,EACAvG,EAC+C2vF,EACJ3hE,GAJnC1lC,KAAtBG,YAAsBA,EA1CMH,KAA5B2mG,OAA6C,EAmBnC3mG,KAAVsmC,WAA+B,EAqBrBtmC,KAAVomC,gBAAoC,EAQhCpmC,KAAKsnG,eAAiBD,MACtBrnG,KAAKunG,gBAAkB,GAAIpkB,IAAenjF,KAAMie,EAAQ9d,EAAauX,GAE/C,mBAAlBguB,IACF1lC,KAAKsnG,eAAeb,WAAavB,cAAe,EAAGC,aAAc,IAqEvE,MA5GEx5F,QAAFC,eACMu2E,EADNp+E,UAAA,gBAAE,WACiB,MAAO/D,MAAKsmC,eAC7B,SAAaz6B,GACX7L,KAAKsmC,UAAYz6B,EACjB7L,KAAKwnG,gEAQP77F,OAAFC,eACMu2E,EADNp+E,UAAA,eAAE,WACgB,MAAO/D,MAAKynG,UAAYznG,KAAKG,YAAYuE,mBACzD,SAAYsK,GACVhP,KAAKynG,SAAWz4F,EAChBhP,KAAKwnG,gEA2BPrlB,EAAFp+E,UAAAuK,SAAE,WACEtO,KAAKomC,gBAAiB,EACtBpmC,KAAKwnG,gCAGPrlB,EAAFp+E,UAAAmE,YAAE,WACElI,KAAKunG,gBAAgBhkB,wBAIvBpB,EAAFp+E,UAAAojG,WAAE,WACEnnG,KAAKunG,gBAAgBJ,cAOvBx7F,OAAFC,eAAMu2E,EAANp+E,UAAA,oBAAE,WACE,OACE2iG,SAAU1mG,KAAK0mG,SACfC,OAAQ3mG,KAAK2mG,OACbz/D,MAAOlnC,KAAKknC,MACZu/D,UAANxzE,MAAqBjzB,KAAKsnG,eAAeb,UAAczmG,KAAKymG,WACtDL,qBAAsBpmG,KAAKsnG,eAAelB,uDAQ9Cz6F,OAAFC,eAAMu2E,EAANp+E,UAAA,sBAAE,WACE,MAAO/D,MAAKoX,YAAcpX,KAAKsnG,eAAelwF,0CAIxC+qE,EAAVp+E,UAAAyjG,6BAAE,YACOxnG,KAAKoX,UAAYpX,KAAKomC,gBACzBpmC,KAAKunG,gBAAgBnpF,mBAAmBpe,KAAKgP,UAmBjDmzE,EAAFp+E,UAAA2jG,OAAE,SAAOC,EAAkCl2F,EAAekhB,GACtD,WADJ,KAAAlhB,IAA2CA,EAA3C,GAC6B,gBAAdk2F,GACF3nG,KAAKunG,gBAAgBxB,aAAa4B,EAAWl2F,EAA1DwhB,MAAiEjzB,KAAKqe,aAAiBsU,IAE1E3yB,KAAKunG,gBAAgBxB,aAAa,EAAG,EAAlD9yE,MAAyDjzB,KAAKqe,aAAiBspF,oBAjJ/ErnG,KAACC,EAAAA,UAADC,OACE6C,SAAU,4BACV5C,SAAU,YACVE,MACEC,MAAS,aACTgnG,+BAAgC,qDA5CpCtnG,KAAEmH,EAAAA,aAIFnH,KAAEY,EAAAA,SAPFZ,KAAQa,EAAAA,WAkHRb,SAAAc,GAAAf,aAAAC,KAAee,EAAAA,WAAff,KAA2BgB,EAAAA,OAA3Bd,MAAkCe,QAClCjB,KAAAkB,OAAAnB,aAAAC,KAAee,EAAAA,WAAff,KAA2BgB,EAAAA,OAA3Bd,MAAkC4sB,EAAAA,8CA9DlC8Z,QAAA5mC,KAAGqH,EAAAA,MAAHnH,MAAS,oBAGTqnG,YAAAvnG,KAAGqH,EAAAA,MAAHnH,MAAS,wBAMTkmG,WAAApmG,KAAGqH,EAAAA,MAAHnH,MAAS,uBAOTmmG,SAAArmG,KAAGqH,EAAAA,MAAHnH,MAAS,qBAOTimG,YAAAnmG,KAAGqH,EAAAA,MAAHnH,MAAS,wBAMT4W,WAAA9W,KAAGqH,EAAAA,MAAHnH,MAAS,uBAYTwO,UAAA1O,KAAGqH,EAAAA,MAAHnH,MAAS,uBAgGT2hF,KCrLAjgF,GAAA,WAAA,QAAAA,MAK8B,sBAL9B5B,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,GAAiB66B,EAAAA,gBAC3Bx6B,SAAU8/E,GAAWngF,IACrBW,cAAew/E,QAEjBjgF,KCeA4lG,GAAA,WAsBE,QAAFA,GAAgEnqE,GAAA39B,KAAhE29B,eAAgEA,EALrD39B,KAAXiP,MAA2C,YAGhCjP,KAAXoX,UAA+B,EAA/B,sBApBA9W,KAACgF,EAAAA,UAAD9E,OAAAsF,cAAAC,EAAAA,kBAAAC,KACEL,gBAAiBC,EAAAA,wBAAnBC,OACExC,SAAF,sBACEmC,QAAF,ugCACED,SAAU,GACV5E,MACFC,MAAA,sBACMmnG,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACI96E,kCAAJ,4KAYA26E,EAAAnmG,kEAFAmmG,KC7CAj8C,GAAA,WAAA,QAAAA,MAIuC,sBAJvCvrD,KAACuB,EAAAA,SAADrB,OACE6B,SAAUylG,IACVnlG,cAAemlG,QAEjBj8C,mBCFA,QAAAq8C,MAAwB,MAAxBA,MACMC,GACFzhG,EAAcwhG,IAGdE,GAA2B,EAK/Bh/C,GAAA,SAAA7lD,GAAA,QAAA6lD,KAAA,GAAAzlD,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,WAsBE2D,GAAFqiD,SAAqB,sBAAsBoiD,OAH3C,MAFiCtkG,GAAjCslD,EAAA7lD,kBAjBAjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,eACE5C,SAAU,cACV8E,SAAU,4JACVO,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEnF,QAAF,YACE8E,QAAF,mkBACE7E,MACFC,MAAA,eACMqG,KAAN,QACIohG,gCAAJ,WACIvnG,uBAAJ,sBACImnD,yBAAJ,gBAIAmB,EAAAznD,wCAGAynD,OzCVIo9B,GAAmB,gBAIrB,QAAFyG,GAEWxiE,EAEAo5B,OAAX,KAAAA,IAAWA,GAAX,GAFW7jD,KAAXyqB,OAAWA,EAEAzqB,KAAX6jD,YAAWA,EACX,MAAAopC,MAeapkC,GACT,GAAI7uC,GAAAA,eAAyC,+BAKjDmvC,GAAA,WAwDE,QAAFA,GACY9uB,EACAhnB,EACiDuhF,EACpCruC,GAHbvmD,KAAZq6B,SAAYA,EACAr6B,KAAZqT,mBAAYA,EACiDrT,KAA7D40F,QAA6DA,EACpC50F,KAAzBumD,MAAyBA,EApCfvmD,KAAVmmC,WAAsB,EACZnmC,KAAV60F,SAAoB,EACV70F,KAAVsmC,WAAsB,EACZtmC,KAAVk1F,qBAAiC,GAYtBl1F,KAAXu2B,GAAwB,cAAciwD,KAYjBxmF,KAArB8+C,kBAAyC,GAAI9tC,GAAAA;0CAGlChR,KAAX8N,cAA2B,GAAIC,GAAAA,QAH/B,MArBEpC,QAAFC,eAAMu9C,EAANplD,UAAA,gBAAE,WAAiB,MAAO/D,MAAK40F,SAAW50F,KAAK40F,QAAQj1C,0CAGrDh0C,OAAFC,eAAMu9C,EAANplD,UAAA,gBAAE,WAA0B,MAAO/D,MAAKmmC,2CAStCx6B,OAAFC,eACMu9C,EADNplD,UAAA,gBAAE,WACiB,MAAQ/D,MAAKumD,OAASvmD,KAAKumD,MAAMnvC,UAAapX,KAAKsmC,eACpE,SAAaz6B,GAAc7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,oCAGlEF,OAAFC,eAAMu9C,EAANplD,UAAA,qBAAE,WAAsB,MAAO/D,MAAK40F,SAAW50F,KAAK40F,QAAQtzE,+CAqB1D3V,OAAFC,eAAMu9C,EAANplD,UAAA,cAAE,WACE,MAAO/D,MAAK60F,yCAOdlpF,OAAFC,eAAMu9C,EAANplD,UAAA,iBAAE,WAEE,OAAQ/D,KAAK+gB,kBAAkB5b,aAAe,IAAIC,wCAIpD+jD,EAAFplD,UAAAm8C,OAAE,WACOlgD,KAAKmmC,YACRnmC,KAAKmmC,WAAY,EACjBnmC,KAAKqT,mBAAmB/B,eACxBtR,KAAK80F,8BAKT3rC,EAAFplD,UAAAq8C,SAAE,WACMpgD,KAAKmmC,YACPnmC,KAAKmmC,WAAY,EACjBnmC,KAAKqT,mBAAmB/B,eACxBtR,KAAK80F,8BAKT3rC,EAAFplD,UAAA2O,MAAE,WACF,GAAU1F,GAAUhN,KAAK+gB,iBAEQ,mBAAlB/T,GAAQ0F,OACjB1F,EAAQ0F,SASZy2C,EAAFplD,UAAAgxF,gBAAE,WACO/0F,KAAK60F,UACR70F,KAAK60F,SAAU,EACf70F,KAAKqT,mBAAmB/B,iBAS5B63C,EAAFplD,UAAAixF,kBAAE,WACMh1F,KAAK60F,UACP70F,KAAK60F,SAAU,EACf70F,KAAKqT,mBAAmB/B,iBAK5B63C,EAAFplD,UAAAspD,SAAE,WACE,MAAOrtD,MAAK+gD,WAIdoI,EAAFplD,UAAAmR,eAAE,SAAetD,GACRA,EAAMwD,UAAYM,EAAAA,OAAS9D,EAAMwD,UAAYO,EAAAA,OAAWR,EAAAA,eAAevD,KAC1E5R,KAAKkiD,wBAGLtwC,EAAM2D,mBAQV4zC,EAAFplD,UAAAm+C,sBAAE,WACOliD,KAAKoX,WACRpX,KAAKmmC,WAAYnmC,KAAK2/C,WAAY3/C,KAAKmmC,UACvCnmC,KAAKqT,mBAAmB/B,eACxBtR,KAAK80F,2BAA0B,KAUnC3rC,EAAFplD,UAAAkxF,iBAAE,WACE,MAAOj1F,MAAKqhB,WAAarhB,KAAK2/C,UAAmB,MAInDwJ,EAAFplD,UAAA+Y,aAAE,WACE,MAAO9c,MAAKoX,SAAW,KAAO,KAIhC+xC,EAAFplD,UAAAgd,gBAAE,WACE,MAAO/gB,MAAKq6B,SAAS31B,eAGvBykD,EAAFplD,UAAAk7D,mBAAE,WAME,GAAIj/D,KAAKmmC,UAAW,CACxB,GAAY4a,GAAY/gD,KAAK+gD,SAEnBA,KAAc/gD,KAAKk1F,uBACrBl1F,KAAKk1F,qBAAuBn0C,EAC5B/gD,KAAK8N,cAAchC,UAKzBq9C,EAAFplD,UAAAmE,YAAE,WACElI,KAAK8N,cAAcO,YAIb86C,EAAVplD,UAAA+wF,0BAAE,SAAkCjxC,OAApC,KAAAA,IAAoCA,GAApC,GACI7jD,KAAK8+C,kBAAkBjtC,KAAK,GAAIo7E,IAAyBjtF,KAAM6jD,oBAzMnEvjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,aACE5C,SAAU,YACVE,MACFsG,KAAA,SACM24B,kBAAN,iBACIu1D,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtB11D,OAAJ,KACImqB,uBAAJ,qBACIhpD,uBAAJ,sBACIw0F,8BAAJ,WACI52E,UAAJ,0BACIsN,YAAJ,yBACIprB,MAAS,cAEb4E,QAAA,43CACAD,SAAA,qWACEO,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FAnEAvF,SAAEc,GAAFf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAqoD,QAFAvoD,KAAE8oD,GAAF/oD,aAAAC,KAAAe,EAAAA,cAcA8nD,EAAAxnD,2DAwEAyV,WAAA9W,KAAAqH,EAAAA,QAGAm3C,oBAAAx+C,KAAA+R,EAAAA,UAYA82C,KClGA3d,GAAA,WAAA,QAAAA,MAK8B,sBAL9BlrC,KAACuB,EAAAA,SAADrB,OACEsB,SAAUI,GAAiBH,EAAAA,aAAc8pD,IACzCxpD,SAAU8mD,GAAWC,IACrBzmD,cAAewmD,GAAWC,QAE5B5d,KCVaq9C,GACX,GAAI7uE,GAAAA,eAA6B,4BCD/BijB,GAAe,EAInB2sD,GAAA,WAAA,QAAAA,KASW5pF,KAAXu2B,GAAwB,aAAa0G,KACrC,sBAVA38B,KAACC,EAAAA,UAADC,OACE6C,SAAU,YACV1C,MACEC,MAAS,YACTqG,KAAQ,QACR8gD,YAAa,4BAIjBxxB,KAAAj2B,KAAGqH,EAAAA,SACHiiF,KCLa2L,IAIXC,mBAAoBxmF,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAASrC,EAAAA,OAAQujB,QAAS,EAAGjhB,UAAW,oBAC9CE,EAAAA,WAAW,iBACTxC,EAAAA,OAAQujB,QAAS,EAAGjhB,UAAW,sBAC/BG,EAAAA,QAAQ,6DChBd,QAAAu5C,MAuDA,MAAAA,MCzDI3rB,GAAe,EAInB6sD,GAAA,WAAA,QAAAA,KAYW9pF,KAAXooF,MAAoC,QAGzBpoF,KAAXu2B,GAAwB,YAAY0G,KACpC,sBAhBA38B,KAACC,EAAAA,UAADC,OACE6C,SAAU,WACV1C,MACEC,MAAS,WACT60F,oBAAqB,iBACrB1tC,YAAa,KAEb9rB,eAAgB,8BAKpBmsD,QAAA9nF,KAAGqH,EAAAA,QAGH4uB,KAAAj2B,KAAGqH,EAAAA,SACHmiF,KCnBAP,GAAA,WAAA,QAAAA,MAGuB,sBAHvBjpF,KAACC,EAAAA,UAADC,OACE6C,SAAU,gBAEZkmF,KCEAG,GAAA,WAAA,QAAAA,MAG6B,sBAH7BppF,KAACC,EAAAA,UAADC,OACE6C,SAAU,sBAEZqmF,KCRAM,GAAA,WAAA,QAAAA,MAGwB,sBAHxB1pF,KAACC,EAAAA,UAADC,OACE6C,SAAU,kBAEZ2mF,KCHAE,GAAA,WAAA,QAAAA,MAGwB,sBAHxB5pF,KAACC,EAAAA,UAADC,OACE6C,SAAU,kBAEZ6mF,KvB0CIjtD,GAAe,gBAUjB,QAAFy4D,GAAqBv1F,GAAAH,KAArBG,YAAqBA,EACrB,MAAAu1F,MAMMvL,GACFhnF,EAAWuyF,GAAkB,WAiBpB5M,GACT,GAAI9uE,GAAAA,eAA2C,kCAInDgvC,GAAA,SAAAzlD,GA0KE,QAAFylD,GACa7oD,EAAiCkT,EACMsiF,EAC1BhlF,EACwCilF,EACpBnyF,EAA6B8P,EAC1BoqB,GAN/C,GAAFh6B,GAOIJ,EAPJK,KAAA5D,KAOUG,IAPVH,WACa2D,GAAbxD,YAAaA,EAAiCwD,EAA9C0P,mBAA8CA,EAEpB1P,EAA1BgN,KAA0BA,EACwChN,EAAlEiyF,UAAkEA,EACpBjyF,EAA9CF,UAA8CA,EAA6BE,EAA3E4P,QAA2EA,EAxHjE5P,EAAVkyF,yCAAoD,EAG1ClyF,EAAVmyF,sCAAiD,EAEvCnyF,EAAV+P,WAAuB,GAAI3F,GAAAA,QAyBjBpK,EAAVoyF,oBAA+B,EAW7BpyF,EAAFqyF,yBAAqC,GAS3BryF,EAAVsyF,WAAuB,GAGrBtyF,EAAFuyF,aAAyB,YAAYj5D,KAGnCt5B,EAAFqiD,SAAa,wBAAwB/oB,KAoEjCt5B,EAAKwyF,cAAgBR,MACrBhyF,EAAKslF,WAAatlF,EAAKwyF,cAAcC,OAAS,OAC9CzyF,EAAK0yF,mBAAwC,mBAAnB14D,EAG1Bh6B,EAAK+iF,WAAckP,GAAaA,EAAUlP,WAAckP,EAAUlP,WAAa,WArCnF,MApGkC5iF,GAAlCklD,EAAAzlD,GAgBEoI,OAAFC,eACMo9C,EADNjlD,UAAA,kBAAE,WAC2C,MAAO/D,MAAK0nF,iBACvD,SAAe77E,GACjB,GAAUu2B,GAAWpiC,KAAK0nF,WAEtB1nF,MAAK0nF,YAAc77E,GAAU7L,KAAK41F,WAAa51F,KAAK41F,UAAUlP,YAAe,SAEpD,YAArB1mF,KAAK0nF,aAA6BtlD,IAAav2B,IACjD7L,KAAK81F,sCAAuC,oCAMhDnqF,OAAFC,eACMo9C,EADNjlD,UAAA,0BAAE,WACoC,MAAO/D,MAAKs2F,yBAChD,SAAuBzqF,GACrB7L,KAAKs2F,oBAAsBv7E,EAAAA,sBAAsBlP,oCAQnDF,OAAFC,eAAMo9C,EAANjlD,UAAA,0BAAE,WACE,MAA2B,WAApB/D,KAAKipF,aAA4BjpF,KAAK+1F,oDAI/CpqF,OAAFC,eAAMo9C,EAANjlD,UAAA,sBAAE,WAAgC,MAA2B,UAApB/D,KAAKipF,4CAM5Ct9E,OAAFC,eACMo9C,EADNjlD,UAAA,iBAAE,WAC0B,MAAO/D,MAAKi2F,gBACtC,SAAcpqF,GACZ7L,KAAKi2F,WAAapqF,EAClB7L,KAAKu2F,iDAkBP5qF,OAAFC,eACMo9C,EADNjlD,UAAA,kBAAE,WAEE,MAA2B,WAApB/D,KAAK0mF,YAAgD,UAArB1mF,KAAK6sF,YAA0B,OAAS7sF,KAAK6sF,iBAEtF,SAAehhF,GACTA,IAAU7L,KAAK6sF,cACjB7sF,KAAK6sF,YAAchhF,GAAS7L,KAAKm2F,cAAcC,OAAS,OACxDp2F,KAAKqT,mBAAmB/B,iDAoB5B3F,OAAFC,eAAMo9C,EAANjlD,UAAA,gBAAE,WAGE,MAAO/D,MAAKw2F,2BAA6Bx2F,KAAKy2F,mBAAqBz2F,KAAKqpF,oBAE1E,SAAax9E,GACX7L,KAAKw2F,0BAA4B3qF,mCAMnCF,OAAFC,eAAMo9C,EAANjlD,UAAA,mBAAE,WACE,MAAO/D,MAAKspF,sBAAwBtpF,KAAKwpF,mDA8B3CxgC,EAAFjlD,UAAAygE,0BAAE,WACE,MAAOxkE,MAAKmpF,yBAA2BnpF,KAAKG,aAG9C6oD,EAAFjlD,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAK02F,uBAET,IAAUx0E,GAAUliB,KAAKwuF,QAEjBtsE,GAAQs8B,aACVx+C,KAAKG,YAAYuE,cAAcI,UAAUuW,IAAI,uBAAuB6G,EAAQs8B,aAI9Et8B,EAAQk9B,aAAan1C,KAAK6F,EAAAA,UAAS,OAASxL,UAAS,WACnDX,EAAKgzF,wBACLhzF,EAAKizF,sBACLjzF,EAAK0P,mBAAmB/B,iBAItB4Q,EAAQg7B,WAAah7B,EAAQg7B,UAAU25C,cACzC30E,EAAQg7B,UAAU25C,aACf5sF,KAAKmK,EAAAA,UAAUpU,KAAK0T,aACpBpP,UAAS,WAAO,MAAAX,GAAK0P,mBAAmB/B,iBAM7CtR,KAAKuT,QAAQW,kBAAiB,WAC5BvQ,EAAK4P,QAAQwrC,SAAS1vB,eAAeplB,KAAKmK,EAAAA,UAAUzQ,EAAK+P,aAAapP,UAAS,WACzEX,EAAKmyF,sCACPnyF,EAAKmzF,uBAMXzqF,EAAAA,MAAMrM,KAAK+pF,gBAAgB1lF,QAASrE,KAAKiqF,gBAAgB5lF,SAASC,UAAS,WACzEX,EAAKmyF,sCAAuC,EAC5CnyF,EAAK0P,mBAAmB/B,iBAI1BtR,KAAK6pF,cAAcxlF,QAAQ4F,KAAK6F,EAAAA,UAAU,OAAOxL,UAAS,WACxDX,EAAK4yF,gBACL5yF,EAAK0P,mBAAmB/B,iBAI1BtR,KAAK2pF,eAAetlF,QAAQ4F,KAAK6F,EAAAA,UAAU,OAAOxL,UAAS,WACzDX,EAAKizF,sBACLjzF,EAAK0P,mBAAmB/B,iBAGtBtR,KAAK2Q,MACP3Q,KAAK2Q,KAAKQ,OAAOlH,KAAKmK,EAAAA,UAAUpU,KAAK0T,aAAapP,UAAS,WAAO,MAAAX,GAAKmzF,sBAI3E9tC,EAAFjlD,UAAA0Q,sBAAE,WACEzU,KAAK02F,wBACD12F,KAAK61F,yCACP71F,KAAK82F,oBAIT9tC,EAAFjlD,UAAAC,gBAAE,WAEEhE,KAAKg2F,yBAA2B,QAChCh2F,KAAKqT,mBAAmB6d,iBAG1B83B,EAAFjlD,UAAAmE,YAAE,WACElI,KAAK0T,WAAW5H,OAChB9L,KAAK0T,WAAWrF,YAIlB26C,EAAFjlD,UAAAgzF,eAAE,SAAeC,GACjB,GAAU95C,GAAYl9C,KAAKwuF,SAAWxuF,KAAKwuF,SAAStxC,UAAY,IAC5D,OAAOA,IAAaA,EAAU85C,IAGhChuC,EAAFjlD,UAAAkzF,gBAAE,WACE,SAAUj3F,KAAKwuF,UAAYxuF,KAAKwuF,SAAS3oC,aAAe7lD,KAAKypF,oBAG/DzgC,EAAFjlD,UAAAmzF,UAAE,WACE,QAASl3F,KAAKm3F,aAGhBnuC,EAAFjlD,UAAAqzF,kBAAE,WACE,MAAOp3F,MAAKq3F,iBAAmBr3F,KAAKwuF,SAAS8I,kBAAoBt3F,KAAKu3F,qBAGxEvuC,EAAFjlD,UAAAyzF,wBAAE,WAEE,MAA2B,WAApBx3F,KAAK0mF,aAA4B1mF,KAAKk3F,aACzCl3F,KAAKk3F,cAAgBl3F,KAAKo3F,qBAGhCpuC,EAAFjlD,UAAAgiD,kBAAE,WAEE,MAAO/lD,MAAKk3F,aAAmC,WAApBl3F,KAAK0mF,YAA2B1mF,KAAKi3F,mBAIlEjuC,EAAFjlD,UAAA0zF,sBAAE,WACE,MAAQz3F,MAAK2pF,gBAAkB3pF,KAAK2pF,eAAeplF,OAAS,GACxDvE,KAAKwuF,SAASkJ,WAAc,QAAU,QAI5C1uC,EAAFjlD,UAAA8pF,qBAAE,WAAA,GAAFlqF,GAAA3D,IACQA,MAAK+lD,qBAAuB/lD,KAAKq3F,iBAG/Br3F,KAAKq2F,qBACPr2F,KAAK+1F,oBAAqB,EAE1B5hF,EAAAA,UAAUnU,KAAK23F,OAAOjzF,cAAe,iBAAiBuF,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,WAC3EX,EAAKoyF,oBAAqB,KAI9B/1F,KAAKipF,WAAa,SAClBjpF,KAAKqT,mBAAmB/B,iBAQpB03C,EAAVjlD,UAAA4yF,sBAAE,WACE,GAAI32F,KAAKwuF,SAAS3oC,aAAe7lD,KAAKypF,kBACpC,KAAMmO,MAKF5uC,EAAVjlD,UAAAwyF,cAAE,WACEv2F,KAAK63F,iBACL73F,KAAK42F,uBAOC5tC,EAAVjlD,UAAA8zF,eAAE,WAAA,GAAFl0F,GAAA3D,IACI,IAAIA,KAAK6pF,cAAe,CAC5B,GAAUiO,GACAC,CACJ/3F,MAAK6pF,cAAcz/E,QAAO,SAAE4tF,GAC1B,GAAmB,UAAfA,EAAK5P,MAAmB,CAC1B,GAAI0P,GAAan0F,EAAKqlF,UACpB,KAAMiP,GAAmC,QAE3CH,GAAYE,MACP,IAAmB,QAAfA,EAAK5P,MAAiB,CAC/B,GAAI2P,EACF,KAAME,GAAmC,MAE3CF,GAAUC,OAUVhvC,EAAVjlD,UAAA6yF,oBAAE,WACE,GAAI52F,KAAKwuF,SAAU,CACvB,GAAU5mC,KAEJ,IAAqC,SAAjC5nD,KAAKy3F,wBAAoC,CACnD,GAAcS,GAAYl4F,KAAK6pF,cACnB7pF,KAAK6pF,cAAclsE,KAAI,SAACq6E,GAAQ,MAAe,UAAfA,EAAK5P,QAAqB,KACxD+P,EAAUn4F,KAAK6pF,cACjB7pF,KAAK6pF,cAAclsE,KAAI,SAACq6E,GAAQ,MAAe,QAAfA,EAAK5P,QAAmB,IAExD8P,GACFtwC,EAAI/9C,KAAKquF,EAAU3hE,IACVv2B,KAAKi2F,YACdruC,EAAI/9C,KAAK7J,KAAKk2F,cAGZiC,GACFvwC,EAAI/9C,KAAKsuF,EAAQ5hE,QAEVv2B,MAAK2pF,iBACd/hC,EAAM5nD,KAAK2pF,eAAer9E,IAAG,SAAC42C,GAAS,MAAAA,GAAM3sB,KAG/Cv2B,MAAKwuF,SAAS7mC,kBAAkBC,KAK1BoB,EAAZjlD,UAAA2yF,sBAAE,WACE,IAAK12F,KAAKwuF,SACR,KAAM4J,MAQVpvC,EAAFjlD,UAAA+yF,iBAAE,WACF,GAAUuB,GAAUr4F,KAAK23F,OAAS33F,KAAK23F,OAAOjzF,cAAgB,IAE1D,IAAwB,YAApB1E,KAAK0mF,YAA6B2R,GAAYA,EAAQluF,SAAS5F,QAC9D8zF,EAAQlzF,YAAYC,QAIpBpF,KAAKyD,UAAUS,UAApB,CAMA,IAAKR,SAAwB,gBAAEqB,SAAS/E,KAAKG,YAAYuE,eAEvD,YADA1E,KAAK61F,yCAA0C,EAIrD,IAAQyC,GAAa,EACbC,EAAW,EAETxkE,EAAY/zB,KAAKmpF,wBAAwBzkF,cACzC8zF,EAAWzkE,EAAUyrC,iBAAiB,iCACtCi5B,EAAS1kE,EAAUyrC,iBAAiB,8BAE1C,IAAIx/D,KAAK23F,QAAU33F,KAAK23F,OAAOjzF,cAAcyF,SAAS5F,OAAQ,CAClE,GAAYm0F,GAAgB3kE,EAAU/I,uBAQhC,IAA4B,IAAxB0tE,EAAcrrF,OAAwC,IAAzBqrF,EAAcj8E,OAG7C,MAFAzc,MAAK81F,sCAAuC,OAC5C91F,KAAK61F,yCAA0C,EAQjD,KAAoB,GAJd8C,GAAiB34F,KAAK44F,aAAaF,GACnCG,EAAa74F,KAAK44F,aAAaP,EAAQluF,SAAS,GAAG6gB,yBACrD8tE,EAAa,EAEvBruC,EAAA,EAA0BrxC,EAAAi/E,EAAQluF,SAARsgD,EAA1BrxC,EAAA7U,OAA0BkmD,IAAkB,CACpCquC,GADR1/E,EAAAqxC,GAC4B33C,YAEtBwlF,EAAaO,EAAaF,EA3eN,EA4epBJ,EAAWO,EAAa,EA7eH,IA6eOA,EAAkCC,GAAwB,EAGxF,IAAK,GAAI9tF,GAAI,EAAGA,EAAIutF,EAASj0F,OAAQ0G,IACnCutF,EAAS9tC,KAAKz/C,GAAG2B,MAAMS,MAAWirF,EAAxC,IAEI,KAAK,GAAIrtF,GAAI,EAAGA,EAAIwtF,EAAOl0F,OAAQ0G,IACjCwtF,EAAO/tC,KAAKz/C,GAAG2B,MAAMS,MAAWkrF,EAAtC,IAGIv4F,MAAK81F,qCACD91F,KAAK61F,yCAA0C,IAI7C7sC,EAAVjlD,UAAA60F,aAAE,SAAqBI,GACnB,MAAOh5F,MAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,MAAkBmtF,EAAK7jE,MAAQ6jE,EAAK5rF,qBAtdtE9M,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,iBACE5C,SAAU,eACV8E,SAAU,smhBAMV5E,MACEC,MAAJ,iBACIq4F,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,mCAAN,sBACIC,0CAAJ,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACIxxD,qBAAJ,oBACIC,mBAAJ;qCACIigD,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIz7D,kCAAJ,uBAEAzsB,QAAA,SACAoF,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAIAmjD,EAAA1lC,eAAA,WAAA,QACAhjB,KAAAmH,EAAAA,aACAnH,KAAA8R,EAAAA,oBACA9R,SAAAc,GAAAf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAqoF,QACAvoF,KAAAsZ,EAAAA,eAAAvZ,aAAAC,KAAmCe,EAAAA,aACnCf,SAAAc,GAAAf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAsoF,QACAxoF,KAAAa,EAAAA,wHA3HA6nD,EAAArnD,gBAJA+kF,aAAApmF,KAAAqH,EAAAA,QA8PAohF,qBAAAzoF,KAAAqH,EAAAA,QArQAqhF,YAAA1oF,KAAAqH,EAAAA,QAuQAshF,aAAA3oF,KAAAqH,EAAAA,QA3NAuhF,eAAA5oF,KAAAoO,EAAAA,UAAAlO,MAAA,aAAAmO,QAAA,MA7BAw6E,0BAAA7oF,KAAAoO,EAAAA,UAAAlO,MAAA,uBAAAmO,QAAA,MA0PAy6E,qBAAA9oF,KAAAoO,EAAAA,UAAAlO,MAAA,kBAAAmO,QAAA,6HAjHA06E,iBAAA/oF,KAAA46B,EAAAA,aAAA16B,MAAAooD,IAAAj6C,QAAA,MAcA26E,uBAAAhpF,KAAA46B,EAAAA,aAAA16B,MAAA+oF,IAAA56E,QAAA,MAsBA66E,oBAAAlpF,KAAA46B,EAAAA,aAAA16B,MAAA+oF,IAAA56E,QAAA,MAsBA86E,oBAAAnpF,KAAA46B,EAAAA,aAAA16B,MAAAkpF,IAAA/6E,QAAA,MAmBAg7E,iBAAArpF,KAAA+H,EAAAA,gBAAA7H,MAAAopF,MAEAC,gBAAAvpF,KAAA+H,EAAAA,gBAAA7H,MAAAspF,MACAC,kBAAAzpF,KAAA+H,EAAAA,gBAAA7H,MAAAwpF,MACAC,kBAAA3pF,KAAY+H,EAAAA,gBAAZ7H,MAAA0pF,OAGAlhC,GAWAmhC,IC3OA1+C,GAAA,WAAA,QAAAA,MAwBiC,sBAxBjCnrC,KAACuB,EAAAA,SAADrB,OACEmC,cACEinF,GACA5gC,GACA8gC,GACAP,GACAG,GACAM,GACAE,IAEFpoF,SACEC,EAAAA,aACAI,EAAAA,iBAEFE,SACEunF,GACA5gC,GACA8gC,GACAP,GACAG,GACAM,GACAE,QAGJz+C,KCHI2+C,GAA+B,gBAIjC,QAAFC,GAEW5/D,EAEAo0B,GAFA7+C,KAAXyqB,OAAWA,EAEAzqB,KAAX6+C,OAAWA,EACX,MAAAwrC,oBAKA,QAAAC,MAA2B,MAA3BA,MACMC,GACFn3E,EAAmBk3E,IASVE,GACT,GAAIxwE,GAAAA,eAA8C,oCAChDkG,WAAY,OACZ0J,QAAS6gE,IAQfC,GAAA,SAAAnnF,GAkGE,QAAFmnF,GACYr3E,EACAlT,EACkCu9B,GAH5C,GAAF/5B,GAIIJ,EAJJK,KAAA5D,OAAAA,WACY2D,GAAZ0P,mBAAYA,EACA1P,EAAZxD,YAAYA,EA7EVwD,EAAFgnF,WAAuB,EAIrBhnF,EAAFinF,SAAqB,EAmBVjnF,EAAX2pB,YAA0D,KAoBrC3pB,EAArBknF,eACM,GAAI75E,GAAAA,aAGWrN,EAArBu2B,OAAkD,GAAIlpB,GAAAA,aAGjCrN,EAArB6qB,OAAkD,GAAIxd,GAAAA,aAoBpDrN,EAAFyqD,cAGEzqD,EAAF4yB,GAAe,oBAAoB6zD,KAQ/BzmF,EAAKmnF,yBAA2BptD,EAASqtD,wBAzB7C,MA/DqCjnF,GAArC4mF,EAAAnnF,GAUEoI,OAAFC,eAAM8+E,EAAN3mF,UAAA,cAAE,WAAwB,MAAO/D,MAAK4qF,SAAW5qF,KAAK2qF,2CA0BpDh/E,OAAFC,eACM8+E,EADN3mF,UAAA,6BAAE,WACuC,MAAO/D,MAAK8qF,4BACnD,SAA0Bj/E,GACxB7L,KAAK8qF,uBAAyB/vE,EAAAA,sBAAsBlP,oCAwBtDF,OAAFC,eACM8+E,EADN3mF,UAAA,iBAAE,SACc8H,GACRA,GAASA,EAAMtH,OACjBvE,KAAKouD,WAAaviD,EAAMk1B,MAAM,KAAKnZ,OAAM,SAAE9iB,EAAW+pD,GAEpD,MADA/pD,GAAU+pD,EAAUzpD,SAAU,EACvBN,OAGT9E,KAAKouD,cAGPpuD,KAAKgrF,sBAAsBhrF,KAAKouD,YAChCpuD,KAAKG,YAAYuE,cAAcmqD,UAAY,oCAgB7C67B,EAAF3mF,UAAAkE,mBAAE,WACEjI,KAAKuU,YAAc,GAAI8uC,GAAAA,2BAAsCrjD,KAAK2+C,SAASvoC,WAE3EpW,KAAKirF,kBAOPP,EAAF3mF,UAAAmnF,cAAE,SAAc1oC,GACRxiD,KAAKuiD,QACPviD,KAAKuiD,MAAM79C,cAAc89C,UAAYA,IAKzCkoC,EAAF3mF,UAAAonF,cAAE,WACE,MAAOnrF,MAAKuiD,MAAQviD,KAAKuiD,MAAM79C,cAAc89C,UAAY,GAI3DkoC,EAAF3mF,UAAAknF,eAAE,WACEjrF,KAAK2qF,YAAc3qF,KAAK2+C,QAAQp6C,OAChCvE,KAAKgrF,sBAAsBhrF,KAAKouD,YAChCpuD,KAAKqT,mBAAmB/B,gBAI1Bo5E,EAAF3mF,UAAAqnF,iBAAE,SAAiBvsC,GACnB,GAAUjtC,GAAQ,GAAIy4E,IAA6BrqF,KAAM6+C,EACrD7+C,MAAK6qF,eAAeh5E,KAAKD,IAInB84E,EAAV3mF,UAAAinF,sBAAE,SAA8BlmF,GAC5BA,EAAU,4BAA8B9E,KAAK2qF,UAC7C7lF,EAAU,4BAA8B9E,KAAK2qF,0BAhJjDrqF,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,mBACEkC,SAAU,wJACVC,QAAF,uoBACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEpF,SAAF,kBACEC,QAAF,iBACEC,MACFC,MAAA,oBAEA0G,YACAC,QAAAshD,GAAArhD,YAAAkjF,2FA3EApqF,SAAEc,GAAFf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAgqF,SAqKAE,EAAA/oF,qIAnEAg9C,UAAAr+C,KAAA+H,EAAAA,gBAAA7H,MAAA2oD,IAAA7gD,aAAA,MAGAk8C,eAAAlkD,KAAA+H,EAAAA,gBAAA7H,MAAA4oD,MAGA97B,cAAAhtB,KAAAqH,EAAAA,QAGAojF,wBAAAzqF,KAAAqH,EAAAA,QAGA0jF,aAAA/qF,KAAAqH,EAAAA,QAMAkjF,iBAAAvqF,KAAA+R,EAAAA,SAWA6nB,SAAA55B,KAAA+R,EAAAA,SAGAmc,SAAAluB,KAAA+R,EAAAA,SAIAvN,YAAAxE,KAAAqH,EAAAA,MAAAnH,MAAA,YASAkqF,OC9IAY,GAAA,WAKE,QAAFA,GAEa9nF,GAAAxD,KAAbwD,WAAaA,EACb,sBARAlD,KAACC,EAAAA,UAADC,OACE6C,SAAU,0BACV5C,SAAU,gEARZH,KAAmBmH,EAAAA,cAcnB6jF,KjI2CaC,GACT,GAAIvxE,GAAAA,eAAqC,oCAQhCwxE,IACXjkF,QAASgkF,GACTnrE,MAAOoV,EAAAA,SACPlV,WAAYmrE,GAODC,IACXnkF,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAAk7E,MAC9BtuD,OAAO,GAcTsuD,GAAA,WAwGE,QAAFA,GAAsBtxD,EAAgDrI,EAChDrkB,EACAi+E,EACAv4E,EACkCk5B,EACtB57B,EACQ00D,EACUxhE,EAE9ByP,GATpB,GAAF3P,GAAA3D,IAAsBA,MAAtBq6B,SAAsBA,EAAgDr6B,KAAtEgyB,SAAsEA,EAChDhyB,KAAtB2N,kBAAsBA,EACA3N,KAAtB4rF,MAAsBA,EACA5rF,KAAtBqT,mBAAsBA,EAEYrT,KAAlC2Q,KAAkCA,EACQ3Q,KAA1CqlE,WAA0CA,EACUrlE,KAApD6D,UAAoDA,EAE9B7D,KAAtBsT,eAAsBA,EA1FZtT,KAAV6rF,qBAAgC,EACtB7rF,KAAV8rF,uBAAkC,EAUxB9rF,KAAV+rF,wBAAmC,EAMzB/rF,KAAVgsF,sBAAkCt8E,EAAAA,aAAaC,MAOrC3P,KAAVisF,qBAAgC,EAGbjsF,KAAnBksF,qBAA0C,GAAIn+E,GAAAA,QAMpC/N,KAAVmsF,mBAA4B,WAIxBxoF,EAAKsoF,oBACDtoF,EAAKE,UAAUimC,gBAAkBnmC,EAAK02B,SAAS31B,eAAiBf,EAAKi8C,WAI3E5/C,KAAF49B,UAAW,aAGT59B,KAAF89B,WAAY,aAYwB99B,KAApCgO,SAA2E,OAYlDhO,KAAzBosF,sBAAyD,MAyD/CpsF,KAAVqsF,kBAAsC,EAqE3BrsF,KAAXssF,iBAAoE5tC,EAAAA,MAAK,WACrE,MAAI/6C,GAAK4oF,cAAgB5oF,EAAK4oF,aAAa5tC,QACnCtyC,EAAAA,MAAZxD,UAAA,GAAqBlF,EAAK4oF,aAAa5tC,QAAQryC,IAAG,SAACuyC,GAAU,MAAAA,GAAOC,qBAKzDn7C,EAAKioF,MAAM7sC,SACb1vB,eACAplB,KAAKC,EAAAA,KAAK,GAAI00C,EAAAA,UAAS,WAAO,MAAAj7C,GAAK2oF,sBAhHlB,mBAAXt/C,SACT4+C,EAAM13E,kBAAiB,WACrB84B,OAAOK,iBAAiB,OAAQ1pC,EAAKwoF,sBAIzCnsF,KAAK8sC,gBAAkBP,EA2f3B,MAlhBE5gC,QAAFC,eACM+/E,EADN5nF,UAAA,4BAAE,WACsC,MAAO/D,MAAK8rF,2BAClD,SAAyBjgF,GACvB7L,KAAK8rF,sBAAwB/wE,EAAAA,sBAAsBlP,oCAuBrD8/E,EAAF5nF,UAAAoK,YAAE,SAAY9J,GACNA,EAAkB,UAAKrE,KAAKwsF,oBAC9BxsF,KAAKysF,sBAAsBzsF,KAAKwsF,mBAE5BxsF,KAAK4/C,WACP5/C,KAAgB,YAAEwtC,mBAKxBm+C,EAAF5nF,UAAAmE,YAAE,WACwB,mBAAX8kC,SACTA,OAAOsB,oBAAoB,OAAQtuC,KAAKmsF,oBAG1CnsF,KAAKgsF,sBAAsBz7E,cAC3BvQ,KAAK6rF,qBAAsB,EAC3B7rF,KAAK0sF,gBACL1sF,KAAKksF,qBAAqB79E,YAI5B1C,OAAFC,eAAM+/E,EAAN5nF,UAAA,iBAAE,WACE,MAAO/D,MAAKqsF,kBAAoBrsF,KAAKusF,aAAa5B,2CAKpDgB,EAAF5nF,UAAA4oF,UAAE,WACE3sF,KAAK4sF,iBACL5sF,KAAK6sF,eAIPlB,EAAF5nF,UAAA+oF,WAAE,WACE9sF,KAAK+sF,cAEA/sF,KAAKqsF,mBAINrsF,KAAK4/C,WAEP5/C,KAAKusF,aAAa/9D,OAAO3c,OAG3B7R,KAAKusF,aAAa3B,QAAU5qF,KAAKqsF,kBAAmB,EAEhDrsF,KAAK+tB,aAAe/tB,KAAK+tB,YAAY7d,gBACvClQ,KAAK+tB,YAAYzd,SACjBtQ,KAAKy3C,4BAA4BlnC,eAK9BvQ,KAAK6rF,qBAKR7rF,KAAKqT,mBAAmB6d,kBAQ5By6D,EAAF5nF,UAAAypC,eAAE,WACMxtC,KAAKqsF,kBACPrsF,KAAgB,YAAEwtC,kBAQtB7hC,OAAFC,eAAM+/E,EAAN5nF,UAAA,2BAAE,WAAA,GAAFJ,GAAA3D,IACI,OAAOqM,GAAAA,MACLrM,KAAKssF,iBACLtsF,KAAKusF,aAAah4E,YAAYkvC,OAAOx5C,KAAKrF,EAAAA,OAAM,WAAO,MAAAjB,GAAK0oF,oBAC5DrsF,KAAKksF,qBACLlsF,KAAKgtF,yBACLhtF,KAAK+tB,YACD/tB,KAAK+tB,YAAYuG,cAAcrqB,KAAKrF,EAAAA,OAAM,WAAO,MAAAjB,GAAK0oF,oBACtDt2E,EAAAA,MACJ9L,KAEAqC,EAAAA,IAAG,SAACsF,GAAS,MAAAA,aAAiBq7E,IAA2Br7E,EAAQ,yCAkBrEjG,OAAFC,eAAM+/E,EAAN5nF,UAAA,oBAAE,WACE,MAAI/D,MAAKusF,cAAgBvsF,KAAKusF,aAAah4E,YAClCvU,KAAKusF,aAAah4E,YAAYmtC,WAGhC,sCAIDiqC,EAAV5nF,UAAAipF,uBAAE,WAAA,GAAFrpF,GAAA3D,IACI,OAAOqM,GAAAA,MACL8H,EAAAA,UAAUnU,KAAK6D,UAAW,SAC1BsQ,EAAAA,UAAUnU,KAAK6D,UAAW,aAE3BoG,KAAKrF,EAAAA,OAAM,SAACgN,GACjB,GAAYs7E,GAAct7E,EAAY,OAC1Bu7E,EAAYxpF,EAAK0hE,WACnB1hE,EAAK0hE,WAAWllE,YAAYuE,cAAgB,IAEhD,OAAOf,GAAK0oF,kBACJa,IAAgBvpF,EAAK02B,SAAS31B,iBAC5ByoF,IAAcA,EAAUpoF,SAASmoF,OAChCvpF,EAAKoqB,cAAgBpqB,EAAKoqB,YAAYyG,eAAezvB,SAASmoF,OAK7EvB,EAAF5nF,UAAAqnB,WAAE,SAAWvf,GAAX,GAAFlI,GAAA3D,IACI0b,SAAQC,QAAQ,MAAMC,KAAI,WAAO,MAAAjY,GAAKypF,iBAAiBvhF,MAIzD8/E,EAAF5nF,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAK49B,UAAYtS,GAInBqgE,EAAF5nF,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAK89B,WAAaxS,GAIpBqgE,EAAF5nF,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKq6B,SAAS31B,cAAc0S,SAAWuU,GAGzCggE,EAAF5nF,UAAAmR,eAAE,SAAetD,GACjB,GAAUwD,GAAUxD,EAAMwD,OAUtB,IAJIA,IAAY45B,EAAAA,QACdp9B,EAAM2D,iBAGJvV,KAAKqtF,cAAgBj4E,IAAYM,EAAAA,OAAS1V,KAAK4/C,UACjD5/C,KAAKqtF,aAAanrC,wBAClBliD,KAAKstF,mBACL17E,EAAM2D,qBACD,IAAIvV,KAAKusF,aAAc,CAClC,GAAYgB,GAAiBvtF,KAAKusF,aAAah4E,YAAYmtC,WAC/CN,EAAahsC,IAAYiuB,EAAAA,UAAYjuB,IAAYmuB,EAAAA,UAEnDvjC,MAAK4/C,WAAaxqC,IAAYkgE,EAAAA,IAChCt1E,KAAKusF,aAAah4E,YAAYsB,UAAUjE,GAC/BwvC,GAAcphD,KAAKwtF,YAC5BxtF,KAAK2sF,aAGHvrC,GAAcphD,KAAKusF,aAAah4E,YAAYmtC,aAAe6rC,IAC7DvtF,KAAKytF,oBAKX9B,EAAF5nF,UAAA2pF,aAAE,SAAa97E,GACf,GAAQ6jC,GAAS7jC,EAAY,OACrB/F,EAAgC4pC,EAAO5pC,KAGvB,YAAhB4pC,EAAOn1C,OACTuL,EAAiB,IAATA,EAAc,KAAOo1B,WAAWp1B,IAQtC7L,KAAK2tF,iBAAmB9hF,IAC1B7L,KAAK2tF,eAAiB9hF,EACtB7L,KAAK49B,UAAU/xB,GAEX7L,KAAKwtF,YAAcxtF,KAAK6D,UAAUimC,gBAAkBl4B,EAAM6jC,QAC5Dz1C,KAAK2sF,cAKXhB,EAAF5nF,UAAA0sD,aAAE,WACOzwD,KAAKisF,oBAECjsF,KAAKwtF,aACdxtF,KAAK2tF,eAAiB3tF,KAAKq6B,SAAS31B,cAAcmH,MAClD7L,KAAK4sF,iBACL5sF,KAAK6sF,aAAY,IAJjB7sF,KAAKisF,qBAAsB,GAcvBN,EAAV5nF,UAAA8oF,YAAE,SAAoBe,OAAtB,KAAAA,IAAsBA,GAAtB,GACQ5tF,KAAKqlE,YAA6C,SAA/BrlE,KAAKqlE,WAAW4jB,aACjC2E,EACF5tF,KAAKqlE,WAAWwoB,uBAEhB7tF,KAAKqlE,WAAW4jB,WAAa,SAG/BjpF,KAAK+rF,wBAAyB,IAK1BJ,EAAV5nF,UAAAgpF,YAAE,WACM/sF,KAAK+rF,yBACP/rF,KAAKqlE,WAAW4jB,WAAa,OAC7BjpF,KAAK+rF,wBAAyB,IAa1BJ,EAAV5nF,UAAA0pF,gBAAE,WACF,GAAUnjF,GAAQtK,KAAKusF,aAAah4E,YAAYytC,iBAAmB,EACzDsC,EAAaC,EAA8Bj6C,EAC7CtK,KAAKusF,aAAa5tC,QAAS3+C,KAAKusF,aAAa/nC,cAE3CspC,EAAoBrpC,EACxBn6C,EAAQg6C,EAza4B,GA2apCtkD,KAAKusF,aAAapB,gBAxaiB,IA4arCnrF,MAAKusF,aAAarB,cAAc4C,IAO1BnC,EAAV5nF,UAAAgqF,2BAAE,WAAA,GAAFpqF,GAAA3D,KACUguF,EAAchuF,KAAK4rF,MAAM7sC,SAAS1vB,eAAeplB,KAAKC,EAAAA,KAAK,IAC3D+jF,EAAgBjuF,KAAKusF,aAAa5tC,QAAQt6C,QAAQ4F,KACtDywD,EAAAA,IAAG,WAAO,MAAA/2D,GAAK6oF,kBAAkB0B,wBAGjC3/C,EAAAA,MAAM,GAIR,OAAOliC,GAAAA,MAAM2hF,EAAaC,GACrBhkF,KAGG20C,EAAAA,UAAS,WACrB,GAAoBuvC,GAAUxqF,EAAKi8C,SAgBrB,OAfAj8C,GAAK2pF,mBACL3pF,EAAK4oF,aAAatB,iBAEdtnF,EAAKi8C,YACPj8C,EAAgB,YAAE6pC,iBAMd2gD,IAAYxqF,EAAKi8C,WACnBj8C,EAAK4oF,aAAaryD,OAAOroB,QAItBlO,EAAKyqF,sBAGdlkF,EAAAA,KAAK,IAER5F,UAAS,SAACsN,GAAS,MAAAjO,GAAK0qF,kBAAkBz8E,MAIzC+5E,EAAV5nF,UAAA2oF,cAAE,WACM1sF,KAAK+tB,cACP/tB,KAAK8sF,aACL9sF,KAAK+tB,YAAYmB,UACjBlvB,KAAK+tB,YAAc,OAIf49D,EAAV5nF,UAAAqpF,iBAAE,SAAyBvhF,GAC3B,GAAUyiF,GAAYtuF,KAAKusF,cAAgBvsF,KAAKusF,aAAaj/D,YACvDttB,KAAKusF,aAAaj/D,YAAYzhB,GAC9BA,EAII0iF,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CtuF,MAAKqlE,WACPrlE,KAAKqlE,WAAWmpB,SAAS3iF,MAAQ0iF,EAEjCvuF,KAAKq6B,SAAS31B,cAAcmH,MAAQ0iF,EAGtCvuF,KAAK2tF,eAAiBY,GAQhB5C,EAAV5nF,UAAAsqF,kBAAE,SAA0Bz8E,GACpBA,GAASA,EAAM6Y,SACjBzqB,KAAKyuF,6BAA6B78E,EAAM6Y,QACxCzqB,KAAKotF,iBAAiBx7E,EAAM6Y,OAAO5e,OACnC7L,KAAK49B,UAAUhsB,EAAM6Y,OAAO5e,OAC5B7L,KAAKq6B,SAAS31B,cAAcgO,QAC5B1S,KAAKusF,aAAanB,iBAAiBx5E,EAAM6Y,SAG3CzqB,KAAK8sF,cAMCnB,EAAV5nF,UAAA0qF,6BAAE,SAAqCnJ,GACnCtlF,KAAKusF,aAAa5tC,QAAQv0C,QAAO,SAACy0C,GAC5BA,GAAUymC,GAAQzmC,EAAOx9B,UAC3Bw9B,EAAOuB,cAKLurC,EAAV5nF,UAAA6oF,eAAE,WAAA,GAAFjpF,GAAA3D,IACI,KAAKA,KAAKusF,aACR,KAAMmC,IAGZ,IAAQv7D,GAAanzB,KAAK+tB,WAEjBoF,IAyBHnzB,KAAKwsF,kBAAkBmC,UAAU3uF,KAAK4uF,wBACtCz7D,EAAWqlD,YAAYnrE,MAAOrN,KAAK6uF,qBAzBnC7uF,KAAK2uC,QAAU,GAAIpgC,GAAAA,eAAevO,KAAKusF,aAAahnF,SAAUvF,KAAK2N,mBACnEwlB,EAAanzB,KAAKgyB,SAASuD,OAAOv1B,KAAKk6C,qBACvCl6C,KAAK+tB,YAAcoF,EAInBA,EAAWinB,gBAAgB91C,UAAS,SAACsN,IAG/BA,EAAMwD,UAAY45B,EAAAA,QAAWp9B,EAAMwD,UAAYiuB,EAAAA,UAAYzxB,EAAM2vC,UACnE59C,EAAK2pF,mBACL3pF,EAAKuoF,qBAAqBpgF,UAI1B9L,KAAKsT,iBACPtT,KAAKgsF,sBAAwBhsF,KAAKsT,eAAenC,SAAS7M,UAAS,WAC7DX,EAAKi8C,WAAazsB,GACpBA,EAAWqlD,YAAYnrE,MAAO1J,EAAKkrF,uBAUvC17D,IAAeA,EAAWjjB,gBAC5BijB,EAAWhjB,OAAOnQ,KAAK2uC,SACvB3uC,KAAKy3C,4BAA8Bz3C,KAAK+tF,6BAG9C,IAAUI,GAAUnuF,KAAK4/C,SAErB5/C,MAAKusF,aAAatB,iBAClBjrF,KAAKusF,aAAa3B,QAAU5qF,KAAKqsF,kBAAmB,EAIhDrsF,KAAK4/C,WAAauuC,IAAYnuF,KAAK4/C,WACrC5/C,KAAKusF,aAAaryD,OAAOroB,QAIrB85E,EAAV5nF,UAAAm2C,kBAAE,WACE,MAAO,IAAIrlB,GAAAA,eACTC,iBAAkB90B,KAAKiwC,sBACvB1D,eAAgBvsC,KAAK8sC,kBACrBz/B,MAAOrN,KAAK6uF,iBACZ12E,UAAWnY,KAAK2Q,QAIZg7E,EAAV5nF,UAAAksC,oBAAE,WACF,GAAUZ,GAAWrvC,KAAKgyB,SAAShkB,WAC5BshC,oBAAoBtvC,KAAK4uF,wBACzBp/C,wBAAuB,GACvBs/C,UAAS,EAIZ,OAFA9uF,MAAKysF,sBAAsBp9C,GAC3BrvC,KAAKwsF,kBAAoBn9C,EAClBA,GAIDs8C,EAAV5nF,UAAA0oF,sBAAE,SAA8B33D,GAChC,GAkBQ7nB,GAlBE8hF,GACJx+C,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,OAENm+C,GACJz+C,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,SAKVxf,WAAY,+BAMZpkB,GADoB,UAAlBjN,KAAKgO,UACMghF,GACc,UAAlBhvF,KAAKgO,UACD+gF,IAEAA,EAAeC,GAG9Bl6D,EAAiBob,cAAcjjC,IAGzB0+E,EAAV5nF,UAAA6qF,qBAAE,WACE,MAAI5uF,MAAKivF,YACAjvF,KAAKivF,YAAYzrF,WAGnBxD,KAAKqlE,WAAarlE,KAAKqlE,WAAWb,4BAA8BxkE,KAAKq6B,UAGtEsxD,EAAV5nF,UAAA8qF,eAAE,WACE,MAAO7uF,MAAKusF,aAAalB,YAAcrrF,KAAKkvF,iBAItCvD,EAAV5nF,UAAAmrF,cAAE,WACE,MAAOlvF,MAAK4uF,uBAAuBlqF,cAAcsmB,wBAAwB3d,OAOnEs+E,EAAV5nF,UAAAupF,iBAAE,WACEttF,KAAKusF,aAAah4E,YAAY0C,cAAcjX,KAAKusF,aAAaxB,sBAAwB,GAAK,IAIrFY,EAAV5nF,UAAAypF,SAAE,WACF,GAAUxgF,GAAUhN,KAAKq6B,SAAS31B,aAC9B,QAAQsI,EAAQy6D,WAAaz6D,EAAQoK,WAAapX,KAAK8rF,sCAlnB3DxrF,KAACC,EAAAA,UAADC,OACE6C,SAAU,oDACV1C,MACEwuF,sBAAuB,wBACvB9nF,cAAe,2CACf+nF,2BAA4B,uCAC5B7mC,+BAAgC,uDAChCphD,uBAAwB,qDACxBihD,mBAAoB,iEACpBinC,uBAAwB,wBAGxBC,YAAa,iBACbxjE,SAAU,eACVq8C,UAAW,uBACXn8C,YAAa,0BAEfvrB,SAAU,yBACV6G,WAAYokF,4CA/FdprF,KAAEmH,EAAAA,aAbFnH,KAAEk1B,EAAAA,UAsBFl1B,KAAEgG,EAAAA,mBAHFhG,KAAEY,EAAAA,SARFZ,KAAE8R,EAAAA,oBA2LF9R,SAAAc,GAAAf,aAAAC,KAAegB,EAAAA,OAAfd,MAAsB+qF,QA1MtBjrF,KAAQsZ,EAAAA,eAARvZ,aAAAC,KA2Mee,EAAAA,aArKff,KAAQ0oD,GAAR3oD,aAAAC,KAsKee,EAAAA,WAtKff,KAsK2BivF,EAAAA,SAC3BjvF,SAAAc,GAAAf,aAAAC,KAAee,EAAAA,WAAff,KAA2BgB,EAAAA,OAA3Bd,MAAkCyF,EAAAA,cA/KlC3F,KAAQqZ,EAAAA,mCAuIR4yE,eAAAjsF,KAAGqH,EAAAA,MAAHnH,MAAS,qBASTwN,WAAA1N,KAAGqH,EAAAA,MAAHnH,MAAS,6BAMTyuF,cAAA3uF,KAAGqH,EAAAA,MAAHnH,MAAS,gCAMT4rF,wBAAA9rF,KAAGqH,EAAAA,MAAHnH,MAAS,kBAMTgvF,uBAAAlvF,KAAGqH,EAAAA,MAAHnH,MAAS,8BAkhBTmrF,KkItsBA8D,GAAA,WAAA,QAAAA,MAYoC,sBAZpCnvF,KAACuB,EAAAA,SAADrB,OACEsB,SAAU0pC,GAAiB7Z,EAAAA,cAAe3vB,GAAiBD,EAAAA,cAC3DM,SACEqoF,GACAl/C,GACAmgD,GACAL,GACAtpF,IAEFW,cAAe+nF,GAAiBiB,GAAwBL,IACxDhkF,WAAYkkF,QAEdiE,KCJI51E,GAAS,gBAIb,QAAA61E,MAAoB,MAApBA,MAEMC,GACqCjpF,EAAcgpF,IAMzDE,GAAA,SAAArsF,GAgFE,QAAFqsF,GACcr8E,EACApT,EACAmsC,EACAujD,EAC2ClyD,GALvD,GAAFh6B,GAMMJ,EANNK,KAAA5D,OAAAA,IAQM,IAPQ2D,EAAd4P,QAAcA,EACA5P,EAAdxD,YAAcA,EACAwD,EAAd2oC,eAAcA,EACA3oC,EAAdksF,UAAcA,EAC2ClsF,EAAzDg6B,eAAyDA,EAlEvDh6B,EAAFmsF,aAAgB,EASNnsF,EAAVkkC,OAAiC,UAQvBlkC,EAAVosF,UAA8B,EAMDpsF,EAA7BqK,SAA0D,cAuBjCrK,EAAzBigC,KAA8C,SAW5CjgC,EAAF87C,IAAgB5lC,KAYN5V,EAAAA,YAAa,CACvB,GAAcS,GAAgBvE,EAAYuE,aAClC,IAAIA,EAAcM,WAAaN,EAAcg4D,aAC3C,KAAMnrC,OAAM,0DAuItB,MAjN8BztB,GAA9B8rF,EAAArsF,GAKEoI,OAAFC,eACMgkF,EADN7rF,UAAA,aAAE,WAC4B,MAAO/D,MAAK6nC,YACxC,SAAUh8B,GACR7L,KAAKqkE,UAAUx4D,GACf7L,KAAK6nC,OAASh8B,mCAKhBF,OAAFC,eACMgkF,EADN7rF,UAAA,eAAE,WACyB,MAAO/D,MAAK+vF,cACrC,SAAYC,GACVhwF,KAAK+vF,SAAWh1E,EAAAA,sBAAsBi1E,oCAcxCrkF,OAAFC,eACMgkF,EADN7rF,UAAA,mBAAE,WAC4B,MAAO/D,MAAKiwF,kBACxC,SAAgBC,GACd,GAAIA,IAAmBlwF,KAAKiwF,aAAc,CAC9C,GAAYE,GAAenwF,KAAKowF,aAC1BpwF,MAAKqwF,2BAA2BH,EAAgBlwF,KAAKiwF,cACrDjwF,KAAKiwF,aAAeC,EAEhBC,IACFD,EAAiBC,EAAaprD,aAAa,aAAcmrD,GACrDC,EAAa9zB,gBAAgB,iDAUvC1wD,OAAFC,eACMgkF,EADN7rF,UAAA,cAAE,WACwB,MAAO/D,MAAKswF,aACpC,SAAWN,GACThwF,KAAKswF,QAAUv1E,EAAAA,sBAAsBi1E,oCA0BvCJ,EAAF7rF,UAAAwsF,QAAE,WACE,OAA2C,IAApCvwF,KAAKgO,SAASia,QAAQ,UAI/B2nE,EAAF7rF,UAAAysF,QAAE,WACE,OAA4C,IAArCxwF,KAAKgO,SAASia,QAAQ,WAG/B2nE,EAAF7rF,UAAAoK,YAAE,SAAY9J,GACd,GAAUosF,GAAgBpsF,EAAiB,OAEvC,IAAIosF,EAAe,CACvB,GAAY5kF,GAAQ4kF,EAAc3tC,YAC5B9iD,MAAK8vF,YAAuB,MAATjkF,IAAiB,GAAGA,GAAQzG,OAAOb,OAAS,EAC/DvE,KAAK0wF,uBAITd,EAAF7rF,UAAAmE,YAAE,WACF,GAAUioF,GAAenwF,KAAKowF,aAEtBD,KACEnwF,KAAK2wF,aACP3wF,KAAKssC,eAAemB,kBAAkB0iD,EAAcnwF,KAAK2wF,aAKvD3wF,KAAK6vF,UAAUe,aACjB5wF,KAAK6vF,UAAUe,YAAYT,KASjCP,EAAF7rF,UAAA8sF,gBAAE,WACE,MAAO7wF,MAAKowF,eAINR,EAAV7rF,UAAA2sF,mBAAE,WAME,MALK1wF,MAAKowF,cAGRpwF,KAAKowF,cAAcjrF,YAAcnF,KAAK4zB,QAFtC5zB,KAAKowF,cAAgBpwF,KAAK8wF,sBAIrB9wF,KAAKowF,eAINR,EAAV7rF,UAAA+sF,oBAAE,WACF,GAAUX,GAAenwF,KAAK6vF,UAAUtrD,cAAc,OA+BlD,OA1BAvkC,MAAK+wF,qBAHgB,qBAIrBZ,EAAaprD,aAAa,KAAM,qBAAqB/kC,KAAKy/C,KAC1D0wC,EAAarrF,UAAUuW,IALF,qBAMrB80E,EAAahrF,YAAcnF,KAAK4zB,QAEJ,mBAAxB5zB,KAAK29B,gBACPwyD,EAAarrF,UAAUuW,IAAI,2BAGzBrb,KAAK2wF,aACPR,EAAaprD,aAAa,aAAc/kC,KAAK2wF,aAG/C3wF,KAAKG,YAAYuE,cAAcugC,YAAYkrD,GAGN,kBAA1B75E,wBAAgE,mBAAxBtW,KAAK29B,eACtD39B,KAAKuT,QAAQW,kBAAiB,WAC5BoC,sBAAqB,WACnB65E,EAAarrF,UAAUuW,IAvBT,wBA2BlB80E,EAAarrF,UAAUuW,IA3BL,oBA8Bb80E,GAIDP,EAAV7rF,UAAAssF,2BAAE,SAAmCH,EAAwBc,GAE7D,GAAUp9D,GAAU5zB,KAAK0wF,oBAEjBM,IACFhxF,KAAKssC,eAAemB,kBAAkB7Z,EAASo9D,GAG7Cd,GACFlwF,KAAKssC,eAAesB,SAASha,EAASs8D,IAKlCN,EAAV7rF,UAAAsgE,UAAE,SAAkB4sB,GACZA,IAAiBjxF,KAAK6nC,SACpB7nC,KAAK6nC,QACP7nC,KAAKG,YAAYuE,cAAcI,UAAUqW,OAAO,aAAanb,KAAK6nC,QAEhEopD,GACFjxF,KAAKG,YAAYuE,cAAcI,UAAUuW,IAAI,aAAa41E,KAMxDrB,EAAV7rF,UAAAgtF,qBAAE,SAA6Bz/D,GAK3B,IAJJ,GAAUtkB,GAAUhN,KAAKG,YAAYuE,cAC7Bi7D,EAAa3yD,EAAQ7C,SAAS5F,OAG3Bo7D,KAAc,CACzB,GAAYuxB,GAAelkF,EAAQ7C,SAASw1D,EAElCuxB,GAAapsF,UAAUC,SAASusB,IAClCtkB,EAAQ4yD,YAAYsxB,oBA9N5B5wF,KAACC,EAAAA,UAADC,OACE6C,SAAU,aACV3C,QAAS,8BACTC,MACEC,MAAS,YACTuwF,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,yBAC5BC,6BAA8B,oDAvClCtxF,KAAEY,EAAAA,SAHFZ,KAAEmH,EAAAA,aAJFnH,KAAQ0wC,EAAAA,gBAWR1wC,KAAEuxF,EAAAA,YA0GFvxF,KAAAkB,OAAAnB,aAAAC,KAAOe,EAAAA,WAAPf,KAAmBgB,EAAAA,OAAnBd,MAA0B4sB,EAAAA,8CA/D1B8Z,QAAA5mC,KAAGqH,EAAAA,MAAHnH,MAAS,mBASTsxF,UAAAxxF,KAAGqH,EAAAA,MAAHnH,MAAS,qBAWTwN,WAAA1N,KAAGqH,EAAAA,MAAHnH,MAAS,sBAGTozB,UAAAtzB,KAAGqH,EAAAA,MAAHnH,MAAS,cAGTmwF,cAAArwF,KAAGqH,EAAAA,MAAHnH,MAAS,yBAiBTojC,OAAAtjC,KAAGqH,EAAAA,MAAHnH,MAAS,kBAGTuxF,SAAAzxF,KAAGqH,EAAAA,MAAHnH,MAAS,qBA8JTovF,GAjN8BD,IC3C9BqC,GAAA,WAAA,QAAAA,MAQ6B,sBAR7B1xF,KAACuB,EAAAA,SAADrB,OACEsB,SACEM,EAAAA,WACAJ,IAEFK,SAAUutF,IACVjtF,cAAeitF,QAEjBoC,KCTaC,GAAwB,GAAIj4E,GAAAA,eAAoB,oCAK7D,QAAAk4E,KAWElyF,KAAF8H,KAAoB,KAGlB9H,KAAF+4C,aAA0B,EAMxB/4C,KAAF66B,cAA2B,EAGzB76B,KAAF4O,UAA8B,KAO5B5O,KAAF22E,mBAAgC,EAM9B32E,KAAF0pC,WAAwB,EAMtB1pC,KAAF83C,cAA2B,EAI3B,MAAAo6C,MC9CaC,IAIXC,iBAAkBpjF,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgBrC,EAAAA,OAAOsC,UAAW,sBACxCD,EAAAA,MAAM,UAAWrC,EAAAA,OAAOsC,UAAW,oBACnCE,EAAAA,WAAW,qCACPC,EAAAA,QAAW+nB,GAAmBi7D,QADtC,IACiD/6D,GAAgBg7D,qBAC7DljF,EAAAA,WAAW,kBACPC,EAAAA,QAAW+nB,GAAmBm7D,QADtC,IACiDj7D,GAAgBk7D,wBCcjEC,GAAA,SAAAlvF,GA2CE,QAAFkvF,GACYtyF,EACAkT,EACAw1B,EACR6pD,EAC8BhvF,EAEvBivF,GAPT,GAAFhvF,GAQIJ,EARJK,KAAA5D,OAAAA,WACY2D,GAAZxD,YAAYA,EACAwD,EAAZ0P,mBAAYA,EACA1P,EAAZklC,kBAAYA,EAIDllC,EAAXgvF,kBAAWA,EAxBThvF,EAAF2sB,gBAAmD,OAGjD3sB,EAAFwzE,uBAA2B,GAAInmE,GAAAA,aAMrBrN,EAAVivF,4BAA4D,KAkBxDjvF,EAAKE,UAAYH,EACjBC,EAAKkvF,wBAA0BH,EAC5Bv+D,SAASC,EAAAA,YAAY0+D,OAAQ1+D,EAAAA,YAAY2+D,MAAO3+D,EAAAA,YAAY4+D,SAC5D1uF,UAAS,WACRX,EAAKsvF,aAAa,oCACdP,EAAmBQ,UAAU9+D,EAAAA,YAAY0+D,SAC7CnvF,EAAKsvF,aAAa,mCACdP,EAAmBQ,UAAU9+D,EAAAA,YAAY2+D,QAC7CpvF,EAAKsvF,aAAa,oCACdP,EAAmBQ,UAAU9+D,EAAAA,YAAY4+D,aAvCrD,MAJ6ClvF,GAA7C2uF,EAAAlvF,GAgDEkvF,EAAF1uF,UAAAysB,sBAAE,SAAyBC,GAIvB,MAHAzwB,MAAKmzF,0BACLnzF,KAAKozF,iBACLpzF,KAAKs3E,gCACEt3E,KAAK4wB,cAAcJ,sBAAsBC,IAIlDgiE,EAAF1uF,UAAA8sB,qBAAE,SAAwBJ,GAItB,MAHAzwB,MAAKmzF,0BACLnzF,KAAKozF,iBACLpzF,KAAKs3E,gCACEt3E,KAAK4wB,cAAcC,qBAAqBJ,IAIjDgiE,EAAF1uF,UAAAktB,MAAE,WACOjxB,KAAK0T,aACR1T,KAAKswB,gBAAkB,UACvBtwB,KAAKqT,mBAAmB6d,kBAK5BuhE,EAAF1uF,UAAA0qB,KAAE,WACOzuB,KAAK0T,aACR1T,KAAKswB,gBAAkB,SACvBtwB,KAAKqT,mBAAmB/B,iBAI5BmhF,EAAF1uF,UAAAmE,YAAE,WACElI,KAAK6yF,wBAAwBtiF,cAC7BvQ,KAAK0T,YAAa,GAGpB++E,EAAF1uF,UAAAsrD,iBAAE,SAAiBz9C,GACO,WAAlBA,EAAMD,QACR3R,KAAKspC,gBACsB,YAAlB13B,EAAMD,SACf3R,KAAKqpC,aAGPrpC,KAAKm3E,uBAAuBtlE,KAAKD,IAGnC6gF,EAAF1uF,UAAAurD,kBAAE,SAAkB19C,GAChB5R,KAAKm3E,uBAAuBtlE,KAAKD,IAG3B6gF,EAAV1uF,UAAAkvF,aAAE,SAAqB3hE,EAAkBjW,GACzC,GAAUvW,GAAY9E,KAAKG,YAAYuE,cAAcI,SACjDuW,GAAMvW,EAAUuW,IAAIiW,GAAYxsB,EAAUqW,OAAOmW,IAG3CmhE,EAAV1uF,UAAAovF,wBAAE,WACE,GAAInzF,KAAK4wB,cAAc1gB,cACrB,KAAMqhB,OAAM,gFAIRkhE,EAAV1uF,UAAAqvF,eAAE,WACF,GAAUpmF,GAAuBhN,KAAKG,YAAYuE,cACxC2sB,EAAarxB,KAAK2yF,kBAAkBthE,UAEtC7sB,OAAMuF,QAAQsnB,GAEhBA,EAAWjnB,QAAO,SAACknB,GAAY,MAAAtkB,GAAQlI,UAAUuW,IAAIiW,KAC5CD,GACTrkB,EAAQlI,UAAUuW,IAAIgW,IAMlBohE,EAAV1uF,UAAAslC,WAAE,WACOrpC,KAAKopC,aACRppC,KAAKopC,WAAappC,KAAK6oC,kBAAkBtT,OAAOv1B,KAAKG,YAAYuE,gBAG/D1E,KAAK2yF,kBAAkBjpD,WACzB1pC,KAAKopC,WAAWO,gCAKZ8oD,EAAV1uF,UAAAulC,cAAE,WACF,GAAUiuC,GAAUv3E,KAAK4yF,2BAGjB5yF,MAAK2yF,kBAAkB76C,cAAgBy/B,GAAoC,kBAAlBA,GAAQ7kE,OACnE6kE,EAAQ7kE,QAGN1S,KAAKopC,YACPppC,KAAKopC,WAAWe,WAKZsoD,EAAV1uF,UAAAuzE,8BAAE,WAAA,GAAF3zE,GAAA3D,IACIA,MAAK4yF,4BAA8B5yF,KAAK6D,UAAuB,cAG3D7D,KAAKG,YAAYuE,cAAcgO,OACjCgJ,QAAQC,UAAUC,KAAI,WAAO,MAAAjY,GAAKxD,YAAYuE,cAAcgO,0BA5KlEpS,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,6BACEkC,SAAU,8CACVC,QAAF,+mBACEG,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEmM,YAAFggF,GAAAC,kBACEzxF,MACFC,MAAe,6BACT+oD,SAAN,KACI1iD,KAAJ,SACIwwE,aAAJ,OACIzvB,oBAAJ,+BACIx2B,WAAY,kBACZ6hE,iBAAJ,4BACI5hE,gBAAJ,mHA1CAnxB,KAAEgzF,EAAAA,mBAGFhzF,KAAEq1B,EAAAA,qBAiBFr1B,SAAmBc,GAAnBf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAyF,EAAAA,cALA3F,KAAQ4xF,MACRO,EAAA9wF,yFAmCA8wF,uBCjDAc,GAAA,WAAA,QAAAA,MAWmC,sBAXnCjzF,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACA4vB,EAAAA,cACA3vB,GACAC,EAAAA,cAEFI,SAAUowF,GAAyBzwF,IACnCW,cAAe8vF,IACf7gE,iBAAkB6gE,QAEpBc,mBCcE,QAAFC,GACI1lE,EACQC,EAERkwC,GAJF,GAAFt6D,GAAA3D,IAEYA,MAAZ+tB,YAAYA,EAVO/tB,KAAnBguB,gBAAqC,GAAIjgB,GAAAA,QAGtB/N,KAAnBiuB,aAAkC,GAAIlgB,GAAAA,QAUlC/N,KAAK8tB,kBAAoBA,EACzB9tB,KAAK66B,aAAe/M,EAAkB6kE,kBAAkB93D,aAGxD/M,EAAkBqpD,uBAAuBltE,KACvCrF,EAAAA,OAAM,SAACgN,GAAS,MAAoB,SAApBA,EAAMqmE,WAA0C,YAAlBrmE,EAAMD,UACpDzH,EAAAA,KAAK,IAEN5F,UAAS,WACRX,EAAKsqB,aAAaniB,OAClBnI,EAAKsqB,aAAa5f,aAIpByf,EAAkBqpD,uBACbltE,KAAKrF,EAAAA,OAAM,SAACgN,GAAS,MAAoB,SAApBA,EAAMqmE,WAA0C,WAAlBrmE,EAAMD,UAAuBzH,EAAAA,KAAK,IACrF5F,UAAS,WACRypB,EAAYmB,YAGlBnB,EAAYuG,cAAcrqB,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,WAC/CX,EAAKqqB,gBAAgBliB,KAAKnI,EAAKu0E,SAC/Bv0E,EAAKqqB,gBAAgB3f,aAGvBhC,EAAAA,MACE0hB,EAAY4M,gBACZ5M,EAAYqsB,gBAAgBnwC,KAAKrF,EAAAA,OAAM,SAACgN,GAAS,MAAAA,GAAMwD,UAAY45B,EAAAA,WACnE1qC,UAAS,SAACsN,GACLjO,EAAKk3B,cACQ,YAAfjpB,EAAMtR,MAAuB6U,EAAAA,eAAc,KAC5CvD,EAAM2D,iBACN5R,EAAK0qB,aA6Cb,MApCEmlE,GAAFzvF,UAAAsqB,QAAE,SAAQu2B,GAAR,GAAFjhD,GAAA3D,IACSA,MAAKguB,gBAAgBQ,SAExBxuB,KAAK8tB,kBAAkBqpD,uBAAuBltE,KAC5CrF,EAAAA,OAAM,SAACgN,GAAS,MAAoB,UAApBA,EAAMqmE,YACtB/tE,EAAAA,KAAK,IACL5F,UAAS,WAAO,MAAAX,GAAKoqB,YAAYqqD,mBAEnCp4E,KAAKk4E,QAAUtzB,EACf5kD,KAAK8tB,kBAAkBW,SAK3B+kE,EAAFzvF,UAAAqrB,eAAE,WACE,MAAOpvB,MAAKguB,gBAAgBqB,gBAI9BmkE,EAAFzvF,UAAAurB,YAAE,WACE,MAAOtvB,MAAKiuB,aAAaoB,gBAM3BmkE,EAAFzvF,UAAA42B,cAAE,WACE,MAAO36B,MAAK+tB,YAAY4M,iBAM1B64D,EAAFzvF,UAAAq2C,cAAE,WACE,MAAOp6C,MAAK+tB,YAAYqsB,iBAE5Bo5C,KC5FaC,GACT,GAAIz5E,GAAAA,eAAqC,oCAK7C05E,GAAA,WAkBE,QAAFA,GACc1hE,EACAE,EACwByhE,EACZ11B,EAERzxB,GALJxsC,KAAdgyB,SAAcA,EACAhyB,KAAdkyB,UAAcA,EACwBlyB,KAAtC2zF,mBAAsCA,EACZ3zF,KAA1Bi+D,UAA0BA,EAERj+D,KAAlBwsC,gBAAkBA,EAtBRxsC,KAAV4zF,2BAAsE,KAvCtE,MA0CEjoF,QAAFC,eAAM8nF,EAAN3vF,UAAA,6BAAE,WACF,GAAUwuB,GAASvyB,KAAK2zF,kBACpB,OAAOphE,GAASA,EAAOshE,sBAAwB7zF,KAAK4zF,gCAGtD,SAA0B/nF,GACpB7L,KAAK2zF,mBACP3zF,KAAK2zF,mBAAmBE,sBAAwBhoF,EAEhD7L,KAAK4zF,2BAA6B/nF,mCAiBtC6nF,EAAF3vF,UAAA+uB,KAAE,SAA0B6mD,EACThnD,GADjB,GAAFhvB,GAAA3D,KAGUgzB,EACF4mD,EAAqB55E,KAAKwsC,iBAAmB,GAAI0lD,IAAwBv/D,GACvEQ,EAAanzB,KAAK8zB,eAAed,GACjCe,EAAY/zB,KAAK8zF,iBAAiB3gE,EAAYH,GAC9C+gE,EAAM,GAAIP,IAAwBz/D,EAAWZ,EAAYnzB,KAAKi+D,UAEpE,IAAI0b,YAAkCpsE,GAAAA,YACpCwmB,EAAUlD,qBAAqB,GAAItiB,GAAAA,eAAkBorE,EAAsB,MACzE3lD,UAAWhB,EAAQlrB,KACnBksF,eAAgBD,SAEb,CACX,GAAYtjE,GAAS,GAAIgD,GAAAA,gBAAgBkmD,MAAwBv4E,GACrDpB,KAAKi0B,gBAAgBjB,EAAS+gE,IAC9B7/D,EAAaH,EAAUvD,sBAAsBC,EACnDsjE,GAAIpgE,SAAWO,EAAWP,SAuB5B,MAnBAogE,GAAI3kE,iBAAiB9qB,UAAS,WAExBX,EAAKkwF,uBAAyBE,IAChCpwF,EAAKkwF,sBAAwB,QAI7B7zF,KAAK6zF,uBAGP7zF,KAAK6zF,sBAAsBzkE,iBAAiB9qB,UAAS,WAAO,MAAAyvF,GAAIjmE,kBAAkBmD,UAClFjxB,KAAK6zF,sBAAsBxlE,WAG3B0lE,EAAIjmE,kBAAkBmD,QAGxBjxB,KAAK6zF,sBAAwBE,EAEtBA,GAMTL,EAAF3vF,UAAAsqB,QAAE,WACMruB,KAAK6zF,uBACP7zF,KAAK6zF,sBAAsBxlE,WAI/BqlE,EAAF3vF,UAAAmE,YAAE,WACMlI,KAAK4zF,4BACP5zF,KAAK4zF,2BAA2BvlE,WAO5BqlE,EAAV3vF,UAAA+vF,iBAAE,SAAyB3gE,EACAR,GAE3B,GAAUS,GAAeT,GAAUA,EAAOpjB,kBAAoBojB,EAAOpjB,iBAAiB8jB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBpzB,KAAKkyB,UAAW,GAAIqB,WACrE2+D,GAAsBv/D,MAGnBa,EACF,GAAIC,GAAAA,gBAAgBg/D,GAAyB9/D,EAAOpjB,iBAAkB8jB,EAE1E,OAD4DF,GAAWhjB,OAAOqjB,GAC1DG,UAOd+/D,EAAV3vF,UAAA+vB,eAAE,SAAuBnB,GACzB,GAAUiC,GAAgB,GAAIC,GAAAA,eACxB1c,UAAWwa,EAAOxa,UAClB4gC,YAAapmB,EAAOomB,YACpByhC,oBAAqB7nD,EAAOgkD,kBAC5BH,SAAU,OACVjqC,eAAgB5Z,EAAO4Z,gBAAkBvsC,KAAKgyB,SAASiiE,iBAAiBC,QACxEp/D,iBAAkB90B,KAAKgyB,SAAShkB,WAAW+mB,SAASK,qBAAqBE,OAAO,MAOlF,OAJI3C,GAAO2nB,gBACT1lB,EAAc0lB,cAAgB3nB,EAAO2nB,eAGhCt6C,KAAKgyB,SAASuD,OAAOX,IAQtB8+D,EAAV3vF,UAAAkwB,gBAAE,SAA2BtB,EACAqhE,GAE7B,GAAU5gE,GAAeT,GAAUA,EAAOpjB,kBAAoBojB,EAAOpjB,iBAAiB8jB,SAC5EonD,EAAkB,GAAIlnD,WACzBigE,GAAmBQ,IACnB/B,GAAuBt/D,EAAO7qB,OAWjC,QARI6qB,EAAOxa,WACLib,GAAiBA,EAAa5U,IAA2B5E,EAAAA,eAAgB,OAC7E6gE,EAAgB9jD,IAAI/c,EAAAA,gBAClB/N,MAAO8mB,EAAOxa,UACdhH,OAAQ4E,EAAAA,OAIL,GAAIud,GAAAA,eAAeF,GAAgBpzB,KAAKkyB,UAAWuoD,mBAtJ9Dn6E,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAYqzE,2CA5BzBjzF,KAAQk1B,EAAAA,UAKRl1B,KAAEo1B,EAAAA,WA4CFp1B,KAA0DozF,EAA1DrzF,aAAAC,KAAOe,EAAAA,WAAPf,KAAmB+f,EAAAA,aApCnB/f,KAAQ06E,EAAAA,SAAR36E,aAAAC,KAqCOe,EAAAA,aAnCPf,KAA+B4xF,GAA/B7xF,aAAAC,KAoCOe,EAAAA,WApCPf,KAoCmBgB,EAAAA,OApCnBd,MAoC0BizF,mNA5D1BC,KhBmCMS,GAA6B,SAM7BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,yBAMA,QAAFC,GAAqBl0F,GAAAH,KAArBG,YAAqBA,EACrB,MAAAk0F,MAEMC,GACqBnxF,EAAWuD,EAAc0M,EAAmBihF,MAKvErO,GAAA,SAAAziF,GA4BE,QAAFyiF,GAAcxiF,EACQvD,EAC0C09B,GAF9D,GAAFh6B,GAGIJ,EAHJK,KAAA5D,KAGUwD,IAHVxD,IACsB2D,GAAtB1D,cAAsBA,EAC0C0D,EAAhEg6B,eAAgEA,EAVrDh6B,EAAX4wF,cAAoC5wF,EAAK6wF,mBAAmB,UAAW,gBAG5D7wF,EAAX8wF,aAAmC9wF,EAAK6wF,mBAAmB,kBAYvD,KAAmB,GAAvB/pC,GAAA,EAAuBiqC,EAAvBN,GAAuB3pC,EAAvBiqC,EAAAnwF,OAAuBkmD,IAAwB,CAAtC,GAAMkT,GAAf+2B,EAAAjqC,EACU9mD,GAAK6wF,mBAAmB72B,IACzBn6D,EAAwB,cAAiBsB,UAAUuW,IAAIsiD,SAI5Dh6D,GAAK1D,cAAcse,QAAQ5a,EAAKxD,aAAa,GAEzCwD,EAAK4wF,gBACP5wF,EAAKujC,MAAQitD,MAlBnB,MAV+BrwF,GAA/BkiF,EAAAziF,GAgCEyiF,EAAFjiF,UAAAmE,YAAE,WACElI,KAAKC,cAAcC,eAAeF,KAAKG,cAIzC6lF,EAAFjiF,UAAA2O,MAAE,WACE1S,KAAK+gB,kBAAkBrO,SAGzBszE,EAAFjiF,UAAAgd,gBAAE,WACE,MAAO/gB,MAAKG,YAAYuE,eAG1BshF,EAAFjiF,UAAA+jC,kBAAE,WACE,MAAO9nC,MAAKshB,eAAiBthB,KAAKoX,UAIpC4uE,EAAFjiF,UAAAywF,mBAAE,WAAF,IAAqB,GAArB7wF,GAAA3D,KAAAygE,KAAAhW,EAAA,EAAqBA,EAArB3hD,UAAAvE,OAAqBkmD,IAAAgW,EAArBhW,GAAA3hD,UAAA2hD,EACI,OAAOgW,GAAWv7D,KAAI,SAACyvF,GAAa,MAAAhxF,GAAKod,kBAAkB+5D,aAAa6Z;eAnE5Er0F,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,iMACE5C,SAAU,YACVE,MAGFitD,kBAAA,mBACMzgC,kCAAN,uCAEA5nB,SAAA,mVACAC,QAAA,6qMACE9E,QAAF,WAAA,gBAAA,SACEoF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,yFA/DAvF,KAAEkB,OAAFnB,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,4BAiFA44D,EAAArkF,mEAJAqkF,sBAgDA,QAAAC,GAAAC,EAAA1iF,EAAAkiC,GAqBA,MAAAniC,GAAAK,KAAA5D,KAAAwD,EAAA0iF,EAAAxgD,IAAA1lC,+DAWAA,KAAAoX,WACAxF,EAAA2D,iBACQ3D,EAARu0E,6BAGAF,EAAA5lF,aACAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,gLAtCA1C,MAKMi/B,kBAAN,4JAIIzS,kCAAJ,uCAEAzsB,QAAA,WAAA,gBAAA,SACA6E,SAAA,mVACAC,QAAA,6qMACAM,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,WAIAogF,EAAA3iE,eAAA,WAAA,QACAhjB,KAAAoB,EAAAA,gIArJAukF,EAAAtkF,gBAIAqF,WAAA1G,KAAAqH,EAAAA,gBCEAkc,GAAA,WAAA,QAAAA,MAgB8B,sBAhB9BvjB,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACAG,GACAF,IAEFK,SACE2jF,GACAC,GACAjkF,IAEFW,cACEqjF,GACAC,QAGJpiE,KC6BauiE,GACT,GAAIpsE,GAAAA,eAA8C,qCASzCqsE,IACX9+E,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAA61E,MAC9BjpD,OAAO,iBAOT,QAAAkpD,MAA2C,MAA3CA,MAEIC,GAAmB,gBAIrB,QAAFC,GAEWh8D,EAGA5e,GAHA7L,KAAXyqB,OAAWA,EAGAzqB,KAAX6L,MAAWA,EACX,MAAA46E,MAGAH,GAAA,WAqHE,QAAFA,GACYrgD,EAEJspB,GAFIvvD,KAAZimC,gBAAYA,EAtGFjmC,KAAV0gC,WAAsB,EACZ1gC,KAAV09C,WAAsB,EACZ19C,KAAVsmC,WAAsB,EAepBtmC,KAAFurB,8BAA+B,aAG7BvrB,KAAF89B,WAAY,aAqBF99B,KAAVkmC,MAAkB,2BAA2BsgD,KA8BxBxmF,KAArBwtB,YAAmC,GAAIxc,GAAAA,aA2BlBhR,KAArBmR,OACM,GAAIH,GAAAA,aAOJhR,KAAK0mF,WACDn3B,GAAkBA,EAAem3B,WAAan3B,EAAem3B,WAAa,WAiJpF,MA/NE/6E,QAAFC,eACM06E,EADNviF,UAAA,YAAE,WACqB,MAAO/D,MAAKkmC,WACjC,SAASr6B,GAAT,GAAFlI,GAAA3D,IACIA,MAAKkmC,MAAQr6B,EAET7L,KAAK2mF,gBACP3mF,KAAK2mF,eAAev8E,QAAO,SAACu0B,GAC1BA,EAAO/c,KAAOje,EAAKuiC,MACnBvH,EAAOoI,mDAObp7B,OAAFC,eACM06E,EADNviF,UAAA,gBAAE,WAC0B,MAAO/D,MAAK0gC,eACtC,SAAa70B,GACX7L,KAAK0gC,UAAY3lB,EAAAA,sBAAsBlP,oCAIzCF,OAAFC,eACM06E,EADNviF,UAAA,aAAE,WAEF,GAAUsd,GAAWrhB,KAAKq/C,gBAAkBr/C,KAAKq/C,gBAAgBh+B,WAE7D,OAAIrhB,MAAK2/C,SACAt+B,EAAS/U,IAAG,SAACqyB,GAAU,MAAAA,GAAO9yB,QAGhCwV,EAAS,GAAKA,EAAS,GAAGxV,UAAQzK,QAE3C,SAAUqlC,GACRzmC,KAAK4gD,qBAAqBna,GAC1BzmC,KAAKwtB,YAAY3b,KAAK7R,KAAK6L,wCAW7BF,OAAFC,eAAM06E,EAANviF,UAAA,gBAAE,WACF,GAAUsd,GAAWrhB,KAAKq/C,gBAAgBh+B,QACtC,OAAOrhB,MAAK2/C,SAAWt+B,EAAYA,EAAS,IAAM,sCAIpD1V,OAAFC,eACM06E,EADNviF,UAAA,gBAAE,WAC0B,MAAO/D,MAAK09C,eACtC,SAAa7xC,GACX7L,KAAK09C,UAAY3iC,EAAAA,sBAAsBlP,oCAIzCF,OAAFC,eACM06E,EADNviF,UAAA,gBAAE,WAC0B,MAAO/D,MAAKsmC,eACtC,SAAaz6B,GACX7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,GAEnC7L,KAAK2mF,gBACP3mF,KAAK2mF,eAAev8E,QAAO,SAACu0B,GAAU,MAAAA,GAAOoI,mDAiBjDu/C,EAAFviF,UAAAuK,SAAE,WACEtO,KAAKq/C,gBAAkB,GAAIK,GAAAA,eAAgC1/C,KAAK2/C,aAAUv+C,IAAW,IAGvFklF,EAAFviF,UAAAkE,mBAAE,kBACEmR,EAAApZ,KAAKq/C,iBAAgBa,OAAzBr3C,MAAAuQ,EAAmCpZ,KAAK2mF,eAAe/hF,OAAM,SAAC+5B,GAAU,MAAAA,GAAOpB,YAO7E+oD,EAAFviF,UAAAqnB,WAAE,SAAWvf,GACT7L,KAAK6L,MAAQA,EACb7L,KAAKimC,gBAAgB30B,gBAIvBg1E,EAAFviF,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAKurB,8BAAgCD,GAIvCg7D,EAAFviF,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAK89B,WAAaxS,GAIpBg7D,EAAFviF,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,GAIlB26D,EAAFviF,UAAA06B,iBAAE,WACF,GAAUpd,GAAWrhB,KAAKqhB,SAChBoJ,EAASjmB,MAAMuF,QAAQsX,GAAYA,EAASA,EAAS9c,OAAS,GAAK8c,EACnEzP,EAAQ,GAAI60E,IAAqB,EAAUzmF,KAAK6L,MACtD7L,MAAKurB,8BAA8B3Z,EAAM/F,OACzC7L,KAAKmR,OAAOU,KAAKD,IAUnB00E,EAAFviF,UAAA6iF,kBAAE,SAAkBjoD,EACAuhB,EACA2D,EACAgjC,OADpB,KAAAhjC,IAAoBA,GAApB,OACA,KAAAgjC,IAAoBA,GAApB,GAGS7mF,KAAK2/C,WAAY3/C,KAAKqhB,UAAasd,EAAOpB,UAC5Cv9B,KAAa,SAAqBu9B,SAAU,GAG3C2iB,EACFlgD,KAAKq/C,gBAAgBa,OAAOvhB,GAE5B3+B,KAAKq/C,gBAAgBe,SAASzhB,GAM5BkoD,GAGF7mF,KAAK8mF,kBAAkBjjC,IAK3ByiC,EAAFviF,UAAAgjF,YAAE,SAAYpoD,GACV,MAAO3+B,MAAKq/C,gBAAgB2E,WAAWrlB,IAIzC2nD,EAAFviF,UAAAijF,cAAE,SAAcroD,GACZ,WAA8B,KAAnB3+B,KAAKinF,YAIZjnF,KAAK2/C,UAAYn7C,MAAMuF,QAAQ/J,KAAKinF,WAC/BjnF,KAAKinF,UAAU/hF,KAAI,SAAC2G,GAAS,MAAgB,OAAhB8yB,EAAO9yB,OAAiBA,IAAU8yB,EAAO9yB,QAGxE8yB,EAAO9yB,QAAU7L,KAAKinF,YAIvBX,EAAVviF,UAAA68C,qBAAE,SAA6B/0C,GAA7B,GAAFlI,GAAA3D,IAGI,IAFAA,KAAKinF,UAAYp7E,EAEZ7L,KAAK2mF,eAIV,GAAI3mF,KAAK2/C,UAAY9zC,EAAO,CAC1B,IAAKrH,MAAMuF,QAAQ8B,GACjB,KAAM0lB,OAAM,qDAGdvxB,MAAKolF,kBACLv5E,EAAMzB,QAAO,SAAE04C,GAAsB,MAAAn/C,GAAKo/C,aAAaD,SAEvD9iD,MAAKolF,kBACLplF,KAAK+iD,aAAal3C,IAKdy6E,EAAVviF,UAAAqhF,gBAAE,WACEplF,KAAKq/C,gBAAgB3qB,QACrB10B,KAAK2mF,eAAev8E,QAAO,SAACu0B,GAAU,MAAAA,GAAOpB,SAAU,KAIjD+oD,EAAVviF,UAAAg/C,aAAE,SAAqBl3C,GACvB,GAAUo3C,GAAsBjjD,KAAK2mF,eAAehpE,KAAI,SAACghB,GACnD,MAAuB,OAAhBA,EAAO9yB,OAAiB8yB,EAAO9yB,QAAUA,GAG9Co3C,KACFA,EAAoB1lB,SAAU,EAC9Bv9B,KAAKq/C,gBAAgBa,OAAO+C,KAKxBqjC,EAAVviF,UAAA+iF,kBAAE,SAA0BjjC,GAEpBA,GACF7jD,KAAKy+B,mBAKPz+B,KAAKwtB,YAAY3b,KAAK7R,KAAK6L,uBA1Q/BvL,KAACC,EAAAA,UAADC,OACE6C,SAAU,0BACViE,WACE++E,IACC9+E,QAASg/E,GAA8B/+E,YAAa8+E,IAEvD3lF,MACEsG,KAAQ,QACRrG,MAAS,0BACTE,uBAAwB,WACxBomF,qCAAsC,WACtCC,sDAAuD,6BAEzD1mF,SAAU,+DA5FZH,KAAE8R,EAAAA,oBAsMF9R,SAAAc,GAAAf,aAAAC,KAAKe,EAAAA,WAALf,KAAiBgB,EAAAA,OAAjBd,MAAwB4lF,2BAhFxBO,iBAAArmF,KAAG+H,EAAAA,gBAAH7H,MAAmBiQ,EAAAA,WAAU,WAAO,MAAA22E,SAGpCV,aAAApmF,KAAGqH,EAAAA,QAGHia,OAAAthB,KAAGqH,EAAAA,QAeHoiB,WAAAzpB,KAAGqH,EAAAA,QAOHkE,QAAAvL,KAAGqH,EAAAA,QAoBH6lB,cAAAltB,KAAG+R,EAAAA,SASHstC,WAAAr/C,KAAGqH,EAAAA,QAOHyP,WAAA9W,KAAGqH,EAAAA,QAWHwJ,SAAA7Q,KAAG+R,EAAAA,UA0JHi0E,mBAIA,QAAAe,MAA2B,MAA3BA,MACMC,GACFl0E,EAAmBi0E,IAGvBD,GAAA,SAAA7jF,GAwGE,QAAF6jF,GAA0BG,EACJl0E,EACAlT,EACAF,EAEewoE,EAEnBlZ,GAPhB,GAAF5rD,GAQIJ,EARJK,KAAA5D,OAAAA,IACsB2D,GAAtB0P,mBAAsBA,EACA1P,EAAtBxD,YAAsBA,EACAwD,EAAtB1D,cAAsBA,EAjFZ0D,EAAV6jF,mBAA8B,EACpB7jF,EAAVs6B,UAAqB,EAWOt6B,EAA5BkL,eAA4D,KA4DlDlL,EAAV2iC,WAA+B,EAGV3iC,EAArBwN,OACM,GAAIH,GAAAA,YAYV,IAAU03D,GAAiBxhE,OAAOuhE,SAC9B9kE,GAAKqD,SAAY0hE,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC5E/kE,EAAK8jF,kBAAoBF,EACzB5jF,EAAK+iF,WACDn3B,GAAkBA,EAAem3B,WAAan3B,EAAem3B,WAAa,aAjBlF,MA9EqC5iF,GAArCsjF,EAAA7jF,GA0BEoI,OAAFC,eAAMw7E,EAANrjF,UAAA,gBAAE,WAAyB,MAAU/D,MAAKu2B,GAA1C,2CAeE5qB,OAAFC,eACMw7E,EADNrjF,UAAA,kBAAE,WAEE,MAAO/D,MAAKynF,kBAAoBznF,KAAKynF,kBAAkBf,WAAa1mF,KAAK0nF,iBAE3E,SAAe77E,GACb7L,KAAK0nF,YAAc77E,mCAKrBF,OAAFC,eACMw7E,EADNrjF,UAAA,eAAE,WAEE,MAAO/D,MAAKynF,kBAAoBznF,KAAKynF,kBAAkBV,YAAY/mF,MAAQA,KAAKi+B,cAElF,SAAYpyB,GACd,GAAU46B,GAAW1rB,EAAAA,sBAAsBlP,EAEnC46B,KAAazmC,KAAKi+B,WACpBj+B,KAAKi+B,SAAWwI,EAEZzmC,KAAKynF,mBACPznF,KAAKynF,kBAAkBb,kBAAkB5mF,KAAMA,KAAKi+B,UAGtDj+B,KAAKqT,mBAAmB/B,iDAK5B3F,OAAFC,eACMw7E,EADNrjF,UAAA,gBAAE,WAEE,MAAO/D,MAAKsmC,WAActmC,KAAKynF,mBAAqBznF,KAAKynF,kBAAkBrwE,cAE7E,SAAavL,GAAkB7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,oCAwBtEu7E,EAAFrjF,UAAAuK,SAAE,WACEtO,KAAKwnF,kBAAoBxnF,KAAKynF,oBAAsBznF,KAAKynF,kBAAkB9nC,SAC3E3/C,KAAK48E,MAAQ58E,KAAKwnF,kBAAoB,QAAU,WAChDxnF,KAAKu2B,GAAKv2B,KAAKu2B,IAAM,qBAAqBiwD,KAEtCxmF,KAAKwnF,oBACPxnF,KAAK4hB,KAAO5hB,KAAKynF,kBAAkB7lE,MAGjC5hB,KAAKynF,mBAAqBznF,KAAKynF,kBAAkBT,cAAchnF,QACjEA,KAAKu9B,SAAU,GAGjBv9B,KAAKC,cAAcse,QAAQve,KAAKG,aAAa,IAG/CinF,EAAFrjF,UAAAmE,YAAE,WACF,GAAUq+C,GAAQvmD,KAAKynF,iBAEnBznF,MAAKC,cAAcC,eAAeF,KAAKG,aAInComD,GAASA,EAAMwgC,YAAY/mF,OAC7BumD,EAAMqgC,kBAAkB5mF,MAAM,GAAO,GAAO,IAKhDonF,EAAFrjF,UAAA2O,MAAE,WACE1S,KAAK2nF,eAAejjF,cAAcgO,SAIpC00E,EAAFrjF,UAAA6jF,eAAE,WACF,GAAUC,KAAa7nF,KAAKwnF,oBAA4BxnF,KAAKi+B,QAErD4pD,KAAe7nF,KAAKi+B,WACtBj+B,KAAKi+B,SAAW4pD,EACZ7nF,KAAKynF,oBACPznF,KAAKynF,kBAAkBb,kBAAkB5mF,KAAMA,KAAKi+B,UAAU,GAC9Dj+B,KAAKynF,kBAAkB3pD,eAI3B99B,KAAKmR,OAAOU,KAAK,GAAI40E,IAAsBzmF,KAAMA,KAAK6L,SAQxDu7E,EAAFrjF,UAAAgjC,cAAE,WAGE/mC,KAAKqT,mBAAmB/B,+BAjL5BhR,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,oBACEkC,SAAU,ykBACVC,QAAF,2wFACEM,cAAFC,EAAAA,kBAAmCC,KACjCvF,SAAF,kBACEkF,gBAAFC,EAAAA,wBAAAC,OACEnF,QAAF,iBACEC,MACFmnF,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCC,gDAAJ,4BACIrnF,MAAJ,4DAKIsnF,cAAJ,OACIr8D,UAAW,uHAsFfvrB,KAAuCmH,EAAAA,aA5cvCnH,KAAEoB,EAAAA,eAIFpB,KAAEkB,OAAFnB,aAAAC,KAAAmB,EAAAA,UAAAjB,MAAA,gBAXAF,SAAQc,GAARf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4lF,SAydAgB,EAAAzlF,wHA7EAgmF,iBAAArnF,KAAQoO,EAAAA,UAARlO,MAAA,UAAAmO,QAAA,MAKA4nB,KAAAj2B,KAAAqH,EAAAA,QAKAia,OAAAthB,KAAAqH,EAAAA,QASAkE,QAAAvL,KAAAqH,EAAAA,QAGAX,WAAA1G,KAAAqH,EAAAA,QAGA++E,aAAApmF,KAAQqH,EAAAA,QAGR41B,UAAAj9B,KAAAqH,EAAAA,QAGAyP,WAAA9W,KAAAqH,EAAAA,QAUAwJ,SAAA7Q,KAAA+R,EAAAA,UA2BA+0E,OC3cAe,GAAA,WAAA,QAAAA,MAKoC,sBALpC7nF,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,GAAiBE,IAC3BG,SAAUL,GAAiBskF,GAAsBc,IACjDzkF,cAAe2jF,GAAsBc,QAEvCe,KXGA1I,GAAA,WAAA,QAAAA,MAI6B,sBAJ7Bn/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,mBACV1C,MAAOC,MAAS,wBAElB6+E,KAMAC,GAAA,WAAA,QAAAA,MAM2B,sBAN3Bp/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,mDACV1C,MACEC,MAAS,sBAGb8+E,KAMAC,GAAA,WAAA,QAAAA,MAM8B,sBAN9Br/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,4DACV1C,MACEC,MAAS,yBAGb++E,KAMAC,GAAA,WAAA,QAAAA,KAUW5/E,KAAXooF,MAAoC,QACpC,sBAXA9nF,KAACC,EAAAA,UAADC,OACE6C,SAAU,mBACV5C,SAAU,iBACVE,MACEC,MAAS,mBACTynF,qCAAsC,yCAK1CD,QAAA9nF,KAAGqH,EAAAA,SACHi4E,KAMAC,GAAA,WAAA,QAAAA,MAI4B,sBAJ5Bv/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,kBACV1C,MAAOC,MAAS,uBAElBi/E,KAMAI,GAAA,WAAA,QAAAA,MAI2B,sBAJ3B3/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,mCACV1C,MAAOC,MAAS,sBAElBq/E,KAMAH,GAAA,WAAA,QAAAA,MAI6B,sBAJ7Bx/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,2CACV1C,MAAOC,MAAS,yBAElBk/E,KAMAC,GAAA,WAAA,QAAAA,MAI6B,sBAJ7Bz/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,4CACV1C,MAAOC,MAAS,yBAElBm/E,KAMAC,GAAA,WAAA,QAAAA,MAI6B,sBAJ7B1/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,2CACV1C,MAAOC,MAAS,yBAElBo/E,KAMAE,GAAA,WAAA,QAAAA,MAI6B,sBAJ7B5/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,4CACV1C,MAAOC,MAAS,yBAElBs/E,KAMAC,GAAA,WAAA,QAAAA,MAI4B,sBAJ5B7/E,KAACC,EAAAA,UAADC,OACE6C,SAAU,qCACV1C,MAAOC,MAAS,uBAElBu/E,KAcAX,GAAA,WAAA,QAAAA,MASA,sBATAl/E,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,WACE5C,SAAU,UACV8E,SAAU,8EACVC,QAAF,2yEACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACElF,MAAFC,MAAA,gBAGA4+E,iCAcA,MALAH,GAAAh/E,aAQAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA;gSARAyC,cAAAC,EAAAA,kBAAAC,KACEL,gBAAiBC,EAAAA,wBAAnBC,OACElF,MAAQC,MAAV,uBAGAy+E,iCAcA,sBAHA/+E,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,uBAAAkC,SAAA,2NAQAO,cAAAC,EAAAA,kBAAAC,sDARArF,MAAAC,MAAA,4BAGA0+E,KC/JAC,GAAA,WAAA,QAAAA,MAyB4B,sBAzB5Bj/E,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,IACVK,SACEm9E,GACAH,GACAC,GACAG,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAn+E,IAEFW,cACE68E,GAASH,GAAeC,GAAmBG,GAAgBC,GAAcC,GACzEC,GAAgBC,GAAeC,GAAgBC,GAAgBC,GAAgBC,GAC/EC,GAAgBC,QAGpBZ,KC/Baa,GACT,GAAIpmE,GAAAA,eAAuC,6BC0B3CijB,GAAe,EAONojD,IACX94E,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAA6vE,MAC9BjjD,OAAO,OASPkjD,KAAF,EAEEC,QAAF,EAEEC,UAAF,EAEEC,cAAF,gHAIA,mBAAA,QAAAC,MAKA,MAAAA,oBAKE,QAAFC,GAAqBzgF,GAAAH,KAArBG,YAAqBA,EACrB,MAAAygF,MACMC,GAMEp6E,EAActD,EAAWiQ,EAAmB1M,EAAck6E,KAAmB,WAWrFN,GAAA,SAAA/8E,GAmFE,QAAF+8E,GAAc98E,EACQ6P,EACApT,EACAsT,EACevM,EAEX85E,EACsCnjD,GAP9D,GAAFh6B,GAQIJ,EARJK,KAAA5D,KAQUwD,IARVxD,WACsB2D,GAAtB0P,mBAAsBA,EACA1P,EAAtB1D,cAAsBA,EACA0D,EAAtB4P,QAAsBA,EAGI5P,EAA1Bm9E,aAA0BA,EACsCn9E,EAAhEg6B,eAAgEA,EA9DzCh6B,EAAvBiL,UAA2C,GAKfjL,EAA5BkL,eAA4D,KAElDlL,EAAVo6B,UAA8B,mBAAkBd,GAGrCt5B,EAAX4yB,GAAwB5yB,EAAKo6B,UAYlBp6B,EAAXwf,cAA+C,QAGpCxf,EAAXie,KAAiC,KAGZje,EAArBwN,OACM,GAAIH,GAAAA,aAGWrN,EAArBo9E,oBAAkE,GAAI/vE,GAAAA,aAepErN,EAAFm6B,WAAY,aAEFn6B,EAAVq9E,uBAA2C,GAEjCr9E,EAAVs9E,mBAAqDC,GAAqBX,KAEhE58E,EAAV4nB,8BAAuC,aA+C7B5nB,EAAVs6B,UAA8B,EAgBpBt6B,EAAV2iC,WAA+B,EAwBrB3iC,EAAVw9E,gBAAoC,EA3EhCx9E,EAAKqD,SAAWsX,SAAStX,IAAa,EAEtCrD,EAAK1D,cAAcse,QAAQ/a,GAAY,GAAMc,UAAS,SAAC+5B,GAChDA,GAMH3iB,QAAQC,UAAUC,KAAI,WACpBjY,EAAKm6B,aACLzqB,EAAmB/B,qBAgD7B,MAnIiCxN,GAAjCw8E,EAAA/8E,GAoBEoI,OAAFC,eAAM00E,EAANv8E,UAAA,eAAE,WAAwB,OAAU/D,KAAKu2B,IAAMv2B,KAAK+9B,WAApD,0CAGEpyB,OAAFC,eACM00E,EADNv8E,UAAA,gBAAE,WAC0B,MAAO/D,MAAKg+B,eACtC,SAAanyB,GAAkB7L,KAAKg+B,UAAYjjB,EAAAA,sBAAsBlP,oCAiEtEy0E,EAAFv8E,UAAAk7D,mBAAE,aAEAqhB,EAAFv8E,UAAAmE,YAAE,WACElI,KAAKC,cAAcC,eAAeF,KAAKG,cAMzCwL,OAAFC,eACM00E,EADNv8E,UAAA,eAAE,WACyB,MAAO/D,MAAKi+B,cACrC,SAAYpyB,GACNA,GAAS7L,KAAKu9B,UAChBv9B,KAAKi+B,SAAWpyB,EAChB7L,KAAKqT,mBAAmB/B,iDAS5B3F,OAAFC,eACM00E,EADNv8E,UAAA,gBAAE,WACiB,MAAO/D,MAAKsmC,eAC7B,SAAaz6B,GACf,GAAU46B,GAAW1rB,EAAAA,sBAAsBlP,EAEnC46B,KAAazmC,KAAKoX,WACpBpX,KAAKsmC,UAAYG,EACjBzmC,KAAKqT,mBAAmB/B,iDAW5B3F,OAAFC,eACM00E,EADNv8E,UAAA,qBAAE,WAC+B,MAAO/D,MAAKmhF,oBAC3C,SAAkBt1E,GACpB,GAAUu1E,GAAUv1E,GAAS7L,KAAKmhF,cAC9BnhF,MAAKmhF,eAAiBt1E,EAElBu1E,IACEphF,KAAKmhF,eACPnhF,KAAKqhF,sBAAsBH,GAAqBR,eAEhD1gF,KAAKqhF,sBACHrhF,KAAKu9B,QAAU2jD,GAAqBV,QAAUU,GAAqBT,WAEvEzgF,KAAK+gF,oBAAoBlvE,KAAK7R,KAAKmhF,kDAKvCb,EAAFv8E,UAAA+jC,kBAAE,WACE,MAAO9nC,MAAKshB,eAAiBthB,KAAKoX,UAIpCkpE,EAAFv8E,UAAA27B,mBAAE,WAME1/B,KAAKqT,mBAAmB6d,iBAI1BovD,EAAFv8E,UAAAqnB,WAAE,SAAWvf,GACT7L,KAAKu9B,UAAY1xB,GAInBy0E,EAAFv8E,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAKurB,8BAAgCD,GAIvCg1D,EAAFv8E,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAK89B,WAAaxS,GAIpBg1D,EAAFv8E,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,GAGlB20D,EAAFv8E,UAAAu9E,gBAAE,WACE,MAAOthF,MAAKu9B,QAAU,OAAUv9B,KAAKuhF,cAAgB,QAAU,SAGzDjB,EAAVv8E,UAAAs9E,sBAAE,SAA8BG,GAChC,GAAQC,GAAWzhF,KAAKihF,mBAChBj0E,EAAuBhN,KAAKG,YAAYuE,aAE5C,IAAI+8E,IAAaD,IAGbxhF,KAAKghF,uBAAuBz8E,OAAS,GACvCyI,EAAQlI,UAAUqW,OAAOnb,KAAKghF,wBAGhChhF,KAAKghF,uBAAyBhhF,KAAK0hF,0CAC/BD,EAAUD,GACdxhF,KAAKihF,mBAAqBO,EAEtBxhF,KAAKghF,uBAAuBz8E,OAAS,GAAG,CAC1CyI,EAAQlI,UAAUuW,IAAIrb,KAAKghF,uBAGjC,IAAYW,GAAiB3hF,KAAKghF,sBAE5BhhF,MAAKuT,QAAQW,kBAAiB,WAC5B8a,WAAU,WACRhiB,EAAQlI,UAAUqW,OAAOwmE,IACxB,SAKDrB,EAAVv8E,UAAA06B,iBAAE,WACF,GAAU7sB,GAAQ,GAAI+uE,GAClB/uE,GAAM6Y,OAASzqB,KACf4R,EAAM2rB,QAAUv9B,KAAKu9B,QAErBv9B,KAAKurB,8BAA8BvrB,KAAKu9B,SACxCv9B,KAAKmR,OAAOU,KAAKD,IAInB0uE,EAAFv8E,UAAA46B,OAAE,WACE3+B,KAAKu9B,SAAWv9B,KAAKu9B,SAUvB+iD,EAAFv8E,UAAA26B,cAAE,SAAc9sB,GAAd,GAAFjO,GAAA3D,IAQI4R,GAAM2sB,kBAGDv+B,KAAKoX,UAAkC,SAAtBpX,KAAK8gF,aAkBf9gF,KAAKoX,UAAkC,SAAtBpX,KAAK8gF,eAGhC9gF,KAAKw+B,cAAc95B,cAAc64B,QAAUv9B,KAAKu9B,QAChDv9B,KAAKw+B,cAAc95B,cAAc68E,cAAgBvhF,KAAKuhF,gBApBlDvhF,KAAKuhF,eAAuC,UAAtBvhF,KAAK8gF,cAE7BplE,QAAQC,UAAUC,KAAI,WACpBjY,EAAKw9E,gBAAiB,EACtBx9E,EAAKo9E,oBAAoBlvE,KAAKlO,EAAKw9E,kBAIvCnhF,KAAK2+B,SACL3+B,KAAKqhF,sBACDrhF,KAAKi+B,SAAWijD,GAAqBV,QAAUU,GAAqBT,WAKxEzgF,KAAKy+B,qBAUT6hD,EAAFv8E,UAAA2O,MAAE,WACE1S,KAAKC,cAAc0gB,SAAS3gB,KAAKw+B,cAAe,aAGlD8hD,EAAFv8E,UAAA69E,oBAAE,SAAoBhwE,GAIlBA,EAAM2sB,mBAGA+hD,EAAVv8E,UAAA29E,0CAAE,SACID,EAAgCD,GAElC,GAA4B,mBAAxBxhF,KAAK29B,eACP,MAAO,EAGb,IAAQkkD,GAAqB,EAEzB,QAAQJ,GACN,IAAKP,IAAqBX,KAGxB,GAAIiB,IAAaN,GAAqBV,QACpCqB,EAAa,wBACR,CAAA,GAAIL,GAAYN,GAAqBR,cAG1C,MAAO,EAFPmB,GAAa,0BAIf,KACF,KAAKX,IAAqBT,UACxBoB,EAAaL,IAAaN,GAAqBV,QAC3C,oBAAsB,yBAC1B,MACF,KAAKU,IAAqBV,QACxBqB,EAAaL,IAAaN,GAAqBT,UAC3C,oBAAsB,uBAC1B,MACF,KAAKS,IAAqBR,cACxBmB,EAAaL,IAAaN,GAAqBV,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBqB,kBAtVhCvhF,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,eACEkC,SAAU,q7CACVC,QAAF,s/MACE/E,SAAF,cACEE,MACFC,MAAA,eACM++B,OAAN,KACIC,kBAAJ,OACIkiD,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACI90D,kCAAJ,uCAEA7lB,WAAA+4E,IACA3/E,QAAA,gBAAA,QAAA,YACEoF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FA7GAvF,KAAEoB,EAAAA,eAFFpB,KAAEY,EAAAA,SALFZ,KAAQkB,OAARnB,aAAAC,KAAAmB,EAAAA,UAAAjB,MAAA,gBAYAF,SAAEc,GAAFf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4/E,QA8KA9/E,KAAAkB,OAAAnB,aAAAC,KAAee,EAAAA,WAAff,KAAAgB,EAAAA,OAAmCd,MAAnC4sB,EAAAA,4BAGAkzD,EAAA3+E,wHA9DA40B,KAAAj2B,KAAAqH,EAAAA,QAKAo4B,WAAAz/B,KAAAqH,EAAAA,QAKAwb,gBAAQ7iB,KAARqH,EAAAA,QAMAia,OAAAthB,KAAAqH,EAAAA,QAMAwJ,SAAA7Q,KAAA+R,EAAAA,SAGA0uE,sBAAAzgF,KAAA+R,EAAAA,SAGAxG,QAAAvL,KAAAqH,EAAAA,QAIA62B,gBAAAl+B,KAAAoO,EAAAA,UAAAlO,MAAA,SAAAmO,QAAA,MAGAuzE,SAAA5hF,KAAAoO,EAAAA,UAAAlO,MAAA2hF,IAAAxzE,QAAA,MAGA4uB,UAAAj9B,KAAAqH,EAAAA,QAGAyP,WAAA9W,KAAAqH,EAAAA,QAmDA45E,gBAAGjhF,KAAHqH,EAAAA,SAgCA24E,OCjPa8B,IACX76E,QAAS09D,EAAAA,cACTz9D,YAAaiJ,EAAAA,WAAU,WAAO,MAAA4xE,MAC9BhlD,OAAO,GAQTglD,GAAA,SAAA9+E,GAAA,QAAA8+E,oDAM6E,MAA3Bv+E,GAAlDu+E,EAAA9+E,kBANAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,8HAEViE,WAAY86E,IACZzhF,MAAO2hF,kBAAmB,4BAE5BD,GAAkDE,EAAAA,2BCnBlDC,GAAA,WAAA,QAAAA,MAMA,sBANAliF,KAACuB,EAAAA,SAADrB,OACE6B,SAAUggF,IACV1/E,cAAe0/E,QAIjBG,KAEAC,GAAA,WAAA,QAAAA,MASA,sBATAniF,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,gBAChDqgF,IAEFngF,SAAUi+E,GAAat+E,GAAiBwgF,IACxC7/E,cAAe29E,QAGjBmC,mBCoBE,QAAFC,GAEWj4D,EAEApJ,EAEAwiC,OAAX,KAAAA,IAAWA,GAAX,GAJW7jD,KAAXyqB,OAAWA,EAEAzqB,KAAXqhB,SAAWA,EAEArhB,KAAX6jD,YAAWA,EACX,MAAA6+B,oBAME,QAAFC,GAAqBxiF,GAAAH,KAArBG,YAAqBA,EACrB,MAAAwiF,MAEMC,GACFz/E,EAAWiQ,EAAmB1M,EAAci8E,KAAe,WAM/DxM,GAAA,WAAA,QAAAA,MAI4B,sBAJ5B71E,KAACC,EAAAA,UAADC,OACE6C,SAAU,mCACV1C,MAAOC,MAAS,uBAElBu1E,KAMAC,GAAA,WAAA,QAAAA,MAIkC,sBAJlC91E,KAACC,EAAAA,UAADC,OACE6C,SAAU,gDACV1C,MAAOC,MAAS,8BAElBw1E,KAKAtB,GAAA,SAAAvxE,GAmIE,QAAFuxE,GAAqB30E,EACCoT,EACRmE,EAEAwG,GAJZ,GAAFva,GAKIJ,EALJK,KAAA5D,KAKUG,IALVH,WAAqB2D,GAArBxD,YAAqBA,EACCwD,EAAtB4P,QAAsBA,EAxFpB5P,EAAF0sD,WAAuB,EAGrB1sD,EAAFk/E,oBAAgC,EAG9Bl/E,EAAF6wE,mBAA+B,EAsBnB7wE,EAAZwiC,WAAiC,EAuBrBxiC,EAAZm/E,aAAmC,EAUvBn/E,EAAZo/E,YAAkC,EAGvBp/E,EAAXm/B,SAAsB,GAAI/0B,GAAAA,QAGfpK,EAAXo/B,QAAqB,GAAIh1B,GAAAA,QAGJpK,EAArB0nC,gBACM,GAAIr6B,GAAAA,aAGWrN,EAArBq/E,UAA6D,GAAIhyE,GAAAA,aAG5CrN,EAArBw8C,QAA2D,GAAInvC,GAAAA,aAiB3DrN,EAAKs/E,oBAELt/E,EAAKu/E,YAAc,GAAIC,IAAex/E,EAAM4P,EAASpT,EAAauX,GAClE/T,EAAKu/E,YAAY9kE,mBAAmBje,EAAYuE,eAChDf,EAAK0a,aAAeH,QAmIxB,MA5P6Bpa,GAA7BgxE,EAAAvxE,GAkBEoI,OAAFC,eAAMkpE,EAAN/wE,UAAA,sBAAE,WACE,MAAO/D,MAAKoX,UAAYpX,KAAKshB,iBAAmBthB,KAAKqe,aAAajH,0CAsBpEzL,OAAFC,eACMkpE,EADN/wE,UAAA,gBAAE,WAC0B,MAAO/D,MAAKmmC,eACtC,SAAat6B,GACf,GAAUu3E,GAAeroE,EAAAA,sBAAsBlP,EAEvCu3E,KAAiBpjF,KAAKmmC,YACxBnmC,KAAKmmC,UAAYi9C,EACjBpjF,KAAKqjF,6DAMT13E,OAAFC,eACMkpE,EADN/wE,UAAA,aAAE,WAEE,WAAsB3C,IAAfpB,KAAKygC,OACRzgC,KAAKygC,OACLzgC,KAAKG,YAAYuE,cAAcS,iBAErC,SAAU0G,GAAc7L,KAAKygC,OAAS50B,mCAStCF,OAAFC,eACMkpE,EADN/wE,UAAA,kBAAE,WAC4B,MAAO/D,MAAK8iF,aAAe9iF,KAAK6iF,wBAC5D,SAAeh3E,GACb7L,KAAK8iF,YAAc/nE,EAAAA,sBAAsBlP,oCAO3CF,OAAFC,eACMkpE,EADN/wE,UAAA,iBAAE,WAC2B,MAAO/D,MAAK+iF,gBACvC,SAAcl3E,GACZ7L,KAAK+iF,WAAahoE,EAAAA,sBAAsBlP,oCAqB1CF,OAAFC,eAAMkpE,EAAN/wE,UAAA,oBAAE,WAGE,MAAO/D,MAAK60E,aAAe70E,KAAKw0E,mBAAqBx0E,KAAKqhB,UACtDrhB,KAAKqhB,SAASyf,WAAa,sCAiBjCg0C,EAAF/wE,UAAAk/E,kBAAE,WACF,GACUj2E,GAAUhN,KAAKG,YAAyB,aAE9C,IAAI6M,EAAQ8tE,aAHc,mBAAA,mBAItB9tE,EAAQs2E,QAAQv7D,cAElB,WADA/a,GAAQlI,UAAUuW,IALM,iBAQxBrO,GAAQlI,UAAUuW,IAAI,sBAI1By5D,EAAF/wE,UAAAmE,YAAE,WACElI,KAAKgjF,UAAUnxE,MAAMkiE,KAAM/zE,OAC3BA,KAAKkjF,YAAYK,wBAInBzO,EAAF/wE,UAAAm8C,OAAE,WACOlgD,KAAKmmC,YACRnmC,KAAKmmC,WAAY,EACjBnmC,KAAKqjF,6BAKTvO,EAAF/wE,UAAAq8C,SAAE,WACMpgD,KAAKmmC,YACPnmC,KAAKmmC,WAAY,EACjBnmC,KAAKqjF,6BAKTvO,EAAF/wE,UAAAy/E,qBAAE,WACOxjF,KAAKmmC,YACRnmC,KAAKmmC,WAAY,EACjBnmC,KAAKqjF,0BAAyB,KAKlCvO,EAAF/wE,UAAA0/E,eAAE,SAAe5/B,GAGb,WAHJ,KAAAA,IAAiBA,GAAjB,GACI7jD,KAAKmmC,WAAanmC,KAAKqhB,SACvBrhB,KAAKqjF,yBAAyBx/B,GACvB7jD,KAAKqhB,UAIdyzD,EAAF/wE,UAAA2O,MAAE,WACO1S,KAAKqwD,YACRrwD,KAAKG,YAAYuE,cAAcgO,QAC/B1S,KAAK8iC,SAASh3B,MAAMioE,KAAM/zE,QAE5BA,KAAKqwD,WAAY,GASnBykB,EAAF/wE,UAAAoX,OAAE,WACMnb,KAAK0jF,WACP1jF,KAAKmgD,QAAQtuC,MAAMkiE,KAAM/zE,QAK7B80E,EAAF/wE,UAAA6Y,aAAE,SAAahL,GACP5R,KAAKoX,SACPxF,EAAM2D,iBAEN3D,EAAM2sB,mBAKVu2C,EAAF/wE,UAAAmR,eAAE,SAAetD,GACb,IAAI5R,KAAKoX,SAIT,OAAQxF,EAAMwD,SACZ,IAAKuuE,GAAAA,OACL,IAAKC,GAAAA,UAEH5jF,KAAKmb,SAELvJ,EAAM2D,gBACN,MACF,KAAKI,GAAAA,MAEC3V,KAAK60E,YACP70E,KAAKyjF,gBAAe,GAItB7xE,EAAM2D,mBAKZu/D,EAAF/wE,UAAA0xE,MAAE,WAAA,GAAF9xE,GAAA3D,IAKIA,MAAKuT,QAAQwrC,SACV1vB,eACAplB,KAAKC,EAAAA,KAAK,IACV5F,UAAS,WACRX,EAAK4P,QAAQuD,IAAG,WACdnT,EAAK0sD,WAAY,EACjB1sD,EAAKo/B,QAAQj3B,MAAMioE,KAAMpwE,SAKzBmxE,EAAV/wE,UAAAs/E,yBAAE,SAAiCx/B,OAAnC,KAAAA,IAAmCA,GAAnC,GACI7jD,KAAKqrC,gBAAgBx5B,MACnB4Y,OAAQzqB,KACR6jD,YAANA,EACMxiC,SAAUrhB,KAAKmmC,4BA9QrB7lC,KAACC,EAAAA,UAADC,OACE6C,SAAU,yDACV3C,QAAS,QAAS,WAAY,iBAC9BD,SAAU,UACVE,MACEC,MAAS,WACTg/B,kBAAmB,uBACnB34B,KAAQ,SACR48E,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7Bp2B,kBAAmB,mBACnB9sD,uBAAwB,sBACxBgpD,uBAAwB,eACxBprC,UAAW,uBACXsN,YAAa,yBACbH,UAAW,UACXC,SAAU,mDAlGdxrB,KAAEmH,EAAAA,aAKFnH,KAAEY,EAAAA,SATFZ,KAAQa,EAAAA,WA0NRb,SAAAc,GAAAf,aAAAC,KAAee,EAAAA,WAAff,KAA2BgB,EAAAA,OAA3Bd,MAAkCe,2BAjFlC0iF,SAAA3jF,KAAG46B,EAAAA,aAAH16B,MAAgB21E,IAAgBxnE,QAAQ,MAGxCu1E,eAAA5jF,KAAG46B,EAAAA,aAAH16B,MAAgB41E,IAAsBznE,QAAQ,MAG9Cw1E,aAAA7jF,KAAG46B,EAAAA,aAAH16B,MAAgBiQ,EAAAA,WAAU,WAAO,MAAAylE,OAAiBvnE,QAAQ,MAG1D0S,WAAA/gB,KAAGqH,EAAAA,QAaHkE,QAAAvL,KAAGqH,EAAAA,QAeHktE,aAAAv0E,KAAGqH,EAAAA,QAUH+7E,YAAApjF,KAAGqH,EAAAA,QAcH0jC,kBAAA/qC,KAAG+R,EAAAA,SAIH2wE,YAAA1iF,KAAG+R,EAAAA,SAGH8tC,UAAA7/C,KAAG+R,EAAAA,UAwJHyiE,GA5P6B8N,IA4Q7B1M,GAAA,WAQE,QAAFA,GAAwBkO,GAAApkF,KAAxBokF,YAAwBA,EAiBxB,MAdElO,GAAFnyE,UAAA6Y,aAAE,SAAahL,GACf,GAAUyyE,GAAarkF,KAAKokF,WAEpBC,GAAWX,YAAcW,EAAWjtE,UACtCitE,EAAWlpE,SAQbvJ,EAAM2sB,kCAvBVj+B,KAACC,EAAAA,UAADC,OACE6C,SAAU,kBACV1C,MACEC,MAAS,yCACT8d,UAAW,gEAIfpe,KAAqCw0E,MAiBrCoB,KCxYaH,GACT,GAAI/7D,GAAAA,eAAuC,2CtB8B7C,QAAFsqE,GAAqBvnC,EACAC,EACAC,EAEAC,GAJAl9C,KAArB+8C,0BAAqBA,EACA/8C,KAArBg9C,YAAqBA,EACAh9C,KAArBi9C,iBAAqBA,EAEAj9C,KAArBk9C,UAAqBA,EACrB,MAAAonC,MACMC,GACFnnC,EAAgBknC,IAIhBrnD,GAAe,gBAIjB,QAAFunD,GAEW/5D,EAEA5e,GAFA7L,KAAXyqB,OAAWA,EAEAzqB,KAAX6L,MAAWA,EACX,MAAA24E,MAMA7Q,GAAA,SAAApwE,GAsQE,QAAFowE,GAAwBxzE,EACFkT,EACY1C,EACRqsC,EACAC,EACZF,EAE2BG,GAPvC,GAAFv5C,GAQIJ,EARJK,KAAA5D,KAQU+8C,EAA2BC,EAAaC,EAAkBC,IARpEl9C,WAAwB2D,GAAxBxD,YAAwBA,EACFwD,EAAtB0P,mBAAsBA,EACY1P,EAAlCgN,KAAkCA,EAKOhN,EAAzCu5C,UAAyCA,EA3O9Bv5C,EAAX66C,YAAiC,gBAOvB76C,EAAVuwE,wBAAmD,KAGzCvwE,EAAV+P,WAAuB,GAAI3F,GAAAA,QAkBzBpK,EAAFm6C,KAAiB,iBAAiB7gB,KAMhCt5B,EAAF8gF,UAAc,EAMZ9gF,EAAF+gF,cAAiC,KAM/B/gF,EAAFm6B,WAAY,aAGVn6B,EAAFi6B,UAAW,aAsBDj6B,EAAV+5C,WAA+B,EAgBrB/5C,EAAVg6C,aAAsB,SAAIC,EAASC,GAAY,MAAAD,KAAOC,GAgC1Cl6C,EAAZq6B,WAAiC,EA6CrBr6B,EAAZ2iC,WAAiC,EAGJ3iC,EAA7BixE,gBAA0E,aAe9DjxE,EAAZm/E,aAAmC,EA6Bdn/E,EAArBwN,OACM,GAAIH,GAAAA,aAOWrN,EAArB6pB,YAAsD,GAAIxc,GAAAA,aAkBlDrN,EAAKu5C,YACPv5C,EAAKu5C,UAAU+B,cAAgBt7C,KAZrC,MAxOiCG,GAAjC6vE,EAAApwE,GA4DEoI,OAAFC,eAAM+nE,EAAN5vE,UAAA,gBAAE,WACE,MAAO/D,MAAK2/C,SAAW3/C,KAAKq/C,gBAAgBh+B,SAAWrhB,KAAKq/C,gBAAgBh+B,SAAS,oCAIvF1V,OAAFC,eAAM+nE,EAAN5vE,UAAA,YAAE,WAA4B,MAAO/D,MAAK6gD,MAAQ,KAAO,2CAMvDl1C,OAAFC,eACM+nE,EADN5vE,UAAA,gBAAE,WAC0B,MAAO/D,MAAK09C,eACtC,SAAa7xC,GACX7L,KAAK09C,UAAY3iC,EAAAA,sBAAsBlP,GACvC7L,KAAKu0E,mDASP5oE,OAAFC,eACM+nE,EADN5vE,UAAA,mBAAE,WACmD,MAAO/D,MAAK29C,kBAC/D,SAAgBryB,GACdtrB,KAAK29C,aAAeryB,EAChBtrB,KAAKq/C,iBAEPr/C,KAAKw/C,wDAST7zC,OAAFC,eACM+nE,EADN5vE,UAAA,aAAE,WACmB,MAAO/D,MAAKygC,YAC/B,SAAU50B,GACR7L,KAAKorB,WAAWvf,GAChB7L,KAAKygC,OAAS50B,mCAQhBF,OAAFC,eAAM+nE,EAAN5vE,UAAA,UAAE,WACE,MAAO/D,MAAK2kF,WAAa3kF,KAAK2kF,WAAWpuD,GAAKv2B,KAAK89C,sCAOrDnyC,OAAFC,eACM+nE,EADN5vE,UAAA,gBAAE,WAC0B,MAAO/D,MAAKg+B,eACtC,SAAanyB,GACX7L,KAAKg+B,UAAYjjB,EAAAA,sBAAsBlP,GACvC7L,KAAKo/C,aAAatzC,wCAQpBH,OAAFC,eACM+nE,EADN5vE,UAAA,mBAAE,WAEE,MAAO/D,MAAK2kF,WAAa3kF,KAAK2kF,WAAW9+B,YAAc7lD,KAAKm/C,kBAE9D,SAAgBtzC,GACd7L,KAAKm/C,aAAetzC,EACpB7L,KAAKo/C,aAAatzC,wCAKpBH,OAAFC,eAAM+nE,EAAN5vE,UAAA,eAAE,WACE,MAAQ/D,MAAK2kF,YAAc3kF,KAAK2kF,WAAW3P,SAAYh1E,KAAKs0E,mDAO9D3oE,OAAFC,eAAM+nE,EAAN5vE,UAAA,aAAE,WACE,QAAS/D,KAAK2kF,YAAc3kF,KAAK2kF,WAAW9jC,QAAgC,IAAtB7gD,KAAKi0E,MAAM1vE,wCAOnEoH,OAAFC,eAAM+nE,EAAN5vE,UAAA,wBAAE,WAAkC,OAAQ/D,KAAK6gD,OAAS7gD,KAAKg1E,yCAM7DrpE,OAAFC,eACM+nE,EADN5vE,UAAA,gBAAE,WAC0B,MAAO/D,MAAKk9C,YAAcl9C,KAAKk9C,UAAU9lC,SAAWpX,KAAKsmC,eACnF,SAAaz6B,GACX7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,GACvC7L,KAAKu0E,mDAWP5oE,OAAFC,eACM+nE,EADN5vE,UAAA,kBAAE,WAC4B,MAAO/D,MAAK8iF,iBACxC,SAAej3E,GAAf,GAAFlI,GAAA3D,IACIA,MAAK8iF,YAAc/nE,EAAAA,sBAAsBlP,GAErC7L,KAAKi0E,OACPj0E,KAAKi0E,MAAM7pE,QAAO,SAAC2pE,GAAQ,MAAAA,GAAK8O,mBAAqBl/E,EAAKm/E,+CAK9Dn3E,OAAFC,eACM+nE,EADN5vE,UAAA,gBAAE,SACa8H,GACX7L,KAAK0kF,cAAgB74E,EACrB7L,KAAKykF,UAAY54E,mCAInBF,OAAFC,eAAM+nE,EAAN5vE,UAAA,4BAAE,WACE,MAAOsI,GAAAA,MAAXxD,UAAA,GAAoB7I,KAAKi0E,MAAM3nE,IAAG,SAACynE,GAAQ,MAAAA,GAAK1oC,oDAI9C1/B,OAAFC,eAAM+nE,EAAN5vE,UAAA,wBAAE,WACE,MAAOsI,GAAAA,MAAXxD,UAAA,GAAoB7I,KAAKi0E,MAAM3nE,IAAG,SAACynE,GAAQ,MAAAA,GAAKjxC,6CAI9Cn3B,OAAFC,eAAM+nE,EAAN5vE,UAAA,uBAAE,WACE,MAAOsI,GAAAA,MAAXxD,UAAA,GAAoB7I,KAAKi0E,MAAM3nE,IAAG,SAACynE,GAAQ,MAAAA,GAAKhxC,4CAI9Cp3B,OAAFC,eAAM+nE,EAAN5vE,UAAA,yBAAE,WACE,MAAOsI,GAAAA,MAAXxD,UAAA,GAAoB7I,KAAKi0E,MAAM3nE,IAAG,SAACynE,GAAQ,MAAAA,GAAKiP,8CAmC9CrP,EAAF5vE,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAKuU,YAAc,GAAI2B,GAAAA,gBAAyBlW,KAAKi0E,OAClD79D,WACAmtC,0BACAptC,0BAA0BnW,KAAK2Q,KAAO3Q,KAAK2Q,KAAK9E,MAAQ,OAEvD7L,KAAK2Q,MACP3Q,KAAK2Q,KAAKQ,OACPlH,KAAKmK,EAAAA,UAAUpU,KAAK0T,aACpBpP,UAAS,SAAC8M,GAAO,MAAAzN,GAAK4Q,YAAY4B,0BAA0B/E,KAGjEpR,KAAKuU,YAAYkvC,OAAOx5C,KAAKmK,EAAAA,UAAUpU,KAAK0T,aAAapP,UAAS,WAChEX,EAAK4xE,sBAIPv1E,KAAKi0E,MAAM5vE,QAAQ4F,KAAK6F,EAAAA,UAAU,MAAOsE,EAAAA,UAAUpU,KAAK0T,aAAapP,UAAS,WACxEX,EAAKyT,UAGPsE,QAAQC,UAAUC,KAAI,WACpBjY,EAAK4wE,oBAIT5wE,EAAKihF,cAGLjhF,EAAK67C,uBAGL77C,EAAKkhF,kBAGLlhF,EAAKmhF,gCAELnhF,EAAKy7C,aAAatzC,UAItB6nE,EAAF5vE,UAAAuK,SAAE,WACEtO,KAAKq/C,gBAAkB,GAAIK,GAAAA,eAAwB1/C,KAAK2/C,aAAUv+C,IAAW,GAC7EpB,KAAKo/C,aAAatzC,QAGpB6nE,EAAF5vE,UAAAq2B,UAAE,WACMp6B,KAAKk9C,WAIPl9C,KAAKsgD,oBAITqzB,EAAF5vE,UAAAmE,YAAE,WACElI,KAAK0T,WAAW5H,OAChB9L,KAAK0T,WAAWrF,WAChBrO,KAAKo/C,aAAa/wC,WAElBrO,KAAK+kF,sBAKPpR,EAAF5vE,UAAAsxE,cAAE,SAAc2P,GACZhlF,KAAK2kF,WAAaK,GAOpBrR,EAAF5vE,UAAA4jD,kBAAE,SAAkBC,GAAiB5nD,KAAK6nD,iBAAmBD,EAAI3G,KAAK,MAGpE0yB,EAAF5vE,UAAAqnB,WAAE,SAAWvf,GACL7L,KAAKi0E,OACPj0E,KAAK4gD,qBAAqB/0C,GAAO,IAKrC8nE,EAAF5vE,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAK49B,UAAYtS,GAInBqoD,EAAF5vE,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAK89B,WAAaxS,GAIpBqoD,EAAF5vE,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,EAChB3rB,KAAKo/C,aAAatzC,QAOpB6nE,EAAF5vE,UAAA+jD,iBAAE,SAAiBl2C,GACV5R,KAAKm0E,oBAAoBviE,IAC5B5R,KAAK0S,SAQTihE,EAAF5vE,UAAA2O,MAAE,WACM1S,KAAKoX,UAMLpX,KAAK2kF,YAAc3kF,KAAK2kF,WAAW3P,UAE5Bh1E,KAAKi0E,MAAM1vE,OAAS,GAC7BvE,KAAKuU,YAAYe,qBACjBtV,KAAKo/C,aAAatzC,SAElB9L,KAAKilF,cACLjlF,KAAKo/C,aAAatzC,UAKtB6nE,EAAF5vE,UAAAkhF,YAAE,WACMjlF,KAAK2kF,YACP3kF,KAAK2kF,WAAWjyE,SAOpBihE,EAAF5vE,UAAA8nE,SAAE,SAASj6D,GACX,GAAU6jC,GAAS7jC,EAAY,MAGvBA,GAAMwD,UAAYwuE,EAAAA,WAAa5jF,KAAKklF,cAAczvC,IACpDz1C,KAAKuU,YAAYkB,oBACjB7D,EAAM2D,kBACGkgC,GAAUA,EAAO3wC,UAAUC,SAAS,cACzC6M,EAAMwD,UAAYC,EAAAA,MACpBrV,KAAKuU,YAAYe,qBACjB1D,EAAM2D,kBACG3D,EAAMwD,UAAYI,EAAAA,KAC3BxV,KAAKuU,YAAYkB,oBACjB7D,EAAM2D,kBAENvV,KAAKuU,YAAYsB,UAAUjE,GAG7B5R,KAAKo/C,aAAatzC,SAQZ6nE,EAAZ5vE,UAAA8gF,gBAAE,WAEE7kF,KAAKykF,UAAYzkF,KAAK0kF,gBAAwC,IAAtB1kF,KAAKi0E,MAAM1vE,QAAgB,EAAI,IAO/DovE,EAAZ5vE,UAAA+gF,8BAAE,WAEE,GAAoC,MAAhC9kF,KAAKk0E,wBACP,GAAIl0E,KAAKi0E,MAAM1vE,OAAQ,CAC7B,GAAc4gF,GAAettE,KAAK2B,IAAIxZ,KAAKk0E,wBAAyBl0E,KAAKi0E,MAAM1vE,OAAS,EAChFvE,MAAKuU,YAAY0C,cAAckuE,OAE/BnlF,MAAK0S,OAIT1S,MAAKk0E,wBAA0B,MASzBP,EAAV5vE,UAAAiT,cAAE,SAAsB1M,GACpB,MAAOA,IAAS,GAAKA,EAAQtK,KAAKi0E,MAAM1vE,QAGlCovE,EAAV5vE,UAAAmhF,cAAE,SAAsBl4E,GACpB,GAAIA,GAA8C,UAAnCA,EAAQghC,SAASjmB,cAA2B,CAEzD,OADS,EACKlc,MAGhB,OAAO,GAGT8nE,EAAF5vE,UAAA68C,qBAAE,SAAqB/0C,EAAYg4C,GAAjC,GAAFlgD,GAAA3D,IAII,QAJJ,KAAA6jD,IAAmCA,GAAnC,GACI7jD,KAAKolF,kBACLplF,KAAKi0E,MAAM7pE,QAAO,SAAC2pE,GAAQ,MAAAA,GAAK3zB,aAE5B57C,MAAMuF,QAAQ8B,GAChBA,EAAMzB,QAAO,SAAC04C,GAAgB,MAAAn/C,GAAKo/C,aAAaD,EAAce,KAC9D7jD,KAAKgjD,kBACA,CACX,GAAYqiC,GAAoBrlF,KAAK+iD,aAAal3C,EAAOg4C,EAI/CwhC,IACExhC,GACF7jD,KAAKuU,YAAY0C,cAAcouE,KAU/B1R,EAAV5vE,UAAAg/C,aAAE,SAAqBl3C,EAAYg4C,GAAjC,GAAFlgD,GAAA3D,SAAA,KAAA6jD,IAAmCA,GAAnC,EAEA,IAAUwhC,GAAoBrlF,KAAKi0E,MAAMt2D,KAAI,SAACo2D,GACxC,MAAqB,OAAdA,EAAKloE,OAAiBlI,EAAKg6C,aAAao2B,EAAKloE,MAAQA,IAQ9D,OALIw5E,KACFxhC,EAAcwhC,EAAkB7B,uBAAyB6B,EAAkBnlC,SAC3ElgD,KAAKq/C,gBAAgBa,OAAOmlC,IAGvBA,GAGD1R,EAAV5vE,UAAAy7C,qBAAE,WAAA,GAAF77C,GAAA3D,IAGI0b,SAAQC,UAAUC,KAAI,YAChBjY,EAAKu5C,WAAav5C,EAAK88B,UACzB98B,EAAKi9C,qBAAqBj9C,EAAKu5C,UAAYv5C,EAAKu5C,UAAUrxC,MAAQlI,EAAK88B,QAAQ,GAC/E98B,EAAKy7C,aAAatzC,WAShB6nE,EAAV5vE,UAAAqhF,gBAAE,SAAwBE,GACtBtlF,KAAKq/C,gBAAgB3qB,QACrB10B,KAAKi0E,MAAM7pE,QAAO,SAAC2pE,GACbA,IAASuR,GACXvR,EAAK3zB,aAGTpgD,KAAKo/C,aAAatzC,QAOZ6nE,EAAV5vE,UAAAi/C,YAAE,WAAA,GAAFr/C,GAAA3D,IACQA,MAAK09C,YACP19C,KAAKq/C,gBAAgB3qB,QAErB10B,KAAKi0E,MAAM7pE,QAAO,SAAC2pE,GACbA,EAAK1yD,UACP1d,EAAK07C,gBAAgBa,OAAO6zB,KAGhC/zE,KAAKo/C,aAAatzC,SAKd6nE,EAAV5vE,UAAAkgD,kBAAE,SAA0BE,GAC5B,GAAQC,GAAmB,IAGrBA,GADE5/C,MAAMuF,QAAQ/J,KAAKqhB,UACPrhB,KAAKqhB,SAAS/U,IAAG,SAACynE,GAAQ,MAAAA,GAAKloE,QAE/B7L,KAAKqhB,SAAWrhB,KAAKqhB,SAASxV,MAAQs4C,EAEtDnkD,KAAKygC,OAAS2jB,EACdpkD,KAAKmR,OAAOU,KAAK,GAAI2yE,IAAkBxkF,KAAMokD,IAC7CpkD,KAAKwtB,YAAY3b,KAAKuyC,GACtBpkD,KAAK49B,UAAUwmB,GACfpkD,KAAKqT,mBAAmB/B,gBAI1BqiE,EAAF5vE,UAAA0xE,MAAE,WAAA,GAAF9xE,GAAA3D,IACSA,MAAKs0E,mBACRt0E,KAAKuU,YAAY0C,eAAe,GAG7BjX,KAAKoX,WACJpX,KAAK2kF,WAKP31D,WAAU,WACHrrB,EAAKqxE,SACRrxE,EAAK4hF,mBAKTvlF,KAAKulF,mBAMX5R,EAAF5vE,UAAAwhF,eAAE,WACEvlF,KAAK89B,aACL99B,KAAKqT,mBAAmB/B,eACxBtR,KAAKo/C,aAAatzC,QAQpB6nE,EAAF5vE,UAAAwxE,kBAAE,WAAA,GAAF5xE,GAAA3D,MAC4B,IAApBA,KAAKykF,YACPzkF,KAAKykF,WAAa,EAElBz1D,WAAU,WACRrrB,EAAK8gF,UAAY9gF,EAAK+gF,eAAiB,EACvC/gF,EAAK0P,mBAAmB/B,mBAKtBqiE,EAAV5vE,UAAA6gF,YAAE,WACE5kF,KAAK+kF,qBACL/kF,KAAKwlF,sBACLxlF,KAAKylF,0BACLzlF,KAAK4zE,yBAGCD,EAAV5vE,UAAAghF,mBAAE,WACM/kF,KAAK0lF,yBACP1lF,KAAK0lF,uBAAuBn1E,cAC5BvQ,KAAK0lF,uBAAyB,MAG5B1lF,KAAK2lF,wBACP3lF,KAAK2lF,sBAAsBp1E,cAC3BvQ,KAAK2lF,sBAAwB,MAG3B3lF,KAAK4lF,6BACP5lF,KAAK4lF,2BAA2Br1E,cAChCvQ,KAAK4lF,2BAA6B,MAGhC5lF,KAAK6zE,0BACP7zE,KAAK6zE,wBAAwBtjE,cAC7BvQ,KAAK6zE,wBAA0B,OAK3BF,EAAV5vE,UAAA0hF,wBAAE,WAAA,GAAF9hF,GAAA3D,IACIA,MAAK4lF,2BAA6B5lF,KAAK6lF,qBAAqBvhF,UAAS,SAACsN,GACpEA,EAAM6Y,OAAOpJ,SACT1d,EAAK07C,gBAAgBa,OAAOtuC,EAAM6Y,QAClC9mB,EAAK07C,gBAAgBe,SAASxuC,EAAM6Y,QAGnC9mB,EAAKg8C,UACRh8C,EAAKswE,MAAM7pE,QAAO,SAAC2pE,IACZpwE,EAAK07C,gBAAgB2E,WAAW+vB,IAASA,EAAK1yD,UACjD0yD,EAAK3zB,aAKPxuC,EAAMiyC,aACRlgD,EAAKsgD,uBAMH0vB,EAAV5vE,UAAAyhF,oBAAE,WAAA,GAAF7hF,GAAA3D,IACIA,MAAK0lF,uBAAyB1lF,KAAK8lF,iBAAiBxhF,UAAS,SAACsN,GAClE,GAAUoiE,GAAoBrwE,EAAKswE,MAAM98D,UAAU8Q,QAAQrW,EAAMmiE,KAEvDpwE,GAAKqT,cAAcg9D,IACrBrwE,EAAK4Q,YAAYC,sBAAsBw/D,GAEzCrwE,EAAKy7C,aAAatzC,SAGpB9L,KAAK2lF,sBAAwB3lF,KAAK+lF,gBAAgBzhF,UAAS,WACzDX,EAAK8xE,QACL9xE,EAAKy7C,aAAatzC;yBAId6nE,EAAV5vE,UAAA6vE,sBAAE,WAAA,GAAFjwE,GAAA3D,IACIA,MAAK6zE,wBAA0B7zE,KAAK8zE,kBAAkBxvE,UAAS,SAACsN,GACpE,GAAYmiE,GAAOniE,EAAMmiE,KACbC,EAAYrwE,EAAKswE,MAAM98D,UAAU8Q,QAAQrW,EAAMmiE,KAKjDpwE,GAAKqT,cAAcg9D,IAAcD,EAAK1jB,YACxC1sD,EAAKuwE,wBAA0BF,MAM7BL,EAAV5vE,UAAAowE,oBAAE,SAA4BviE,GAG1B,IAFJ,GAAQwiE,GAAiBxiE,EAAY,OAE1BwiE,GAAkBA,IAAmBp0E,KAAKG,YAAYuE,eAAe,CAC1E,GAAI0vE,EAAetvE,UAAUC,SAAS,YACpC,OAAO,CAGTqvE,GAAiBA,EAAeC,cAGlC,OAAO,GAIDV,EAAV5vE,UAAAuwE,gBAAE,WACE,MAAOt0E,MAAKi0E,MAAM/uE,KAAI,SAAC6uE,GAAQ,MAAAA,GAAK1jB,aAI9BsjB,EAAV5vE,UAAAwwE,gBAAE,WAAA,GAAF5wE,GAAA3D,IACQA,MAAKi0E,OACPj0E,KAAKi0E,MAAM7pE,QAAO,SAAC2pE,GACjBA,EAAK38D,SAAWzT,EAAK2iC,UACrBytC,EAAKS,kBAAoB7wE,EAAKg8C,2BA9tBtCr/C,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,gBACEkC,SAAU,qEACV9E,SAAU,cACVE,MACFi/B,kBAAyB,8BACnB0oB,0BAAN,2BACIJ,uBAAJ,sBACIpnD,uBAAJ,sBACIqnD,sBAAJ,aACIE,8BAAJ,WACIhhD,cAAJ,OACIotE,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClCloD,0BAAJ,kBACI7rB,MAAJ,gBACIirB,UAAJ,UACIC,SAAJ,UACIE,YAAJ,mBACI2T,OAAQ,QAEZr4B,YAAAC,QAAAqhD,GAAAphD,YAAAmsE,IACAnuE,QAAA,6uFACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FA9EAvF,KAAEsZ,EAAAA,eAAFvZ,aAAAC,KAAAe,EAAAA,aAJAf,KAAEwoD,EAAAA,OAAFzoD,aAAAC,KAAAe,EAAAA,aAPAf,KAAQyoD,EAAAA,mBAAR1oD,aAAAC,KAAAe,EAAAA,aAsBAf,KAA6DkiB,KAA7DliB,KAA8B2oD,EAAAA,UAA9B5oD,aAAAC,KAAAe,EAAAA,WAAAf,KAAA07C,EAAAA,UAAA23B,EAAkDhyE,6EA2IlD4nD,cAAAjpD,KAAAqH,EAAAA,QAGAkE,QAAAvL,KAAAqH,EAAAA,QAaAo4B,WAAAz/B,KAAAqH,EAAAA,QAeAk+C,cAAGvlD,KAAHqH,EAAAA,QAoBAyP,WAAA9W,KAAGqH,EAAAA,QAYHitE,kBAAAt0E,KAAAqH,EAAAA,MAAAnH,MAAA,sBAiCAq0E,aAAAv0E,KAAAqH,EAAAA,QASAX,WAAA1G,KAAAqH,EAAAA,QAMAwJ,SAAA7Q,KAAA+R,EAAAA,SAWAmb,cAAAltB,KAAA+R,EAAAA,SA2BA4hE,QAAA3zE,KAAA+H,EAAAA,gBAAA7H,MAAAs0E,wBAeAnB,OCpTI12C,GAAe,EAMnB83C,GAAA,WAmEE,QAAFA,GACc50E,EACiCqsC,GADjCxsC,KAAdG,YAAcA,EACiCH,KAA/CwsC,gBAA+CA,EApD7CxsC,KAAFg1E,SAAqB,EAkBnBh1E,KAAFi1E,YAAwB,EAQtBj1E,KAAFk1E,kBAA8Cl1E,KAAKwsC,gBAAgB0oC,kBAIjEl1E,KAAFm1E,QAA6C,GAAInkE,GAAAA,aAGtChR,KAAX6lD,YAAiC,GAGtB7lD,KAAXu2B,GAAwB,uBAAuB0G,KAMrCj9B,KAAVsmC,WAA+B,EAW3BtmC,KAAKw+B,cAAgBx+B,KAAKG,YAAyB,cAsEvD,MAvHEwL,QAAFC,eACMmpE,EADNhxE,UAAA,gBAAE,SACa8H,GACPA,IACF7L,KAAKo1E,UAAYvpE,EACjB7L,KAAKo1E,UAAUC,cAAcr1E,wCAOjC2L,OAAFC,eACMmpE,EADNhxE,UAAA,iBAAE,WAC2B,MAAO/D,MAAKi1E,gBACvC,SAAcppE,GAAkB7L,KAAKi1E,WAAal6D,EAAAA,sBAAsBlP,oCAsBxEF,OAAFC,eACMmpE,EADNhxE,UAAA,gBAAE,WAC0B,MAAO/D,MAAKsmC,WAActmC,KAAKo1E,WAAap1E,KAAKo1E,UAAUh+D,cACrF,SAAavL,GAAkB7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,oCAItEF,OAAFC,eAAMmpE,EAANhxE,UAAA,aAAE,WAAuB,OAAQ/D,KAAKw+B,cAAc3yB,uCAWlDkpE,EAAFhxE,UAAAoK,YAAE,WACEnO,KAAKo1E,UAAUh2B,aAAatzC,QAI9BipE,EAAFhxE,UAAA8nE,SAAE,SAASj6D,GAGHA,GAASA,EAAMwD,UAAYkgE,EAAAA,MAAQngE,EAAAA,eAAevD,EAAO,aAC3D5R,KAAKo1E,UAAUG,oBAGjBv1E,KAAKw1E,aAAa5jE,IAIpBmjE,EAAFhxE,UAAA0xE,MAAE,WACMz1E,KAAK01E,WACP11E,KAAKw1E,eAEPx1E,KAAKg1E,SAAU,EAEVh1E,KAAKo1E,UAAUJ,SAClBh1E,KAAKo1E,UAAUK,QAEjBz1E,KAAKo1E,UAAUh2B,aAAatzC,QAG9BipE,EAAFhxE,UAAA4xE,OAAE,WACE31E,KAAKg1E,SAAU,EACfh1E,KAAKo1E,UAAUh2B,aAAatzC,QAI9BipE,EAAFhxE,UAAAyxE,aAAE,SAAa5jE,IACN5R,KAAKw+B,cAAc3yB,OAAW+F,GACjC5R,KAAKo1E,UAAUvJ,SAASj6D,GAErBA,IAAS5R,KAAK41E,gBAAgBhkE,KACjC5R,KAAKm1E,QAAQtjE,MAAO0b,MAAOvtB,KAAKw+B,cAAe3yB,MAAO7L,KAAKw+B,cAAc3yB,QAErE+F,GACFA,EAAM2D,mBAKZw/D,EAAFhxE,UAAA2jE,SAAE,WAEE1nE,KAAKo1E,UAAUh2B,aAAatzC,QAI9BipE,EAAFhxE,UAAA2O,MAAE,WACE1S,KAAKw+B,cAAc9rB,SAIbqiE,EAAVhxE,UAAA6xE,gBAAE,SAAwBhkE,GACtB,GAAIuD,EAAAA,eAAevD,GACjB,OAAO,CAGb,IAAUikE,GAAa71E,KAAKk1E,kBAClB9/D,EAAUxD,EAAMwD,OACtB,OAAO5Q,OAAMuF,QAAQ8rE,GAAcA,EAAW5tD,QAAQ7S,IAAY,EAAIygE,EAAWp/C,IAAIrhB,mBA1IzF9U,KAACC,EAAAA,UAADC,OACE6C,SAAU,yBACV5C,SAAU,gCACVE,MACEC,MAAS,mCACTorB,YAAa,mBACbF,SAAU,UACVD,UAAW,WACXs8C,UAAW,aACXxoC,OAAQ,KACRiuB,kBAAmB,mBACnBkoB,qBAAsB,sBACtB3tB,sBAAuB,iHAnC3B7nD,KAAmBmH,EAAAA,aA4FnBnH,SAAAc,GAAAf,aAAAC,KAAKgB,EAAAA,OAALd,MAAYu1E,2BAhDZC,WAAA11E,KAAGqH,EAAAA,MAAHnH,MAAS,qBAWTk1E,YAAAp1E,KAAGqH,EAAAA,MAAHnH,MAAS,2BAUT00E,oBAAA50E,KAAGqH,EAAAA,MAAHnH,MAAS,mCAIT20E,UAAA70E,KAAG+R,EAAAA,OAAH7R,MAAU,0BAIVqlD,cAAAvlD,KAAGqH,EAAAA,QAGH4uB,KAAAj2B,KAAGqH,EAAAA,QAGHyP,WAAA9W,KAAGqH,EAAAA,SAoFHotE,KC5JMkB,IACJtC,GACAmB,GACAC,GACAmB,GACAC,GACAC,IAUFC,IACQnB,mBAAoBx/D,EAAAA,QAR5B4gE,GAAA,WAAA,QAAAA,MAa6B,sBAb7Bh2E,KAACuB,EAAAA,SAADrB,OACE6B,QAAS4zE,GACTtzE,aAAcszE,GACd3uE,WACEkb,IAEEjb,QAASwuE,GACT3K,SAAQ,SAMdkL,mBCLA,QAAAC,KAcEv2E,KAAFiH,KAAsB,SAGpBjH,KAAFqxB,WAAmC,GAGjCrxB,KAAF+4C,aAA0B,EAGxB/4C,KAAFs6C,cAA2B,GAGzBt6C,KAAF66B,cAA2B,EAGzB76B,KAAFqN,MAAmB,GAGjBrN,KAAFyc,OAAoB,GASlBzc,KAAFw2E,SAA+B,OAS7Bx2E,KAAF8H,KAAoB,KAMlB9H,KAAFy2E,gBAAoC,KAGlCz2E,KAAF02E,eAAmC,KAGjC12E,KAAF4O,UAA8B,KAG5B5O,KAAF0pC,WAAwB,EAMtB1pC,KAAF83C,cAA2B,EAUzB93C,KAAF22E,mBAAgC,EAGhC,MAAAJ,MCrGMK,IAIJ3nE,EAAAA,MAAM,aAAcrC,EAAAA,OAAOujB,QAAS,EAAGjhB,UAAW,gBAClDD,EAAAA,MAAM,QAASrC,EAAAA,OAAOsC,UAAW,UACjCE,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,mCAC7BzC,EAAAA,OAAOsC,UAAW,OAAQihB,QAAS,MACvC/gB,EAAAA,WAAW,uBACPC,EAAAA,QAAQ,sCAAuCzC,EAAAA,OAAOujB,QAAS,OAOxD0mD,IAKXC,gBAAiB9nE,EAAAA,QAAQ,kBAAmB4nE,IAG5CG,YAAa/nE,EAAAA,QAAQ,cAAe4nE,KCQtCI,GAAA,SAAAzzE,GA8CE,QAAFyzE,GACY72E,EACA0oC,EACAx1B,EAC8BxP,EAE/BmvB,GANT,GAAFrvB,GAQIJ,EARJK,KAAA5D,OAAAA,WACY2D,GAAZxD,YAAYA,EACAwD,EAAZklC,kBAAYA,EACAllC,EAAZ0P,mBAAYA,EAC8B1P,EAA1CE,UAA0CA,EAE/BF,EAAXqvB,QAAWA,EApBDrvB,EAAVszE,qCAAqE,KAGnEtzE,EAAFuzE,OAAsC,QAGpCvzE,EAAFwzE,uBAA2B,GAAInmE,GAAAA,aAiB3BrN,EAAKyzE,gBAAkBpkD,EAAQ0jD,gBAAkB,OA7BrD,MAFwC5yE,GAAxCkzE,EAAAzzE,GAsCEyzE,EAAFjzE,UAAAysB,sBAAE,SAAyBC,GAMvB,MALIzwB,MAAK4wB,cAAc1gB,eACrBmnE,IAGFr3E,KAAKs3E,gCACEt3E,KAAK4wB,cAAcJ,sBAAsBC,IAOlDumD,EAAFjzE,UAAA8sB,qBAAE,SAAwBJ,GAMtB,MALIzwB,MAAK4wB,cAAc1gB,eACrBmnE,IAGFr3E,KAAKs3E,gCACEt3E,KAAK4wB,cAAcC,qBAAqBJ,IAIzCumD,EAAVjzE,UAAAslC,WAAE,WACOrpC,KAAKopC,aACRppC,KAAKopC,WAAappC,KAAK6oC,kBAAkBtT,OAAOv1B,KAAKG,YAAYuE,gBAM/D1E,KAAKgzB,QAAQ0W,WACf1pC,KAAKopC,WAAWO,gCAKZqtC,EAAVjzE,UAAAulC,cAAE,WACF,GAAUiuC,GAAUv3E,KAAKi3E,oCAGjBj3E,MAAKgzB,QAAQ8kB,cAAgBy/B,GAAoC,kBAAlBA,GAAQ7kE,OACzD6kE,EAAQ7kE,QAGN1S,KAAKopC,YACPppC,KAAKopC,WAAWe,WAKZ6sC,EAAVjzE,UAAAuzE,8BAAE,WAAA,GAAF3zE,GAAA3D,IACQA,MAAK6D,YACP7D,KAAKi3E,qCAAuCj3E,KAAK6D,UAAuB,cAGpE7D,KAAKG,YAAYuE,cAAcgO,OAIjCgJ,QAAQC,UAAUC,KAAI,WAAO,MAAAjY,GAAKxD,YAAYuE,cAAcgO,YAMlEskE,EAAFjzE,UAAAsrD,iBAAE,SAAiBz9C,GACO,UAAlBA,EAAMD,QACR3R,KAAKqpC,aACsB,SAAlBz3B,EAAMD,SACf3R,KAAKspC,gBAGPtpC,KAAKm3E,uBAAuBtlE,KAAKD,IAInColE,EAAFjzE,UAAAurD,kBAAE,SAAkB19C,GAChB5R,KAAKm3E,uBAAuBtlE,KAAKD,IAInColE,EAAFjzE,UAAAyzE,oBAAE,WACEx3E,KAAKk3E,OAAS,OAIdl3E,KAAKqT,mBAAmB/B,+BArJ5BhR,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,uBACEkC,SAAU,8CACVC,QAAF,ioCACEM,cAAFC,EAAAA,kBAAAC,uFAKErF,MACFC,MAAe,uBACT+oD,SAAN,KACI8tB,aAAJ,OACI1vB,YAAJ,MACI1gD,cAAJ,eACI4gD,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACIovB,qBAAJ,SACIC,2BAAJ,4BACIC,0BAAJ,kHAxDAt3E,KAAE8R,EAAAA,oBAmBF9R,SAAmBc,GAAnBf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAyF,EAAAA,cAdA3F,KAAEi2E,MAeFS,EAAAr1E,yFA2CAq1E,uBCtDI9M,GAAW,gBAwBb,QAAF2N,GACY9pD,EACD+pD,EAEP7Z,EACS1nC,GALX,GAAF5yB,GAAA3D,SAKA,KAAAu2B,IAAaA,EAAb,cAAwC2zC,MAJ5BlqE,KAAZ+tB,YAAYA,EACD/tB,KAAX83E,mBAAWA,EAGE93E,KAAbu2B,GAAaA,EAnBXv2B,KAAF66B,aAAsC76B,KAAK83E,mBAAmB9kD,QAAQ6H,aAGnD76B,KAAnBiuB,aAAkC,GAAIlgB,GAAAA,QAGnB/N,KAAnB+3E,aAAkC,GAAIhqE,GAAAA,QAGnB/N,KAAnBg4E,cAAmC,GAAIjqE,GAAAA,QAanC+pE,EAAmBr4B,IAAMlpB,EAGzBuhD,EAAmBX,uBAAuBltE,KACxCrF,EAAAA,OAAM,SAACgN,GAAS,MAAoB,SAApBA,EAAMqmE,WAA0C,UAAlBrmE,EAAMD,UACpDzH,EAAAA,KAAK,IAEN5F,UAAS,WACRX,EAAKsqB,aAAaniB,OAClBnI,EAAKsqB,aAAa5f,aAIpBypE,EAAmBX,uBAAuBltE,KACxCrF,EAAAA,OAAM,SAACgN,GAAS,MAAoB,SAApBA,EAAMqmE,WAA0C,SAAlBrmE,EAAMD,UACpDzH,EAAAA,KAAK,IACL5F,UAAS,WAAO,MAAAX,GAAKoqB,YAAYmB,YAEnCnB,EAAYuG,cAAchwB,UAAS,WACjCX,EAAKq0E,cAAclsE,KAAKnI,EAAKu0E,SAC7Bv0E,EAAKq0E,cAAc3pE,WACnB1K,EAAKo0E,aAAajsE,KAAKnI,EAAKu0E,SAC5Bv0E,EAAKo0E,aAAa1pE,WAClB1K,EAAK8gE,kBAAiB,KACtB9gE,EAAKoqB,YAAYmB,YAGnBnB,EAAYqsB,gBACTnwC,KAAKrF,EAAAA,OAAM,SAACgN,GACX,MAAOA,GAAMwD,UAAY45B,EAAAA,SAAWrrC,EAAKk3B,eAAiB1lB,EAAAA,eAAevD,MAE1EtN,UAAS,SAACsN,GACTA,EAAM2D,iBACN5R,EAAKk2B,UAiIb,MAzHEg+C,GAAF9zE,UAAA81B,MAAE,SAAMs+C,GAAN,GAAFx0E,GAAA3D,IACIA,MAAKk4E,QAAUC,EAGfn4E,KAAK83E,mBAAmBX,uBAAuBltE,KAC7CrF,EAAAA,OAAM,SAACgN,GAAS,MAAoB,UAApBA,EAAMqmE,YACtB/tE,EAAAA,KAAK,IAEN5F,UAAS,WACRX,EAAKq0E,cAAclsE,KAAKqsE,GACxBx0E,EAAKq0E,cAAc3pE,WACnB1K,EAAKoqB,YAAYqqD,mBAGnBp4E,KAAK83E,mBAAmBN,uBAM1BK,EAAF9zE,UAAAurB,YAAE,WACE,MAAOtvB,MAAKiuB,aAAaoB,gBAM3BwoD,EAAF9zE,UAAAqgE,YAAE,WACE,MAAOpkE,MAAK+3E,aAAa1oD,gBAM3BwoD,EAAF9zE,UAAAs0E,aAAE,WACE,MAAOr4E,MAAKg4E,cAAc3oD,gBAM5BwoD,EAAF9zE,UAAA42B,cAAE,WACE,MAAO36B,MAAK+tB,YAAY4M,iBAM1Bk9C,EAAF9zE,UAAAq2C,cAAE,WACE,MAAOp6C,MAAK+tB,YAAYqsB,iBAO1By9B,EAAF9zE,UAAAypC,eAAE,SAAex/B,GACjB,GAAQqhC,GAAW,KAAKipC,sBAgBpB,OAdItqE,KAAaA,EAASZ,MAAQY,EAASmnB,OACzCnnB,EAASZ,KAAOiiC,EAASjiC,KAAKY,EAASZ,MAAQiiC,EAASla,MAAMnnB,EAASmnB,OAEvEka,EAASja,qBAGPpnB,IAAaA,EAASqnB,KAAOrnB,EAASsnB,QACxCtnB,EAASqnB,IAAMga,EAASha,IAAIrnB,EAASqnB,KAAOga,EAAS/Z,OAAOtnB,EAASsnB,QAErE+Z,EAASkpC,mBAGX,KAAKxqD,YAAYyf,iBAEjB,MAQFqqC,EAAF9zE,UAAAy0E,WAAE,SAAWnrE,EAAoBoP,GAG7B,WAHJ,KAAApP,IAAaA,EAAb,QAAA,KAAAoP,IAAiCA,EAAjC,IACI,KAAK67D,uBAAuBjrE,MAAMA,GAAOoP,OAAOA,GAChD,KAAKsR,YAAYyf,iBACjB,MAIFqqC,EAAF9zE,UAAA00E,cAAE,SAAc/pB,GAEZ,MADA,MAAK3gC,YAAY0qD,cAAc/pB,GAC/B,MAIFmpB,EAAF9zE,UAAA20E,iBAAE,SAAiBhqB,GAEf,MADA,MAAK3gC,YAAY2qD,iBAAiBhqB,GAClC,MAQFmpB,EAAF9zE,UAAA40E,UAAE,WACE,MAAO34E,MAAKsvB,eAQduoD,EAAF9zE,UAAA60E,YAAE,WACE,MAAO54E,MAAKq4E,gBAINR,EAAV9zE,UAAAu0E,qBAAE,WACE,MAAOt4E,MAAK+tB,YAAY+hB,YAA4B,kBAExD+nC,KClLagB,GAAkB,GAAI7+D,GAAAA,eAAoB,iBAG1C8+D,GACT,GAAI9+D,GAAAA,eAAgC,8BAG3B++D,GACT,GAAI/+D,GAAAA,eAAqC,8BAchCg/D,IACXzxE,QAASwxE,GACT34D,MAAOoV,EAAAA,SACPlV,WAAY24D,GAOdvU,GAAA,WAyCE,QAAFA,GACc1yC,EACAE,EACY+rC,EACoCzxB,EACpBD,EACJ2sC,EACxBC,GAPZ,GAAFx1E,GAAA3D,IACcA,MAAdgyB,SAAcA,EACAhyB,KAAdkyB,UAAcA,EACYlyB,KAA1Bi+D,UAA0BA,EACoCj+D,KAA9DwsC,gBAA8DA,EAExBxsC,KAAtCk5E,cAAsCA,EACxBl5E,KAAdm5E,kBAAcA,EA9CJn5E,KAAVo5E,2BACmBp5E,KAAnBq5E,2BAAgD,GAAItrE,GAAAA,QACjC/N,KAAnBs5E,wBAA6C,GAAIvrE,GAAAA,QACvC/N,KAAVu5E,oBAAgC,GAAIvjD,KAgCzBh2B,KAAXw5E,eAA8C96B,EAAAA,MAAK,WAAO,MAAA/6C,GAAK81E,YAAYl1E,OACrEZ,EAAK+1E,gBACL/1E,EAAK+1E,gBAAgBzvE,KAAK6F,EAAAA,cAAU1O,OAUtCpB,KAAK8sC,gBAAkBP,EAuQ3B,MA/SE5gC,QAAFC,eAAM84D,EAAN3gE,UAAA,mBAAE,WACE,MAAO/D,MAAKk5E,cAAgBl5E,KAAKk5E,cAAcO,YAAcz5E,KAAKo5E,yDAIpEztE,OAAFC,eAAM84D,EAAN3gE,UAAA,mBAAE,WACE,MAAO/D,MAAKk5E,cAAgBl5E,KAAKk5E,cAAc5pD,YAActvB,KAAKs5E,yDAQpE3tE,OAAFC,eAAM84D,EAAN3gE,UAAA,iBAAE,WACE,MAAO/D,MAAKsvB,6CAGd3jB,OAAFC,eAAM84D,EAAN3gE,UAAA,uBAAE,WACF,GAAUwuB,GAASvyB,KAAKk5E,aACpB,OAAO3mD,GAASA,EAAOmnD,gBAAkB15E,KAAKq5E,4DA8BhD3U,EAAF3gE,UAAA+uB,KAAE,SAA0B6mD,EAClBhnD,GADR,GAAFhvB,GAAA3D,IAKI,IAFA2yB,EAASinD,EAAqBjnD,EAAQ3yB,KAAKwsC,iBAAmB,GAAI+pC,KAE9D5jD,EAAO4D,IAAMv2B,KAAK65E,cAAclnD,EAAO4D,IACzC,KAAMhF,OAAM,mBAAmBoB,EAAO4D,GAA5C,kDAGA,IAAUpD,GAAanzB,KAAK8zB,eAAenB,GACjCmkD,EAAkB92E,KAAK85E,uBAAuB3mD,EAAYR,GAC1DonD,EAAY/5E,KAAKg6E,qBAA2BL,EACA7C,EACA3jD,EACAR,EAWlD,OARK3yB,MAAKy5E,YAAYl1E,QACpBvE,KAAKi6E,+CAGPj6E,KAAKy5E,YAAY5vE,KAAKkwE,GACtBA,EAAU3V,cAAc9/D,UAAS,WAAO,MAAAX,GAAKu2E,kBAAkBH,KAC/D/5E,KAAKsvB,YAAYxjB,KAAKiuE,GAEfA,GAMTrV,EAAF3gE,UAAAo2E,SAAE,WACEn6E,KAAKo6E,cAAcp6E,KAAKy5E,cAO1B/U,EAAF3gE,UAAA81E,cAAE,SAActjD,GACZ,MAAOv2B,MAAKy5E,YAAY97D,KAAI,SAAC08D,GAAU,MAAAA,GAAO9jD,KAAOA,KAGvDmuC,EAAF3gE,UAAAmE,YAAE,WAGElI,KAAKo6E,cAAcp6E,KAAKo5E,yBACxBp5E,KAAKq5E,2BAA2BhrE,WAChCrO,KAAKs5E,wBAAwBjrE,YAQvBq2D,EAAV3gE,UAAA+vB,eAAE,SAAuBnB,GACzB,GAAUiC,GAAgB50B,KAAKk6C,kBAAkBvnB,EAC7C,OAAO3yB,MAAKgyB,SAASuD,OAAOX,IAQtB8vC,EAAV3gE,UAAAm2C,kBAAE,SAA0BogC,GAC5B,GAAUrrE,GAAQ,GAAI4lB,GAAAA,eAChBC,iBAAkB90B,KAAKgyB,SAAShkB,WAAW+mB,SAC3CwX,eAAgB+tC,EAAa/tC,gBAAkBvsC,KAAK8sC,kBACpDzb,WAAYipD,EAAajpD,WACzB0nB,YAAauhC,EAAavhC,YAC1B5gC,UAAWmiE,EAAaniE,UACxBqkC,SAAU89B,EAAa99B,SACvBrtC,UAAWmrE,EAAanrE,UACxBqnE,SAAU8D,EAAa9D,SACvB+D,UAAWD,EAAaC,UACxBC,oBAAqBF,EAAa3D,mBAOpC,OAJI2D,GAAahgC,gBACfrrC,EAAMqrC,cAAgBggC,EAAahgC,eAG9BrrC,GASDy1D,EAAV3gE,UAAA+1E,uBAAE,SAA+B9pC,EAAqBrd,GACtD,GAAUS,GAAeT,GAAUA,EAAOpjB,kBAAoBojB,EAAOpjB,iBAAiB8jB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBpzB,KAAKkyB,UAAW,GAAIqB,WACrEgjD,GAAiB5jD,MAEda,EACF,GAAIC,GAAAA,gBAAgBujD,GAAoBrkD,EAAOpjB,iBAAkB8jB,EAGrE,OAFqB2c,GAAQ7/B,OAA2BqjB,GAEpCG,UAYd+wC,EAAV3gE,UAAAi2E,qBAAE,SACIL,EACA7C,EACA3jD,EACAR,GAIN,GAAUonD,GACF,GAAIlC,IAAmB1kD,EAAY2jD,EAAiB92E,KAAKi+D,UAAWtrC,EAAO4D,GAW/E,IARI5D,EAAOomB,aACT5lB,EAAWwH,gBAAgBr2B,UAAS,WAC7By1E,EAAUl/C,cACbk/C,EAAUlgD,UAKZ8/C,YAAkCpsE,GAAAA,YACpCupE,EAAgBjmD,qBACd,GAAItiB,GAAAA,eAAkBorE,EAAsB,MACnC3lD,UAAWrB,EAAO7qB,KAAMiyE,UAFzCA,SAGW,CACX,GAAY1mD,GAAWrzB,KAAKi0B,gBAAmBtB,EAAQonD,EAAWjD,GACtD5iD,EAAa4iD,EAAgBtmD,sBAC/B,GAAIiD,GAAAA,gBAAgBkmD,MAAwBv4E,GAAWiyB,GAC3D0mD,GAAUtV,kBAAoBvwC,EAAWP,SAO3C,MAJAomD,GACGvB,WAAW7lD,EAAOtlB,MAAOslB,EAAOlW,QAChC+wB,eAAe7a,EAAO3kB,UAElB+rE,GAWDrV,EAAV3gE,UAAAkwB,gBAAE,SACItB,EACAonD,EACAjD,GAEN,GAAU1jD,GAAeT,GAAUA,EAAOpjB,kBAAoBojB,EAAOpjB,iBAAiB8jB,SAM5EonD,EAAkB,GAAIlnD,WACzByjD,GAAoBF,IACpB+B,GAAiBlmD,EAAO7qB,OACxB+vE,GAAckC,IAWjB,QARIpnD,EAAOxa,WACLib,GAAiBA,EAAa5U,IAA2B5E,EAAAA,eAAgB,OAC7E6gE,EAAgB9jD,IAAI/c,EAAAA,gBAClB/N,MAAO8mB,EAAOxa,UACdhH,OAAQ4E,EAAAA,OAIL,GAAIud,GAAAA,eAAeF,GAAgBpzB,KAAKkyB,UAAWuoD,IAOpD/V,EAAV3gE,UAAAm2E,kBAAE,SAA0BH,GAC5B,GAAUzvE,GAAQtK,KAAKy5E,YAAYxxD,QAAQ8xD,EAEnCzvE,IAAS,IACXtK,KAAKy5E,YAAYlwD,OAAOjf,EAAO,GAI1BtK,KAAKy5E,YAAYl1E,SACpBvE,KAAKu5E,oBAAoBnvE,QAAO,SAAEy0D,EAAe7xD,GAC3C6xD,EACF7xD,EAAQ+3B,aAAa,cAAe85B,GAEpC7xD,EAAQqvD,gBAAgB,iBAI5Br8D,KAAKu5E,oBAAoB7kD,QACzB10B,KAAK05E,gBAAgB5tE,UAQnB44D,EAAV3gE,UAAAk2E,6CAAE,WACF,GAAUS,GAAmB16E,KAAKm5E,kBAAkBwB,qBAGhD,IAAID,EAAiBrG,cAGnB,IAAK,GAFCuG,GAAWF,EAAiBrG,cAAclqE,SAEvCc,EAAI2vE,EAASr2E,OAAS,EAAG0G,GAAK,EAAGA,IAAK,CACrD,GAAY4vE,GAAUD,EAAS3vE,EAEnB4vE,KAAYH,GACO,WAArBG,EAAQ7sC,UACa,UAArB6sC,EAAQ7sC,UACP6sC,EAAQC,aAAa,eAEtB96E,KAAKu5E,oBAAoB5iD,IAAIkkD,EAASA,EAAQta,aAAa,gBAC3Dsa,EAAQ91C,aAAa,cAAe,WAOpC2/B,EAAV3gE,UAAAq2E,cAAE,SAAsBW,GAGpB,IAFJ,GAAQ9vE,GAAI8vE,EAAQx2E,OAET0G,KAKL8vE,EAAQ9vE,GAAG4uB,wBApTjBv5B,KAAC2f,EAAAA,iDA1DD3f,KAAEk1B,EAAAA,UAYFl1B,KAAEo1B,EAAAA,WALFp1B,KAAQ06E,EAAAA,SAAR36E,aAAAC,KA+FOe,EAAAA,aAlFPf,KAAQi2E,GAARl2E,aAAAC,KAmFOe,EAAAA,WAnFPf,KAmFmBgB,EAAAA,OAnFnBd,MAmF0Bs4E,QAC1Bx4E,SAAAc,GAAAf,aAAAC,KAAOgB,EAAAA,OAAPd,MAAcu4E,QACdz4E,KAAqDokE,EAArDrkE,aAAAC,KAAOe,EAAAA,WAAPf,KAAmB+f,EAAAA,aAvGnB/f,KAAE26E,EAAAA,oBAgXFvW,KCvWIwW,GAAmB,EAKvBC,GAAA,WAkBE,QAAFA,GACuBpB,EACX55E,EACAyiE,GAFW5iE,KAAvB+5E,UAAuBA,EACX/5E,KAAZG,YAAYA,EACAH,KAAZ4iE,QAAYA,EAoBZ,MAlBEuY,GAAFp3E,UAAAuK,SAAE,WACOtO,KAAK+5E,YAMR/5E,KAAK+5E,UAAYqB,GAAiBp7E,KAAKG,YAAaH,KAAK4iE,QAAQ6W,eAIrE0B,EAAFp3E,UAAAoK,YAAE,SAAY9J,GACd,GAAUg3E,GAAgBh3E,EAAyB,iBAAKA,EAA+B,qBAE/Eg3E,KACFr7E,KAAKm4E,aAAekD,EAAcv4B,8BAtCxCxiD,KAACC,EAAAA,UAADC,OACE6C,SAAU,mDACV5C,SAAU,iBACVE,MACE+d,UAAW,gCACXspC,oBAAqB,oBACrB1nD,KAAQ,kDAdZA,KAAQu3E,GAARx3E,aAAAC,KA2BKe,EAAAA,aA9BLf,KAAEmH,EAAAA,aAEFnH,KAAQokE,wBAoBR91D,YAAAtO,KAAGqH,EAAAA,MAAHnH,MAAS,gBAGT23E,eAAA73E,KAAGqH,EAAAA,MAAHnH,MAAS,sBAET86E,kBAAAh7E,KAAGqH,EAAAA,MAAHnH,MAAS,qBAyBT26E,KAKAI,GAAA,WAWE,QAAFA,GACwBvX,EACZ7jE,EACAyiE,GAFY5iE,KAAxBgkE,WAAwBA,EACZhkE,KAAZG,YAAYA,EACAH,KAAZ4iE,QAAYA,EALD5iE,KAAXu2B,GAAgB,oBAAoB2kD,KAsBpC,MAfEK,GAAFx3E,UAAAuK,SAAE,WAAA,GAAF3K,GAAA3D,IACSA,MAAKgkE,aACRhkE,KAAKgkE,WAAaoX,GAAiBp7E,KAAKG,YAAaH,KAAK4iE,QAAQ6W,cAGhEz5E,KAAKgkE,YACPtoD,QAAQC,UAAUC,KAAI,WAC5B,GAAcmY,GAAYpwB,EAAKqgE,WAAW8T,kBAE9B/jD,KAAcA,EAAUqjD,kBAC1BrjD,EAAUqjD,gBAAkBzzE,EAAK4yB,sBA1B3Cj2B,KAACC,EAAAA,UAADC,OACE6C,SAAU,uCACV5C,SAAU,iBACVE,MACEC,MAAS,mBACT++B,OAAQ,8CA3DZr/B,KAAQu3E,GAARx3E,aAAAC,KAkEKe,EAAAA,aArELf,KAAEmH,EAAAA,aAEFnH,KAAQokE,wBAgERnuC,KAAAj2B,KAAGqH,EAAAA,SAsBH4zE,KAMAC,GAAA,WAAA,QAAAA,MAI+B,sBAJ/Bl7E,KAACC,EAAAA,UAADC,OACE6C,SAAU,+DACV1C,MAAOC,MAAS,0BAElB46E,KAOAC,GAAA,WAAA,QAAAA,MAI+B,sBAJ/Bn7E,KAACC,EAAAA,UAADC,OACE6C,SAAU,+DACV1C,MAAOC,MAAS,0BAElB66E,KCrGAvS,GAAA,WAAA,QAAAA,MA4B8B,sBA5B9B5oE,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACA4vB,EAAAA,cACA1vB,EAAAA,aACAD,IAEFK,SACE20E,GACAmE,GACAI,GACAC,GACAC,GACAz5E,IAEFW,cACEq0E,GACAmE,GACAI,GACAE,GACAD,IAEFl0E,WACEo9D,GACAsU,IAEFpnD,iBAAkBolD,QAEpB9N,KCnCAwS,GAAA,SAAAn4E,GAAA,QAAAm4E,oDA4BA,MAhByC53E,GAAzC43E,EAAAn4E,GACEoI,OAAFC,eACM8vE,EADN33E,UAAA,0BAAE,WACmC,MAAO/D,MAAK27E,aAC/C,SAAuB9vE,GAAiB7L,KAAK27E,QAAU9vE,mCAEvDF,OAAFC,eACM8vE,EADN33E,UAAA,0BAAE,WACmC,MAAO/D,MAAK47E,aAC/C,SAAuB/vE,GAAiB7L,KAAK47E,QAAU/vE,mCAEvDF,OAAFC,eACM8vE,EADN33E,UAAA,mBAAE,WAC6B,MAAO/D,MAAKiqC,aACzC,SAAgBp+B,GAAkB7L,KAAKiqC,QAAUp+B,mCAEjDF,OAAFC,eACM8vE,EADN33E,UAAA,2BAAE,WACqC,MAAO/D,MAAKiqC,aACjD,SAAwBp+B,GAAkB7L,KAAKiqC,QAAUp+B,kDA3B3DvL,KAACC,EAAAA,UAADC,OACE6C,SAAU,wDACV5C,SAAU,sBACVC,QAAS,qBAAsB,sBAC/BC,MACEC,MAAS,qCAGTi7E,KAAQ,IACR1T,UAAW,6CAIf2T,qBAAAx7E,KAAGqH,EAAAA,QAIHo0E,qBAAAz7E,KAAGqH,EAAAA,QAIHq0E,cAAA17E,KAAGqH,EAAAA,MAAHnH,MAAS,kBAITy7E,sBAAA37E,KAAGqH,EAAAA,SAGH+zE,GAhByCQ,EAAAA,qBCX5BnU,GACT,GAAI/tD,GAAAA,eAA6B,4BCoB/BmiE,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGEl/C,GAAe,gBAKjB,QAAFm/C,GAAqBr/B,EACAC,EACAC,EAEAC,GAJAl9C,KAArB+8C,0BAAqBA,EACA/8C,KAArBg9C,YAAqBA,EACAh9C,KAArBi9C,iBAAqBA,EAEAj9C,KAArBk9C,UAAqBA,EACrB,MAAAk/B,MACMC,GACFj/B,EAAgBg/B,IAGpBE,GAAA,SAAA/4E,GA8JE,QAAF+4E,GACcn8E,EACAsD,EAEiBy5C,EACfF,EACAC,EACZF,EACsDw/B,EAC9CC,EACRv+D,GAVF,GAAFta,GAYIJ,EAZJK,KAAA5D,KAYU+8C,EAA2BC,EAAaC,EAAkBC,IAZpEl9C,IACc2D,GAAdxD,YAAcA,EACAwD,EAAdF,UAAcA,EAEiBE,EAA/Bu5C,UAA+BA,EAKnBv5C,EAAZ64E,iBAAYA,EA3IA74E,EAAZm6C,KAAmB,aAAa7gB,KAO9Bt5B,EAAF84E,WAAc,EAGZ94E,EAAF+4E,iBAAoB,EAMlB/4E,EAAFqxE,SAAqB,EAMVrxE,EAAXy7C,aAAyC,GAAIrxC,GAAAA,QAM3CpK,EAAF66C,YAAwB,YAMtB76C,EAAFg5E,YAAe,EAuBHh5E,EAAZ2iC,WAAwB,EAwBZ3iC,EAAZq6B,WAAwB,EAgBZr6B,EAAZi5E,MAAoB,OAsBVj5E,EAAVk5E,WAAsB,EAEVl5E,EAAZm5E,uBACI,OACA,WACA,iBACA,QACA,OACA,QACAl4E,OAAM,SAACm4E,GAAK,MAAAC,GAAAA,yBAAyBvmD,IAAIsmD,IAgB7C,IAAU/vE,GAAUrJ,EAAKxD,YAAYuE,oBAIjCf,GAAKs5E,oBAAsBV,GAAsBvvE,EAEjDrJ,EAAKu5E,qBAAuBv5E,EAAKkI,MAGjClI,EAAK4yB,GAAK5yB,EAAK4yB,GAKX9yB,EAAUypC,KACZjvB,EAAO/J,kBAAiB,WACtB/T,EAAYuE,cAAc2oC,iBAAiB,QAAO,SAAGz7B,GAC7D,GAAcurE,GAAKvrE,EAAY,MAChBurE,GAAGtxE,OAAUsxE,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhC35E,EAAK84E,WAAa94E,EAAKF,UAAUS,UACjCP,EAAK+4E,gBAAqD,WAAnC1vE,EAAQghC,SAASjmB,cAEpCpkB,EAAK+4E,kBACP/4E,EAAK66C,YAAc,EAA+BmB,SAAW,6BACA,uBAkJnE,MAvU8B77C,GAA9Bw4E,EAAA/4E,GA0CEoI,OAAFC,eACM0wE,EADNv4E,UAAA,gBAAE,WAEE,MAAI/D,MAAKk9C,WAAyC,OAA5Bl9C,KAAKk9C,UAAU9lC,SAC5BpX,KAAKk9C,UAAU9lC,SAEjBpX,KAAKsmC,eAEd,SAAaz6B,GACX7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,GAInC7L,KAAKg1E,UACPh1E,KAAKg1E,SAAU,EACfh1E,KAAKo/C,aAAatzC,yCAStBH,OAAFC,eACM0wE,EADNv4E,UAAA,UAAE,WACmB,MAAO/D,MAAKy/C,SAC/B,SAAO5zC,GAAiB7L,KAAKy/C,IAAM5zC,GAAS7L,KAAK89C,sCAajDnyC,OAAFC,eACM0wE,EADNv4E,UAAA,gBAAE,WAC0B,MAAO/D,MAAKg+B,eACtC,SAAanyB,GAAkB7L,KAAKg+B,UAAYjjB,EAAAA,sBAAsBlP,oCAItEF,OAAFC,eACM0wE,EADNv4E,UAAA,YAAE,WACqB,MAAO/D,MAAK48E,WACjC,SAAS/wE,GACP7L,KAAK48E,MAAQ/wE,GAAS,OACtB7L,KAAKu9E,iBAKAv9E,KAAKw9E,eAAiBR,EAAAA,yBAAyBvmD,IAAIz2B,KAAK48E,SAC1D58E,KAAKG,YAAyB,cAAsBG,KAAON,KAAK48E,wCAYrEjxE,OAAFC,eACM0wE,EADNv4E,UAAA,aAAE,WACsB,MAAO/D,MAAKi9E,oBAAoBpxE,WACtD,SAAUA,GACJA,IAAU7L,KAAK6L,QACjB7L,KAAKi9E,oBAAoBpxE,MAAQA,EACjC7L,KAAKo/C,aAAatzC,yCAKtBH,OAAFC,eACM0wE,EADNv4E,UAAA,gBAAE,WAC0B,MAAO/D,MAAK68E,eACtC,SAAahxE,GAAkB7L,KAAK68E,UAAY9hE,EAAAA,sBAAsBlP,oCAiEtEywE,EAAFv4E,UAAAuK,SAAE,WAAA,GAAF3K,GAAA3D,IACQA,MAAKyD,UAAUS,WACjBlE,KAAKw8E,iBAAiBj+D,QAAQve,KAAKG,YAAYuE,eAAeJ,UAAS,SAACsN,GACtEjO,EAAKg5E,WAAa/qE,EAAM6rE,aACxB95E,EAAKy7C,aAAatzC,UAKxBwwE,EAAFv4E,UAAAoK,YAAE,WACEnO,KAAKo/C,aAAatzC,QAGpBwwE,EAAFv4E,UAAAmE,YAAE,WACElI,KAAKo/C,aAAa/wC,WAEdrO,KAAKyD,UAAUS,WACjBlE,KAAKw8E,iBAAiBt8E,eAAeF,KAAKG,YAAYuE,gBAI1D43E,EAAFv4E,UAAAq2B,UAAE,WACMp6B,KAAKk9C,WAIPl9C,KAAKsgD,mBAMPtgD,KAAK09E,0BAIPpB,EAAFv4E,UAAA2O,MAAE,WACE1S,KAAKG,YAAYuE,cAAcgO,SAIjC4pE,EAAFv4E,UAAAmY,cAAE,SAAcyhE,GACRA,IAAc39E,KAAKg1E,SAAah1E,KAAK49E,UAAaD,IACpD39E,KAAKg1E,QAAU2I,EACf39E,KAAKo/C,aAAatzC,SAItBwwE,EAAFv4E,UAAA2jE,SAAE,aAWU4U,EAAZv4E,UAAA25E,uBAAE,WACF,GAAUj3C,GAAWzmC,KAAKG,YAAYuE,cAAcmH,KAE5C7L,MAAKk9E,uBAAyBz2C,IAChCzmC,KAAKk9E,qBAAuBz2C,EAC5BzmC,KAAKo/C,aAAatzC,SAKZwwE,EAAZv4E,UAAAw5E,cAAE,WACE,GAAIpB,GAAwBl0D,QAAQjoB,KAAK48E,QAAU,EACjD,KAAMiB,IAAgC79E,KAAK48E,QAKrCN,EAAZv4E,UAAA+5E,cAAE,WACE,MAAO99E,MAAK88E,sBAAsB70D,QAAQjoB,KAAK48E,QAAU,GAIjDN,EAAZv4E,UAAAg6E,YAAE,WAEF,GAAQC,GAAYh+E,KAAKG,YAAyB,cAAsB69E,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZv4E,UAAAy5E,YAAE,WACE,MAAiE,aAA1Dx9E,KAAKG,YAAYuE,cAAcspC,SAASjmB,eAOjDpc,OAAFC,eAAM0wE,EAANv4E,UAAA,aAAE,WACE,QAAQ/D,KAAK89E,iBAAoB99E,KAAKG,YAAYuE,cAAcmH,OAAU7L,KAAK+9E,eAC1E/9E,KAAK28E,6CAOZhxE,OAAFC,eAAM0wE,EAANv4E,UAAA,wBAAE,WACE,GAAI/D,KAAK08E,gBAAiB,CAI9B,GAAYwB,GAAgBl+E,KAAKG,YAAyB,cAC9Cg+E,EAA6CD,EAAcv/B,QAAQ,EAIzE,OAAO3+C,MAAKg1E,SAAWkJ,EAAcv+B,WAAa3/C,KAAK6gD,UAC7Cq9B,EAAcllE,eAAiB,GAAKmlE,GAAeA,EAAYt9D,OAEzE,MAAO7gB,MAAKg1E,UAAYh1E,KAAK6gD,uCAQjCy7B,EAAFv4E,UAAA4jD,kBAAE,SAAkBC,GAChB5nD,KAAK6nD,iBAAmBD,EAAI3G,KAAK,MAOnCq7B,EAAFv4E,UAAA+jD,iBAAE,WAIO9nD,KAAKg1E,SACRh1E,KAAK0S,wBA9VXpS,KAACC,EAAAA,UAADC,OACE6C,SAAU,4HAEV5C,SAAU,WACVE,MAIEC,MAAS,oDACTw9E,2BAA4B,YAG5Br2B,YAAa,KACb+tB,qBAAsB,cACtB5N,aAAc,WACdmW,aAAc,WACdC,kBAAmB,uCACnBh2B,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBp8B,SAAU,uBACVD,UAAW,sBACXs8C,UAAW,cAEb7gE,YAAaC,QAASqhD,GAAqBphD,YAAa80E,4CA3E1Dh8E,KAAEmH,EAAAA,aALFnH,KAAgCa,EAAAA,WAehCb,KAA4B2oD,EAAAA,UAA5B5oD,aAAAC,KA2MKe,EAAAA,WA3MLf,KA2MiB07C,EAAAA,SA3MjB17C,KAAuCwoD,EAAAA,OAAvCzoD,aAAAC,KA4MKe,EAAAA,aA5MLf,KAAQyoD,EAAAA,mBAAR1oD,aAAAC,KA6MKe,EAAAA,aAzMLf,KAAEkiB,KA2MFliB,SAAAc,GAAAf,aAAAC,KAAKe,EAAAA,WAALf,KAAiB07C,EAAAA,OAAjB17C,KAAyBgB,EAAAA,OAAzBd,MAAgCunE,QA7NhCznE,KAAQi+E,EAAAA,kBAORj+E,KAAEY,EAAAA,4BAoHFkW,WAAA9W,KAAGqH,EAAAA,QAuBH4uB,KAAAj2B,KAAGqH,EAAAA,QASHk+C,cAAAvlD,KAAGqH,EAAAA,QAMHo4B,WAAAz/B,KAAGqH,EAAAA,QAMHrH,OAAAA,KAAGqH,EAAAA,QAgBHwjC,oBAAA7qC,KAAGqH,EAAAA,QAMHkE,QAAAvL,KAAGqH,EAAAA,QAUHi2E,WAAAt9E,KAAGqH,EAAAA,SAiNH20E,GAvU8BD,IC1E9BmC,GAAA,WAAA,QAAAA,MAiB6B,sBAjB7Bl+E,KAACuB,EAAAA,SAADrB,OACEmC,cAAe25E,GAAUZ,IACzB55E,SACEC,EAAAA,aACA08E,EAAAA,gBACAhzC,IAEFppC,SACEo8E,EAAAA,gBAGAhzC,GACA6wC,GACAZ,IAEFp0E,WAAYkb,QAEdg8D,KCrBAnV,GAAA,WAAA,QAAAA,KAMWrpE,KAAXqE,QAAoC,GAAI0J,GAAAA,QAGtC/N,KAAF0+E,cAA0B,WAGxB1+E,KAAF2+E,kBAA8B,gBAG5B3+E,KAAFsyE,eAA2B,iBAGzBtyE,KAAF0yE,eAA2B,aAGzB1yE,KAAFuyE,cAA0B,gBAGxBvyE,KAAF2yE,cAA0B,YAGxB3yE,KAAFyyE,mBAA+B,oBAG7BzyE,KAAF4yE,mBAA+B,gBAG7B5yE,KAAFqyE,uBAAmC,cAGjCryE,KAAFoyE,2BAAuC,wBAjDvC,sBAaA9xE,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAY,gHAbzBmpD,mBjBgCE,QAAFwG,GAAqBhkE,EACA+yE,EACAhwE,EACAq7B,EACA40C,GAJA7+E,KAArB6L,MAAqBA,EACA7L,KAArB4+E,aAAqBA,EACA5+E,KAArB4O,UAAqBA,EACA5O,KAArBiqC,QAAqBA,EACAjqC,KAArB6+E,WAAqBA,EACrB,MAAAhP,MAOA1G,GAAA,WAsDE,QAAFA,GAAsBhpE,EAA8CoT,GAA9CvT,KAAtBG,YAAsBA,EAA8CH,KAApEuT,QAAoEA,EAvBzDvT,KAAXmsE,QAAqB,EAGVnsE,KAAXosE,WAAwB,EAMbpsE,KAAXqsE,gBAA6B,EAGRrsE,KAArBssE,oBAAiE,GAAIt7D,GAAAA,aAArE,MAaEm4D,GAAFplE,UAAA+6E,aAAE,SAAarP,GACPA,EAAKxlC,SACPjqC,KAAKssE,oBAAoBz6D,KAAK49D,EAAK5jE,QAIvCs9D,EAAFplE,UAAAoK,YAAE,SAAY9J,GACd,GAAU06E,GAAgB16E,EAAiB,QACjC+U,EAAVpZ,KAAW67E,EAAXziE,EAAAyiE,KAAiB1P,EAAjB/yD,EAAA+yD,SAEQ9nE,EAAc,MAAK06E,KACrB/+E,KAAKg/E,gBAAkBnD,GAAQA,EAAKt3E,QAAUs3E,EAAK,GAAGt3E,OAAS4nE,EAAU0P,EAAK,GAAGt3E,OAAS,IAGxFF,EAAyB,iBAAK06E,IAAkB/+E,KAAKi/E,gBACvDj/E,KAAKi/E,aAAkB,GAAKj/E,KAAKqsE,gBAAkBF,EAAzD,MAGQ4S,GAAkB/+E,KAAKk/E,aACzBl/E,KAAKk/E,WAAgB,IAAM/S,EAAjC,MAIEhD,EAAFplE,UAAAo7E,cAAE,SAAclsB,EAAkBwC,GAClC,GAAQ2pB,GAAansB,EAAWjzD,KAAKmsE,QAAU1W,CAO3C,OAJIxC,KACFmsB,GAAcp/E,KAAKg/E,iBAGdI,GAAcp/E,KAAKosE,YAI5BjD,EAAFplE,UAAA4qE,iBAAE,WAAA,GAAFhrE,GAAA3D,IACIA,MAAKuT,QAAQW,kBAAiB,WAC5BvQ,EAAK4P,QAAQwrC,SAAS1vB,eAAeplB,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,WAClE,GAAc8nE,GACFzoE,EAAKxD,YAAYuE,cAAci+C,cAAc,4BAE7CypB,IACFA,EAAW15D,4BAlGrBpS,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,sBACEkC,SAAU;izCACVC,QAAF,0iCACE7E,MACFC,MAAA,oBACMqG,KAAN,OACI8kE,gBAAJ,QAEAtrE,SAAA,kBACAqF,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,oFAtCAsjE,EAAAxnE,6DA4CAqqE,aAAA1rE,KAAQqH,EAAAA,QAGRskE,gBAAA3rE,KAAAqH,EAAAA,QAGAukE,wBAAQ5rE,KAARqH,EAAAA,QAGAwkE,UAAA7rE,KAAAqH,EAAAA,QAGAykE,aAAA9rE,KAAAqH,EAAAA,QAGA0kE,kBAAA/rE,KAAAqH,EAAAA,QAGA2kE,sBAAAhsE,KAAA+R,EAAAA,UASA82D,KCzCA1H,GAAA,WAyFE,QAAFA,GAAsBpuD,EACsC+xD,EAC3BvC,EACClyD,GAC9B,GAJkB3Q,KAAtBqT,mBAAsBA,EACsCrT,KAA5DolE,aAA4DA,EAC3BplE,KAAjC6iE,aAAiCA,EACC7iE,KAAlC2Q,KAAkCA,EAnCb3Q,KAArBohE,eAA8D,GAAIpwD,GAAAA,aAG7ChR,KAArBuhE,eAA0D,GAAIvwD,GAAAA,aAGzChR,KAArBusE,iBAAyD,GAAIv7D,GAAAA,cA8BpDhR,KAAK6iE,aACR,KAAMC,IAA2B,cAEnC,KAAK9iE,KAAKolE,aACR,KAAMtC,IAA2B,mBAGvC,IAAU0J,GAAiBxsE,KAAK6iE,aAAa4J,oBACnCC,EAAiB1sE,KAAK6iE,aAAa8J,kBAAkB,UACrDC,EAAe5sE,KAAK6iE,aAAa8J,kBAAkB,QAGrDE,EAAWD,EAAatgE,IAAG,SAAEwgE,EAAM7hE,GACrC,OAAQ6hE,KAAdA,EAAoBC,OAAQL,EAAezhE,KAEvCjL,MAAKgtE,UAAYH,EAASriE,MAAMgiE,GAAgBS,OAAOJ,EAASriE,MAAM,EAAGgiE,IAEzExsE,KAAKktE,YAAcltE,KAAK6iE,aAAasK,QA5CzC,MAtDExhE,QAAFC,eACM61D,EADN19D,UAAA,kBAAE,WACsB,MAAO/D,MAAKktE,iBAClC,SAAerhE,GACjB,GAAUuhE,GAAgBptE,KAAKktE,YACrBG,EACFrtE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,KAAW7L,KAAK6iE,aAAasK,OACxFntE,MAAKktE,YAAcltE,KAAK6iE,aAAayK,UAAUD,EAAWrtE,KAAKghE,QAAShhE,KAAKihE,SACxEjhE,KAAKutE,qBAAqBH,EAAeptE,KAAKktE,cACjDltE,KAAKwtE,yCAMT7hE,OAAFC,eACM61D,EADN19D,UAAA,gBAAE,WAC2B,MAAO/D,MAAKmmC,eACvC,SAAat6B,GACX7L,KAAKmmC,UAAYnmC,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,IACxE7L,KAAKytE,cAAgBztE,KAAK0tE,uBAAuB1tE,KAAKmmC,4CAKxDx6B,OAAFC,eACM61D,EADN19D,UAAA,eAAE,WAC0B,MAAO/D,MAAK2tE,cACtC,SAAY9hE,GACV7L,KAAK2tE,SAAW3tE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,qCAKzEF,OAAFC,eACM61D,EADN19D,UAAA,eAAE,WAC0B,MAAO/D,MAAK4tE,cACtC,SAAY/hE,GACV7L,KAAK4tE,SAAW5tE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,qCAmEzE41D,EAAF19D,UAAAkE,mBAAE,WACEjI,KAAKwtE,SAIP/L,EAAF19D,UAAA8pE,cAAE,SAAcpK,GACZ,GAAIzjE,KAAKytE,eAAiBhK,EAAM,CACpC,GAAYqK,GAAe9tE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YAC9CC,EAAgBjuE,KAAK6iE,aAAaqL,SAASluE,KAAKguE,YAChDG,EAAenuE,KAAK6iE,aAAauL,WAAWN,EAAcG,EAAexK,EAE/EzjE,MAAKohE,eAAevvD,KAAKs8D,GAG3BnuE,KAAKuhE,eAAe1vD,QAItB4vD,EAAF19D,UAAAsqE,2BAAE,SAA2Bz8D,GAK7B,GAAUw7D,GAAgBptE,KAAKktE,YACrBl4C,EAAQh1B,KAAK2gD,QAEnB,QAAQ/uC,EAAMwD,SACZ,IAAKguB,GAAAA,WACHpjC,KAAKguE,WAAahuE,KAAK6iE,aAAayL,gBAAgBtuE,KAAKktE,YAAal4C,EAAQ,GAAK,EACnF,MACF,KAAKsO,GAAAA,YACHtjC,KAAKguE,WAAahuE,KAAK6iE,aAAayL,gBAAgBtuE,KAAKktE,YAAal4C,GAAS,EAAI,EACnF,MACF,KAAKqO,GAAAA,SACHrjC,KAAKguE,WAAahuE,KAAK6iE,aAAayL,gBAAgBtuE,KAAKktE,aAAc,EACvE,MACF,KAAK3pC,GAAAA,WACHvjC,KAAKguE,WAAahuE,KAAK6iE,aAAayL,gBAAgBtuE,KAAKktE,YAAa,EACtE,MACF,KAAK73D,GAAAA,KACHrV,KAAKguE,WAAahuE,KAAK6iE,aAAayL,gBAAgBtuE,KAAKktE,YACrD,EAAIltE,KAAK6iE,aAAa0L,QAAQvuE,KAAKktE,aACvC,MACF,KAAK13D,GAAAA,IACHxV,KAAKguE,WAAahuE,KAAK6iE,aAAayL,gBAAgBtuE,KAAKktE,YACpDltE,KAAK6iE,aAAa2L,kBAAkBxuE,KAAKktE,aACxCltE,KAAK6iE,aAAa0L,QAAQvuE,KAAKktE,aACrC,MACF,KAAKjqC,GAAAA,QACHjjC,KAAKguE,WAAap8D,EAAM2vC,OACpBvhD,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,aAAc,GACtDltE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,aAAc,EAC3D,MACF,KAAK/pC,GAAAA,UACHnjC,KAAKguE,WAAap8D,EAAM2vC,OACpBvhD,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,YAAa,GACrDltE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,YAAa,EAC1D,MACF,KAAKx3D,GAAAA,MACL,IAAKC,GAAAA,MAOH,YANK3V,KAAKkhE,aAAclhE,KAAKkhE,WAAWlhE,KAAKktE,eAC3CltE,KAAK6tE,cAAc7tE,KAAK6iE,aAAa0L,QAAQvuE,KAAKktE,cAClDltE,KAAKuhE,eAAe1vD,OAEpBD,EAAM2D,kBAGV,SAEE,OAGAvV,KAAK6iE,aAAauD,YAAYgH,EAAeptE,KAAKguE,aACpDhuE,KAAKusE,iBAAiB16D,KAAK7R,KAAKguE,YAGlChuE,KAAK2uE,mBAEL/8D,EAAM2D,kBAIRksD,EAAF19D,UAAAypE,MAAE,WACExtE,KAAKytE,cAAgBztE,KAAK0tE,uBAAuB1tE,KAAKqhB,UACtDrhB,KAAK4uE,WAAa5uE,KAAK0tE,uBAAuB1tE,KAAK6iE,aAAasK,SAChEntE,KAAK6uE,YACD7uE,KAAK6iE,aAAaiM,cAAc,SAAS9uE,KAAK6iE,aAAaqL,SAASluE,KAAKguE,aACpEe,mBAEb,IAAQC,GAAehvE,KAAK6iE,aAAauL,WAAWpuE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YAC3EhuE,KAAK6iE,aAAaqL,SAASluE,KAAKguE,YAAa,EACjDhuE,MAAKivE,kBAnNa,EAoNGjvE,KAAK6iE,aAAaqM,aAAaF,GAC/ChvE,KAAK6iE,aAAa4J,qBArNL,EAuNlBzsE,KAAKmvE,mBACLnvE,KAAKqT,mBAAmB/B,gBAI1BmwD,EAAF19D,UAAA4qE,iBAAE,WACE3uE,KAAKovE,iBAAiBT,oBAIhBlN,EAAV19D,UAAAorE,iBAAE,WACF,GAAUE,GAAcrvE,KAAK6iE,aAAa2L,kBAAkBxuE,KAAKguE,YACvDsB,EAAYtvE,KAAK6iE,aAAa0M,cACpCvvE,MAAKwvE,WACL,KAAK,GAAIvkE,GAAI,EAAGwkE,EAAOzvE,KAAKivE,iBAAkBhkE,EAAIokE,EAAapkE,IAAKwkE,IAAQ,CArO1D,GAsOZA,IACFzvE,KAAKwvE,OAAO3lE,SACZ4lE,EAAO,EAEf,IAAYhM,GAAOzjE,KAAK6iE,aAAauL,WACzBpuE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YAC/BhuE,KAAK6iE,aAAaqL,SAASluE,KAAKguE,YAAa/iE,EAAI,GACjDg/B,EAAUjqC,KAAK0vE,kBAAkBjM,GACjC70D,EAAY5O,KAAK6iE,aAAa+E,OAAOnE,EAAMzjE,KAAKolE,aAAayC,QAAQ8H,eACrEC,EAAc5vE,KAAKmhE,UAAYnhE,KAAKmhE,UAAUsC,OAAQriE,EAE5DpB,MAAKwvE,OAAOxvE,KAAKwvE,OAAOjrE,OAAS,GAC5BsF,KAAK,GAAIgmE,IAAgB5kE,EAAI,EAAGqkE,EAAUrkE,GAAI2D,EAAWq7B,EAAS2lC,MAKnEnO,EAAV19D,UAAA2rE,kBAAE,SAA0BjM,GACxB,QAASA,KACHzjE,KAAKkhE,YAAclhE,KAAKkhE,WAAWuC,OACnCzjE,KAAKghE,SAAWhhE,KAAK6iE,aAAauD,YAAY3C,EAAMzjE,KAAKghE,UAAY,MACrEhhE,KAAKihE,SAAWjhE,KAAK6iE,aAAauD,YAAY3C,EAAMzjE,KAAKihE,UAAY,IAOrEQ,EAAV19D,UAAA2pE,uBAAE,SAA+BjK,GAC7B,MAAOA,IAAQzjE,KAAKutE,qBAAqB9J,EAAMzjE,KAAKguE,YAChDhuE,KAAK6iE,aAAa0L,QAAQ9K,GAAQ,MAIhChC,EAAV19D,UAAAwpE,qBAAE,SAA6BuC,EAAcC,GACzC,SAAUD,IAAMC,GAAM/vE,KAAK6iE,aAAaqL,SAAS4B,IAAO9vE,KAAK6iE,aAAaqL,SAAS6B,IACzE/vE,KAAK6iE,aAAakL,QAAQ+B,IAAO9vE,KAAK6iE,aAAakL,QAAQgC,KAO/DtO,EAAV19D,UAAAmiE,oBAAE,SAA4Bh9C,GAC1B,MAAQlpB,MAAK6iE,aAAaiF,eAAe5+C,IAAQlpB,KAAK6iE,aAAaqE,QAAQh+C,GAAQA,EAAM,MAInFu4C,EAAV19D,UAAA48C,OAAE,WACE,MAAO3gD,MAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,sBAhRlCvL,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,iBACEkC,SAAU,slBACV9E,SAAU,eACVqF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,iJA3BAvF,KAAEqkE,GAAFtkE,aAAAC,KAAAe,EAAAA,aAiHAf,KAAAsZ,EAAAA,eAAAvZ,aAAAC,KAAAe,EAAAA,cAtGAogE,EAAA9/D,sEAwBAq/D,UAAA1gE,KAAAqH,EAAAA,QAcAs5D,UAAA3gE,KAAAqH,EAAAA,QASAu5D,aAAA5gE,KAAAqH,EAAAA,QAQAw5D,YAAA7gE,KAAAqH,EAAAA,QAQAy5D,iBAAA9gE,KAAA+R,EAAAA,SAGAkvD,iBAAAjhE,KAAQ+R,EAAAA,SAGRk6D,mBAAAjsE,KAAA+R,EAAAA,SAGA+8D,mBAAA9uE,KAAAoO,EAAAA,UAAAlO,MAAA2oE,IAAAx6D,QAAA,OAMA8yD,K/FlEAI,GAAA,WAyEE,QAAFA,GAAsBxuD,EACWwvD,EACClyD,GAC9B,GAHkB3Q,KAAtBqT,mBAAsBA,EACWrT,KAAjC6iE,aAAiCA,EACC7iE,KAAlC2Q,KAAkCA,EAtBb3Q,KAArBohE,eAAuD,GAAIpwD,GAAAA,aAGtChR,KAArBqhE,aAAqD,GAAIrwD,GAAAA,aAGpChR,KAArBusE,iBAAyD,GAAIv7D,GAAAA,cAiBpDhR,KAAK6iE,aACR,KAAMC,IAA2B,cAGnC9iE,MAAKktE,YAAcltE,KAAK6iE,aAAasK,QAlBzC,MApDExhE,QAAFC,eACMi2D,EADN99D,UAAA,kBAAE,WACsB,MAAO/D,MAAKktE,iBAClC,SAAerhE,GACjB,GAAQuhE,GAAgBptE,KAAKktE,YACnBG,EACFrtE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,KAAW7L,KAAK6iE,aAAasK,OACxFntE,MAAKktE,YAAcltE,KAAK6iE,aAAayK,UAAUD,EAAWrtE,KAAKghE,QAAShhE,KAAKihE,SACzEppD,KAAKg8B,MAAM7zC,KAAK6iE,aAAakL,QAAQX,GA1BjB,KA2BpBv1D,KAAKg8B,MAAM7zC,KAAK6iE,aAAakL,QAAQ/tE,KAAKktE,aA3BtB,KA4BtBltE,KAAKwtE,yCAMT7hE,OAAFC,eACMi2D,EADN99D,UAAA,gBAAE,WAC2B,MAAO/D,MAAKmmC,eACvC,SAAat6B,GACX7L,KAAKmmC,UAAYnmC,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,IACxE7L,KAAKgwE,cAAgBhwE,KAAKmmC,WAAanmC,KAAK6iE,aAAakL,QAAQ/tE,KAAKmmC,4CAKxEx6B,OAAFC,eACMi2D,EADN99D,UAAA,eAAE,WAC0B,MAAO/D,MAAK2tE,cACtC,SAAY9hE,GACV7L,KAAK2tE,SAAW3tE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,qCAKzEF,OAAFC,eACMi2D,EADN99D,UAAA,eAAE,WAC0B,MAAO/D,MAAK4tE,cACtC,SAAY/hE,GACV7L,KAAK4tE,SAAW5tE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,qCAsCzEg2D,EAAF99D,UAAAkE,mBAAE,WACEjI,KAAKwtE,SAIP3L,EAAF99D,UAAAypE,MAAE,WAAA,GAAF7pE,GAAA3D,IACIA,MAAKiwE,WAAajwE,KAAK6iE,aAAakL,QAAQ/tE,KAAK6iE,aAAasK,QAClE,IAAQ+C,GAAalwE,KAAK6iE,aAAakL,QAAQ/tE,KAAKktE,aAC5CiD,EAAeD,EApGK,EAqGxBlwE,MAAKowE,SACL,KAAK,GAAInlE,GAAI,EAAGopD,KAAoBppD,EAtGZ,GAsG8BA,IACpDopD,EAAIxqD,KAAKqmE,EAAaC,EAAellE,GArGhB,GAsGjBopD,EAAI9vD,SACNvE,KAAKowE,OAAOvmE,KAAKwqD,EAAI/nD,IAAG,SAAC+jE,GAAQ,MAAA1sE,GAAK2sE,mBAAmBD,MACzDhc,KAGJr0D,MAAKqT,mBAAmB/B,gBAI1BuwD,EAAF99D,UAAAwsE,cAAE,SAAcF,GACZrwE,KAAKqhE,aAAaxvD,KAAK7R,KAAK6iE,aAAauL,WAAWiC,EAAM,EAAG,GACjE,IAAQG,GAAQxwE,KAAK6iE,aAAaqL,SAASluE,KAAKguE,YACxCqB,EACArvE,KAAK6iE,aAAa2L,kBAAkBxuE,KAAK6iE,aAAauL,WAAWiC,EAAMG,EAAO,GAClFxwE,MAAKohE,eAAevvD,KAAK7R,KAAK6iE,aAAauL,WAAWiC,EAAMG,EACxD34D,KAAK2B,IAAIxZ,KAAK6iE,aAAa0L,QAAQvuE,KAAKguE,YAAaqB,MAI3DxN,EAAF99D,UAAAsqE,2BAAE,SAA2Bz8D,GAK7B,GAAUw7D,GAAgBptE,KAAKktE,YACrBl4C,EAAQh1B,KAAK2gD,QAEnB,QAAQ/uC,EAAMwD,SACZ,IAAKguB,GAAAA,WACHpjC,KAAKguE,WAAahuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,YAAal4C,EAAQ,GAAK,EACpF,MACF,KAAKsO,GAAAA,YACHtjC,KAAKguE,WAAahuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,YAAal4C,GAAS,EAAI,EACpF,MACF,KAAKqO,GAAAA,SACHrjC,KAAKguE,WAAahuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,aAzIvC,EA0InB,MACF,KAAK3pC,GAAAA,WACHvjC,KAAKguE,WAAahuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,YA5IvC,EA6InB,MACF,KAAK73D,GAAAA,KACHrV,KAAKguE,WAAahuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,aACrDltE,KAAK6iE,aAAakL,QAAQ/tE,KAAKktE,aAlJhB,GAmJpB,MACF,KAAK13D,GAAAA,IACHxV,KAAKguE,WAAahuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,YArJtC,GAsJDltE,KAAK6iE,aAAakL,QAAQ/tE,KAAKktE,aAtJ9B,GAsJ4D,EAChF,MACF,KAAKjqC,GAAAA,QACHjjC,KAAKguE,WACDhuE,KAAK6iE,aAAa4L,iBACdzuE,KAAKktE,YAAat7D,EAAM2vC,QAAS,KA3JrB,GA4JpB,MACF,KAAKpe,GAAAA,UACHnjC,KAAKguE,WACDhuE,KAAK6iE,aAAa4L,iBACdzuE,KAAKktE,YAAat7D,EAAM2vC,OAASkvB,IAhKrB,GAiKpB,MACF,KAAK/6D,GAAAA,MACL,IAAKC,GAAAA,MACH3V,KAAKuwE,cAAcvwE,KAAK6iE,aAAakL,QAAQ/tE,KAAKktE,aAClD,MACF,SAEE,OAGAltE,KAAK6iE,aAAauD,YAAYgH,EAAeptE,KAAKguE,aACpDhuE,KAAKusE,iBAAiB16D,KAAK7R,KAAKguE,YAGlChuE,KAAK2uE,mBAEL/8D,EAAM2D,kBAGRssD,EAAF99D,UAAA2sE,eAAE,WACE,MAAO1wE,MAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YArLd,IAyL1BnM,EAAF99D,UAAA4qE,iBAAE,WACE3uE,KAAKovE,iBAAiBT,oBAIhB9M,EAAV99D,UAAAusE,mBAAE,SAA2BD,GAC7B,GAAQM,GAAW3wE,KAAK6iE,aAAa+N,YAAY5wE,KAAK6iE,aAAauL,WAAWiC,EAAM,EAAG,GACnF,OAAO,IAAIR,IAAgBQ,EAAMM,EAAUA,EAAU3wE,KAAK6wE,kBAAkBR,KAItExO,EAAV99D,UAAA8sE,kBAAE,SAA0BR,GAExB,OAAajvE,KAATivE,GAA+B,OAATA,GACrBrwE,KAAKihE,SAAWoP,EAAOrwE,KAAK6iE,aAAakL,QAAQ/tE,KAAKihE,UACtDjhE,KAAKghE,SAAWqP,EAAOrwE,KAAK6iE,aAAakL,QAAQ/tE,KAAKghE,SACzD,OAAO,CAIT,KAAKhhE,KAAKkhE,WACR,OAAO,CAMT,KAAK,GAHC4P,GAAc9wE,KAAK6iE,aAAauL,WAAWiC,EAAM,EAAG,GAGjD5M,EAAOqN,EAAa9wE,KAAK6iE,aAAakL,QAAQtK,IAAS4M,EAC9D5M,EAAOzjE,KAAK6iE,aAAayL,gBAAgB7K,EAAM,GAC/C,GAAIzjE,KAAKkhE,WAAWuC,GAClB,OAAO,CAIX,QAAO,GAOD5B,EAAV99D,UAAAmiE,oBAAE,SAA4Bh9C,GAC1B,MAAQlpB,MAAK6iE,aAAaiF,eAAe5+C,IAAQlpB,KAAK6iE,aAAaqE,QAAQh+C,GAAQA,EAAM,MAInF24C,EAAV99D,UAAA48C,OAAE,WACE,MAAO3gD,MAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,sBA/NlCvL,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,sBACEkC,SAAU,0cACV9E,SAAU,mBACVqF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,mHA3BAvF,KAAEsZ,EAAAA,eAAFvZ,aAAAC,KAAAe,EAAAA,cAUAwgE,EAAAlgE,sEAuBAq/D,UAAA1gE,KAAAqH,EAAAA,QAeAs5D,UAAA3gE,KAAAqH,EAAAA,QASAu5D,aAAA5gE,KAAAqH,EAAAA,QAQAy5D,iBAAA9gE,KAAA+R,EAAAA,SAQAgvD,eAAA/gE,KAAA+R,EAAAA,SAGAk6D,mBAAAjsE,KAAA+R,EAAAA,SAGA+8D,mBAAA9uE,KAAAoO,EAAAA,UAAAlO,MAAA2oE,IAAAx6D,QAAA,OAMAkzD,KgGlEAF,GAAA,WA8EE,QAAFA,GAAsBtuD,EACsC+xD,EAC3BvC,EACClyD,GAC9B,GAJkB3Q,KAAtBqT,mBAAsBA,EACsCrT,KAA5DolE,aAA4DA,EAC3BplE,KAAjC6iE,aAAiCA,EACC7iE,KAAlC2Q,KAAkCA,EA7Bb3Q,KAArBohE,eAAuD,GAAIpwD,GAAAA,aAGtChR,KAArBshE,cAAsD,GAAItwD,GAAAA,aAGrChR,KAArBusE,iBAAyD,GAAIv7D,GAAAA,cAwBpDhR,KAAK6iE,aACR,KAAMC,IAA2B,cAEnC,KAAK9iE,KAAKolE,aACR,KAAMtC,IAA2B,mBAGnC9iE,MAAKktE,YAAcltE,KAAK6iE,aAAasK,QA5BzC,MAnDExhE,QAAFC,eACM+1D,EADN59D,UAAA,kBAAE,WACsB,MAAO/D,MAAKktE,iBAClC,SAAerhE,GACjB,GAAQuhE,GAAgBptE,KAAKktE,YACnBG,EACFrtE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,KAAW7L,KAAK6iE,aAAasK,OACxFntE,MAAKktE,YAAcltE,KAAK6iE,aAAayK,UAAUD,EAAWrtE,KAAKghE,QAAShhE,KAAKihE,SACzEjhE,KAAK6iE,aAAakL,QAAQX,KAAmBptE,KAAK6iE,aAAakL,QAAQ/tE,KAAKktE,cAC9EltE,KAAKwtE,yCAMT7hE,OAAFC,eACM+1D,EADN59D,UAAA,gBAAE,WAC2B,MAAO/D,MAAKmmC,eACvC,SAAat6B,GACX7L,KAAKmmC,UAAYnmC,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,IACxE7L,KAAK+wE,eAAiB/wE,KAAKgxE,uBAAuBhxE,KAAKmmC,4CAKzDx6B,OAAFC,eACM+1D,EADN59D,UAAA,eAAE,WAC0B,MAAO/D,MAAK2tE,cACtC,SAAY9hE,GACV7L,KAAK2tE,SAAW3tE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,qCAKzEF,OAAFC,eACM+1D,EADN59D,UAAA,eAAE,WAC0B,MAAO/D,MAAK4tE,cACtC,SAAY/hE,GACV7L,KAAK4tE,SAAW5tE,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,qCAgDzE81D,EAAF59D,UAAAkE,mBAAE,WACEjI,KAAKwtE,SAIP7L,EAAF59D,UAAAktE,eAAE,SAAeT,GACjB,GAAUU,GACAlxE,KAAK6iE,aAAauL,WAAWpuE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YAAawC,EAAO,EAEtFxwE,MAAKshE,cAAczvD,KAAKq/D,EAE5B,IAAU7B,GAAcrvE,KAAK6iE,aAAa2L,kBAAkB0C,EAExDlxE,MAAKohE,eAAevvD,KAAK7R,KAAK6iE,aAAauL,WACvCpuE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YAAawC,EAC5C34D,KAAK2B,IAAIxZ,KAAK6iE,aAAa0L,QAAQvuE,KAAKguE,YAAaqB,MAI3D1N,EAAF59D,UAAAsqE,2BAAE,SAA2Bz8D,GAK7B,GAAUw7D,GAAgBptE,KAAKktE,YACrBl4C,EAAQh1B,KAAK2gD,QAEnB,QAAQ/uC,EAAMwD,SACZ,IAAKguB,GAAAA,WACHpjC,KAAKguE,WAAahuE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,YAAal4C,EAAQ,GAAK,EACrF,MACF,KAAKsO,GAAAA,YACHtjC,KAAKguE,WAAahuE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,YAAal4C,GAAS,EAAI,EACrF,MACF,KAAKqO,GAAAA,SACHrjC,KAAKguE,WAAahuE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,aAAc,EACzE,MACF,KAAK3pC,GAAAA,WACHvjC,KAAKguE,WAAahuE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,YAAa,EACxE,MACF,KAAK73D,GAAAA,KACHrV,KAAKguE,WAAahuE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,aACtDltE,KAAK6iE,aAAaqL,SAASluE,KAAKktE,aACrC,MACF,KAAK13D,GAAAA,IACHxV,KAAKguE,WAAahuE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKktE,YACvD,GAAKltE,KAAK6iE,aAAaqL,SAASluE,KAAKktE,aACzC,MACF,KAAKjqC,GAAAA,QACHjjC,KAAKguE,WACDhuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,YAAat7D,EAAM2vC,QAAU,IAAM,EAC/E,MACF,KAAKpe,GAAAA,UACHnjC,KAAKguE,WACDhuE,KAAK6iE,aAAa4L,iBAAiBzuE,KAAKktE,YAAat7D,EAAM2vC,OAAS,GAAK,EAC7E,MACF,KAAK7rC,GAAAA,MACL,IAAKC,GAAAA,MACH3V,KAAKixE,eAAejxE,KAAK6iE,aAAaqL,SAASluE,KAAKktE,aACpD,MACF,SAEE,OAGAltE,KAAK6iE,aAAauD,YAAYgH,EAAeptE,KAAKguE,aACpDhuE,KAAKusE,iBAAiB16D,KAAK7R,KAAKguE,YAGlChuE,KAAK2uE,mBAEL/8D,EAAM2D,kBAIRosD,EAAF59D,UAAAypE,MAAE,WAAA,GAAF7pE,GAAA3D,IACIA,MAAK+wE,eAAiB/wE,KAAKgxE,uBAAuBhxE,KAAKqhB,UACvDrhB,KAAKmxE,YAAcnxE,KAAKgxE,uBAAuBhxE,KAAK6iE,aAAasK,SACjEntE,KAAKoxE,WAAapxE,KAAK6iE,aAAa+N,YAAY5wE,KAAKguE,WAEzD,IAAQqD,GAAarxE,KAAK6iE,aAAaiM,cAAc,QAEjD9uE,MAAKsxE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKhlE,IAAG,SAAC+nD,GAAO,MAAAA,GAAI/nD,IAAG,SAC1EkkE,GAAS,MAAA7sE,GAAK4tE,oBAAoBf,EAAOa,EAAWb,QACxDxwE,KAAKqT,mBAAmB/B,gBAI1BqwD,EAAF59D,UAAA4qE,iBAAE,WACE3uE,KAAKovE,iBAAiBT,oBAOhBhN,EAAV59D,UAAAitE,uBAAE,SAA+BvN,GAC7B,MAAOA,IAAQzjE,KAAK6iE,aAAakL,QAAQtK,IAASzjE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YAC7EhuE,KAAK6iE,aAAaqL,SAASzK,GAAQ,MAIjC9B,EAAV59D,UAAAwtE,oBAAE,SAA4Bf,EAAegB,GAC7C,GAAQ5iE,GAAY5O,KAAK6iE,aAAa+E,OAC9B5nE,KAAK6iE,aAAauL,WAAWpuE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,YAAawC,EAAO,GAChFxwE,KAAKolE,aAAayC,QAAQ4J,mBAC9B,OAAO,IAAI5B,IACPW,EAAOgB,EAAUzC,oBAAqBngE,EAAW5O,KAAK0xE,mBAAmBlB,KAIvE7O,EAAV59D,UAAA2tE,mBAAE,SAA2BlB,GAE7B,GAAUN,GAAalwE,KAAK6iE,aAAakL,QAAQ/tE,KAAKguE,WAElD,QAAc5sE,KAAVovE,GAAiC,OAAVA,GACvBxwE,KAAK2xE,4BAA4BzB,EAAYM,IAC7CxwE,KAAK4xE,6BAA6B1B,EAAYM,GAChD,OAAO,CAGT,KAAKxwE,KAAKkhE,WACR,OAAO,CAMT,KAAK,GAHC8N,GAAehvE,KAAK6iE,aAAauL,WAAW8B,EAAYM,EAAO,GAG5D/M,EAAOuL,EAAchvE,KAAK6iE,aAAaqL,SAASzK,IAAS+M,EAC7D/M,EAAOzjE,KAAK6iE,aAAayL,gBAAgB7K,EAAM,GAClD,GAAIzjE,KAAKkhE,WAAWuC,GAClB,OAAO,CAIX,QAAO,GAOD9B,EAAV59D,UAAA4tE,4BAAE,SAAoCtB,EAAcG,GAChD,GAAIxwE,KAAKihE,QAAS,CACtB,GAAY4Q,GAAU7xE,KAAK6iE,aAAakL,QAAQ/tE,KAAKihE,SACzC6Q,EAAW9xE,KAAK6iE,aAAaqL,SAASluE,KAAKihE,QAEjD,OAAOoP,GAAOwB,GAAYxB,IAASwB,GAAWrB,EAAQsB,EAGxD,OAAO,GAODnQ,EAAV59D,UAAA6tE,6BAAE,SAAqCvB,EAAcG,GACjD,GAAIxwE,KAAKghE,QAAS,CACtB,GAAY+Q,GAAU/xE,KAAK6iE,aAAakL,QAAQ/tE,KAAKghE,SACzCgR,EAAWhyE,KAAK6iE,aAAaqL,SAASluE,KAAKghE,QAEjD,OAAOqP,GAAO0B,GAAY1B,IAAS0B,GAAWvB,EAAQwB,EAGxD,OAAO,GAODrQ,EAAV59D,UAAAmiE,oBAAE,SAA4Bh9C,GAC1B,MAAQlpB,MAAK6iE,aAAaiF,eAAe5+C,IAAQlpB,KAAK6iE,aAAaqE,QAAQh+C,GAAQA,EAAM,MAInFy4C,EAAV59D,UAAA48C,OAAE,WACE,MAAO3gD,MAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,sBA9QlCvL,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,gBACEkC,SAAU,ghBACV9E,SAAU,cACVqF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,iJAvBAvF,KAAEqkE,GAAFtkE,aAAAC,KAAAe,EAAAA,aAkGAf,KAAAsZ,EAAAA,eAAAvZ,aAAAC,KAAAe,EAAAA,cAvFAsgE,EAAQhgE,sEAkBRq/D,UAAA1gE,KAAAqH,EAAAA,QAcAs5D,UAAA3gE,KAAAqH,EAAAA,QASAu5D,aAAA5gE,KAAAqH,EAAAA,QAQAy5D,iBAAA9gE,KAAA+R,EAAAA,SAQAivD,gBAAAhhE,KAAA+R,EAAAA,SAGAk6D,mBAAAjsE,KAAA+R,EAAAA,SAGA+8D,mBAAA9uE,KAAAoO,EAAAA,UAAAlO,MAAA2oE,IAAAx6D,QAAA,OAMAgzD,Kb5DAyH,GAAA,WASE,QAAFA,GAAsB3oD,EACsCwxD,EAC1BpP,EAC0BuC,EAC9Cx0D,GAJQ5Q,KAAtBygB,MAAsBA,EACsCzgB,KAA5DiyE,SAA4DA,EAC1BjyE,KAAlC6iE,aAAkCA,EAC0B7iE,KAA5DolE,aAA4DA,EAGxDplE,KAAKiyE,SAAS7yB,aAAa96C,UAAS,WAAO,MAAAsM,GAAkBU,iBA7CjE,MAiDE3F,QAAFC,eAAMw9D,EAANrlE,UAAA,wBAAE,WACE,GAAiC,SAA7B/D,KAAKiyE,SAASC,YAChB,MAAOlyE,MAAK6iE,aACP+E,OAAO5nE,KAAKiyE,SAASjE,WAAYhuE,KAAKolE,aAAayC,QAAQsK,gBACvDpD,mBAEX,IAAiC,QAA7B/uE,KAAKiyE,SAASC,YAChB,MAAOlyE,MAAK6iE,aAAa+N,YAAY5wE,KAAKiyE,SAASjE,WAEzD,IAAUkC,GAAalwE,KAAK6iE,aAAakL,QAAQ/tE,KAAKiyE,SAASjE,WAK3D,OAJwBhuE,MAAK6iE,aAAa+N,YACtC5wE,KAAK6iE,aAAauL,WAAW8B,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BlwE,KAAK6iE,aAAa+N,YACrC5wE,KAAK6iE,aAAauL,WAAW8B,EnFtCT,GmFsCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvFvkE,OAAFC,eAAMw9D,EAANrlE,UAAA,yBAAE,WACE,MAAoC,SAA7B/D,KAAKiyE,SAASC,YACjBlyE,KAAKygB,MAAM2xD,2BAA6BpyE,KAAKygB,MAAM4xD,wDAIzD1mE,OAAFC,eAAMw9D,EAANrlE,UAAA,uBAAE,WACE,OACEysE,MAASxwE,KAAKygB,MAAM6xD,eACpBjC,KAAQrwE,KAAKygB,MAAM8xD,cACnBC,aAAcxyE,KAAKygB,MAAMgyD,oBACzBzyE,KAAKiyE,SAASC,8CAIlBvmE,OAAFC,eAAMw9D,EAANrlE,UAAA,uBAAE,WACE,OACEysE,MAASxwE,KAAKygB,MAAMiyD,eACpBrC,KAAQrwE,KAAKygB,MAAMkyD,cACnBH,aAAcxyE,KAAKygB,MAAMmyD,oBACzB5yE,KAAKiyE,SAASC,8CAIlB9I,EAAFrlE,UAAA8uE,qBAAE,WACE7yE,KAAKiyE,SAASC,YAA2C,SAA7BlyE,KAAKiyE,SAASC,YAAyB,aAAe,SAIpF9I,EAAFrlE,UAAA+uE,gBAAE,WACE9yE,KAAKiyE,SAASjE,WAA0C,SAA7BhuE,KAAKiyE,SAASC,YACrClyE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKiyE,SAASjE,YAAa,GAC3DhuE,KAAK6iE,aAAa4L,iBACdzuE,KAAKiyE,SAASjE,WAAyC,QAA7BhuE,KAAKiyE,SAASC,aAAyB,GnF3ErD,KmFgF1B9I,EAAFrlE,UAAAgvE,YAAE,WACE/yE,KAAKiyE,SAASjE,WAA0C,SAA7BhuE,KAAKiyE,SAASC,YACrClyE,KAAK6iE,aAAa6L,kBAAkB1uE,KAAKiyE,SAASjE,WAAY,GAC1DhuE,KAAK6iE,aAAa4L,iBACdzuE,KAAKiyE,SAASjE,WACmB,QAA7BhuE,KAAKiyE,SAASC,YAAwB,EnFrF9B,KmF0F1B9I,EAAFrlE,UAAAivE,gBAAE,WACE,OAAKhzE,KAAKiyE,SAASjR,WAGXhhE,KAAKiyE,SAASjR,UACjBhhE,KAAKizE,YAAYjzE,KAAKiyE,SAASjE,WAAYhuE,KAAKiyE,SAASjR,WAIhEoI,EAAFrlE,UAAAmvE,YAAE,WACE,OAAQlzE,KAAKiyE,SAAShR,UACjBjhE,KAAKizE,YAAYjzE,KAAKiyE,SAASjE,WAAYhuE,KAAKiyE,SAAShR,UAIxDmI,EAAVrlE,UAAAkvE,YAAE,SAAoBE,EAAUC,GAC5B,MAAiC,SAA7BpzE,KAAKiyE,SAASC,YACTlyE,KAAK6iE,aAAakL,QAAQoF,IAAUnzE,KAAK6iE,aAAakL,QAAQqF,IACjEpzE,KAAK6iE,aAAaqL,SAASiF,IAAUnzE,KAAK6iE,aAAaqL,SAASkF,GAErC,QAA7BpzE,KAAKiyE,SAASC,YACTlyE,KAAK6iE,aAAakL,QAAQoF,IAAUnzE,KAAK6iE,aAAakL,QAAQqF,GAGhEv7D,KAAKg8B,MAAM7zC,KAAK6iE,aAAakL,QAAQoF,GnFlHpB,KmFmHpBt7D,KAAKg8B,MAAM7zC,KAAK6iE,aAAakL,QAAQqF,GnFnHjB,oBmFM5B9yE,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,sBACEkC,SAAU,mxBACV9E,SAAU,oBACVqF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,oLAMAvF,SAAAc,GAAAf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA6nE,QA1BA/nE,KAAQ8R,EAAAA,qBAdRg3D,uCAmJA,GAAAzlE,GAAA3D,QA0HAA,KAAA6iE,aAAAA,EAAE7iE,KAAFolE,aAAAA,EACkCplE,KAAlCqT,mBAAAA,kQAHA,KAAAyvD,IAAA,cAQA,KAAA9iE,KAAYolE,aACZ,KAAAtC,IAAA,mBAGA9iE,MAAA6yC,aAAApyB,EAAApc,QAAAC,UAAA,4BAGAX,EAAAy7C,aAAAtzC,SA/CA,MAkDAH,QAAMC,eAANk2D,EAAA/9D,UAAA,WA7GAya,+HAGA1e,YAAA,EACEC,cAAF,kDAOAye,iIAGA1e,YAAA,EACEC,cAAF,iDAIAye,+HAGA1e,YAAA,EACEC,cAAF,iDAIAye,+HAGA1e,YAAA,EACEC,cAAF,oMAyCAC,KAAAo/C,aAAAtzC,OACI9L,KAAKqT,mBAAT/B,gBAEAxR,YAAA,EACEC,cAAF,qDAIAye,6EACAxe,KAAAqzE,sBAAA,EACIrzE,KAAKqT,mBAAT/B,gBAEAxR,YAAA,EACEC,cAAF,yHA2BAC,KAAAguE,WAAAhuE,KAAA6kE,SAAA7kE,KAAA6iE,aAAAsK,QAEIntE,KAAKszE,aAATtzE,KAAAuzE,iFAMAvzE,KAAAqzE,sBAAA,EACQrzE,KAAKyiE,uFAMbziE,KAAAo/C,aAAA/wC,gDAKA,GAAA8C,GAAoC9M,EAApC,SAAAA,EAAA,SAAAA,EAAA,iCAIQ,GAARmvE,GAAmBxzE,KAAnByzE,+BAIQzzE,KAARqT,mBAAA6d,gBACQsiD,EAARhG,SAGAxtE,KAAOo/C,aAAPtzC,4IAWA,SAAA9L,KAAAkyE,YAAAlyE,KAAAwhE,qEACAv5D,yGAOAjI,KAAAohE,eAAAvvD,KAAA4xD,8RAqBAzjE,KAAAkyE,YAAAsB,0OAeA1R,EAAAzhE,aACAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,uhCArOAmC,QAAA,67CACE7E,MACFC,MAAA,gBAEEH,SAAF,cACEqF,cAAFC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAIAi8D,EAAAx+C,eAAA,WAAA,QACAhjB,KAAA+oE,iJAhJAvH,EAAQngE,gBAiQR+xE,kBAAApzE,KAAAqH,EAAAA,QA/QAk9D,UAAAvkE,KAAAqH,EAAAA;qDAiKAq5D,UAAA1gE,KAAAqH,EAAAA,QAeAs5D,UAAA3gE,KAAGqH,EAAAA,QAQHu5D,aAAA5gE,KAAAqH,EAAAA,QAGAw5D,YAAA7gE,KAAAqH,EAAAA,QAQAy5D,iBAAA9gE,KAAA+R,EAAAA,SAQAgvD,eAAA/gE,KAAQ+R,EAAAA,SAQRivD,gBAAAhhE,KAAA+R,EAAAA,SAGAkvD,iBAAAjhE,KAAQ+R,EAAAA,SAGRmvD,YAAAlhE,KAAAoO,EAAAA,UAASlO,MAATihE,IAAA9yD,QAAA,MAMA+yD,WAAAphE,KAAAoO,EAAAA,UAAAlO,MAAAmhE,IAAAhzD,QAAA,MAMAizD,gBAAAthE,KAAGoO,EAAAA,UAAHlO,MAAAqhE,IAAAlzD,QAAA,OAMAmzD,KCpOaC,IAKXxlB,eAAgBvtC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQrC,EAAAA,OACZujB,QAAS,EACTjhB,UAAW,mBAEbE,EAAAA,WAAW,gBAAkBC,EAAAA,QAAQ,mCAAoCzC,EAAAA,OACvEujB,QAAS,EACTjhB,UAAW,kBAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBzC,EAAAA,OAAOujB,QAAS,QAIlE6xC,eAAgBhzD,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQrC,EAAAA,OAAOujB,QAAS,KAC9BlhB,EAAAA,MAAM,QAASrC,EAAAA,OAAOujB,QAAS,KAI/B/gB,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDCWhC4yD,GAAgB,EAGPC,GACT,GAAIloD,GAAAA,eAAqC,kCAQhCmoD,IACX56D,QAAS26D,GACT9hD,MAAOoV,EAAAA,SACPlV,WAAY8hD,kBAMZ,QAAFC,GAAqBliE,GAAAH,KAArBG,YAAqBA,EACrB,MAAAkiE,MACMC,GACFn/D,EAAWk/D,IASfE,GAAA,SAAAh/D,GA+BE,QAAFg/D,GAAc/+D,GACd,MAAID,GAAJK,KAAA5D,KAAUwD,IAAVxD,KATA,MAJ6C8D,GAA7Cy+D,EAAAh/D,GAgBEg/D,EAAFx+D,UAAAC,gBAAE,WACEhE,KAAKwiE,UAAUC,kCApCnBniE,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,yBACEkC,SAAU,2lBACVC,QAAF,shBACE7E,MACFC,MAAA,yBACM8hE,oBAAN,UACIC,uCAAJ,sBAEAxwD,YACA4vD,GAAAxlB,eACAwlB,GAAAC,gBAEAvhE,SAAA,uBACAqF,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEnF,QAAF,sEA9EA6hE,EAAA5gE,sEAsFA4gE,oDAsBAviE,KAAA4iE,QAAAA,EAmJA5iE,KAAAgyB,SAAAA,EAAsBhyB,KAAtBuT,QAAsBA,EACAvT,KAAtB2N,kBAAuCA,EACjB3N,KAAtB6iE,aAAAA,EACsB7iE,KAAtB2Q,KAAAA,EAEkC3Q,KAAlC6D,UAA8CA,kbAP9C,KAAAi/D,IAA8C,cAW9C9iE,MAAA8sC,gBAAAP,EAtEA,MAyEA5gC,QAAAC,eAAAm3D,EAAAh/D,UAAA,WAhJAya,eAEI,MAAJxe,MAAAgjE,WAAAhjE,KAAAijE,iBAAAjjE,KAAAijE,iBAAAp3D,MAAA,OAEA8qB,0FAGA72B,YAAA,EACEC,cAAF,+CAOAye,oCAAAxe,KAAAijE,iBAAAjjE,KAAAijE,iBAAAC,uBAAA9hE,KAGAu1B,+BAGA72B,YAAA,EACEC,cAAF,gJAUAD,YAAA,EACEC,cAAF,kDAIAye,qEAAAxe,KAAAijE,iBAAA7rD,WAAApX,KAAAsmC,WAGA3P,gBAEA,GAAA8P,GAAA1rB,EAAAA,sBAAAlP,wBACU7L,KAAVsmC,UAAAG,EAEQzmC,KAARmjE,gBAAAr3D,KAAA26B,KAGA3mC,YAAA,EACEC,cAAF,gDA6BAye,8FAEEze,cAAF,mDAOAye,gGACEze,cAAF,kDAIAye,wEACA1e,YAAA,EACEC,cAAF,kDAGAye,wEACA1e,YAAA,EACEC,cAAF,qDAAAye,gFAGA1e,YAAA,EACEC,cAAF,oDA4CAC,KAAAojE,mBAAA7yD,cACIvQ,KAAKmjE,gBAAT90D,WACQrO,KAARqjE,YACQrjE,KAARqjE,UAAAn0C,UAEQlvB,KAAKsjE,mBAAb,sCAOA,GAAAlhC,GAAApiC,KAAAmmC,2BACAnmC,KAAA6iE,aAAAU,SAAAnhC,EAAApiC,KAAAmmC,YACQnmC,KAARwjE,iBAAA13D,KAAA23D,qLAoBA,IAAAzjE,KAAAijE,iBAAA,KAAA1xC,OAAA,8DAEAvxB,MAAAijE,iBAAA11C,EACAvtB,KAAAojE,mBACQpjE,KAARijE,iBAAAS,aAAAp/D,UAAA,kGAQA,IAAAtE,KAAAijE,iBACA,KAAA1xC,OAAA,+DAEMvxB,MAAN6D,YACA7D,KAAA2jE,0BAAA3jE,KAAA6D,UAAAimC,eAEA9pC,KAAA4jE,QAAA5jE,KAAA6jE,gBAAA7jE,KAAA8jE,eACA9jE,KAAAwpC,SAAA,EAEIxpC,KAAK+jE,aAATlyD,gDAMA,IAAA7R,KAAAwpC,QAAA,CAEMxpC,KAANqjE,WAAArjE,KAAAqjE,UAAAnzD,eACAlQ,KAAAqjE,UAAA/yD,SAEMtQ,KAAKgkE,aACXhkE,KAAAgkE,WAAAnqC,QACQ75B,KAAKgkE,WAAb,MAEMhkE,KAAKikE,iBAAXjkE,KAAAikE,gBAAApX,YACA7sD,KAAAikE,gBAAA3zD,QAGA,IAAA4zD,GAAA,WAGAvgE,EAAA6lC,UACA7lC,EAAA6lC,SAAA,EACU7lC,EAAKwgE,aAAftyD,OACQlO,EAAKggE,0BAAb,MAGA3jE,MAAA2jE,2BACA,kBAAA3jE,MAAA2jE,0BAAAjxD,OAOM1S,KAAN2jE,0BAAAjxD,QACMsc,WAANk1C,IAGAA,qDASAlkE,MAAAgkE,YACAhkE,KAAAgkE,WAAAnqC,QAEA75B,KAAAgkE,WAAAhkE,KAAA4iE,QAAA9vC,KAAAyvC,IACApqD,UAAAnY,KAAA2Q,KAAA3Q,KAAA2Q,KAAA9E,MAAA,MAEQ0D,iBAAkBvP,KAA1B2N,kBACM0jB,WAAN,0BAEArxB,KAAAgkE,WAAkBI,cAAlB9/D,UAAyC,gFAGGtE,KAA5CqkE,2DAMArkE,MAAAikE,kBAAAjkE,KAAAikE,gBAAA,GAAAxwC,GAAAA,gBAAA8uC,GAAAviE,KAAA2N,oBAEA3N,KAAAqjE,WAEArjE,KAAAskE,eAGAtkE,KAAAqjE,UAAAnzD,gBACAlQ,KAAAsjE,mBAAAtjE,KAAAqjE,UAAAlzD,OAAAnQ,KAAAikE,iBAEQjkE,KAAKsjE,mBAAb3vC,SAAA4wC,WAAAvkE,KACMA,KAAKqkE,YAELrkE,KAAKuT,QAAXwrC,SAAA1vB,eAAAplB,KAAAC,EAAAA,KAAA,IAAA5F,UAAA,2FAUAswB,EAAA,GAAAC,GAAAA,oEACUkkB,aAAa,EACjBuB,cAAN,mCACMniC,UAAWnY,KAAjB2Q,KACM47B,eAANvsC,KAAA8sC,kBACMzb,WAAN,wBAEArxB,MAAAqjE,UAAArjE,KAAAgyB,SAAAuD,OAAwCX,GACxC50B,KAAAqjE,UAAA7uC,eAAAuQ,aAAA,OAAA,UAEI14B,EAAAA,MAAJrM,KAAAqjE,UAAyB1oC,gBAAiB36B,KAA1CqjE,UAAyD/uC,cAAzDt0B,KAAAqjE,UAAAjpB,gBAAAnwC,KAAArF,EAAAA,OAAA,YAMA,MAAAgN,GAAAwD,UAAA45B,EAAAA,QACArrC,EAAAs/D,kBAAArxD,EAAA2vC,QAAA3vC,EAAAwD,UAAAiuB,EAAAA,aACA/+B,UAAA,eAGAsN,EAAA2D,iBAEA5R,EAAAk2B,+FAQAyV,oBAAAtvC,KAAAijE,iBAAAuB,6BACAj1B,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACO4K,qBACAnK,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,2KAgBA,GAAA3J,GAAAlnC,KAAAknC,gCACUlnC,KAAKsjE,mBAAf3vC,SAAAuT,MAAAA,GAEMlnC,KAAKgkE,aACXhkE,KAAAgkE,WAAAS,kBAAAv9B,MAAAA,IAGA67B,EAAA1iE,aACAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,6BAtYA5C,SAAA,gBACEkF,gBAAiBC,EAAAA,wBAAnBC,OACEC,cAAFC,EAAAA,kBAAAC,SAIA+8D,EAAAz/C,eAAiB,WAAjB,QACAhjB,KAAAokE,gEA/FApkE,SAAQc,GAARf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAA0hE,QAjCA5hE,KAAEqkE,GAAFtkE,aAAAC,KAAAe,EAAAA,aAkBAf,KAAEsZ,EAAAA,eAAFvZ,aAAAC,KAAAe,EAAAA,aAKAf,SAAEc,GAAFf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAyF,EAAAA,eAMA88D,EAAAphE,gBAjCAijE,0BAAAtkE,KAAAqH,EAAAA,QAuRAk9D,UAAAvkE,KAAAqH,EAAAA,0DA9IAi8D,UAAAtjE,KAAAqH,EAAAA,QAGAyP,WAAA9W,KAAAqH,EAAAA,QAYA05D,eAAA/gE,KAAA+R,EAAAA,SAGAivD,gBAAAhhE,KAAA+R,EAAAA,SAcAgf,aAAA/wB,KAAAqH,EAAAA,QAQAw5D,YAAA7gE,KAAAqH,EAAAA,QAmBAo8D,eAAAzjE,KAAG+R,EAAAA,OAAH7R,MAAA,YAMA2jE,eAAA7jE,KAAA+R,EAAAA,OAAA7R,MAAA,YAGA05B,SAAA55B,KAAAqH,EAAAA,SAMAo7D,KCpLa+B,IACXv9D,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAAs0D,MAC9B1nC,OAAO,GAII2nC,IACXz9D,QAAS09D,EAAAA,cACTz9D,YAAaiJ,EAAAA,WAAU,WAAO,MAAAs0D,MAC9B1nC,OAAO,iBAaP,QAAF6nC,GAEWzvB,EAEA0vB,GAFAnlE,KAAXy1C,OAAWA,EAEAz1C,KAAXmlE,cAAWA,EACPnlE,KAAK6L,MAAQ7L,KAAKy1C,OAAO5pC,MAE7B,MAAAq5D,MAIAH,GAAA,WAwKE,QAAFA,GACc5kE,EACW0iE,EAC2BuC,EAC1BC,GAJxB,GAAF1hE,GAAA3D,IAKI,IAJUA,KAAdG,YAAcA,EACWH,KAAzB6iE,aAAyBA,EAC2B7iE,KAApDolE,aAAoDA,EAC1BplE,KAA1BqlE,WAA0BA,EAhELrlE,KAArBslE,WACM,GAAIt0D,GAAAA,aAGWhR,KAArBulE,UACM,GAAIv0D,GAAAA,aAGRhR,KAAF0jE,aAAiB,GAAI1yD,GAAAA,aAGnBhR,KAAFmjE,gBAAoB,GAAInyD,GAAAA,aAEtBhR,KAAF89B,WAAY,aAEF99B,KAAVwlE,aAAsB,aAEZxlE,KAAVylE,mBAA4B,aAElBzlE,KAAV0lE,wBAAoCh2D,EAAAA,aAAaC,MAEvC3P,KAAV2lE,oBAAgCj2D,EAAAA,aAAaC,MAGnC3P,KAAV4lE,gBAAyB,WACrB,MAAOjiE,GAAKkiE,gBACR,MAAQC,oBAAuBC,KAAQpiE,EAAKxD,YAAYuE,cAAcmH,SAIpE7L,KAAVgmE,cAAuB,SAAiB9jD,GACxC,GAAU+jD,GAAetiE,EAAKuiE,oBAAoBviE,EAAKk/D,aAAasD,YAAYjkD,EAAQrW,OACpF,QAASlI,EAAK6V,MAAQysD,GAClBtiE,EAAKk/D,aAAauD,YAAYziE,EAAK6V,IAAKysD,IAAiB,EACzD,MAAQI,kBAAqB7sD,IAAO7V,EAAK6V,IAAK8sD,OAAUL,KAItDjmE,KAAVumE,cAAuB,SAAiBrkD,GACxC,GAAU+jD,GAAetiE,EAAKuiE,oBAAoBviE,EAAKk/D,aAAasD,YAAYjkD,EAAQrW,OACpF,QAASlI,EAAK4V,MAAQ0sD,GAClBtiE,EAAKk/D,aAAauD,YAAYziE,EAAK4V,IAAK0sD,IAAiB,EACzD,MAAQO,kBAAqBjtD,IAAO5V,EAAK4V,IAAK+sD,OAAUL,KAItDjmE,KAAVymE,iBAA0B,SAAiBvkD,GAC3C,GAAU+jD,GAAetiE,EAAKuiE,oBAAoBviE,EAAKk/D,aAAasD,YAAYjkD,EAAQrW,OACpF,OAAQlI,GAAK+iE,aAAgBT,IAAgBtiE,EAAK+iE,YAAYT,IAClDU,qBAAuB,GAA/B,MAIE3mE,KAAV4mE,WACMC,EAAAA,WAAWC,SACN9mE,KAAK4lE,gBAAiB5lE,KAAKgmE,cAAehmE,KAAKumE,cAAevmE,KAAKymE,mBAGpEzmE,KAAV6lE,iBAA4B,GAOnB7lE,KAAK6iE,aACR,KAAMC,IAA2B,cAEnC,KAAK9iE,KAAKolE,aACR,KAAMtC,IAA2B,mBAInC9iE,MAAK2lE,oBAAsB9C,EAAakE,cAAcziE,UAAS,WAC7DX,EAAKkI,MAAQlI,EAAKkI,QAiHxB,MAjREF,QAAFC,eACMm5D,EADNhhE,UAAA,qBAAE,SACkB8H,GADlB,GAAFlI,GAAA3D,IAES6L,KAIL7L,KAAKgnE,YAAcn7D,EACnB7L,KAAKgnE,YAAYC,eAAejnE,MAChCA,KAAK0lE,wBAAwBn1D,cAE7BvQ,KAAK0lE,wBAA0B1lE,KAAKgnE,YAAYxD,iBAAiBl/D,UAAS,SAAE+c,GAC1E1d,EAAKkI,MAAQwV,EACb1d,EAAK6hE,aAAankD,GAClB1d,EAAKm6B,aACLn6B,EAAK4hE,UAAU1zD,KAAK,GAAIqzD,IAAwBvhE,EAAMA,EAAKxD,YAAYuE,gBACvEf,EAAK2hE,WAAWzzD,KAAK,GAAIqzD,IAAwBvhE,EAAMA,EAAKxD,YAAYuE,oDAM5EiH,OAAFC,eACMm5D,EADNhhE,UAAA,2BAAE,SACwB8H,GACtB7L,KAAK0mE,YAAc76D,EACnB7L,KAAKylE,sDAKP95D,OAAFC,eACMm5D,EADNhhE,UAAA,aAAE,WACwB,MAAO/D,MAAKygC,YACpC,SAAU50B,GACRA,EAAQ7L,KAAK6iE,aAAasD,YAAYt6D,GACtC7L,KAAK6lE,iBAAmBh6D,GAAS7L,KAAK6iE,aAAaqE,QAAQr7D,GAC3DA,EAAQ7L,KAAKkmE,oBAAoBr6D,EACrC,IAAUs7D,GAAUnnE,KAAK6L,KACrB7L,MAAKygC,OAAS50B,EACd7L,KAAKonE,aAAav7D,GAEb7L,KAAK6iE,aAAaU,SAAS4D,EAASt7D,IACvC7L,KAAK0jE,aAAa7xD,KAAKhG,oCAM3BF,OAAFC,eACMm5D,EADNhhE,UAAA,WAAE,WACsB,MAAO/D,MAAKqgC,UAClC,SAAQx0B,GACN7L,KAAKqgC,KAAOrgC,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,IACnE7L,KAAKylE,sDAKP95D,OAAFC,eACMm5D,EADNhhE,UAAA,WAAE,WACsB,MAAO/D,MAAKogC,UAClC,SAAQv0B,GACN7L,KAAKogC,KAAOpgC,KAAKkmE,oBAAoBlmE,KAAK6iE,aAAasD,YAAYt6D,IACnE7L,KAAKylE,sDAKP95D,OAAFC,eACMm5D,EADNhhE,UAAA,gBAAE,WAC0B,QAAS/D,KAAKsmC,eACxC,SAAaz6B,GACf,GAAU46B,GAAW1rB,EAAAA,sBAAsBlP,GACjCmB,EAAUhN,KAAKG,YAAYuE,aAE7B1E,MAAKsmC,YAAcG,IACrBzmC,KAAKsmC,UAAYG,EACjBzmC,KAAKmjE,gBAAgBtxD,KAAK40B,IAIxBA,GAAYz5B,EAAQme,MAItBne,EAAQme,wCAoFZ45C,EAAFhhE,UAAAmE,YAAE,WACElI,KAAK0lE,wBAAwBn1D,cAC7BvQ,KAAK2lE,oBAAoBp1D,cACzBvQ,KAAK0jE,aAAar1D,WAClBrO,KAAKmjE,gBAAgB90D,YAIvB02D,EAAFhhE,UAAAsjE,0BAAE,SAA0B/7C,GACxBtrB,KAAKylE,mBAAqBn6C,GAI5By5C,EAAFhhE,UAAAujE,SAAE,SAASpY,GACP,MAAOlvD,MAAK4mE,WAAa5mE,KAAK4mE,WAAW1X,GAAK,MAOhD6V,EAAFhhE,UAAAwjE,6BAAE,WACE,MAAOvnE,MAAKwkE,6BAOdO,EAAFhhE,UAAAygE,0BAAE,WACE,MAAOxkE,MAAKqlE,WAAarlE,KAAKqlE,WAAWb,4BAA8BxkE,KAAKG,aAI9E4kE,EAAFhhE,UAAAqnB,WAAE,SAAWvf,GACT7L,KAAK6L,MAAQA,GAIfk5D,EAAFhhE,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAKwlE,aAAel6C,GAItBy5C,EAAFhhE,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAK89B,WAAaxS,GAIpBy5C,EAAFhhE,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,GAGlBo5C,EAAFhhE,UAAAi/B,WAAE,SAAWpxB,GACb,GAAU41D,GAAiB51D,EAAM2vC,QAAU3vC,EAAMwD,UAAYmuB,EAAAA,UAErDvjC,MAAKgnE,aAAeQ,IAAmBxnE,KAAKG,YAAYuE,cAAc+iE,WACxEznE,KAAKgnE,YAAYl0C,OACjBlhB,EAAM2D,mBAIVwvD,EAAFhhE,UAAA2jE,SAAE,SAAS77D,GACX,GAAQ43D,GAAOzjE,KAAK6iE,aAAa8E,MAAM97D,EAAO7L,KAAKolE,aAAauC,MAAMpC,UAClEvlE,MAAK6lE,iBAAmBpC,GAAQzjE,KAAK6iE,aAAaqE,QAAQzD,GAC1DA,EAAOzjE,KAAKkmE,oBAAoBzC,GAE3BzjE,KAAK6iE,aAAaU,SAASE,EAAMzjE,KAAKygC,QAMzCzgC,KAAKylE,sBALLzlE,KAAKygC,OAASgjC,EACdzjE,KAAKwlE,aAAa/B,GAClBzjE,KAAK0jE,aAAa7xD,KAAK4xD,GACvBzjE,KAAKulE,UAAU1zD,KAAK,GAAIqzD,IAAwBllE,KAAMA,KAAKG,YAAYuE,kBAM3EqgE,EAAFhhE,UAAA65B,UAAE,WACE59B,KAAKslE,WAAWzzD,KAAK,GAAIqzD,IAAwBllE,KAAMA,KAAKG,YAAYuE,iBAI1EqgE,EAAFhhE,UAAAm/D,iBAAE,WACE,MAAOljE,MAAKqlE,WAAarlE,KAAKqlE,WAAWn+B,UAAQ9lC,IAInD2jE,EAAFhhE,UAAAg/B,QAAE,WAEM/iC,KAAK6L,OACP7L,KAAKonE,aAAapnE,KAAK6L,OAGzB7L,KAAK89B,cAICinC,EAAVhhE,UAAAqjE,aAAE,SAAqBv7D,GACnB7L,KAAKG,YAAYuE,cAAcmH,MAC3BA,EAAQ7L,KAAK6iE,aAAa+E,OAAO/7D,EAAO7L,KAAKolE,aAAayC,QAAQtC,WAAa,IAO7ER,EAAVhhE,UAAAmiE,oBAAE,SAA4Bh9C,GAC1B,MAAQlpB,MAAK6iE,aAAaiF,eAAe5+C,IAAQlpB,KAAK6iE,aAAaqE,QAAQh+C,GAAQA,EAAM,qBArS7F5oB,KAACC,EAAAA,UAADC,OACE6C,SAAU,uBACViE,WACEw9D,GACAE,IACCz9D,QAASwgE,GAA0BvgE,YAAau9D,IAEnDpkE,MACEm7C,gBAAiB,SACjBsM,mBAAoB,kDACpB4f,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZt8C,SAAU,YACVE,YAAa,sBAEfvrB,SAAU,6DA/EZH,KAAEmH,EAAAA,aAmBFnH,KAAQqkE,GAARtkE,aAAAC,KAoNOe,EAAAA,aACPf,SAAAc,GAAAf,aAAAC,KAAOe,EAAAA,WAAPf,KAAmBgB,EAAAA,OAAnBd,MAA0B6nE,QApN1B/nE,KAAQ0oD,GAAR3oD,aAAAC,KAqNOe,EAAAA,gCAtJPinE,gBAAAhoE,KAAGqH,EAAAA,QAqBHg/D,sBAAArmE,KAAGqH,EAAAA,QAQHkE,QAAAvL,KAAGqH,EAAAA,QAiBH6R,MAAAlZ,KAAGqH,EAAAA,QASH4R,MAAAjZ,KAAGqH,EAAAA,QASHyP,WAAA9W,KAAGqH,EAAAA,QAsBH29D,aAAAhlE,KAAG+R,EAAAA,SAIHkzD,YAAAjlE,KAAG+R,EAAAA,UAuLH0yD,KCjVAwD,GAAA,WAAA,QAAAA,MAGsC,sBAHtCjoE,KAACC,EAAAA,UAADC,OACE6C,SAAU,gCAEZklE,KAGAC,GAAA,WAmDE,QAAFA,GACW/nD,EACCpN,EACeo1D,GAFhBzoE,KAAXygB,MAAWA,EACCzgB,KAAZqT,mBAAYA,EAjCFrT,KAAV8N,cAA0B4B,EAAAA,aAAaC,KAoCvC,IAAU+4D,GAAiBxhE,OAAOuhE,EAC9BzoE,MAAKgH,SAAY0hE,GAAqC,IAAnBA,EAAwBA,EAAiB,KARhF,MApBE/8D,QAAFC,eACM48D,EADNzkE,UAAA,gBAAE,WAEE,WAAuB3C,KAAnBpB,KAAKsmC,WAA2BtmC,KAAKukE,WAChCvkE,KAAKukE,WAAWntD,WAGhBpX,KAAKsmC,eAEhB,SAAaz6B,GACX7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,oCAsBzC28D,EAAFzkE,UAAAoK,YAAE,SAAY9J,GACNA,EAAoB,YACtBrE,KAAK2oE,sBAITH,EAAFzkE,UAAAmE,YAAE,WACElI,KAAK8N,cAAcyC,eAGrBi4D,EAAFzkE,UAAAkE,mBAAE,WACEjI,KAAK2oE,sBAGPH,EAAFzkE,UAAAkrB,MAAE,SAAMrd,GACA5R,KAAKukE,aAAevkE,KAAKoX,WAC3BpX,KAAKukE,WAAWzxC,OAChBlhB,EAAM2sB,oBAIFiqC,EAAVzkE,UAAA4kE,mBAAE,WAAA,GAAFhlE,GAAA3D,KACU4oE,EAAqB5oE,KAAKukE,WAAavkE,KAAKukE,WAAWpB,gBAAkBptD,EAAAA,KACzE8yD,EAAgB7oE,KAAKukE,YAAcvkE,KAAKukE,WAAWtB,iBACrDjjE,KAAKukE,WAAWtB,iBAAiBE,gBAAkBptD,EAAAA,KACjD+yD,EAAoB9oE,KAAKukE,WAC3Bl4D,EAAAA,MAAMrM,KAAKukE,WAAWR,aAAc/jE,KAAKukE,WAAWJ,cACpDpuD,EAAAA,IAEJ/V,MAAK8N,cAAcyC,cACnBvQ,KAAK8N,cAAgBzB,EAAAA,MACnBrM,KAAKygB,MAAMpc,QACXukE,EACAC,EACAC,GACAxkE,UAAS,WAAO,MAAAX,GAAK0P,mBAAmB/B,iCA/F9ChR,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,wBACEkC,SAAU,imBACVC,QAAF,quBACE7E,MACFC,MAAA,wHAKIwnC,qBAAJ,8CACIC,mBAAJ,4CACIxc,UAAJ,mBAEAprB,SAAA,sBACAqF,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,oFAzBAvF,KAAQkB,OAARnB,aAAAC,KAAAmB,EAAAA,UAAAjB,MAAA,iBAgEAgoE,EAAA7mE,mFA/BAyV,WAAA9W,KAAAqH,EAAAA,QAGA2Z,gBAAAhhB,KAAQqH,EAAAA,QAGRohE,cAAAzoE,KAAA46B,EAAAA,aAAA16B,MAAA+nE,IAAA55D,QAAA,MAcAq6D,UAAA1oE,KAAAoO,EAAAA,UAAQlO,MAAR,UAAAmO,QAAA,OAMA65D,KCxDAS,GAAA,WAAA,QAAAA,MA4CkC,sBA5ClC3oE,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACA8hB,GACAqlD,GACAv3C,EAAAA,cACAvvB,EAAAA,WACAH,EAAAA,cAEFI,SACEy/D,GACAqH,GACApG,GACAR,GACAwC,GACAyD,GACAD,GACA9G,GACAE,GACAE,GACAuH,IAEFzmE,cACEm/D,GACAqH,GACApG,GACAR,GACAwC,GACAyD,GACAD,GACA9G,GACAE,GACAE,GACAuH,IAEF9hE,WACE+hE,GACAlH,IAEFvwC,iBACE2wC,GACA6G,QAGJH,KC/DAK,GAAA,WAAA,QAAAA,KAqBUtpE,KAAV0gC,WAA+B,EAMrB1gC,KAAVupE,QAA4B,EAH5B,MANE59D,QAAFC,eACM09D,EADNvlE,UAAA,gBAAE,WAC0B,MAAO/D,MAAK0gC,eACtC,SAAa70B,GAAkB7L,KAAK0gC,UAAY3lB,EAAAA,sBAAsBlP,oCAItEF,OAAFC,eACM09D,EADNvlE,UAAA,aAAE,WACuB,MAAO/D,MAAKupE,YACnC,SAAU19D,GAAkB7L,KAAKupE,OAASxuD,EAAAA,sBAAsBlP,mDA1BlEvL,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,cACE1C,MACFsG,KAAA,YACMwlB,0BAAN,uCACI+8C,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACI9oE,MAAJ,eAEA2E,SAAA,GACAC,QAAA,+SACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,WAGAyjE,EAAA3nE,kEASA2nE,KCrBAld,GAAA,WAAA,QAAAA,MAK+B,sBAL/B9rD,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,GAAiBD,EAAAA,cAC3BM,SAAUinE,GAAYtnE,IACtBW,cAAe2mE,QAEjBld,KCwBawF,GAAgB,GAAI53C,GAAAA,eAAiC,iB1FCrD2vD,IAMXC,gBAAiB56D,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,kBAC3CD,EAAAA,MAAM,WAAYrC,EAAAA,OAAOsC,UAAW,oBACpCE,EAAAA,WAAW,4CACTC,EAAAA,QAlC0C,wCAsC9Cw6D,sBAAuB76D,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,kBAAmBrC,EAAAA,OACvB6P,OAAQ,yBAERqtD,QAASC,gBAAiB,UAE5B96D,EAAAA,MAAM,WAAYrC,EAAAA,OAChB6P,OAAQ,wBAERqtD,QAASE,eAAgB,UAE3B56D,EAAAA,WAAW,4CAA6Cm3C,EAAAA,OACtD9uB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiBzW,UAAU,IACrD5R,EAAAA,QAnD0C,0CAwD9C46D,cAAej7D,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAO6P,OAAQ,MAAO5P,WAAY,YAC3DoC,EAAAA,MAAM,WAAYrC,EAAAA,OAAO6P,OAAQ,IAAK5P,WAAY,aAClDuC,EAAAA,WAAW,4CACTC,EAAAA,QA5D0C,yC2FNhD8iD,GAAA,WAIE,QAAFA,GAAqB9F,GAAArsD,KAArBqsD,UAAqBA,EACrB,sBALA/rD,KAACC,EAAAA,UAADC,OACE6C,SAAU,gFAPZ/C,KAAmBiN,EAAAA,eAWnB4kD,KC4BI+X,GAAW,EAqBFlZ,GACT,GAAIh3C,GAAAA,eAAgD,uCAQxDi4C,GAAA,SAAA1uD,GA0EE,QAAF0uD,GAA6DkY,EAC/C92D,EACA+2D,EACQz8D,EACU9J,EACgC85B,EAE9C4xB,GAPhB,GAAF5rD,GAQIJ,EARJK,KAAA5D,KAQUmqE,EAAW92D,EAAoB+2D,IARzCpqE,WAGsB2D,GAAtBgK,kBAAsBA,EAE0ChK,EAAhEg6B,eAAgEA,EArDtDh6B,EAAV0tD,aAAwB,EAsBZ1tD,EAAZ0mE,YAA0B,GAAIr5D,GAAAA,aAGlBrN,EAAZ2mE,cAA4B,GAAIt5D,GAAAA,aAGrBrN,EAAX4mE,cAA2B,GAAIx8D,GAAAA,QAe7BpK,EAAF6mE,UAAc,8BAA8BN,KAG1CvmE,EAAF8mE,mBAAuB,GAAI18D,GAAAA,QAWvBpK,EAAKwmE,UAAYA,EACjBxmE,EAAKE,UAAYA,EAIjBF,EAAK8mE,mBAAmBxgE,KAAKsH,EAAAA,qBAAoB,SAAEC,EAAGC,GACpD,MAAOD,GAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,WACpDrN,UAAS,SAACsN,GACY,SAApBA,EAAMF,YACc,aAAlBE,EAAMD,QACRhO,EAAK0mE,YAAYx4D,OACU,cAAlBD,EAAMD,SACfhO,EAAK2mE,cAAcz4D,UAKrB09C,IACF5rD,EAAKkuD,WAAatC,EAAesC,cAtCvC,MAxCuC/tD,GAAvCmuD,EAAA1uD,GAOEoI,OAAFC,eACMqmD,EADNluD,UAAA,kBAAE,WAEE,MAAO/D,MAAKqxD,aAAgBrxD,KAAKmqE,WAAanqE,KAAKmqE,UAAUtY,gBAE/D,SAAehmD,GACb7L,KAAKqxD,YAAct2C,EAAAA,sBAAsBlP,oCAI3CF,OAAFC,eACMqmD,EADNluD,UAAA,sBAAE,WAEE,MAAO/D,MAAK0qE,iBAAoB1qE,KAAKmqE,WAAanqE,KAAKmqE,UAAU5Y,oBAEnE,SAAmB1lD,GACjB7L,KAAK0qE,gBAAkB7+D,mCA8DzBomD,EAAFluD,UAAA4mE,YAAE,WACE,QAAI3qE,KAAKmqE,WAI4E,aAA3EnqE,KAAK4qE,SAAW5qE,KAAKmqE,UAAU7Y,YAActxD,KAAK6qE,sBAM9D5Y,EAAFluD,UAAA8mE,kBAAE,WACE,MAAO7qE,MAAK4qE,SAAW,WAAa,aAGtC3Y,EAAFluD,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACQA,MAAK8qE,cAEP9qE,KAAKk6B,OAAOjwB,KACV6F,EAAAA,UAAS,MACTlL,EAAAA,OAAM,WAAO,MAAAjB,GAAKinE,WAAajnE,EAAKgrC,UACpCzkC,EAAAA,KAAK,IACL5F,UAAS,WACTX,EAAKgrC,QAAU,GAAIpgC,GAAAA,eAAe5K,EAAKmnE,aAAaze,UAAW1oD,EAAKgK,sBAK1EskD,EAAFluD,UAAAoK,YAAE,SAAY9J,GACVrE,KAAKuqE,cAAcz+D,KAAKzH,IAG1B4tD,EAAFluD,UAAAmE,YAAE,WACE3E,EAAJQ,UAAUmE,YAAVtE,KAAA5D,MACIA,KAAKyqE,mBAAmBp8D,WACxBrO,KAAKuqE,cAAcl8D,YAIrB4jD,EAAFluD,UAAAgnE,eAAE,WACE,GAAI/qE,KAAKgrE,MAAO,CACpB,GAAYC,GAAiBjrE,KAAK6D,UAAUimC,cAChCohC,EAAclrE,KAAKgrE,MAAMtmE,aAC/B,OAAOumE,KAAmBC,GAAeA,EAAYnmE,SAASkmE,GAGhE,OAAO,kBAxJX3qE,KAACgF,EAAAA,UAAD9E,OAAAgF,QAAA,w+CACEnC,SAAU,sBACV5C,SAAF,oBACE8E,SAAU,4bACVO,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEnF,QAAF,WAAA,YACEyqE,SAAF,SAAA,SAAA,kBACEh5D,YAAFw3D,GAAAM,eACE3iE,YAGFC,QAAAqqD,GAAAwZ,aAEuChqE,KAAvCT,MACAC,MAAA,sBACMgwD,uBAAN,WACIzjC,kCAAJ,sCACIk+C,sCAAJ,6KAwDA/qE,KAAAgoC,EAAAA,4BAvIAhoC,KAAEgG,EAAAA,mBALFhG,SAAQc,GAARf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAyF,EAAAA,cAmBA3F,KAAEkB,OAAFnB,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,2BA6HA9sB,SAAAc,GAAAf,aAAAC,KAAegB,EAAAA,OAAfd,MAAsBwwD,MAAtB1wD,KAAAe,EAAAA,cAEA4wD,EAAAtwD,4EAlDA0oE,cAAA/pE,KAAA+R,EAAAA,SASAi4D,gBAAAhqE,KAAA+R,EAAAA,SASAy4D,eAAAxqE,KAAA46B,EAAAA,aAAA16B,MAAA2xD,IAAAxjD,QAAA,MAGAq8D,QAAA1qE,KAAAoO,EAAAA,UAAAlO,MAAA,QAAAmO,QAAA,OAYAsjD,uBAgBcC,GAAd,yBAkFA,MALAA,GAAA7xD,aAMAC,KAAAC,EAAAA,UAAAC,iCANAG,MACAC,MAAA,sBAIAsxD,KtBvMAjB,GAAA,WAoCE,QAAFA,GACqB1O,EACPloB,EACAp6B,EACAoT,EAEJk8C,GANR,GAAF5rD,GAAA3D,IACqBA,MAArBuiD,MAAqBA,EACPviD,KAAdq6B,SAAcA,EACAr6B,KAAdC,cAAcA,EACAD,KAAdqT,mBAAcA,EANJrT,KAAVsrE,0BAAsC57D,EAAAA,aAAaC,KASnD,IAAU47D,GAA4BhpB,EAAM4nB,UACpC5nB,EAAM4nB,UAAUr8D,cAAc7D,KAC1BrF,EAAAA,OAAM,SAACP,GAAW,SAAGA,EAAoB,aAAKA,EAAwB,mBAC1EsL,EAAAA,KAIJ3P,MAAKsrE,0BACDj/D,EAAAA,MACIk2C,EAAMroB,OAAQqoB,EAAM/zB,OAAQ+8C,EAC5BhpB,EAAMgoB,cAActgE,KAAKrF,EAAAA,OAAM,SAC3BP,GACE,SACEA,EAAoB,YACpBA,EAAkB,UAClBA,EAAwB,oBAEvCC,UAAS,WAAO,MAAAX,GAAK0P,mBAAmB/B,iBAGzCixC,EAAM/zB,OACHvkB,KAAKrF,EAAAA,OAAM,WAAO,MAAA29C,GAAMwoB,oBACxBzmE,UAAS,WAAO,MAAArE,GAAc0gB,SAAS0Z,EAAU,aAEpDp6B,EAAcse,QAAQ8b,GAAU/1B,UAAS,SAAC2J,GACpCA,GAAUs0C,EAAM4nB,WAClB5nB,EAAM4nB,UAAUzY,mBAAmB/tD,KAInC4rD,IACFvvD,KAAKgqE,eAAiBza,EAAeya,eACrChqE,KAAK+pE,gBAAkBxa,EAAewa,iBAQ5C,MAMEp+D,QAAFC,eAAMqlD,EAANltD,UAAA,gBAAE,WACE,MAAO/D,MAAKuiD,MAAMnrC,0CAIpB65C,EAAFltD,UAAAynE,QAAE,WACExrE,KAAKuiD,MAAM5jB,UAIbsyB,EAAFltD,UAAA0nE,YAAE,WACE,MAAOzrE,MAAKuiD,MAAMqoB,UAIpB3Z,EAAFltD,UAAA8mE,kBAAE,WACE,MAAO7qE,MAAKuiD,MAAMsoB,qBAIpB5Z,EAAFltD,UAAA2nE,YAAE,WACE,MAAO1rE,MAAKuiD,MAAMhsB,IAIpB06B,EAAFltD,UAAA4nE,mBAAE,WACE,MAAO3rE,MAAKuiD,MAAMgP,gBAIpBN,EAAFltD,UAAA6nE,YAAE,WACE,OAAQ5rE,KAAKuiD,MAAMsP,aAAe7xD,KAAKuiD,MAAMnrC,UAI/C65C,EAAFltD,UAAA8nE,SAAE,SAASj6D,GACP,OAAQA,EAAMwD,SAEZ,IAAKO,GAAAA,MACL,IAAKD,GAAAA,MACEP,EAAAA,eAAevD,KAClBA,EAAM2D,iBACNvV,KAAKwrE,UAGP,MACF,SAKE,YAJIxrE,KAAKuiD,MAAM4nB,WACbnqE,KAAKuiD,MAAM4nB,UAAU1Y,qBAAqB7/C,MAYlDq/C,EAAFltD,UAAA2O,MAAE,SAAMzE,OAAR,KAAAA,IAAQA,EAAR,WACIjO,KAAKC,cAAc0gB,SAAS3gB,KAAKq6B,SAAUpsB,IAG7CgjD,EAAFltD,UAAAmE,YAAE,WACElI,KAAKsrE,0BAA0B/6D,cAC/BvQ,KAAKC,cAAcC,eAAeF,KAAKq6B,0BA3J3C/5B,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,6BACEmC,QAAF,wlCACED,SAAU,mRACVO,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEsM,YACFw3D,GAAAC,gBACAD,GAAAE,uBAEAlpE,MACAC,MAAA,6BACMqG,KAAN,SACI8gD,YAAJ,kBACInoB,kBAAJ,oBACIksC,uBAAJ,gBACI3kE,uBAAJ;uCACIrG,uBAAwB,iBACxB8vD,uBAAwB,gBACxBC,+CAAJ,mCACIC,gDAAJ,oCACIpyC,UAAJ,YACIsN,YAAJ,mBACI+kC,qBAAsB,uQAlC1BzwD,KAAEoB,EAAAA,eAZFpB,KAAE8R,EAAAA,oBAPF9R,SAAQc,GAARf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAwwD,MAAA1wD,KAAAe,EAAAA,cAwEA4vD,EAAAtvD,kFA0CAsvD,iCAsFA,MALAC,GAAA7wD,aAMAC,KAAAC,EAAAA,UAAAC,wCANAG,MACAC,MAAA,8CAIAswD,iCAaA,MALAC,GAAA9wD,aAMAC,KAAAC,EAAAA,UAAAC,kCANAG,MACAC,MAAA,wCAIAuwD,KCrMAC,GAAA,SAAA7tD,GAAA,QAAA6tD,KAAA,GAAAztD,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,WAsBU2D,GAAV0tD,aAAiC,EAUtB1tD,EAAX2tD,YAAkD,UAGvC3tD,EAAX4tD,eAAwD,UA6BxD,MApDkCztD,GAAlCstD,EAAA7tD,GAOEoI,OAAFC,eACMwlD,EADNrtD,UAAA,kBAAE,WAC4B,MAAO/D,MAAKqxD,iBACxC,SAAe1kD,GAAiB3M,KAAKqxD,YAAct2C,EAAAA,sBAAsBpO,oCAgBzEykD,EAAFrtD,UAAAkE,mBAAE,WACEjI,KAAKuU,YAAc,GAAI2B,GAAAA,gBAAgBlW,KAAKwxD,UAAUp7C,YAIxDg7C,EAAFrtD,UAAA0tD,qBAAE,SAAqB7/C,GACZ,GAAAwD,GAAXxD,EAAAwD,QACUksC,EAAUthD,KAAKuU,WAEjBa,KAAYC,EAAAA,KACTF,EAAAA,eAAevD,KAClB0vC,EAAQhsC,qBACR1D,EAAM2D,kBAECH,IAAYI,EAAAA,IAChBL,EAAAA,eAAevD,KAClB0vC,EAAQ7rC,oBACR7D,EAAM2D,kBAGRvV,KAAKuU,YAAYsB,UAAUjE,IAI/Bw/C,EAAFrtD,UAAA2tD,mBAAE,SAAmBC,GACjB3xD,KAAKuU,YAAY8B,iBAAiBs7C,mBA9DtCrxD,KAACC,EAAAA,UAADC,OACE6C,SAAU,gBACV5C,SAAU,eACVC,QAAS,SACT4G,YACEC,QAASqqD,GACTpqD,YAAa4pD,IAEfzwD,MACEC,MAAO,uCAMX4wD,WAAAlxD,KAAG+H,EAAAA,gBAAH7H,MAAmBywD,IAA0B3oD,aAAa,MAI1DupD,aAAAvxD,KAAGqH,EAAAA,QAaH2pD,cAAAhxD,KAAGqH,EAAAA,QAGH4pD,iBAAAjxD,KAAGqH,EAAAA,SA6BHypD,GApDkCU,EAAAA,cCdlCC,GAAA,WAAA,QAAAA,MAqBiC,sBArBjCzxD,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,EAAAA,aAAciwD,EAAAA,mBAAoB/vD,EAAAA,cAC5CI,SACE+uD,GACAa,GACAC,GACAjB,GACAE,GACAD,GACAiB,IAEFxvD,cACEyuD,GACAa,GACAC,GACAjB,GACAE,GACAD,GACAiB,QAGJJ,KC7BaK,GAAgB,GAAIp4C,GAAAA,eAAgC,iBCWjEq4C,GAAA,WAgBE,QAAFA,GACYh4B,EACkCi4B,GADlCtyD,KAAZq6B,SAAYA,EACkCr6B,KAA9CsyD,UAA8CA,EAL5CtyD,KAAFuyD,SAAqB,EACnBvyD,KAAFwyD,SAAqB,EAYrB,MALE7mD,QAAFC,eACMymD,EADNtuD,UAAA,eAAE,WACwB,MAAO/D,MAAKuyD,cACpC,SAAY1mD,GAAiB7L,KAAKuyD,SAAW16C,KAAKC,MAAMxD,EAAAA,qBAAqBzI,qCAG7EF,OAAFC,eACMymD,EADNtuD,UAAA,eAAE,WACwB,MAAO/D,MAAKwyD,cACpC,SAAY3mD,GAAiB7L,KAAKwyD,SAAW36C,KAAKC,MAAMxD,EAAAA,qBAAqBzI,qCAM7EwmD,EAAFtuD,UAAA0uD,UAAE,SAAUC,EAAkB7mD,GACzB7L,KAAKq6B,SAAS31B,cAAmB,MAASguD,GAAY7mD,kBAnC3DvL,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,gBACE5C,SAAU,cACVE,MACFC,MAAA,iBAEA2E,SAAA,gEACAC,QAAA,gvCACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,2IAUAwsD,EAAA1wD,mEAQA0wD,KARIM,GAAJ,yBAqBA3yD,KAAAq6B,SAAAA,iFAaAs4B,EAAAtyD,aACAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,qPAdAsC,gBAAAC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAIA2sD,EAAErvC,eAAF,WAAA,QACAhjB,KAAAmH,EAAAA,8GAgBA,sBADAnH,KAAAC,EAAAA,UAAAC,OAAA6C,SAAA,qCAIA1C,MAAAC,MAAA,uBAHAgyD,iCAUA,sBADAtyD,KAAAC,EAAAA,UAAAC,OAAA6C,SAAA,uBAIA1C,MAAAC,MAAA,4BAHAiyD,iCAUA,sBADAvyD,KAAAC,EAAAA,UAAAC,OAAA6C,SAAA,uBAIA1C,MAAAC,MAAA,4BAHAkyD,mBC/EA,QAAAC,KAKE/yD,KAAFgzD,YAAwB,EAGtBhzD,KAAFizD,SAAqB,EA6HrB,MA1HEtnD,QAAFC,eAAMmnD,EAANhvD,UAAA,gBAAE,WAAyB,MAAO/D,MAAKizD,SAAW,mCAMhDtnD,OAAFC,eAAMmnD,EAANhvD,UAAA,eAAE,WACF,GAAUmvD,GAAar7C,KAAK0B,IAA5B1Q,MAAuBgP,KAAY7X,KAAKmzD,QAGpC,OAAOD,GAAa,EAAIlzD,KAAKozD,SAAWF,EAAa,EAAIlzD,KAAKozD,0CAUhEL,EAAFhvD,UAAAsvD,OAAE,SAAOC,EAAoBC,GAA3B,GAAF5vD,GAAA3D,IACIA,MAAKgzD,YAAc,EACnBhzD,KAAKizD,SAAW,EAEhBjzD,KAAKmzD,QAAU,GAAI3uD,OAAM8uD,GACzBtzD,KAAKmzD,QAAQK,KAAK,EAAG,EAAGxzD,KAAKmzD,QAAQ5uD,QACrCvE,KAAKiN,UAAYsmD,EAAMjnD,IAAG,SAACmnD,GAAQ,MAAA9vD,GAAK+vD,WAAWD,MAI7CV,EAAVhvD,UAAA2vD,WAAE,SAAmBD,GAErB,GAAUE,GAAgB3zD,KAAK4zD,iBAAiBH,EAAKI,QASjD,OANA7zD,MAAK8zD,kBAAkBH,EAAeF,GAItCzzD,KAAKgzD,YAAcW,EAAgBF,EAAKI,QAEjC,GAAIE,IAAa/zD,KAAKizD,SAAUU,IAIjCZ,EAAVhvD,UAAA6vD,iBAAE,SAAyBI,GACvB,GAAIA,EAAWh0D,KAAKmzD,QAAQ5uD,OAC1B,KAAMgtB,OAAM,oCAAoCyiC,EAAtD,kCACyCh0D,KAAKmzD,QAAQ5uD,OAAtD,KAIA,IAAQovD,IAAiB,EACjBM,GAAe,CAGnB,IAEMj0D,KAAKgzD,YAAcgB,EAAWh0D,KAAKmzD,QAAQ5uD,QAC7CvE,KAAKk0D,WACLP,EAAgB3zD,KAAKmzD,QAAQlrC,QAAQ,EAAGjoB,KAAKgzD,aAC7CiB,EAAcj0D,KAAKm0D,iBAAiBR,KAItCA,EAAgB3zD,KAAKmzD,QAAQlrC,QAAQ,EAAGjoB,KAAKgzD,cAGvB,GAAlBW,GAOJM,EAAcj0D,KAAKm0D,iBAAiBR,GAIpC3zD,KAAKgzD,YAAcW,EAAgB,IAVjC3zD,KAAKk0D,WACLP,EAAgB3zD,KAAKmzD,QAAQlrC,QAAQ,EAAGjoB,KAAKgzD,aAC7CiB,EAAcj0D,KAAKm0D,iBAAiBR,WAY9BM,EAAcN,EAAgBK,GAA6B,GAAfC,EAItD,OAAOp8C,MAAK0B,IAAIo6C,EAAe,IAIzBZ,EAAVhvD,UAAAmwD,SAAE,WACEl0D,KAAKgzD,YAAc,EACnBhzD,KAAKizD,UAGL,KAAK,GAAIhoD,GAAI,EAAGA,EAAIjL,KAAKmzD,QAAQ5uD,OAAQ0G,IACvCjL,KAAKmzD,QAAQloD,GAAK4M,KAAK0B,IAAI,EAAGvZ,KAAKmzD,QAAQloD,GAAK,IAQ5C8nD,EAAVhvD,UAAAowD,iBAAE,SAAyBR,GACvB,IAAK,GAAI1oD,GAAI0oD,EAAgB,EAAG1oD,EAAIjL,KAAKmzD,QAAQ5uD,OAAQ0G,IACvD,GAAuB,GAAnBjL,KAAKmzD,QAAQloD,GACf,MAAOA,EAKX,OAAOjL,MAAKmzD,QAAQ5uD,QAIdwuD,EAAVhvD,UAAA+vD,kBAAE,SAA0Br0C,EAAeg0C,GACvC,IAAK,GAAIxoD,GAAI,EAAGA,EAAIwoD,EAAKI,QAAS5oD,IAChCjL,KAAKmzD,QAAQ1zC,EAAQxU,GAAKwoD,EAAKW,SAGrCrB,mBAOE,QAAFgB,GAAqBM,EAAoBC,GAApBt0D,KAArBq0D,IAAqBA,EAAoBr0D,KAAzCs0D,IAAyCA,EACzC,MAAAP,MCxJMQ,GAAsB,8CAO5B,QAAAC,KAEEx0D,KAAFy0D,MAAkB,EAChBz0D,KAAFuyD,SAAqB,EAiIrB,MApHEiC,GAAFzwD,UAAA2wD,KAAE,SAAKC,EAAoBxB,EAA0ByB,EAAcz8C,GAC/DnY,KAAK60D,YAAcC,GAAeH,GAClC30D,KAAKy0D,MAAQtB,EAAQC,SACrBpzD,KAAKuyD,SAAWY,EAAQiB,QACxBp0D,KAAK+0D,MAAQH,EACb50D,KAAKi2B,WAAa9d,GAUpBq8C,EAAFzwD,UAAAixD,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkCj1D,KAAK60D,YAAvC,MAAwDK,EAAxD,MAUEV,EAAFzwD,UAAAoxD,gBAAE,SAAgBC,EAAkBzxB,GAGhC,MAAkB,KAAXA,EAAe,IAAM0xB,GAAK,IAAID,EAAzC,MAAuDp1D,KAAK60D,YAA5D,OAA8ElxB,IAU5E6wB,EAAFzwD,UAAAuxD,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDv1D,KAAK60D,YAA5D,KAUEL,EAAFzwD,UAAAyxD,SAAE,SAAS/B,EAAmBR,EAAkBwC,GAEhD,GAAQC,GAAsB,IAAM11D,KAAK+0D,MAIjCY,GAA8B31D,KAAK+0D,MAAQ,GAAK/0D,KAAK+0D,KAEzD/0D,MAAK41D,aAAanC,EAAMgC,EAAUC,EAAqBC,GACvD31D,KAAK61D,aAAapC,EAAMR,EAAUyC,EAAqBC,IAIzDnB,EAAFzwD,UAAA6xD,aAAE,SAAanC,EAAmBgC,EAAkBK,EACrCC,GAEf,GAAQC,GAAgBh2D,KAAKg1D,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApBj2D,KAAKi2B,WAAuB,QAAU,MACjDw9B,GAAKhB,UAAUwD,EAAMj2D,KAAKm1D,gBAAgBa,EAAeP,IACzDhC,EAAKhB,UAAU,QAAS4C,GAAKr1D,KAAKs1D,YAAYU,EAAevC,EAAKI,YAMpEW,EAAFzwD,UAAAmyD,cAAE,WACE,MAAUl2D,MAAK60D,YAAnB,OAAqC70D,KAAKuyD,SAA1C,SAOEiC,EAAFzwD,UAAAoyD,YAAE,SAAYC,GACV,MAAUp2D,MAAKuyD,SAAnB,MAAiCvyD,KAAKs1D,YAAYc,EAAY,IAgB5D5B,EAAFzwD,UAAAsyD,kBAAE,WAA+C,MAAO,OAQxD7B,oBAUE,QAAF8B,GAAqBC,GAAnB,GAAF5yD,GAA+CJ,EAA/CK,KAAA5D,OAAAA,WAAqB2D,GAArB4yD,eAAqBA,IAgCrB,MAlCqCzyD,GAArCwyD,EAAA/yD,GAIE+yD,EAAFvyD,UAAA2wD,KAAE,SAAKC,EAAoBxB,EAA0ByB,EAAcz8C,GAI/D,GAHA5U,EAAJQ,UAAU2wD,KAAV9wD,KAAA5D,KAAe20D,EAAYxB,EAASyB,EAAMz8C,GACtCnY,KAAKu2D,eAAiBzB,GAAe90D,KAAKu2D,iBAErChC,GAAoBt5C,KAAKjb,KAAKu2D,gBACjC,KAAMhlC,OAAM,kBAAkBvxB,KAAKu2D,eAAzC,wBAIED,EAAFvyD,UAAA8xD,aAAE,SAAapC,EAAmBR,GAC9BQ,EAAKhB,UAAU,MAAOzyD,KAAKm1D,gBAAgBn1D,KAAKu2D,eAAgBtD,IAChEQ,EAAKhB,UAAU,SAAU4C,GAAKr1D,KAAKs1D,YAAYt1D,KAAKu2D,eAAgB9C,EAAKW,YAG3EkC,EAAFvyD,UAAAsyD,kBAAE,WACE,OACE,SAAUhB,GAAQr1D,KAAKm2D,YAAYn2D,KAAKu2D,gBAA9C,MAAmEv2D,KAAKk2D,mBAItEI,EAAFvyD,UAAAyyD,MAAE,SAAM9G,GACJA,EAAK+G,eAAe,SAAU,OAE1B/G,EAAKgH,QACPhH,EAAKgH,OAAOtsD,QAAO,SAACqpD,GAClBA,EAAKhB,UAAU,MAAO,MACtBgB,EAAKhB,UAAU,SAAU,SAIjC6D,GAlCqC9B,mBAgDnC,QAAFmC,GAAc9qD,GAAZ,GAAFlI,GACIJ,EADJK,KAAA5D,OAAAA,WAEI2D,GAAKizD,YAAY/qD,KAuCrB,MA/CqC/H,GAArC6yD,EAAApzD,GAWEozD,EAAF5yD,UAAA8xD,aAAE,SAAapC,EAAmBR,EAAkB6C,EACrCC,GACf,GAAQc,GAAuBf,EAAe91D,KAAK82D,cAC/C92D,MAAK+2D,eAAiB/2D,KAAKg1D,gBAAgB6B,EAAsBd,GAKjEtC,EAAKhB,UAAU,YAAazyD,KAAKm1D,gBAAgBn1D,KAAK+2D,eAAgB9D,IACtEQ,EAAKhB,UAAU,aAAc4C,GAAKr1D,KAAKs1D,YAAYt1D,KAAK+2D,eAAgBtD,EAAKW,YAG/EuC,EAAF5yD,UAAAsyD,kBAAE,WACE,OACE,gBAAiBhB,GAAQr1D,KAAKm2D,YAAYn2D,KAAK+2D,gBAArD,MAA0E/2D,KAAKk2D,mBAI7ES,EAAF5yD,UAAAyyD,MAAE,SAAM9G,GACJA,EAAK+G,eAAe,gBAAiB,OAErC/G,EAAKgH,OAAOtsD,QAAO,SAACqpD,GAClBA,EAAKhB,UAAU,YAAa,MAC5BgB,EAAKhB,UAAU,aAAc,SAIzBkE,EAAV5yD,UAAA6yD,YAAE,SAAoB/qD,GACtB,GAAUmrD,GAAanrD,EAAMk1B,MAAM,IAE/B,IAA0B,IAAtBi2B,EAAWzyD,OACb,KAAMgtB,OAAM,uDAAuD1lB,EAAzE,IAGI7L,MAAK82D,eAAiB71B,WAAW+1B,EAAW,IAAM/1B,WAAW+1B,EAAW,KAE5EL,GA/CqCnC,mBAwDrC,QAAAyC,oDAuBA,MAvBmCnzD,GAAnCmzD,EAAA1zD,GACE0zD,EAAFlzD,UAAA8xD,aAAE,SAAapC,EAAmBR,GAElC,GAAQ4D,GAAuB,IAAM72D,KAAKuyD,SAGlC2E,GAAuBl3D,KAAKy0D,MAAQ,GAAKz0D,KAAKy0D,MAG9CsC,EAAiB/2D,KAAKg1D,gBAAgB6B,EAAsBK,EAEhEzD,GAAKhB,UAAU,MAAOzyD,KAAKm1D,gBAAgB4B,EAAgB9D,IAC3DQ,EAAKhB,UAAU,SAAU4C,GAAKr1D,KAAKs1D,YAAYyB,EAAgBtD,EAAKW,YAGtE6C,EAAFlzD,UAAAyyD,MAAE,SAAM9G,GACAA,EAAKgH,QACPhH,EAAKgH,OAAOtsD,QAAO,SAACqpD,GAClBA,EAAKhB,UAAU,MAAO,MACtBgB,EAAKhB,UAAU,SAAU,SAIjCwE,GAvBmCzC,ICnOnC2C,GAAA,WAwCE,QAAFA,GAAsB98B,EACY1pB,GADZ3Q,KAAtBq6B,SAAsBA,EACYr6B,KAAlC2Q,KAAkCA,EATxB3Q,KAAVo3D,QAA4B,MAwB5B,MAZEzrD,QAAFC,eACMurD,EADNpzD,UAAA,YAAE,WACqB,MAAO/D,MAAK+0D,WACjC,SAASlpD,GACP7L,KAAK+0D,MAAQl9C,KAAK0B,IAAI,EAAG1B,KAAKC,MAAMxD,EAAAA,qBAAqBzI,sCAI3DF,OAAFC,eACMurD,EADNpzD,UAAA,kBAAE,WAC2B,MAAO/D,MAAKo3D,aACvC,SAAevrD,GAAiB7L,KAAKo3D,QAAU,IAAY,MAATvrD,EAAgB,GAAKA,oCAGvEF,OAAFC,eACMurD,EADNpzD,UAAA,iBAAE,WACmC,MAAO/D,MAAKq3D,gBAC/C,SAAcxrD,GAChB,GAAU46B,GAAW,IAAY,MAAT56B,EAAgB,GAAKA,EAErC46B,KAAazmC,KAAKq3D,aACpBr3D,KAAKq3D,WAAa5wB,EAClBzmC,KAAKs3D,eAAet3D,KAAKq3D,8CAI7BF,EAAFpzD,UAAAuK,SAAE,WACEtO,KAAKu3D,aACLv3D,KAAKw3D,mBAOPL,EAAFpzD,UAAA0Q,sBAAE,WACEzU,KAAKy3D,gBAICN,EAAVpzD,UAAAwzD,WAAE,WACE,IAAKv3D,KAAK40D,KACR,KAAMrjC,OAAM,qFAMR4lC,EAAVpzD,UAAAyzD,gBAAE,WACOx3D,KAAKq3D,YACRr3D,KAAKs3D,eAAe,QAKhBH,EAAVpzD,UAAAuzD,eAAE,SAAuBI,GACjB13D,KAAK23D,aACP33D,KAAK23D,YAAYnB,MAAMx2D,MApGR,QAuGb03D,EACF13D,KAAK23D,YAAc,GAAIV,IACdS,GAAaA,EAAUzvC,QAAQ,MAAQ,EAChDjoB,KAAK23D,YAAc,GAAIhB,IAAgBe,GAEvC13D,KAAK23D,YAAc,GAAIrB,IAAgBoB,IAKnCP,EAAVpzD,UAAA0zD,aAAE,WAAA,GAAF9zD,GAAA3D,IACSA,MAAK43D,mBACR53D,KAAK43D,iBAAmB,GAAI7E,IAIlC,IAAUI,GAAUnzD,KAAK43D,iBACfrE,EAAQvzD,KAAK02D,OAAO9xD,OAAM,SAAC6uD,GAAQ,OAACA,EAAKnB,WAAamB,EAAKnB,YAAc3uD,IACzEwU,EAAYnY,KAAK2Q,KAAO3Q,KAAK2Q,KAAK9E,MAAQ,KAEhD7L,MAAK43D,iBAAiBvE,OAAOrzD,KAAK40D,KAAMrB,GACxCvzD,KAAK23D,YAAYjD,KAAK10D,KAAK20D,WAAYxB,EAASnzD,KAAK40D,KAAMz8C,GAE3Do7C,EAAMnpD,QAAO,SAAEqpD,EAAMnpD,GACzB,GAAYo5B,GAAMyvB,EAAQlmD,UAAU3C,EAC9B3G,GAAKg0D,YAAYnC,SAAS/B,EAAM/vB,EAAI2wB,IAAK3wB,EAAI4wB,OAG/Ct0D,KAAKy2D,cAAcz2D,KAAK23D,YAAYtB,sBAItCc,EAAFpzD,UAAA0yD,cAAE,SAAc7pD,GACRA,IACD5M,KAAKq6B,SAAS31B,cAAmB,MAASkI,EAAM,IAAMA,EAAM,oBAvInEtM,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,gBACE5C,SAAU,cACV8E,SAAU,uCACVC,QAAF,gvCACE7E,MACFC,MAAA,iBAEA0G,YACAC,QAAA6qD,GACA5qD,YAAA2vD,IAEAxxD,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,yHAvBAmxD,EAAQx1D,mGAiDRgzD,aAAAr0D,KAAAqH,EAAAA,QAMA+vD,YAAAp3D,KAAQqH,EAAAA,SAYRwvD,KCzEAU,GAAA,WAAA,QAAAA,MAqBgC,sBArBhCv3D,KAACuB,EAAAA,SAADrB,OACEsB,SAAU8pD,GAAe5pD,IACzBK,SACE80D,GACA9E,GACAM,GACA/G,GACA5pD,GACA6wD,GACAC,GACAF,IAEFjwD,cACEw0D,GACA9E,GACAM,GACAE,GACAC,GACAF,QAGJiF,mBCuCE,QAAFC,GAAchwD,GAGJ,EAAckmC,SAClBhuC,KAAK+3D,WAAU,EAEf/3D,KAAKg4D,IAAG,EAGd,MAAAF,MASAG,GAAA,WA+BE,QAAFA,GACwBC,EACZC,EACsBz0D,GAFV1D,KAAxBk4D,YAAwBA,EACZl4D,KAAZm4D,WAAYA,EA1BFn4D,KAAVo4D,gBAA4B,GAAIpiC,KAMtBh2B,KAAVq4D,gBAA4B,GAAIriC,KAGtBh2B,KAAVs4D,kBAA8B,GAAItiC,KAGxBh2B,KAAVu4D,sBAAkC,GAAIviC,KAG5Bh2B,KAAVw4D,uBAAmC,GAAIxiC,KAO7Bh2B,KAAVy4D,qBAAiC,iBAM3Bz4D,KAAK6D,UAAYH,EAlIvB,MA0IEu0D,GAAFl0D,UAAA20D,WAAE,SAAWC,EAAkBX,GAC3B,MAAO,MAAKY,sBAAsB,GAAID,EAAUX,IAQlDC,EAAFl0D,UAAA80D,kBAAE,SAAkBF,EAAkBG,GAClC,MAAO,MAAKC,6BAA6B,GAAIJ,EAAUG,IASzDb,EAAFl0D,UAAA60D,sBAAE,SAAsBI,EAAmBL,EAAkBX,GACzD,MAAO,MAAKiB,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcE,KASvEC,EAAFl0D,UAAAg1D,6BAAE,SAA6BC,EAAmBL,EAAkBG,GACpE,GAAUI,GAAmB,KAAKf,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAGnD,IAAUf,GAAa,KAAKwB,+BAA+BL,EACvD,OAAO,MAAKD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcC,KAOvEE,EAAFl0D,UAAAy1D,cAAE,SAAcxB,GACZ,MAAO,MAAKyB,yBAAyB,GAAIzB,IAO3CC,EAAFl0D,UAAA21D,qBAAE,SAAqBZ,GACnB,MAAO,MAAKa,gCAAgC,GAAIb,IAQlDb,EAAFl0D,UAAA01D,yBAAE,SAAyBT,EAAmBhB,GAC1C,MAAO,MAAK4B,qBAAqBZ,EAAW,GAAIlB,IAAcE,KAQhEC,EAAFl0D,UAAA41D,gCAAE,SAAgCX,EAAmBF,GACrD,GAAUI,GAAmB,KAAKf,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAGnD,IAAUf,GAAa,KAAK8B,sBAAsBX,EAC9C,OAAO,MAAKU,qBAAqBZ,EAAW,GAAIlB,IAAcC,KAWhEE,EAAFl0D,UAAA+1D,uBAAE,SAAuBC,EAAelL,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxCkL,GACI,KAAKvB,uBAAuB7hC,IAAIojC,EAAOlL,GACvC,MAOFoJ,EAAFl0D,UAAAi2D,sBAAE,SAAsBD,GACpB,MAAO/5D,MAAKw4D,uBAAuBh6C,IAAIu7C,IAAUA,GASnD9B,EAAFl0D,UAAAk2D,uBAAE,SAAuBpL,GAErB,MADA,MAAK4J,qBAAuB5J,EAC5B,MAOFoJ,EAAFl0D,UAAAm2D,uBAAE,WACE,MAAOl6D,MAAKy4D,sBAWdR,EAAFl0D,UAAAo2D,kBAAE,SAAkBC,GAAlB,GAAFz2D,GAAA3D,KACUg4D,EAAMh4D,KAAKm4D,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAG/C,IAAUG,GAAav6D,KAAKs4D,kBAAkB95C,IAAIw5C,EAE9C,OAAIuC,GACKxkD,EAAAA,GAAaykD,GAASD,IAGxBv6D,KAAKy6D,uBAAuB,GAAI3C,IAAcsC,IAAUnwD,KAC7DywD,EAAAA,IAAG,SAACC,GAAO,MAAAh3D,GAAK20D,kBAAkB3hC,IAAG,EAAOgkC,KAC5CruD,EAAAA,IAAG,SAACquD,GAAO,MAAAH,IAASG,OAYxB1C,EAAFl0D,UAAA62D,gBAAE,SAAgBh5C,EAAco3C,OAAhC,KAAAA,IAAgCA,EAAhC,GAEA,IAAUlxC,GAAM+yC,GAAQ7B,EAAWp3C,GACzB+Q,EAAS3yB,KAAKo4D,gBAAgB55C,IAAIsJ,EAExC,IAAI6K,EACF,MAAO3yB,MAAK86D,kBAAkBnoC,EAIpC,IAAUooC,GAAiB/6D,KAAKq4D,gBAAgB75C,IAAIw6C,EAEhD,OAAI+B,GACK/6D,KAAKg7D,0BAA0Bp5C,EAAMm5C,GAGvCE,EAAAA,WAAgBC,GAA4BpzC,KAGrDmwC,EAAFl0D,UAAAmE,YAAE,WACClI,KAAKo4D,gBAAgB1jC,QACrB10B,KAAKq4D,gBAAgB3jC,QACrB10B,KAAKs4D,kBAAkB5jC,SAMhBujC,EAAVl0D,UAAA+2D,kBAAE,SAA0BnoC,GACxB,MAAIA,GAAOolC,WAEFhiD,EAAAA,GAAaykD,GAAS7nC,EAAOolC,aAG7B/3D,KAAKy6D,uBAAuB9nC,GAAQ1oB,KACzCywD,EAAAA,IAAG,SAACC,GAAO,MAAAhoC,GAAOolC,WAAa4C,IAC/BruD,EAAAA,IAAG,SAACquD,GAAO,MAAAH,IAASG,OAalB1C,EAAVl0D,UAAAi3D,0BAAE,SAAkCp5C,EAAcm5C,GAAhD,GAAFp3D,GAAA3D,KAIUm7D,EAAYn7D,KAAKo7D,+BAA+Bx5C,EAAMm5C,EAE5D,IAAII,EAIF,MAAOplD,GAAAA,GAAaolD,EAK1B,IAAUE,GAAwDN,EAC3Dn2D,OAAM,SAAC02D,GAAiB,OAACA,EAAcvD,aACvCzrD,IAAG,SAACgvD,GACH,MAAO33D,GAAK43D,0BAA0BD,GAAerxD,KACnDuxD,EAAAA,WAAU,SAAEC,GACtB,GAAkBzD,GAAMr0D,EAAKw0D,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAciB,EAActD,IAKjF,OADA7U,SAAQD,MAAM,yBAAyB8U,EAAnD,YAAkEyD,EAAI1oC,SACnDhd,EAAAA,GAAa,UAO5B,OAAO2lD,GAAAA,SAASL,GAAsBpxD,KAAKqC,EAAAA,IAAG,WAClD,GAAYqvD,GAAYh4D,EAAKy3D,+BAA+Bx5C,EAAMm5C,EAE5D,KAAKY,EACH,KAAMT,IAA4Bt5C,EAGpC,OAAO+5C,OASH1D,EAAVl0D,UAAAq3D,+BAAE,SAAuCzC,EAAkBoC,GAGvD,IAAK,GAAI9vD,GAAI8vD,EAAex2D,OAAS,EAAG0G,GAAK,EAAGA,IAAK,CACzD,GAAY0nB,GAASooC,EAAe9vD,EAC9B,IAAI0nB,EAAOolC,WAAY,CAC7B,GAAc4D,GAAY37D,KAAK47D,uBAAuBjpC,EAAOolC,WAAYY,EACjE,IAAIgD,EACF,MAAOA,IAIb,MAAO,OAOD1D,EAAVl0D,UAAA02D,uBAAE,SAA+B9nC,GAA/B,GAAFhvB,GAAA3D,IACI,OAAOA,MAAK67D,UAAUlpC,EAAOqlC,KACxB/tD,KAAKqC,EAAAA,IAAG,SAACwvD,GAAW,MAAAn4D,GAAK41D,+BAA+BuC,OAOvD7D,EAAVl0D,UAAAw3D,0BAAE,SAAkC5oC,GAAlC,GAAFhvB,GAAA3D,IAEI,OAAI2yB,GAAOolC,WACFhiD,EAAAA,GAAa4c,EAAOolC,YAGtB/3D,KAAK67D,UAAUlpC,EAAOqlC,KAAK/tD,KAAKqC,EAAAA,IAAG,SAACwvD,GAOzC,MAJKnpC,GAAOolC,aACVplC,EAAOolC,WAAap0D,EAAKk2D,sBAAsBiC,IAG1CnpC,EAAOolC,eAOVE,EAAVl0D,UAAAw1D,+BAAE,SAAuCwC,GACzC,GAAUpB,GAAM36D,KAAK65D,sBAAsBkC,EAEvC,OADA/7D,MAAKg8D,kBAAkBrB,GAChBA,GAQD1C,EAAVl0D,UAAA63D,uBAAE,SAA+BK,EAAqBtD,GAGtD,GAAUuD,GAAaD,EAAQtZ,cAAc,QAAQgW,EAArD,KAEI,KAAKuD,EACH,MAAO,KAKb,IAAUC,GAAcD,EAAWE,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYnuB,SAASjmB,cACvB,MAAO/nB,MAAKg8D,kBAAiB,EAM/B,IAA2C,WAAvCG,EAAYnuB,SAASjmB,cACvB,MAAO/nB,MAAKg8D,kBAAkBh8D,KAAKs8D,cAAcH,GAQvD,IAAUxB,GAAM36D,KAAK65D,sBAAsB,cAIvC,OAFAc,GAAI11B,YAAYk3B,GAETn8D,KAAKg8D,kBAAkBrB,IAMxB1C,EAAVl0D,UAAA81D,sBAAE,SAA8B0C,GAChC,GAAUC,GAAMx8D,KAAK6D,UAAU0gC,cAAc,MACzCi4B,GAAIC,UAAYF,CACpB,IAAU5B,GAAM6B,EAAI7Z,cAAc,MAE9B,KAAKgY,EACH,KAAMppC,OAAM,sBAGd,OAAOopC,IAMD1C,EAAVl0D,UAAAu4D,cAAE,SAAsBtvD,GAGpB,IAAK,GAFD2tD,GAAM36D,KAAK65D,sBAAsB,eAE5B5uD,EAAI,EAAGA,EAAI+B,EAAQrI,WAAWJ,OAAQ0G,IACzC+B,EAAQrI,WAAWsG,GAAGjG,WAAahF,KAAK6D,UAAU64D,cACpD/B,EAAI11B,YAAYj4B,EAAQrI,WAAWsG,GAAGmxD,WAAU,GAIpD,OAAOzB,IAMD1C,EAAVl0D,UAAAi4D,kBAAE,SAA0BrB,GAMxB,MALAA,GAAI51B,aAAa,MAAO,IACxB41B,EAAI51B,aAAa,SAAU,QAC3B41B,EAAI51B,aAAa,QAAS,QAC1B41B,EAAI51B,aAAa,sBAAuB,iBACxC41B,EAAI51B,aAAa,YAAa,SACvB41B,GAOD1C,EAAVl0D,UAAA83D,UAAE,SAAkBzB,GAAlB,GAAFz2D,GAAA3D,IACI,KAAKA,KAAKk4D,YACR,KAAMyE,KAGR,IAAe,MAAXvC,EACF,KAAM7oC,OAAM,+BAA+B6oC,EAAjD,KAGA,IAAUpC,GAAMh4D,KAAKm4D,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAM/C,IAAUwC,GAAkB58D,KAAKu4D,sBAAsB/5C,IAAIw5C,EAEvD,IAAI4E,EACF,MAAOA,EAKb,IAAUC,GAAM78D,KAAKk4D,YAAY15C,IAAIw5C,GAAM8E,aAAc,SAAS7yD,KAC5D8yD,EAAAA,SAAQ,WAAO,MAAAp5D,GAAK40D,sBAAsB1hC,OAAOmhC,KACjDgF,EAAAA,QAIF,OADAh9D,MAAKu4D,sBAAsB5hC,IAAIqhC,EAAK6E,GAC7BA,GASD5E,EAAVl0D,UAAAk1D,kBAAE,SAA0BD,EAAmBL,EAAkBhmC,GAE7D,MADA,MAAKylC,gBAAgBzhC,IAAIkkC,GAAQ7B,EAAWL,GAAWhmC,GACvD,MAQMslC,EAAVl0D,UAAA61D,qBAAE,SAA6BZ,EAAmBrmC,GAClD,GAAUsqC,GAAkB,KAAK5E,gBAAgB75C,IAAIw6C,EAQjD,OANIiE,GACFA,EAAgBpzD,KAAK8oB,GAErB,KAAK0lC,gBAAgB1hC,IAAIqiC,GAAYrmC,IAGvC,qBApfJryB,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAY,+CAtFzB5f,KAAQ48D,EAAAA,WAAR78D,aAAAC,KAsHKe,EAAAA,aA5GLf,KAAQ68D,EAAAA,eA8GR78D,SAAAc,GAAAf,aAAAC,KAAKe,EAAAA,WAALf,KAAiBgB,EAAAA,OAAjBd,MAAwByF,EAAAA,oMAjIxBgyD,KAimBamF,IAEX71D,QAAS0wD,GACT73C,OACG,GAAI/e,GAAAA,SAAY,GAAIgf,GAAAA,SAAY43C,KAChC,GAAI52D,GAAAA,SAAY67D,EAAAA,YACjBC,EAAAA,cACC,GAAI97D,GAAAA,SAAY4E,EAAQ,WAE3Bqa,WAAY+8C,kBCvkBZ,QAAFC,GAAqBn9D,GAAAH,KAArBG,YAAqBA,EACrB,MAAAm9D,MACMC,GAAuDp6D,EAAWm6D,IAO3DE,GAAoB,GAAIxjD,GAAAA,eAAgC,qBACnEkG,WAAY,OACZ0J,QAAS6zC,KAyBLC,IACJ,YACA,gBACA,MACA,SACA,OACA,SACA,SACA,eACA,aACA,aACA,OACA,aAIqD,SAAAC,GAAQ,MAAA,IAAIA,EAAnE,KAAMC,GAA2BF,GAAkBpxD,IAAG,IAAsB20C,KAAK,MAG3E4c,GAAiB,4BA6BvBC,GAAA,SAAAv6D,GA4DE,QAAFu6D,GACMt6D,EACQu6D,EACkBC,EAKqBC,GARnD,GAAFt6D,GASIJ,EATJK,KAAA5D,KASUwD,IATVxD,WAEc2D,GAAdo6D,cAAcA,EAMuCp6D,EAArDs6D,UAAqDA,EAtC3Ct6D,EAAVu6D,SAA6B,EA2CpBF,GACHx6D,EAAWkB,cAAcqgC,aAAa,cAAe,UA9B3D,MA5B6BjhC,GAA7Bg6D,EAAAv6D,GAOEoI,OAAFC,eACMkyD,EADN/5D,UAAA,cAAE,WAEE,MAAO/D,MAAKk+D,aAEd,SAAWC,GACTn+D,KAAKk+D,QAAUnjD,EAAAA,sBAAsBojD,oCAQvCxyD,OAAFC,eACMkyD,EADN/5D,UAAA,eAAE,WACwB,MAAO/D,MAAKo+D,cACpC,SAAYvyD,GACV7L,KAAKo+D,SAAWp+D,KAAKq+D,kBAAkBxyD,oCAKzCF,OAAFC,eACMkyD,EADN/5D,UAAA,gBAAE,WACyB,MAAO/D,MAAKs+D,eACrC,SAAazyD,GACX7L,KAAKs+D,UAAYt+D,KAAKq+D,kBAAkBxyD,oCA4ClCiyD,EAAV/5D,UAAAw6D,eAAE,SAAuB5F,GACrB,IAAKA,EACH,OAAQ,GAAI,GAElB,IAAU6F,GAAQ7F,EAAS53B,MAAM,IAC7B,QAAQy9B,EAAMj6D,QACZ,IAAK,GAAG,OAAQ,GAAIi6D,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAMjtC,OAAM,uBAAuBonC,EAAlD,OAIEmF,EAAF/5D,UAAAoK,YAAE,SAAY9J,GAAZ,GAAFV,GAAA3D,KAEUy+D,EAAiBp6D,EAAiB,OAExC,IAAIo6D,EACF,GAAIz+D,KAAK0+D,QAAS,CACV,GAAAtlD,GAAdpZ,KAAAu+D,eAAAv+D,KAAA0+D,SAAe1F,EAAf5/C,EAAA,GAA0Bu/C,EAA1Bv/C,EAAA,EAEQpZ,MAAK+9D,cAAcnD,gBAAgBjC,EAAUK,GAAW/uD,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,SAC7Eq2D,GAAO,MAAAh3D,GAAKg7D,eAAehE,IAAI,SAC9Bc,GAAe,MAAAtY,SAAQyb,IAAI,0BAA0BnD,EAAI1oC,eAEnD0rC,GAAeI,eACxB7+D,KAAK8+D,kBAIL9+D,MAAK++D,kBACP/+D,KAAKg/D,0BAITlB,EAAF/5D,UAAAuK,SAAE,WAGMtO,KAAK++D,kBACP/+D,KAAKg/D,0BAITlB,EAAF/5D,UAAAk7D,mBAAE,WACF,GAAUC,GAAiBl/D,KAAKm/D,+BAE5B,IAAID,GAAkBl/D,KAAKi+D,WAAaiB,EAAet7B,KAAM,CACjE,GAAYw7B,GAAUp/D,KAAKi+D,UAAUhpB,aAQ3BmqB,KAAYp/D,KAAKq/D,gBACnBr/D,KAAKq/D,cAAgBD,EACrBp/D,KAAKs/D,yBAAyBF,MAKpCtB,EAAF/5D,UAAAmE,YAAE,WACMlI,KAAKm/D,iCACPn/D,KAAKm/D,gCAAgCzqC,SAIjCopC,EAAV/5D,UAAAg7D,eAAE,WACE,OAAQ/+D,KAAK0+D,SAGPZ,EAAV/5D,UAAA46D,eAAE,SAAuBhE,GACrB36D,KAAK8+D,kBAOL,KAAK,GAFCS,GAAY5E,EAAI6E,iBAAiB,SAE9Bv0D,EAAI,EAAGA,EAAIs0D,EAAUh7D,OAAQ0G,IACpCs0D,EAAUt0D,GAAG9F,aAAe,GAK9B,IAAInF,KAAKi+D,UAAW,CACxB,GAAYjpB,GAAOh1C,KAAKi+D,UAAUhpB,aAC5Bj1C,MAAKq/D,cAAgBrqB,EACrBh1C,KAAKy/D,qCAAqC9E,GAC1C36D,KAAKs/D,yBAAyBtqB,GAGhCh1C,KAAKG,YAAYuE,cAAcugC,YAAY01B,IAGrCmD,EAAV/5D,UAAA+6D,iBAAE,WACF,GAAUY,GAA6B1/D,KAAKG,YAAYuE,cAChDi7D,EAAaD,EAAc/6D,WAAWJ,MAQ1C,KANIvE,KAAKm/D,iCACPn/D,KAAKm/D,gCAAgCzqC,QAKhCirC,KAAc,CACzB,GAAYt1D,GAAQq1D,EAAc/6D,WAAWg7D,EAIhB,KAAnBt1D,EAAMrF,UAAmD,QAAjCqF,EAAM2jC,SAASjmB,eACzC23C,EAAcE,YAAYv1D,KAKxByzD,EAAV/5D,UAAAi7D,uBAAE,WACE,GAAKh/D,KAAK++D,iBAAV,CAIJ,GAAUc,GAAoB7/D,KAAKG,YAAYuE,cACrCo7D,EAAe9/D,KAAK+/D,QACtB//D,KAAK+9D,cAAc/D,sBAAsBh6D,KAAK+/D,SAC9C//D,KAAK+9D,cAAc7D,wBAEnB4F,IAAgB9/D,KAAKggE,wBACnBhgE,KAAKggE,uBACPH,EAAK/6D,UAAUqW,OAAOnb,KAAKggE,uBAEzBF,GACFD,EAAK/6D,UAAUuW,IAAIykD,GAErB9/D,KAAKggE,sBAAwBF,GAG3B9/D,KAAKigE,UAAYjgE,KAAKkgE,yBACpBlgE,KAAKkgE,wBACPL,EAAK/6D,UAAUqW,OAAOnb,KAAKkgE,wBAEzBlgE,KAAKigE,UACPJ,EAAK/6D,UAAUuW,IAAIrb,KAAKigE,UAE1BjgE,KAAKkgE,uBAAyBlgE,KAAKigE,YAS/BnC,EAAV/5D,UAAAs6D,kBAAE,SAA0BxyD,GACxB,MAAwB,gBAAVA,GAAqBA,EAAMzG,OAAO27B,MAAM,KAAK,GAAKl1B,GAQ1DiyD,EAAV/5D,UAAAu7D,yBAAE,SAAiCtqB,GACnC,GAAUmrB,GAAWngE,KAAKm/D,+BAElBgB,IACFA,EAAS/1D,QAAO,SAAEg2D,EAAOpzD,GACvBozD,EAAMh2D,QAAO,SAACuzD,GACZ3wD,EAAQ+3B,aAAa44B,EAAK/7C,KAAM,QAAQozB,EAAlD,IAA0D2oB,EAAK9xD,MAA/D,WAUUiyD,EAAV/5D,UAAA07D,qCAAE,SAA6CzyD,GAK3C,IAAK,GAJCqzD,GAAsBrzD,EAAQwyD,iBAAiB5B,IAC/CuC,EAAWngE,KAAKm/D,gCAClBn/D,KAAKm/D,iCAAmC,GAAInpC,KAEvC/qB,EAAI,EAAGA,EAAIo1D,EAAoB97D,OAAQ0G,KAApD,SAAaA,GACPyyD,GAAkBtzD,QAAO,SAACuzD,GAChC,GAAc2C,GAAuBD,EAAoBp1D,GAC3CY,EAAQy0D,EAAqBC,aAAa5C,GAC1C6C,EAAQ30D,EAAQA,EAAM20D,MAAM3C,IAAkB,IAEpD,IAAI2C,EAAO,CACnB,GAAcC,GAAaN,EAAS3hD,IAAI8hD,EAEzBG,KACHA,KACAN,EAASxpC,IAAI2pC,EAAsBG,IAGrC,EAAY52D,MAAM+X,KAAM+7C,EAAM9xD,MAAO20D,EAAM,SAdxCv1D,mBAjRb3K,KAACgF,EAAAA,UAAD9E,OAAA+E,SAAA,4BACElC,SAAU,WACV5C,SAAU,UACV+E,QAAF,spBACE9E,QAAF,SACEC,MACFsG,KAAA,MACMrG,MAAN,uBACI8/D,0BAAJ,SACIC,4BAAJ,iEAEA76D,cAAAC,EAAAA,kBAAiCC,KACjCL,gBAAAC,EAAAA,wBAAAC,6EAtHAvF,KAAEkB,OAAFnB,aAAAC,KAAAmB,EAAAA,UAAAjB,MAAA,mBAgBAF,SAAQc,GAARf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAg9D,SA8JAM,EAAAn8D,iEA7CAo+D,UAAAz/D,KAAAqH,EAAAA,QAUAs4D,WAAA3/D,KAAAqH,EAAAA,SAWAm2D,OCtJA/5C,GAAA,WAAA,QAAAA,MAK4B,sBAL5BzjB,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,IACVK,SAAUy7D,GAAS97D,IACnBW,cAAem7D,QAEjB/5C,mBZiBA,QAAA68C,MAAmB,MAAnBA,MACMC,GACFztD,EAAmBwtD,kBAIvB,QAAAE,MAAuB,MAAvBA,MACMC,GACF3tD,EAAmB0tD,IAEvB/U,GAAA,SAAAxoD,GAAA,QAAAwoD,KAAA,GAAApoD,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,WAiBE2D,GAAFmK,cAAkB,GAAIC,GAAAA,UAJtB,MACgCjK,GAAhCioD,EAAAxoD,GAKEwoD,EAAFhoD,UAAAoK,YAAE,WACEnO,KAAK8N,cAAchC,QAGrBigD,EAAFhoD,UAAAmE,YAAE,WACElI,KAAK8N,cAAcO,2BAxBvB/N,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,eACE5C,SAAU,aACVE,MACFsG,KAAA,aACMrG,MAAN,8BAEA2E,SAAA,4BACAC,QAAA;gwZACE9E,QAAF,iBACEoF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,WAGAkmD,OAIED,GAAF,SAAsCvoD,GAWtC,QAAAuoD,GAAA3rD,GAaA,GAAAwD,GAAAJ,EAAAK,KAAA5D,OAAAA,IAQA,OAJA2D,GAAAxD,YAAAA,kEAFAA,EAAAuE,cAAAI,UAAAuW,IAAA,mBAMA1X,oDAIA,GAAAqqC,GAAAhuC,KAAAG,YAAAuE,cAAAspC,SAAAjmB,mCACA,OAGmB,oBAAbimB,EACN,cAGA,sIAWA8d,EAAQzrD,aACRC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,+CA7CAkC,SAAA,4BACE5E,MACFC,MAAA,0BAEE4E,QAAF,wvZACE9E,QAAF,iBACAoF,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAIAimD,EAAAxoC,eAAA,WAAA,QACAhjB,KAAAmH,EAAAA,iDAyCA,sBADAnH,KAAAC,EAAAA,UAAAC,OAAA6C,SAAA,qCAIA1C,MAAAC,MAAA,uBAHAqrD,iCAUA,sBADA3rD,KAAAC,EAAAA,UAAAC,OAAA6C,SAAA,iCAIA1C,MAAAC,MAAA,qBAHAsrD,iCAUA,sBADA5rD,KAAAC,EAAAA,UAAAC,OAAA6C,SAAA,kCAIA1C,MAAAC,MAAA,qBAHAurD,KAGAH,GAAA,SAAAzoD,+CAGAI,GAAA02B,SAAAA,EAeA12B,EAAA6rD,oBAAA,EAUA7rD,EAAA+P,WAAA,GAAA3F,GAAAA,QAAEpK,EAAF6rD,sBAAAC,GAAAC,GAAA,gBAAAA,EAAAC,gBAAsBhsD,EAAtBisD,MAA8BH,GAAAC,CAM1B,IAAJ1iD,GAAiBrJ,EAAjBod,iBAaA,oGATUpd,EAAVisD,OAIAjsD,EAAAisD,MAAA9hD,cAAA7D,KAAAmK,EAAAA,UAAAzQ,EAAA+P,aAAApP,UAAA,WAKA+O,EAAA/B,iBAAA3N,gBAIEqoD,EAAFjoD,UAAAkE,8BAEA4nD,EAAA7vD,KAAAgqD,OAAAhqD,KAAAq6B,WAEE2xB,EAAFjoD,UAAAmE,uBAEAlI,KAAA0T,WAAA5H,iEAME,sIAMA,8DAAFxL,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,yDACgB5C,SAAhB,cACAE,4BAnEAmvD,+BAAA,mBACAjG,oCAAA,oBAEEnpD,QAAF,iBACA6E,SAAA,8aAEAI,gBAAAC,EAAAA,wBAAAC,WAIAmmD,EAAA1oC,eAAe,WAAf,QACAhjB,KAAAmH,EAAAA,aACAnH,KAAA8R,EAAAA,oBACA9R,KAAAyrD,GAAA1rD,aAAAC,KAAAe,EAAAA,yEAvJA2oD,SAAA1pD,KAAA+H,EAAAA,gBAAA7H,MAAAypD,IAAA3hD,aAAA,MAMAynD,UAAAzvD,KAAA46B,EAAAA,aAAA16B,MAAAyrD,IAAAt9C,QAAA,MA8JAqhD,QAAA1vD,KAAA46B,EAAAA,aAAA16B,MAAA0rD,IAAAv9C,QAAA,4BN3HA,QAAAshD,MAA4B,MAA5BA,MACMvE,GACFt4C,EAAmB68C,kBAGvB,QAAAC,MAAyB,MAAzBA,MACMC,GACF/8C,EAAmB88C,IAGVzE,IACXlkD,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAAs5C,MAC9B1sB,OAAO,iBAKP,QAAF+yB,GAEW3lC,EAEAo0B,GAFA7+C,KAAXyqB,OAAWA,EAEAzqB,KAAX6+C,OAAWA,EACX,MAAAuR,MAOA5G,GAAA,SAAAjmD,GAqFE,QAAFimD,GAAsBnvB,EACA4L,EAE2CyjB,GAH/D,GAAF/lD,GAIIJ,EAJJK,KAAA5D,OAAAA,WAAsB2D,GAAtB02B,SAAsBA,EACA12B,EAAtBsiC,gBAAsBA,EAE2CtiC,EAAjE+lD,cAAiEA,EA3DvD/lD,EAAVwiC,WAAsB,EACZxiC,EAAV2iC,WAAsB,EACZ3iC,EAAV0sD,WAAsB,EAUX1sD,EAAXwmD,iBAAkD,UAiClD,MAhDmCrmD,GAAnC0lD,EAAAjmD,GAkBEoI,OAAFC,eACM49C,EADNzlD,UAAA,aAAE,WAC4B,MAAO/D,MAAK6nC,QAAU7nC,KAAK0pD,cAAcxiB,WACrE,SAAUT,GAA0BzmC,KAAK6nC,OAASpB,mCAIlD96B,OAAFC,eACM49C,EADNzlD,UAAA,aAAE,WACmB,MAAO/D,MAAKygC,YAC/B,SAAUgG,GACJzmC,KAAKqhB,UAAYolB,IAAazmC,KAAK6L,QACrC7L,KAAKqhB,UAAW,GAGlBrhB,KAAKygC,OAASgG,mCAKhB96B,OAAFC,eACM49C,EADNzlD,UAAA,gBAAE,WACiB,MAAO/D,MAAKsmC,WAActmC,KAAK0pD,eAAiB1pD,KAAK0pD,cAActyC,cACpF,SAAavL,GACf,GAAU46B,GAAW1rB,EAAAA,sBAAsBlP,EAEnC46B,KAAazmC,KAAKsmC,YACpBtmC,KAAKsmC,UAAYG,EACjBzmC,KAAKimC,gBAAgB30B,iDAKzB3F,OAAFC,eACM49C,EADNzlD,UAAA,gBAAE,WAC0B,MAAO/D,MAAK0pD,cAAc5I,gBAAgBkD,WAAWhkD,WAC/E,SAAa6L,GACf,GAAUm4C,GAAajpC,EAAAA,sBAAsBlP,EAErCm4C,KAAehkD,KAAKmmC,YACtBnmC,KAAKypD,aAAazF,GAClBhkD,KAAK0pD,cAAc6B,uDAWvB/B,EAAFzlD,UAAAuK,SAAE,WAAA,GAAF3K,GAAA3D,KAMU+jD,EAAc/jD,KAAKmmC,SAEzBzqB,SAAQC,UAAUC,KAAI,YAChBjY,EAAKwiC,WAAa4d,KACpBpgD,EAAK0d,UAAW,EAChB1d,EAAKsiC,gBAAgB30B,mBAK3Bk4C,EAAFzlD,UAAAkE,mBAAE,WACE4nD,EAAS7vD,KAAKgqD,OAAQhqD,KAAKq6B,WAG7BmvB,EAAFzlD,UAAAmE,YAAE,WAAA,GAAFvE,GAAA3D,IACQA,MAAKqhB,UAGP3F,QAAQC,UAAUC,KAAI,WACpBjY,EAAK0d,UAAW,GAIxB,IAAUivC,GAAWtwD,KAAKqwD,UAChBE,EAAgBvwD,KAAK0pD,cAAc8G,sBAAsBxwD,KAG3DswD,IAAYC,GACdA,EAAc79C,SAKlB82C,EAAFzlD,UAAA46B,OAAE,WACE3+B,KAAKqhB,UAAYrhB,KAAKqhB,UAIxBmoC,EAAFzlD,UAAA2O,MAAE,WACE1S,KAAKq6B,SAAS31B,cAAcgO,SAO9B82C,EAAFzlD,UAAAspD,SAAE,WACE,MAAOrtD,MAAKkqD,MAASlqD,KAAKkqD,MAAMxlD,cAAcS,aAAe,GAAM,IAIrEqkD,EAAFzlD,UAAA+jC,kBAAE,WACE,MAAO9nC,MAAKoX,UAAYpX,KAAKshB,eAAiBthB,KAAK0pD,cAAcpoC,eAGnEkoC,EAAFzlD,UAAA6Y,aAAE,WACO5c,KAAKoX,WACRpX,KAAK2+B,SAGL3+B,KAAK0pD,cAAcjrB,iBAAiBz+B,QAIxCwpD,EAAFzlD,UAAA0sD,aAAE,WACEzwD,KAAK0pD,cAAcgH,kBAAkB1wD,MACrCA,KAAKqwD,WAAY,GAGnB7G,EAAFzlD,UAAA4sD,YAAE,WACE3wD,KAAK0pD,cAAc5rB,aACnB99B,KAAKqwD,WAAY,GAInB7G,EAAFzlD,UAAAgd,gBAAE;uCACE,MAAO/gB,MAAKq6B,SAAS31B,eAIvB8kD,EAAFzlD,UAAA0lD,aAAE,SAAapoC,GACX,MAAIA,KAAarhB,KAAKmmC,YAItBnmC,KAAKmmC,UAAY9kB,EAEbA,EACFrhB,KAAK0pD,cAAc5I,gBAAgBZ,OAAOlgD,MAE1CA,KAAK0pD,cAAc5I,gBAAgBV,SAASpgD,MAG9CA,KAAKimC,gBAAgB30B,gBACd,IAQTk4C,EAAFzlD,UAAAgjC,cAAE,WACE/mC,KAAKimC,gBAAgB30B,+BAzMzBhR,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,kBACE5C,SAAU,gBACVC,QAAF,iBACEC,MACFsG,KAAA,SACMrG,MAAN,gCACIirB,UAAJ,iBACIC,SAAJ,gBACIpN,UAAW,iBACXirC,SAAJ,KACIC,iCAAJ,WACIC,oCAAJ,qGAMIC,uBAAJ,sBACIhpD,uBAAJ,uBAEAyE,SAAA,6gBACAO,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FA/EAvF,KAAEypD,GAAF1pD,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAiQ,EAAAA,WAAA,6BAiJA+4C,EAAA7nD,0HAvDAqoD,SAAA1pD,KAAA+H,EAAAA,gBAAA7H,MAAAypD,MACAC,QAAA5pD,KAAGoO,EAAAA,UAAHlO,MAAA,QAAAmO,QAAA,MACAw7C,mBAAA7pD,KAAAqH,EAAAA,QAGAu/B,QAAA5mC,KAAGqH,EAAAA,QAGHkE,QAAAvL,KAAAqH,EAAAA,QAGAyP,WAAA9W,KAAAqH,EAAAA,QAMA0Z,WAAA/gB,KAAAqH,EAAAA,SAwBA6hD,sBAuIA,QAAAO,GAAA1vB,EAAArzB,GAoBA,GAAArD,GAAAJ,EAAAK,KAAA5D,OAAAA,IAqD2B,OAK3B2D,GAAA02B,SAAAA,kPALA12B,EApCA,4DAUA6a,gGAOIxe,KAAJoqD,wBAEAtqD,YAAA,EACEC,cAAF,mGA0BAqW,WACSktC,gBAGT+G,cAAA,4DAEArqD,KAAAsqD,cACAtqD,KAAAuqD,sBAAAvqD,KAAAsqD,aAEQtqD,KAAKsqD,YAAb,MAGAtqD,KAAAwqD,cAAAxqD,KAAA8gD,gBAAA10C,SAAA9H,UAAA,uBAGA,IAAA,GAAAmmD,GAAA,EAAArxC,EAAAxH,EAAAquC,MAAAwK,EAAArxC,EAAA7U,OAAAkmD,IAAA,CACA,GAAAC,GAAAtxC,EAAAqxC,EACAC,GAAArpC,UAAA,EAEA,GAAAzP,EAAAuuC,QACA,IAAA,GAAAtF,GAAA,EAAAG,EAAAppC,EAAAuuC,QAAAtF,EAAAG,EAAAz2C,OAAAs2C,IAAA,CAEA,GAAA6P,GAAyB1P,EAAzBH,EACA6P,GAAArpC,UAAA,0CAOA,GAAAspC,GAAAtmD,EAAA,cACUumD,EAAVvmD,EAAwC,0BACxCumD,IAAAA,EAAyCC,cAEjC7qD,KAARoqD,8EAMApqD,KAAAwqD,cAAAj6C,qVA6BA,GAAAu6C,GAAA9qD,KAAA2kD,gBAAA9F,EASA,qDANAiM,EAAA,EACA9qD,KAAAuU,YAAA8B,iBAAAy0C,EAAA,GAEA,IAAaA,GAAb9qD,KAAA2+C,QAAAp6C,OAAwD,GACxDvE,KAAAuU,YAAA8B,iBAAAwB,KAAA2B,IAAAsxC,EAAA,EAAA9qD,KAAA2+C,QAAAp6C,OAAA,KAEAvE,KAAAuU,YAAAmtC,6CAOA,GAAAtsC,GAAAxD,EAAAwD,QACUksC,EAAUthD,KAAKuU,YACfw2C,EAAVzJ,EAAAU,gBACUgJ,EAAV71C,EAAAA,eAAuCvD,aAC7B,IAAV+D,GAAAA,MAEA,IAAAD,GAAAA,MACAs1C,IACAhrD,KAAAirD,uBAEUr5C,EAAV2D,iBAEA,MACA,KAASF,GAAAA,KACT,IAAAG,GAAAA,IACew1C,IACD51C,IAAdC,EAAAA,KAAAisC,EAAAhsC,qBAAAgsC,EAAA7rC,oBACY7D,EAAZ2D,iBAEA,MACA,KAASosC,GAAAA,EACTxsC,EAAAA,eAAAvD,EAAA,aACA5R,KAAA2+C,QAAAhhC,KAAA,uFAGA,MACA,SACQ2jC,EAARzrC,UAAAjE,GAEAwD,IAAAiuB,EAAAA,UAAAjuB,IAAAmuB,EAAAA,aAAA3xB,EAAAqwC,UACAX,EAAAU,kBAAA+I,GAEQ/qD,KAARirD,kEASAjrD,KAAA2+C,UAAA3+C,KAAA0T,YACA1T,KAAA49B,UAAA59B,KAAAkrD,iKAYAlrD,KAAAuqD,sBAAAY,OAGAnrD,KAAAsqD,YAAAa,6OAqBAnrD,MAAA2+C,QAAAv0C,QAAA,8DAGA,GAAA64C,GAAAt/C,EAAAg7C,QAAAhhC,KAAA,YAEQ,OAARkhC,EAAAx9B,WAGA1d,EAAA4lD,YAAA5lD,EAAA4lD,YAAA1K,EAAAhzC,MAAAA,GAAAgzC,EAAAhzC,QAAAA,IAGQo3C,IACRA,EAAAwG,cAAA,+LAcA,GAAA2B,GAAAprD,KAAAuU,YAAAytC,mDAGQ,GAARqJ,GAA4BrrD,KAA5B2+C,QAAAxnC,UAAmDi0C,oBACzCC,EAAV1sB,SAKQ3+B,KAARy+B,iBAAA4sB,mHAgBAC,GAAA,KAGAA,GACOtrD,KAAPurD,4OAsBAvrD,KAAA2+C,QAAAv0C,QAAA,wCAGA2/C,EAAA1pD,aACAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,iDAvUA3C,QAAA,iBACEC,MACFsG,KAAA,UACAolB,aAAA,WACAzrB,MAAA,mCACMkrB,SAAN,eACIE,YAAJ,mBACIw/B,uBAAwB,OACxB1qD,uBAAJ,uBAEAyE,SAAA,4BACAC,QAAA,wvZACAM,cAAAC,EAAAA,kBAAAC,KACAsB,WAAAmkD,IACE9lD,gBAAFC,EAAAA,wBAAAC,WAIAkkD,EAAAzmC,eAAA,WAAA,QACAhjB,KAAAmH,EAAAA,gGA7RAk3C,UAAAr+C,KAAY+H,EAAAA,gBAAZ7H,MAAAgpD,IAAAlhD,aAAA,MAwVA+iC,kBAAA/qC,KAAA+R,EAAAA,0DAnDAk3C,cAAAjpD,KAAAqH,EAAAA,QAGAyP,WAAA9W,KAAAqH,EAAAA,SAOAoiD,GAOA2B,ICvTAC,GAAA,WAAA,QAAAA,MA2B4B,sBA3B5BrrD,KAACuB,EAAAA,SAADrB,OACEsB,SAAU8pD,GAAe1pD,GAAiBF,GAAiB6pD,GAAyB9pD,EAAAA,cACpFM,SACEypD,GACAC,GACAC,GACAC,GACAL,GACA5pD,GACAkqD,GACAC,GACAN,GACA9B,GACAP,GACA4C,IAEFzpD,cACEmpD,GACAC,GACAC,GACAC,GACAC,GACAC,GACApC,GACAP,QAGJmC,KC9BahV,IAYXC,cAAe5nC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQrC,EAAAA,OACZujB,QAAS,EACTjhB,UAAW,gBAEbE,EAAAA,WAAW,gBAAiBm3C,EAAAA,OAC1B9uB,EAAAA,MAAM,2CAA4CpoB,EAAAA,QAAQ,eAAgBzC,EAAAA,OACxEujB,QAAS,MAEX9gB,EAAAA,QAAQ,mCAAoCzC,EAAAA,OAAOsC,UAAW,iBAEhEE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBzC,EAAAA,OAAOujB,QAAS,QAQvE0mB,YAAa7nC,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAWrC,EAAAA,OAAOujB,QAAS,KACjC/gB,EAAAA,WAAW,aACTxC,EAAAA,OAAOujB,QAAS,IAChB9gB,EAAAA,QAAQ,qDAUDwnC,GAAcF,GAAkBE,YAOhCD,GAAgBD,GAAkBC,cCtD/CuF,GAAA,WAUE,QAAFA,GACYkQ,EACAC,EACAC,EACAr6B,EACAvkB,EACkB9J,GALlB7D,KAAZqsD,UAAYA,EACArsD,KAAZssD,0BAAYA,EACAtsD,KAAZusD,QAAYA,EACAvsD,KAAZkyB,UAAYA,EACAlyB,KAAZ2N,kBAAYA,EACkB3N,KAA9B6D,UAA8BA,EAR5B7D,KAAFw5C,UAAc,GAAIzrC,GAAAA,QAmDlB,MArCEouC,GAAFp4C,UAAAoM,OAAE,SAAOq8C,OAAT,KAAAA,IAASA,MACAxsD,KAAK2uC,UACR3uC,KAAK2uC,QAAU,GAAIpgC,GAAAA,eAAevO,KAAKqsD,UAAWrsD,KAAK2N,oBAGzD3N,KAAKsQ,SAEAtQ,KAAKysD,UACRzsD,KAAKysD,QAAU,GAAIC,GAAAA,gBAAgB1sD,KAAK6D,UAAU0gC,cAAc,OAC5DvkC,KAAKssD,0BAA2BtsD,KAAKusD,QAASvsD,KAAKkyB,WAG7D,IAAUllB,GAAuBhN,KAAKqsD,UAAU7oD,WAAWkB,aAKvDsI,GAAkB,WAAE2/C,aAAa3sD,KAAKysD,QAAQG,cAAe5/C,GAC7DhN,KAAK2uC,QAAQx+B,OAAOnQ,KAAKysD,QAASD,GAClCxsD,KAAKw5C,UAAU1tC,QAOjBqwC,EAAFp4C,UAAAuM,OAAE,WACMtQ,KAAK2uC,QAAQke,YACf7sD,KAAK2uC,QAAQr+B,UAIjB6rC,EAAFp4C,UAAAmE,YAAE,WACMlI,KAAKysD,SACPzsD,KAAKysD,QAAQv9B,0BAxDnB5uB,KAACC,EAAAA,UAADC,OACE6C,SAAU,sEAhBZ/C,KAAEiN,EAAAA,cACFjN,KAAEkQ,EAAAA,2BACFlQ,KAAEwsD,EAAAA,iBACFxsD,KAAEo1B,EAAAA,WACFp1B,KAAEgG,EAAAA,mBA2BFhG,SAAAc,GAAAf,aAAAC,KAAKgB,EAAAA,OAALd,MAAYyF,EAAAA,eA2CZk2C,KClEarF,GAAiB,GAAI98B,GAAAA,eAA6B,gCCc/D,QAAA+yC,MAAuB,MAAvBA,MACMC,GACF55C,EAAmB1M,EAAcqmD,KAMrChR,GAAA,SAAAx4C,GAmCE,QAAFw4C,GACY57C,EACUuD,EACVzD,EACoCq3C,GAJ9C,GAAF3zC,GAOIJ,EAAJK,KAAA5D,OAAAA,WANY2D,GAAZxD,YAAYA,EAEAwD,EAAZ1D,cAAYA,EACoC0D,EAAhD2zC,YAAgDA,EAjBrC3zC,EAAXsD,KAAqE,WAK1DtD,EAAX83C,SAA4C,GAAI1tC,GAAAA,QAG9CpK,EAAFq2C,cAA0B,EAGxBr2C,EAAFw0C,kBAA8B,EAWtBl4C,GAIFA,EAAcse,QAAQ5a,EAAKxD,aAAa,GAGtCm3C,GAAeA,EAAY2V,SAC7B3V,EAAY2V,QAAQtpD,GAGtBA,EAAKE,UAAYH,IAsDrB,MA3FiCI,GAAjCi4C,EAAAx4C,GAyCEw4C,EAAFh4C,UAAA2O,MAAE,SAAMzE,OAAR,KAAAA,IAAQA,EAAR,WACQjO,KAAKC,cACPD,KAAKC,cAAc0gB,SAAS3gB,KAAK+gB,kBAAmB9S,GAEpDjO,KAAK+gB,kBAAkBrO,SAI3BqpC,EAAFh4C,UAAAmE,YAAE,WACMlI,KAAKC,eACPD,KAAKC,cAAcC,eAAeF,KAAKG,aAGrCH,KAAKs3C,aAAet3C,KAAKs3C,YAAY4V,YACvCltD,KAAKs3C,YAAY4V,WAAWltD,MAG9BA,KAAKy7C,SAASptC,YAIhB0tC,EAAFh4C,UAAA+Y,aAAE,WACE,MAAO9c,MAAKoX,SAAW,KAAO,KAIhC2kC,EAAFh4C,UAAAgd,gBAAE,WACE,MAAO/gB,MAAKG,YAAYuE,eAU1Bq3C,EAAFh4C,UAAAopD,eADE,SACev7C,GACT5R,KAAKoX,WACPxF,EAAM2D,iBACN3D,EAAM2sB,oBAWVwd,EAAFh4C,UAAAqpD,kBADE,WAEEptD,KAAKy7C,SAAS3vC,KAAK9L,OAIrB+7C,EAAFh4C,UAAAspD,SAAE,WACF,GAAUrgD,GAAuBhN,KAAKG,YAAYuE,cACxC4oD,EAAettD,KAAK6D,UAAY7D,KAAK6D,UAAU0pD,UAAY,EAC7DC,EAAS,EAEb,IAAIxgD,EAAQrI,WAMV,IAAK,GALC8oD,GAASzgD,EAAQrI,WAAWJ,OAKzB0G,EAAI,EAAGA,EAAIwiD,EAAQxiD,IACtB+B,EAAQrI,WAAWsG,GAAGjG,WAAasoD,IACrCE,GAAUxgD,EAAQrI,WAAWsG,GAAG9F,YAKtC,OAAOqoD,GAAOpoD,uBArIlB9E,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,kBACE5C,SAAU,cACVC,QAAF,WAAA,iBACEC,MACF0G,cAAqB,OACfzG,MAAN,gBACI8sD,oCAAJ,eACIC,wCAAJ,mBACI/tB,kBAAJ,iBACI9+B,uBAAJ,sBACI8sD,kBAAmB,oBAEvBjoD,gBAAAC,EAAAA,wBAAyCC,OACzCC,cAAAC,EAAAA,kBAAAC,KACET,SAAF,yRA1CAjF,KAAEoB,EAAAA,eAiEFpB,SAAAc,GAAAf,aAAAC,KAAKgB,EAAAA,OAALd,MAAYs2C,MAAZx2C,KAAAe,EAAAA,cAEA06C,EAAAp6C,uGAjBAyrD,oBAAA9sD,KAAAuqC,EAAAA,aAAArqC,MAAA,iBAuFAu7C,OT/Ea9E,GACT,GAAIj9B,GAAAA,eAAsC,4BACxCkG,WAAY,OACZ0J,QAASikC,KAoBfC,GAAA,WA6IE,QAAFA,GACY3tD,EACAoT,EACkCi5B,GAFlCxsC,KAAZG,YAAYA,EACAH,KAAZuT,QAAYA,EACkCvT,KAA9CwsC,gBAA8CA,EA7IpCxsC,KAAV+tD,WAAsC/tD,KAAKwsC,gBAAgBmO,UACjD36C,KAAVguD,WAAsChuD,KAAKwsC,gBAAgBsO,UAIjD96C,KAAViuD,UAGUjuD,KAAVkuD,aAAyB,GAAIngD,GAAAA,QAGnB/N,KAAVmuD,iBAA6Bz+C,EAAAA,aAAaC,MAGxC3P,KAAFouD,cAGEpuD,KAAFquD,qBAA2C,OAGzCruD,KAAFuxC,eAAmB,GAAIxjC,GAAAA,QAYZ/N,KAAXs6C,cAAmCt6C,KAAKwsC,gBAAgB8N,cA8C9Ct6C,KAAVsuD,gBAAqCtuD,KAAKwsC,gBAAgB6O,eAQhDr7C,KAAVuuD,aAA8CvuD,KAAKwsC,gBAAgBuM,YA0C9C/4C,KAArBwuB,OACM,GAAIxd,GAAAA,aAOEhR,KAAZ65B,MAAoB75B,KAAKwuB,OAwLzB,MA7RE7iB,QAAFC,eACMkiD,EADN/pD,UAAA,iBAAE,WACiC,MAAO/D,MAAK+tD,gBAC7C,SAAcliD,GACE,WAAVA,GAAgC,UAAVA,GACxB2iD,KAEFxuD,KAAK+tD,WAAaliD,EAClB7L,KAAKu6C,sDAIP5uC,OAAFC,eACMkiD,EADN/pD,UAAA,iBAAE,WACiC,MAAO/D,MAAKguD,gBAC7C,SAAcniD,GACE,UAAVA,GAA+B,UAAVA,GACvB4iD,KAEFzuD,KAAKguD,WAAaniD,EAClB7L,KAAKu6C,sDAoBP5uC,OAAFC,eACMkiD,EADN/pD,UAAA,sBAAE,WACgC,MAAO/D,MAAKsuD,qBAC5C,SAAmBziD,GACjB7L,KAAKsuD,gBAAkBvzC,EAAAA,sBAAsBlP,oCAK/CF,OAAFC,eACMkiD,EADN/pD,UAAA,mBAAE,WACyC,MAAO/D,MAAKuuD,kBACrD,SAAgB1iD,GACd7L,KAAKuuD,aAAexzC,EAAAA,sBAAsBlP,oCAU5CF,OAAFC,eACMkiD,EADN/pD,UAAA,kBAAE,SACe2qD,GADf,GAAF/qD,GAAA3D,KAEU2uD,EAAqB3uD,KAAK4uD,mBAE5BD,IAAsBA,EAAmBpqD,QAC3CoqD,EAAmB5tB,MAAM,KAAK32B,QAAO,SAAEykD,GACrClrD,EAAKyqD,WAAWS,IAAa,IAIjC7uD,KAAK4uD,oBAAsBF,EAEvBA,GAAWA,EAAQnqD,SACrBmqD,EAAQ3tB,MAAM,KAAK32B,QAAO,SAAEykD,GAC1BlrD,EAAKyqD,WAAWS,IAAa,IAG/B7uD,KAAKG,YAAYuE,cAAcmqD,UAAY,qCAY/CljD,OAAFC,eACMkiD,EADN/pD,UAAA,iBAAE,WAC0B,MAAO/D,MAAKqxB,gBACtC,SAAcq9B,GAAmB1uD,KAAKqxB,WAAaq9B,mCAkBnDZ,EAAF/pD,UAAAuK,SAAE,WACEtO,KAAKu6C,sBAGPuT,EAAF/pD,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAKuU,YAAc,GAAI2B,GAAAA,gBAA6BlW,KAAKiuD,QAAQ73C,WAAWktC,gBAC5EtjD,KAAKmuD,iBAAmBnuD,KAAKuU,YAAYkvC,OAAOn/C,UAAS,WAAO,MAAAX,GAAK6qB,OAAO3c,KAAK,UAGnFi8C,EAAF/pD,UAAAmE,YAAE,WACElI,KAAKmuD,iBAAiB59C,cACtBvQ,KAAKwuB,OAAOngB,YAIdy/C,EAAF/pD,UAAA03C,SAAE,WACE,MAAOz7C,MAAKkuD,aAAajkD,KACvB6F,EAAAA,UAAU9P,KAAKiuD,QACfrP,EAAAA,UAAS,SAACmG,GAAS,MAAA14C,GAAAA,MAAzBxD,UAAA,GAAkCk8C,EAAMz4C,IAAG,SAACo+C,GAAQ,MAAAA,GAAKjP,gBAKvDqS,EAAF/pD,UAAAmR,eAAE,SAAetD,GACjB,GAAUwD,GAAUxD,EAAMwD,QAChBksC,EAAUthD,KAAKuU,WAErB,QAAQa,GACN,IAAK45B,GAAAA,OACE75B,EAAAA,eAAevD,KAClBA,EAAM2D,iBACNvV,KAAKwuB,OAAO3c,KAAK,WAErB,MACA,KAAKuxB,GAAAA,WACCpjC,KAAK05C,YAAiC,QAAnB15C,KAAKmY,WAC1BnY,KAAKwuB,OAAO3c,KAAK,UAErB,MACA,KAAKyxB,GAAAA,YACCtjC,KAAK05C,YAAiC,QAAnB15C,KAAKmY,WAC1BnY,KAAKwuB,OAAO3c,KAAK,UAErB,MACA,KAAKwD,GAAAA,KACL,IAAKG,GAAAA,IACEL,EAAAA,eAAevD,KAClBwD,IAAYC,EAAAA,KAAOisC,EAAQhsC,qBAAuBgsC,EAAQ7rC,oBAC1D7D,EAAM2D,iBAEV,MACA,SACMH,IAAYiuB,EAAAA,UAAYjuB,IAAYmuB,EAAAA,YACtC+d,EAAQwN,eAAe,YAGzBxN,EAAQzrC,UAAUjE,KAQxBk8C,EAAF/pD,UAAA81C,eAAE,SAAe5rC,GAAf,GAAFtK,GAAA3D,SAAA,KAAAiO,IAAiBA,EAAjB,WAEQjO,KAAKi5C,YACPj5C,KAAKuT,QAAQwrC,SAAS1vB,eACnBplB,KAAKC,EAAAA,KAAK,IACV5F,UAAS,WAAO,MAAAX,GAAK4Q,YAAYu6C,eAAe7gD,GAAQqH,uBAE3DtV,KAAKuU,YAAYu6C,eAAe7gD,GAAQqH,sBAQ5Cw4C,EAAF/pD,UAAAgrD,gBAAE,WACE/uD,KAAKuU,YAAY0C,eAAe,IAOlC62C,EAAF/pD,UAAA+1C,aAAE,SAAaC,GAEf,GAAUiV,GAAe,mBA/OO,EA+OqCjV,GAC3DkV,EAAkBtjD,OAAOgc,KAAK3nB,KAAKouD,YAAYzwC,KAAI,SAACuxC,GAAK,MAAAA,GAAEC,WAAW,oBAEvEF,IAAmBA,IAAoBjvD,KAAKovD,qBAC3CpvD,KAAKovD,qBACPpvD,KAAKouD,WAAWpuD,KAAKovD,qBAAsB,GAG7CpvD,KAAKouD,WAAWY,IAAgB,EAChChvD,KAAKovD,mBAAqBJ,IAQ9BlB,EAAF/pD,UAAAkpD,QAAE,SAAQvC,IAM6B,IAA/B1qD,KAAKiuD,OAAOhmC,QAAQyiC,KACtB1qD,KAAKiuD,OAAOpkD,KAAK6gD,GACjB1qD,KAAKkuD,aAAapiD,KAAK9L,KAAKiuD,UAQhCH,EAAF/pD,UAAAmpD,WAAE,SAAWxC,GACb,GAAUpgD,GAAQtK,KAAKiuD,OAAOhmC,QAAQyiC,EAE9B1qD,MAAKiuD,OAAOhmC,QAAQyiC,IAAS,IAC/B1qD,KAAKiuD,OAAO1kC,OAAOjf,EAAO,GAC1BtK,KAAKkuD,aAAapiD,KAAK9L,KAAKiuD,UAWhCH,EAAF/pD,UAAAw2C,mBAAE,SAAmBC,EAAsCE,OAA3D,KAAAF,IAAqBA,EAAsBx6C,KAAK26C,eAAhD,KAAAD,IAA2DA,EAAsB16C,KAAK86C,UACtF,IAAU4T,GAAU1uD,KAAKouD,UACrBM,GAAQ,mBAA8B,WAATlU,EAC7BkU,EAAQ,kBAA6B,UAATlU,EAC5BkU,EAAQ,kBAA6B,UAAThU,EAC5BgU,EAAQ,kBAA6B,UAAThU,GAI9BoT,EAAF/pD,UAAAs1C,gBAAE,WAEEr5C,KAAKquD,qBAAuB,SAI9BP,EAAF/pD,UAAAw1C,gBAAE,WAEEv5C,KAAKquD,qBAAuB,QAI9BP,EAAF/pD,UAAAsrD,iBAAE,SAAiBz9C,GACf5R,KAAKuxC,eAAezlC,KAAK8F,GACzB5R,KAAK67C,cAAe,GAGtBiS,EAAF/pD,UAAAurD,kBAAE,SAAkB19C,GAChB5R,KAAK67C,cAAe,EAQE,UAAlBjqC,EAAMD,SAA4D,IAArC3R,KAAKuU,YAAYytC,kBAChDpwC,EAAM5E,QAAQw1C,UAAY,wCAlYhCliD,KAAEmH,EAAAA,aAKFnH,KAAEY,EAAAA,SA6MFZ,SAAAc,GAAAf,aAAAC,KAAKgB,EAAAA,OAALd,MAAYy2C,2BA7GZqD,gBAAAh6C,KAAGqH,EAAAA,QAGHgzC,YAAAr6C,KAAGqH,EAAAA,QAWHmzC,YAAAx6C,KAAGqH,EAAAA,QAWHga,cAAArhB,KAAGoO,EAAAA,UAAHlO,MAAa+M,EAAAA,aAAcoB,QAAQ,MAOnCo2C,QAAAzkD,KAAG+H,EAAAA,gBAAH7H,MAAmBu7C,MAMnB9C,cAAA34C,KAAG46B,EAAAA,aAAH16B,MAAgB27C,IAAiBxtC,QAAQ,MAGzC0sC,iBAAA/6C,KAAGqH,EAAAA,QAQHoxC,cAAAz4C,KAAGqH,EAAAA,QAaH0pB,aAAA/wB,KAAGqH,EAAAA,MAAHnH,MAAS,WA6BTsE,YAAAxE,KAAGqH,EAAAA,QAKH6mB,SAAAluB,KAAG+R,EAAAA,SAQHwnB,QAAAv5B,KAAG+R,EAAAA,UAwLHy7C,oBAGA,QAAA/W,oDAA2C,MAAdjzC,GAA7BizC,EAAAxzC,GAAAwzC,GAA6B+W,IAc7B9W,GAAA,SAAAzzC,GAoBE,QAAFyzC,GAAcxzC,EAAqCya,EACXsxC,GACxC,MAAIhsD,GAAJK,KAAA5D,KAAUwD,EAAYya,EAAQsxC,IAA9BvvD,KADA,MAH8B8D,GAA9BkzC,EAAAzzC,kBAlBAjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,WACEkC,SAAU,8XACVC,QAAF,8wDACEG,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC;uCACEvF,SAAF,UACE0R,YACFwkC,GAAAC,cACAD,GAAAE,aAEAvvC,YACAC,QAAAuvC,GAAAtvC,YAAAuvC,KACAxvC,QAAAwvC,GAAAvvC,YAAAwvC,gFAlaA12C,SAAEc,GAAFf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAy2C,SA2aAD,OCzZaE,GACT,GAAIl9B,GAAAA,eAAqC,4BAQhCm9B,IACX5vC,QAAS2vC,GACT92B,MAAOoV,EAAAA,SACPlV,WAAY82B,IAORrkC,GAA8BC,EAAAA,iCAAiCC,SAAS,IAQ9EokC,GAAA,WAgGE,QAAFA,GAAsBrlB,EACAqI,EACA1sB,EAC0B4+B,EACd+K,EACQC,EACR5mC,EAGZ1Q,GATpB,GAAF0D,GAAA3D,IAAsBA,MAAtBgyB,SAAsBA,EACAhyB,KAAtBq6B,SAAsBA,EACAr6B,KAAtB2N,kBAAsBA,EAEY3N,KAAlCs3C,YAAkCA,EACQt3C,KAA1Cu3C,kBAA0CA,EACRv3C,KAAlC2Q,KAAkCA,EAGZ3Q,KAAtBC,cAAsBA,EA5FZD,KAAV+tB,YAA2C,KACjC/tB,KAAVw3C,WAA+B,EACrBx3C,KAAVy3C,4BAAwC/nC,EAAAA,aAAaC,MAC3C3P,KAAV03C,mBAA+BhoC,EAAAA,aAAaC,MAClC3P,KAAV23C,uBAAmCjoC,EAAAA,aAAaC,MAOtC3P,KAAV43C,kBAA2B,WAAS,MAAAj0C,GAAKk0C,UAAY,SAInD73C,KAAF63C,UAAwC,KA4CD73C,KAAvC83C,cAA+D,EAG1C93C,KAArB+3C,WAAsD,GAAI/mC,GAAAA,aAQrChR,KAArBg4C,WAAsDh4C,KAAK+3C,WAGtC/3C,KAArBi4C,WAAsD,GAAIjnC,GAAAA,aAQrChR,KAArBk4C,YAAuDl4C,KAAKi4C,WAaxD5d,EAAS31B,cAAc2oC,iBAAiB,aAAcrtC,KAAK43C,kBACvD7kC,IAEAwkC,IACFA,EAAkBY,iBAAmBn4C,KAAKo4C,mBAG5Cp4C,KAAK8sC,gBAAkBP,EAuY3B,MAvdE5gC,QAAFC,eACMyrC,EADNtzC,UAAA,oCAAE,WACmD,MAAO/D,MAAKq4C,UAC/D,SAAiCjiB,GAC/Bp2B,KAAKq4C,KAAOjiB,mCAIdzqB,OAAFC,eACMyrC,EADNtzC,UAAA,YAAE,WACa,MAAO/D,MAAKs4C,WACzB,SAASD,GAAT,GAAF10C,GAAA3D,IACQq4C,KAASr4C,KAAKs4C,QAIlBt4C,KAAKs4C,MAAQD,EACbr4C,KAAK23C,uBAAuBpnC,cAExB8nC,IACFr4C,KAAK23C,uBAAyBU,EAAKxe,MAAMxK,eAAe/qB,UAAS,SAACi0C,GAChE50C,EAAK60C,eAGW,UAAXD,GAAiC,QAAXA,IAAqB50C,EAAK2zC,aACnD3zC,EAAK2zC,YAAY9oB,OAAO3c,KAAK0mC,wCA4DrClB,EAAFtzC,UAAAkE,mBAAE,WACEjI,KAAKy4C,aACLz4C,KAAK04C,gBAGPrB,EAAFtzC,UAAAmE,YAAE,WACMlI,KAAK+tB,cACP/tB,KAAK+tB,YAAYmB,UACjBlvB,KAAK+tB,YAAc,MAGrB/tB,KAAKq6B,SAAS31B,cAAc4pC,oBAAoB,aAActuC,KAAK43C,kBAC/D7kC,IAEJ/S,KAAK23C,uBAAuBpnC,cAC5BvQ,KAAKy3C,4BAA4BlnC,cACjCvQ,KAAK03C,mBAAmBnnC,eAI1B5E,OAAFC,eAAMyrC,EAANtzC,UAAA,gBAAE,WACE,MAAO/D,MAAKw3C,2CAId7rC,OAAFC,eAAMyrC,EAANtzC,UAAA,WAAE,WACE,MAAO/D,MAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,MAAkB,MAAQ,uCAI1DwrC,EAAFtzC,UAAAq0C,gBAAE,WACE,SAAUp4C,KAAKu3C,oBAAqBv3C,KAAKs3C,cAI3CD,EAAFtzC,UAAA40C,WAAE,WACE,MAAO34C,MAAKw3C,UAAYx3C,KAAK44C,YAAc54C,KAAK64C,YAIlDxB,EAAFtzC,UAAA80C,SAAE,WAAA,GAAFl1C,GAAA3D,IACI,KAAIA,KAAKw3C,UAAT,CAIAx3C,KAAKy4C,YAET,IAAUtlB,GAAanzB,KAAK8zB,iBAClBc,EAAgBzB,EAAW2c,WAEjC9vC,MAAK84C,aAAalkB,EAA8B,kBAChDA,EAAcmkB,YAAuC,MAAzB/4C,KAAKq4C,KAAKU,aAAuB/4C,KAAKo4C,kBAC9Dp4C,KAAKq4C,KAAKU,YACd5lB,EAAWhjB,OAAOnQ,KAAKg5C,cAEnBh5C,KAAKq4C,KAAKY,aACZj5C,KAAKq4C,KAAKY,YAAY9oC,OAAOnQ,KAAKk5C,UAGpCl5C,KAAKy3C,4BAA8Bz3C,KAAKm5C,sBAAsB70C,UAAS,WAAO,MAAAX,GAAKi1C,cACnF54C,KAAKo5C,YAEDp5C,KAAKq4C,eAAgBtB,KACvB/2C,KAAKq4C,KAAKgB,oBAKdhC,EAAFtzC,UAAA60C,UAAE,WACE54C,KAAKq4C,KAAKxe,MAAMhoB,QAOlBwlC,EAAFtzC,UAAA2O,MAAE,SAAMzE,OAAR,KAAAA,IAAQA,EAAR,WACQjO,KAAKC,cACPD,KAAKC,cAAc0gB,SAAS3gB,KAAKq6B,SAAUpsB,GAE3CjO,KAAKq6B,SAAS31B,cAAcgO,SAKxB2kC,EAAVtzC,UAAAy0C,aAAE,WAAA,GAAF70C,GAAA3D,IACI,IAAKA,KAAK+tB,aAAgB/tB,KAAKs5C,SAA/B,CAIJ,GAAUjB,GAAOr4C,KAAKq4C,IAElBr4C,MAAKy3C,4BAA4BlnC,cACjCvQ,KAAK+tB,YAAYzd,SAEb+nC,YAAgBtB,KAClBsB,EAAKkB,kBAEDlB,EAAKY,YAEPZ,EAAK9G,eACFtnC,KACCrF,EAAAA,OAAM,SAACgN,GAAS,MAAkB,SAAlBA,EAAMD,UACtBzH,EAAAA,KAAK,GAELkK,EAAAA,UAAUikC,EAAKY,YAAYO,YAE5Bl1C,WACCwH,KAAI,WAAQ,MAAAusC,GAAgB,YAAE/nC,UAE9BjC,SAAQ,WAAQ,MAAA1K,GAAK81C,gBAGzBz5C,KAAKy5C,eAGPz5C,KAAKy5C,aAEDpB,EAAKY,aACPZ,EAAKY,YAAY3oC,YASf+mC,EAAVtzC,UAAAq1C,UAAE,WACEp5C,KAAKq4C,KAAKqB,WAAa15C,KAAKo4C,kBAAoBp4C,KAAKs3C,gBAAcl2C,GACnEpB,KAAKq4C,KAAKlgC,UAAYnY,KAAKoR,IAC3BpR,KAAK25C,oBACL35C,KAAK45C,gBAAe,GACpB55C,KAAKq4C,KAAKwB,eAAe75C,KAAK63C,WAAa,YAIrCR,EAAVtzC,UAAA41C,kBAAE,WACE,GAAI35C,KAAKq4C,KAAKyB,aAAc,CAI1B,IAHN,GAAUC,GAAQ,EACRL,EAAa15C,KAAKq4C,KAAKqB,WAEpBA,GACLK,IACAL,EAAaA,EAAWA,UAG1B15C,MAAKq4C,KAAKyB,aAAaC,KAQnB1C,EAAVtzC,UAAA01C,WAAE,WACEz5C,KAAK45C,gBAAe,GAKhB55C,KAAK83C,eACF93C,KAAK63C,UAIE73C,KAAKo4C,mBACfp4C,KAAK0S,MAAM1S,KAAK63C,WAFhB73C,KAAK0S,SAMT1S,KAAK63C,UAAY,MAIXR,EAAVtzC,UAAA61C,eAAE,SAAuBvP,GACrBrqC,KAAKw3C,UAAYnN,EACjBrqC,KAAKw3C,UAAYx3C,KAAK+3C,WAAWlmC,OAAS7R,KAAKi4C,WAAWpmC,OAEtD7R,KAAKo4C,oBACPp4C,KAAKu3C,kBAAkByC,aAAe3P,IAQlCgN,EAAVtzC,UAAA00C,WAAE,WACOz4C,KAAKq4C,MACR4B,MAQI5C,EAAVtzC,UAAA+vB,eAAE,WACE,IAAK9zB,KAAK+tB,YAAa,CAC3B,GAAY4E,GAAS3yB,KAAKk6C,mBACpBl6C,MAAKm6C,sBAAsBxnB,EAAuB,kBAClD3yB,KAAK+tB,YAAc/tB,KAAKgyB,SAASuD,OAAO5C,GAKxC3yB,KAAK+tB,YAAYqsB,gBAAgB91C,YAGnC,MAAOtE,MAAK+tB,aAONspB,EAAVtzC,UAAAm2C,kBAAE,WACE,MAAO,IAAIrlB,GAAAA,eACTC,iBAAkB90B,KAAKgyB,SAAShkB,WAC3BshC,oBAAoBtvC,KAAKq6B,UACzBggB,qBACA9K,sBAAsB,wCAC3B+K,cAAet6C,KAAKq4C,KAAKiC,eAAiB,mCAC1C/N,eAAgBvsC,KAAK8sC,kBACrB30B,UAAWnY,KAAK2Q,QASZ0mC,EAAVtzC,UAAAo2C,sBAAE,SAA8BnsC,GAA9B,GAAFrK,GAAA3D,IACQA,MAAKq4C,KAAKkC,oBACZvsC,EAAS2hC,gBAAgBrrC,UAAS,SAAC6M,GACzC,GAAcqpC,GAAyD,UAAnCrpC,EAAOspC,eAAe7J,SAAuB,QAAU,SAC7E8J,EAAyD,QAAnCvpC,EAAOspC,eAAe5J,SAAqB,QAAU,OAEjFltC,GAAK00C,KAAuB,mBAAEmC,EAAME,MAUlCrD,EAAVtzC,UAAA+0C,aAAE,SAAqBhkB,GACf,GAAA1b,GAAR,WAAApZ,KAAAq4C,KAAAsC,WAAA,MAAA,UAAA,QAAA,OAASpK,EAATn3B,EAAA,GAAkBwhC,EAAlBxhC,EAAA,GAGQyhC,EAAR,UAAA76C,KAAAq4C,KAAAyC,WAAA,SAAA,QAAA,MAAA,UAASjK,EAATgK,EAAA,GAAmBE,EAAnBF,EAAA,GAGQG,GAARnK,EAAAkK,GAASvK,EAATwK,EAAA,GAAkBC,EAAlBD,EAAA,GACQE,GAAR3K,EAAAqK,GAAShK,EAATsK,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAEVp7C,MAAKo4C,mBAGP+C,EAAmB5K,EAAkC,WAAxBvwC,KAAKq4C,KAAKsC,UAAyB,QAAU,MAC1EC,EAAkBhK,EAAuB,QAAZL,EAAoB,QAAU,MAC3D6K,EAAuB,WAAbvK,EA1YsB,GAAA,GA2YtB7wC,KAAKq4C,KAAKgD,iBACpB7K,EAAuB,QAAbK,EAAqB,SAAW,MAC1CoK,EAAuC,QAArBF,EAA6B,SAAW,OAG5DjmB,EAAiBob,gBACdK,QAAPA,EAAgBC,QAAhBA,EAAyBI,SAAzBA,EAAmCC,SAAnCA,EAA6CuK,QAA7CA,IACO7K,QAASqK,EAAiBpK,QAAjCA,EAA0CI,SAAUuK,EAAkBtK,SAAtEA,EAAgFuK,QAAhFA,IAEQ7K,QAARA,EACQC,QAASyK,EACTrK,SAARA,EACQC,SAAUkK,EACVK,SAAUA,IAGV7K,QAASqK,EACTpK,QAASyK,EACTrK,SAAUuK,EACVtK,SAAUkK,EACVK,SAAUA,MAMR/D,EAAVtzC,UAAAo1C,oBAAE,WAAA,GAAFx1C,GAAA3D,KACUs7C,EAAWt7C,KAAgB,YAAE26B,gBAC7BrG,EAAct0B,KAAgB,YAAEs0B,cAChCinB,EAAcv7C,KAAKs3C,YAAct3C,KAAKs3C,YAAY9oB,OAASzY,EAAAA,KAC3DylC,EAAQx7C,KAAKs3C,YAAct3C,KAAKs3C,YAAYmE,WAAWxxC,KAC3DrF,EAAAA,OAAM,SAACgZ,GAAU,MAAAA,KAAWja,EAAK4zC,oBACjC3yC,EAAAA,OAAM,WAAO,MAAAjB,GAAK6zC,aAChBzhC,EAAAA,IAEJ,OAAO1J,GAAAA,MAAMivC,EAAUC,EAAaC,EAAOlnB,IAI7C+iB,EAAFtzC,UAAA23C,iBAAE,SAAiB9pC,GACV+pC,EAAAA,gCAAgC/pC,KAGnC5R,KAAK63C,UAA6B,IAAjBjmC,EAAMuwB,OAAe,QAAU,KAK5CniC,KAAKo4C,mBACPxmC,EAAM2D,mBAMZ8hC,EAAFtzC,UAAAmR,eAAE,SAAetD,GACjB,GAAUwD,GAAUxD,EAAMwD,OAElBpV,MAAKo4C,oBACAhjC,IAAYkuB,EAAAA,aAA4B,QAAbtjC,KAAKoR,KAChCgE,IAAYguB,EAAAA,YAA2B,QAAbpjC,KAAKoR,MACtCpR,KAAK64C,YAKTxB,EAAFtzC,UAAA6Y,aAAE,SAAahL,GACP5R,KAAKo4C,mBAEPxmC,EAAM2sB,kBACNv+B,KAAK64C,YAEL74C,KAAK24C,cAKDtB,EAAVtzC,UAAA20C,aAAE,WAAA,GAAF/0C,GAAA3D,IAESA,MAAKo4C,oBAIVp4C,KAAK03C,mBAAqB13C,KAAKs3C,YAAYmE,WAIxCxxC,KACCrF,EAAAA,OAAM,SAACgZ,GAAU,MAAAA,KAAWja,EAAK4zC,oBAAsB35B,EAAOxG,WAC9Dm3B,EAAAA,MAAM,EAAGqN,EAAAA,gBAEVt3C,UAAS,WACRX,EAAKk0C,UAAY,QAKbl0C,EAAK00C,eAAgBtB,KAAWpzC,EAAK00C,KAAKwD,aAG5Cl4C,EAAK00C,KAAK9G,eACPtnC,KAAKC,EAAAA,KAAK,GAAIqkC,EAAAA,MAAM,EAAGqN,EAAAA,eAAgBxnC,EAAAA,UAAUzQ,EAAK2zC,YAAYmE,aAClEn3C,UAAS,WAAO,MAAAX,GAAKk1C,aAExBl1C,EAAKk1C,eAMLxB,EAAVtzC,UAAAi1C,WAAE,WAQE,MAJKh5C,MAAK2uC,SAAW3uC,KAAK2uC,QAAQhtB,cAAgB3hB,KAAKq4C,KAAK12B,cAC1D3hB,KAAK2uC,QAAU,GAAIpgC,GAAAA,eAAevO,KAAKq4C,KAAK12B,YAAa3hB,KAAK2N,oBAGzD3N,KAAK2uC,wBAtfhBruC,KAACC,EAAAA,UAADC,OACE6C,SAAU,8CACV1C,MACEm7C,gBAAiB,OACjB30C,uBAAwB,mBACxB4kB,cAAe,2BACfC,YAAa,yBACbtN,UAAW,wBAEbje,SAAU,yDAnEZH,KAAEk1B,EAAAA,UAUFl1B,KAAEmH,EAAAA,aASFnH,KAAEgG,EAAAA,mBA0IFhG,SAAAc,GAAAf,aAAAC,KAAegB,EAAAA,OAAfd,MAAsB02C,QArItB52C,KAAQy2C,GAAR12C,aAAAC,KAsIee,EAAAA,aApIff,KAAQy7C,GAAR17C,aAAAC,KAqIee,EAAAA,WArIff,KAqI2B07C,EAAAA,SApK3B17C,KAAmBsZ,EAAAA,eAAnBvZ,aAAAC,KAqKee,EAAAA,aAtKff,KAAQoB,EAAAA,kCAkGRu6C,+BAAA37C,KAAGqH,EAAAA,MAAHnH,MAAS,0BAOT63C,OAAA/3C,KAAGqH,EAAAA,MAAHnH,MAAS,uBAwBT04C,WAAA54C,KAAGqH,EAAAA,MAAHnH,MAAS,wBAOTs3C,eAAAx3C,KAAGqH,EAAAA,MAAHnH,MAAS,gCAGTu3C,aAAAz3C,KAAG+R,EAAAA,SAQH2lC,aAAA13C,KAAG+R,EAAAA,SAGH4lC,aAAA33C,KAAG+R,EAAAA,SAQH6lC,cAAA53C,KAAG+R,EAAAA,UA2ZHglC,KCziBA6E,GAAA,WAAA,QAAAA,MAMuC,sBANvC57C,KAACuB,EAAAA,SAADrB,OACE6B,SAAUg1C,GAAgB8E,GAAgBn6C,IAC1CW,cAAe00C,GAAgB8E,IAC/B70C,WAAY6vC,QAGd+E,KAEAE,GAAA,WAAA,QAAAA,MAY4B,sBAZ5B97C,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACAC,GACAE,GACAyvB,EAAAA,cACAuqB,IAEF75C,SAAU20C,GAAU+E,GAAaG,IACjCv5C,cAAeq0C,GAAU+E,IACzBz0C,WAAY6vC,QAEdiF,KClBaC,IAUXC,mBAAoBttC,EAAAA,QAAQ,sBACxBI,EAAAA,WAAW,YAAaqoB,EAAAA,MAAM,mBAAoBC,EAAAA,iBAC7CzW,UAAU,OAYnBs7B,eAAgBvtC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQrC,EAAAA,OACZsC,UAAW,cACXstC,SAAU,OACVrsB,QAAS,KAEXlhB,EAAAA,MAAM,UAAWrC,EAAAA,OACfujB,QAAS,EACTqsB,SAAU,oBACVttC,UAAW,eAEbD,EAAAA,MAAM,mBAAoBrC,EAAAA,OACxBujB,QAAS,EACTqsB,SAAU,oBACVttC,UAAW,eAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,qCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBzC,EAAAA,OAAOujB,QAAS,QAUvEssB,cAAeztC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAWrC,EAAAA,OAAOujB,QAAS,KACjC/gB,EAAAA,WAAW,mBACTxC,EAAAA,OAAOujB,QAAS,IAChB9gB,EAAAA,QAAQ,qDAWDktC,GAAiBF,GAAoBE,eAOrCE,GAAgBJ,GAAoBI,c7DJ7Cxf,GAAe,CA8BnB56B,GAAAq6C,gCAA6C,CAM7C,IAGaC,IACT,GAAI3iC,GAAAA,eAAqC,8BAShC2xB,IACXpkC,QAASo1C,GACTv8B,MAAOoV,EAAAA,SACPlV,WAAYs8B,kBAKZ,QAAFC,GAEWpyB,EAEA5e,GAFA7L,KAAXyqB,OAAWA,EAEAzqB,KAAX6L,MAAWA,EACX,MAAAgxC,oBAKE,QAAFC,GAAqB38C,EACA48C,EACAC,EACAC,EACAC,GAJAl9C,KAArBG,YAAqBA,EACAH,KAArB+8C,0BAAqBA,EACA/8C,KAArBg9C,YAAqBA,EACAh9C,KAArBi9C,iBAAqBA,EACAj9C,KAArBk9C,UAAqBA,EACrB,MAAAJ,MACMK,GAME/pC,EAAmB3M,EAAcC,EAAc02C,EAAgBN,OAMvEpR,GAAA,WAAA,QAAAA,MAG+B,sBAH/BprC,KAACC,EAAAA,UAADC,OACE6C,SAAU,yBAEZqoC,KAGAJ,GAAA,SAAA/nC,GAuSE,QAAF+nC,GACYh4B,EACAD,EACAE,EACRwpC,EACAv5C,EACoBmN,EACRqsC,EACAC,EACQI,EACOH,EACJl2C,EACas2C,EAK5BC,GAjBV,GAAF55C,GAkBIJ,EAlBJK,KAAA5D,KAkBUwD,EAAYu5C,EAA2BC,EACvCC,EAAkBC,IAnB5Bl9C,WACY2D,GAAZ2P,eAAYA,EACA3P,EAAZ0P,mBAAYA,EACA1P,EAAZ4P,QAAYA,EAGY5P,EAAxBgN,KAAwBA,EAGAhN,EAAxB05C,iBAAwBA,EACO15C,EAA/Bu5C,UAA+BA,EAOnBv5C,EAAZ45C,eAAYA,EA1QF55C,EAAV65C,YAAuB,EAGb75C,EAAVq6B,WAA+B,EAGrBr6B,EAAV85C,WAAuB,EAMb95C,EAAV+5C,WAA+B,EAGrB/5C,EAAVg6C,aAAsB,SAAIC,EAASC,GAAY,MAAAD,KAAOC,GAG5Cl6C,EAAVm6C,KAAiB,cAAc7gB,KAGZt5B,EAAnBo6C,SAA8B,GAAIhwC,GAAAA,QAShCpK,EAAFq6C,iBAAqB,EASnBr6C,EAAFi6B,UAAW,aAGTj6B,EAAFm6B,WAAY,aAGVn6B,EAAFs6C,WAAuB,GAGrBt6C,EAAFu6C,iBAA6B,MAG3Bv6C,EAAFw6C,0BAA8B,GAAIpwC,GAAAA,QAUhCpK,EAAFy6C,SAAa,EAQXz6C,EAAF06C,aAEM9N,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKNltC,EAAV26C,yBAA6C,EAanC36C,EAAV46C,UAAqB,EAGnB56C,EAAF66C,YAAgB,aAuFO76C,EAAvBiL,UAA2C,GAwBhCjL,EAAX86C,uBAA0EC,EAAAA,MAAK,WAC/E,GAAUC,GAAUh7C,EAAKg7C,OAErB,OAAIA,GACKA,EAAQt6C,QAAQ4F,KACrB6F,EAAAA,UAAU6uC,GACVC,EAAAA,UAAS,WAAO,MAAAvyC,GAAAA,MAAxBxD,UAAA,GAAiC81C,EAAQryC,IAAG,SAACuyC,GAAU,MAAAA,GAAOC,wBAInDn7C,EAAK4P,QAAQwrC,SACjB1vB,eACAplB,KAAKC,EAAAA,KAAK,GAAI00C,EAAAA,UAAS,WAAO,MAAAj7C,GAAK86C,4BAIrB96C,EAArB22B,aAA2D,GAAItpB,GAAAA,aAGlCrN,EAA7B6mC,cACM7mC,EAAK22B,aAAarwB,KAAKrF,EAAAA,OAAM,SAACo6C,GAAK,MAAAA,KAAI1yC,EAAAA,IAAG,eAGnB3I,EAA7B+mC,cACM/mC,EAAK22B,aAAarwB,KAAKrF,EAAAA,OAAM,SAACo6C,GAAK,OAACA,IAAI1yC,EAAAA,IAAG,eAG5B3I,EAArB0nC,gBACM,GAAIr6B,GAAAA,aAOWrN,EAArB6pB,YAAsD,GAAIxc,GAAAA,aAuBlDrN,EAAKu5C,YAGPv5C,EAAKu5C,UAAU+B,cAAgBt7C,GAGjCA,EAAKu7C,uBAAyB5B,EAC9B35C,EAAKmpC,gBAAkBnpC,EAAKu7C,yBAC5Bv7C,EAAKqD,SAAWsX,SAAStX,IAAa,EAGtCrD,EAAK4yB,GAAK5yB,EAAK4yB,KAlCnB,MA7P+BzyB,GAA/BwnC,EAAA/nC,GA8FEoI,OAAFC,eAAM0/B,EAANvnC,UAAA,eAAE,WACE,MAAO/D,MAAKu+C,UAAYv+C,KAAKw9C,gBAM/B,SAAY3xC,GACV7L,KAAKu+C,SAAW1yC,mCA6BlBF,OAAFC,eACM0/B,EADNvnC,UAAA,mBAAE,WAC4B,MAAO/D,MAAKm/C,kBACxC,SAAgBtzC,GACd7L,KAAKm/C,aAAetzC,EACpB7L,KAAKo/C,aAAatzC,wCAIpBH,OAAFC,eACM0/B,EADNvnC,UAAA,gBAAE,WAC0B,MAAO/D,MAAKg+B,eACtC,SAAanyB,GACX7L,KAAKg+B,UAAYjjB,EAAAA,sBAAsBlP,GACvC7L,KAAKo/C,aAAatzC,wCAIpBH,OAAFC,eACM0/B,EADNvnC,UAAA,gBAAE,WAC0B,MAAO/D,MAAK09C,eACtC,SAAa7xC,GACX,GAAI7L,KAAKq/C,gBACP,KAAMC,KAGRt/C,MAAK09C,UAAY3iC,EAAAA,sBAAsBlP,oCAIzCF,OAAFC,eACM0/B,EADNvnC,UAAA,8BAAE,WACwC,MAAO/D,MAAKs+C,6BACpD,SAA2BzyC,GACzB7L,KAAKs+C,wBAA0BvjC,EAAAA,sBAAsBlP,oCAQvDF,OAAFC,eACM0/B,EADNvnC,UAAA,mBAAE,WACoB,MAAO/D,MAAK29C,kBAChC,SAAgBryB,GACd,GAAkB,kBAAPA,GACT,KAAMi0B,KAERv/C,MAAK29C,aAAeryB,EAChBtrB,KAAKq/C,iBAEPr/C,KAAKw/C,wDAKT7zC,OAAFC,eACM0/B,EADNvnC,UAAA,aAAE,WACmB,MAAO/D,MAAKygC,YAC/B,SAAUgG,GACJA,IAAazmC,KAAKygC,SACpBzgC,KAAKorB,WAAWqb,GAChBzmC,KAAKygC,OAASgG,oCAqBlB96B,OAAFC,eACM0/B,EADNvnC,UAAA,UAAE,WACmB,MAAO/D,MAAKy/C,SAC/B,SAAO5zC,GACL7L,KAAKy/C,IAAM5zC,GAAS7L,KAAK89C,KACzB99C,KAAKo/C,aAAatzC,wCA6EpBw/B,EAAFvnC,UAAAuK,SAAE,WAAA,GAAF3K,GAAA3D,IACIA,MAAKq/C,gBAAkB,GAAIK,GAAAA,eAA0B1/C,KAAK2/C,UAC1D3/C,KAAKo/C,aAAatzC,OAKlB9L,KAAKm+C,0BACFl0C,KAAKsH,EAAAA,uBAAwB6C,EAAAA,UAAUpU,KAAK+9C,WAC5Cz5C,UAAS,WACJX,EAAKi8C,WACPj8C,EAAK85C,WAAa,EAClB95C,EAAK22B,aAAazoB,MAAK,KAEvBlO,EAAK22B,aAAazoB,MAAK,GACvBlO,EAAKk8C,WAAWC,QAAU,EAC1Bn8C,EAAK0P,mBAAmB/B,kBAI9BtR,KAAKsT,eAAenC,SACjBlH,KAAKmK,EAAAA,UAAUpU,KAAK+9C,WACpBz5C,UAAS,WACJX,EAAK65C,aACP75C,EAAKo8C,aAAep8C,EAAKqL,QAAQtK,cAAcsmB,wBAC/CrnB,EAAK0P,mBAAmB/B,mBAKhCg6B,EAAFvnC,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAKggD,kBAELhgD,KAAKq/C,gBAAgBjzC,SAASnC,KAAKmK,EAAAA,UAAUpU,KAAK+9C,WAAWz5C,UAAS,SAACsN,GACrEA,EAAMquC,MAAM71C,QAAO,SAACy0C,GAAU,MAAAA,GAAOqB,WACrCtuC,EAAMuuC,QAAQ/1C,QAAO,SAACy0C,GAAU,MAAAA,GAAOuB,eAGzCpgD,KAAK2+C,QAAQt6C,QAAQ4F,KAAK6F,EAAAA,UAAU,MAAOsE,EAAAA,UAAUpU,KAAK+9C,WAAWz5C,UAAS,WAC5EX,EAAK08C,gBACL18C,EAAK67C,0BAITlU,EAAFvnC,UAAAq2B,UAAE,WACMp6B,KAAKk9C,WACPl9C,KAAKsgD,oBAIThV,EAAFvnC,UAAAoK,YAAE,SAAY9J,GAGNA,EAAkB,UACpBrE,KAAKo/C,aAAatzC,QAItBw/B,EAAFvnC,UAAAmE,YAAE,WACElI,KAAK+9C,SAASjyC,OACd9L,KAAK+9C,SAAS1vC,WACdrO,KAAKo/C,aAAa/wC,YAIpBi9B,EAAFvnC,UAAA46B,OAAE,WACE3+B,KAAK4/C,UAAY5/C,KAAK65B,QAAU75B,KAAK8yB,QAIvCwY,EAAFvnC,UAAA+uB,KAAE,WAAA,GAAFnvB,GAAA3D,MACQA,KAAKoX,UAAapX,KAAK2+C,SAAY3+C,KAAK2+C,QAAQp6C,SAAUvE,KAAKw9C,aAInEx9C,KAAK+/C,aAAe//C,KAAKgP,QAAQtK,cAAcsmB,wBAG/ChrB,KAAKg+C,iBAAmB1/B,SAASiiC,iBAAiBvgD,KAAKgP,QAAQtK,eAAe87C,UAAY,KAE1FxgD,KAAKw9C,YAAa,EAClBx9C,KAAKuU,YAAY4B,0BAA0B,MAC3CnW,KAAKygD,4BACLzgD,KAAK0gD,0BACL1gD,KAAKqT,mBAAmB/B,eAGxBtR,KAAKuT,QAAQwrC,SAAS1vB,eAAeplB,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,WACtDX,EAAKq6C,kBAAoBr6C,EAAKk8C,WAAW1sB,YACzCxvB,EAAKk8C,WAAW1sB,WAAWqB,iBAC7B7wB,EAAKk8C,WAAW1sB,WAAWqB,eAAe5nB,MAAM4zC,SAAc78C,EAAKq6C,iBAA3E,UAME1S,EAAFvnC,UAAA81B,MAAE,WACM75B,KAAKw9C,aACPx9C,KAAKw9C,YAAa,EAClBx9C,KAAKuU,YAAY4B,0BAA0BnW,KAAK2gD,SAAW,MAAQ,OACnE3gD,KAAKqT,mBAAmB/B,eACxBtR,KAAK89B,eAUTwN,EAAFvnC,UAAAqnB,WAAE,SAAWvf,GACL7L,KAAK2+C,SACP3+C,KAAK4gD,qBAAqB/0C,IAW9By/B,EAAFvnC,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAK49B,UAAYtS,GAUnBggB,EAAFvnC,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAK89B,WAAaxS,GASpBggB,EAAFvnC,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,EAChB3rB,KAAKqT,mBAAmB/B,eACxBtR,KAAKo/C,aAAatzC,QAIpBH,OAAFC,eAAM0/B,EAANvnC,UAAA,iBAAE,WACE,MAAO/D,MAAKw9C,4CAId7xC,OAAFC,eAAM0/B,EAANvnC,UAAA,gBAAE,WACE,MAAO/D,MAAK2/C,SAAW3/C,KAAKq/C,gBAAgBh+B,SAAWrhB,KAAKq/C,gBAAgBh+B,SAAS,oCAIvF1V,OAAFC,eAAM0/B,EAANvnC,UAAA,oBAAE,WACE,GAAI/D,KAAK6gD,MACP,MAAO,EAGT,IAAI7gD,KAAK09C,UAAW,CACxB,GAAYoD,GAAkB9gD,KAAKq/C,gBAAgBh+B,SAAS/U,IAAG,SAACuyC,GAAU,MAAAA,GAAOkC,WAO3E,OALI/gD,MAAK2gD,UACPG,EAAgBE,UAIXF,EAAgBG,KAAK,MAG9B,MAAOjhD,MAAKq/C,gBAAgBh+B,SAAS,GAAG0/B,2CAI1CzV,EAAFvnC,UAAA48C,OAAE,WACE,QAAO3gD,KAAK2Q,MAA2B,QAApB3Q,KAAK2Q,KAAK9E,OAI/By/B,EAAFvnC,UAAAmR,eAAE,SAAetD,GACR5R,KAAKoX,WACRpX,KAAK4/C,UAAY5/C,KAAKkhD,mBAAmBtvC,GAAS5R,KAAKmhD,qBAAqBvvC,KAKxE05B,EAAVvnC,UAAAo9C,qBAAE,SAA6BvvC,GAC/B,GAAUwD,GAAUxD,EAAMwD,QAChBgsC,EAAahsC,IAAYmuB,EAAAA,YAAcnuB,IAAYiuB,EAAAA,UACtCjuB,IAAYguB,EAAAA,YAAchuB,IAAYkuB,EAAAA,YACnD+d,EAAYjsC,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,MAC7C2rC,EAAUthD,KAAKuU,WAGrB,IAAK8sC,IAAclsC,EAAAA,eAAevD,KAAa5R,KAAK2/C,UAAY/tC,EAAM2vC,SAAWH,EAC/ExvC,EAAM2D,iBACNvV,KAAK8yB,WACA,KAAK9yB,KAAK2/C,SAAU,CAC/B,GAAY6B,GAA2BxhD,KAAKqhB,QAElCjM,KAAYC,EAAAA,MAAQD,IAAYI,EAAAA,KAClCJ,IAAYC,EAAAA,KAAOisC,EAAQhsC,qBAAuBgsC,EAAQ7rC,oBAC1D7D,EAAM2D,kBAEN+rC,EAAQzrC,UAAUjE,EAG1B,IAAY6vC,GAAiBzhD,KAAKqhB,QAIxBrhB,MAAKu9C,gBAAkBkE,GAAkBD,IAA6BC,GAGxEzhD,KAAKu9C,eAAe5oB,SAAS,EAA8BosB,UAAW,OAMpEzV,EAAVvnC,UAAAm9C,mBAAE,SAA2BtvC,GAC7B,GAAUwD,GAAUxD,EAAMwD,QAChBgsC,EAAahsC,IAAYmuB,EAAAA,YAAcnuB,IAAYiuB,EAAAA,SACnDie,EAAUthD,KAAKuU,WAErB,IAAIa,IAAYC,EAAAA,MAAQD,IAAYI,EAAAA,IAClC5D,EAAM2D,iBACNH,IAAYC,EAAAA,KAAOisC,EAAQhsC,qBAAuBgsC,EAAQ7rC,wBACrD,IAAI2rC,GAAcxvC,EAAM2vC,OAE7B3vC,EAAM2D,iBACNvV,KAAK65B,YACA,IAAKzkB,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,QAAU2rC,EAAQI,YAC5DvsC,EAAAA,eAAevD,GAGX,GAAI5R,KAAK09C,WAAatoC,IAAYusC,EAAAA,GAAK/vC,EAAMgwC,QAAS,CAC3DhwC,EAAM2D,gBACZ,IAAYssC,GAAuB7hD,KAAK2+C,QAAQz5C,KAAI,SAAC48C,GAAO,OAACA,EAAI1qC,WAAa0qC,EAAIzgC,UAE5ErhB,MAAK2+C,QAAQv0C,QAAO,SAACy0C,GACdA,EAAOznC,WACVyqC,EAAuBhD,EAAOqB,SAAWrB,EAAOuB,kBAG/C,CACX,GAAY2B,GAAyBT,EAAQU,eAEvCV,GAAQzrC,UAAUjE,GAEd5R,KAAK09C,WAAa0D,GAAcxvC,EAAMqwC,UAAYX,EAAQI,YAC1DJ,EAAQU,kBAAoBD,GAC9BT,EAAQI,WAAWQ,4BAlBrBtwC,GAAM2D,iBACN+rC,EAAQI,WAAWQ,yBAsBvB5W,EAAFvnC,UAAA++B,SAAE,WACO9iC,KAAKoX,WACRpX,KAAKu+C,UAAW,EAChBv+C,KAAKo/C,aAAatzC,SAQtBw/B,EAAFvnC,UAAAg/B,QAAE,WACE/iC,KAAKu+C,UAAW,EAEXv+C,KAAKoX,UAAapX,KAAK4/C,YAC1B5/C,KAAK89B,aACL99B,KAAKqT,mBAAmB/B,eACxBtR,KAAKo/C,aAAatzC,SAOtBw/B,EAAFvnC,UAAAo+C,YAAE,WAAA,GAAFx+C,GAAA3D,IACIA,MAAK6/C,WAAWuC,eAAen4C,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,WACpDX,EAAK0+C,gCACL1+C,EAAK0P,mBAAmB6d,gBACxBvtB,EAAK2+C,2BACL3+C,EAAK4+C,MAAM79C,cAAc89C,UAAY7+C,EAAK85C,cAK9CnS,EAAFvnC,UAAA0+C,eAAE,WACE,MAAOziD,MAAKq9C,iBAAmB,OAAOr9C,KAAKq9C,iBAAiBnW,MAAU,IAKhEoE,EAAVvnC,UAAAs+C,8BAAE,WACE,IAAK3F,EAAAA,iCAAmC18C,KAAK2/C,SAAU,CAC3D,GAAY+C,GAAiB1iD,KAAKuiD,MAAM79C,cAAci+C,cAAc,uBAC1DD,KACFhG,EAAAA,gCAAkChwC,GAA+Bg2C,EAAe5vC,eAMtFnH,OAAFC,eAAM0/B,EAANvnC,UAAA,aAAE,WACE,OAAQ/D,KAAKq/C,iBAAmBr/C,KAAKq/C,gBAAgBuD,2CAG/CtX,EAAVvnC,UAAAy7C,qBAAE,WAAA,GAAF77C,GAAA3D,IAGI0b,SAAQC,UAAUC,KAAI,WACpBjY,EAAKi9C,qBAAqBj9C,EAAKu5C,UAAYv5C,EAAKu5C,UAAUrxC,MAAQlI,EAAK88B,QACvE98B,EAAKy7C,aAAatzC,UAQdw/B,EAAVvnC,UAAA68C,qBAAE,SAA6B/0C,GAA7B,GAAFlI,GAAA3D,IACI,IAAIA,KAAK2/C,UAAY9zC,EAAO,CAC1B,IAAKrH,MAAMuF,QAAQ8B,GACjB,KAAMg3C,KAGR7iD,MAAKq/C,gBAAgB3qB,QACrB7oB,EAAMzB,QAAO,SAAE04C,GAAsB,MAAAn/C,GAAKo/C,aAAaD,KACvD9iD,KAAKgjD,kBACA,CACLhjD,KAAKq/C,gBAAgB3qB,OAC3B,IAAYuuB,GAAsBjjD,KAAK+iD,aAAal3C,EAI1Co3C,IACFjjD,KAAKuU,YAAY0C,cAAcgsC,GAInCjjD,KAAKqT,mBAAmB/B,gBAOlBg6B,EAAVvnC,UAAAg/C,aAAE,SAAqBl3C,GAArB,GAAFlI,GAAA3D,KACUijD,EAAsBjjD,KAAK2+C,QAAQhhC,KAAI,SAAEkhC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOhzC,OAAiBlI,EAAKg6C,aAAakB,EAAOhzC,MAAQA,GAChE,MAAOq3C,GAKP,MAJIj/C,GAAAA,aAEFk/C,QAAQC,KAAKF,IAER,IAQX,OAJID,IACFjjD,KAAKq/C,gBAAgBa,OAAO+C,GAGvBA,GAID3X,EAAVvnC,UAAAi8C,gBAAE,WAAA,GAAFr8C,GAAA3D,IACIA,MAAKuU,YAAc,GAAI8uC,GAAAA,2BAAsCrjD,KAAK2+C,SAC/D2E,gBACAC,0BACAptC,0BAA0BnW,KAAK2gD,SAAW,MAAQ,OAClD6C,yBAAyB,aAE5BxjD,KAAKuU,YAAYkvC,OAAOx5C,KAAKmK,EAAAA,UAAUpU,KAAK+9C,WAAWz5C,UAAS,WAG9DX,EAAK+O,QACL/O,EAAKk2B,UAGP75B,KAAKuU,YAAYpD,OAAOlH,KAAKmK,EAAAA,UAAUpU,KAAK+9C,WAAWz5C,UAAS,WAC1DX,EAAK65C,YAAc75C,EAAK4+C,MAC1B5+C,EAAK+/C,8BACK//C,EAAK65C,YAAe75C,EAAKg8C,WAAYh8C,EAAK4Q,YAAYmtC,YAChE/9C,EAAK4Q,YAAYmtC,WAAWQ,2BAM1B5W,EAAVvnC,UAAAs8C,cAAE,WAAA,GAAF18C,GAAA3D,KACU2jD,EAAqBt3C,EAAAA,MAAMrM,KAAK2+C,QAAQt6C,QAASrE,KAAK+9C,SAE5D/9C,MAAKy+C,uBAAuBx0C,KAAKmK,EAAAA,UAAUuvC,IAAqBr/C,UAAS,SAACsN,GACxEjO,EAAKigD,UAAUhyC,EAAM6Y,OAAQ7Y,EAAMiyC,aAE/BjyC,EAAMiyC,cAAgBlgD,EAAKg8C,UAAYh8C,EAAK65C,aAC9C75C,EAAKk2B,QACLl2B,EAAK+O,WAMTrG,EAAAA,MAAJxD,UAAA,GAAa7I,KAAK2+C,QAAQryC,IAAG,SAACuyC,GAAU,MAAAA,GAAO/wC,iBACxC7D,KAAKmK,EAAAA,UAAUuvC,IACfr/C,UAAS,WACRX,EAAK0P,mBAAmB/B,eACxB3N,EAAKy7C,aAAatzC,SAGtB9L,KAAK8jD,iBAICxY,EAAVvnC,UAAA6/C,UAAE,SAAkB/E,EAAmBgF,GACvC,GAAUE,GAAc/jD,KAAKq/C,gBAAgB2E,WAAWnF,EAEhC,OAAhBA,EAAOhzC,OAAkB7L,KAAK09C,WAKhCmB,EAAOx9B,SAAWrhB,KAAKq/C,gBAAgBa,OAAOrB,GAAU7+C,KAAKq/C,gBAAgBe,SAASvB,GAElFgF,GACF7jD,KAAKuU,YAAY0C,cAAc4nC,GAG7B7+C,KAAK2/C,WACP3/C,KAAKgjD,cAEDa,GAKF7jD,KAAK0S,WAlBTmsC,EAAOuB,WACPpgD,KAAKq/C,gBAAgB3qB,QACrB10B,KAAKikD,kBAAkBpF,EAAOhzC,QAqB5Bk4C,IAAgB/jD,KAAKq/C,gBAAgB2E,WAAWnF,IAClD7+C,KAAKikD,oBAGPjkD,KAAKo/C,aAAatzC,QAIZw/B,EAAVvnC,UAAAi/C,YAAE,WAAA,GAAFr/C,GAAA3D,IACI,IAAIA,KAAK2/C,SAAU,CACvB,GAAYuE,GAAUlkD,KAAK2+C,QAAQxnC,SAE7BnX,MAAKq/C,gBAAgBl4B,KAAI,SAAEC,EAAGC,GAC5B,MAAO1jB,GAAKynC,eAAiBznC,EAAKynC,eAAehkB,EAAGC,EAAG68B,GAC1BA,EAAQj8B,QAAQb,GAAK88B,EAAQj8B,QAAQZ,KAEpErnB,KAAKo/C,aAAatzC,SAKdw/B,EAAVvnC,UAAAkgD,kBAAE,SAA0BE,GAC5B,GAAQC,GAAmB,IAGrBA,GADEpkD,KAAK2/C,SACQ3/C,KAAa,SAAiBsM,IAAG,SAACuyC,GAAU,MAAAA,GAAOhzC,QAEpD7L,KAAKqhB,SAAYrhB,KAAa,SAAe6L,MAAQs4C,EAGrEnkD,KAAKygC,OAAS2jB,EACdpkD,KAAKwtB,YAAY3b,KAAKuyC,GACtBpkD,KAAK49B,UAAUwmB,GACfpkD,KAAKqrC,gBAAgBx5B,KAAK,GAAIgrC,IAAgB78C,KAAMokD,IACpDpkD,KAAKqT,mBAAmB/B,gBAIlBg6B,EAAVvnC,UAAA+/C,cAAE,WACE9jD,KAAKi+C,WAAaj+C,KAAK2+C,QAAQryC,IAAG,SAACuyC,GAAU,MAAAA,GAAOtoB,KAAI0qB,KAAK,MAOvD3V,EAAVvnC,UAAA28C,wBAAE,WACM1gD,KAAKuU,cACHvU,KAAK6gD,MACP7gD,KAAKuU,YAAYe,qBAEjBtV,KAAKuU,YAAY0C,cAAcjX,KAAKq/C,gBAAgBh+B,SAAS,MAM3DiqB,EAAVvnC,UAAA2/C,4BAAE,WACF,GAAUW,GAAoBrkD,KAAKuU,YAAYytC,iBAAmB,EACxDsC,EAAaC,EAA8BF,EAAmBrkD,KAAK2+C,QACrE3+C,KAAKwkD,aAETxkD,MAAKuiD,MAAM79C,cAAc89C,UAAYiC,EACnCJ,EAAoBC,EACpBtkD,KAAK0kD,iBACL1kD,KAAKuiD,MAAM79C,cAAc89C,UAt6BQ,MA46BrClX,EAAFvnC,UAAA2O,MAAE,WACE1S,KAAKG,YAAYuE,cAAcgO,SAIzB44B,EAAVvnC,UAAA4gD,gBAAE,SAAwB9F,GACtB,MAAO7+C,MAAK2+C,QAAQ/2B,OAAM,SAAEg9B,EAA4BC,EAAoBv6C,GAC1E,WAAkBlJ,KAAXwjD,EAAwB/F,IAAWgG,EAAUv6C,MAAQlJ,GAAawjD,OACxExjD,KAIGkqC,EAAVvnC,UAAA08C,0BAAE,WACF,GAAUqE,GAAa9kD,KAAK0kD,iBAClBK,EAAQ/kD,KAAKglD,gBACbC,EAAcptC,KAAK2B,IAAIurC,EAAQD,EA37BF,KA47B7BI,EAAwBH,EAAQD,EAGhCK,EAAYD,EAAwBD,EAGtCG,EACAplD,KAAK6gD,MAAQ,EAAI7gD,KAAK2kD,gBAAgB3kD,KAAKq/C,gBAAgBh+B,SAAS,GAExE+jC,IAAwBb,EAA8Ba,EAAsBplD,KAAK2+C,QAC7E3+C,KAAKwkD,aAIb,IAAUa,GAAeJ,EAAc,CACnCjlD,MAAKy9C,WAAaz9C,KAAKslD,wBAAwBF,EAAsBC,EAAcF,GACnFnlD,KAAKo+C,SAAWp+C,KAAKulD,yBAAyBH,EAAsBC,EAAcF,GAElFnlD,KAAKwlD,4BAA4BL,IAUnC7Z,EAAFvnC,UAAAuhD,wBAAE,SAAwBtsC,EAAuBqsC,EACvBF,GAC1B,GAAUL,GAAa9kD,KAAK0kD,iBAClBe,EAA4BX,EAAa9rC,EACzC0sC,EAAmBZ,EAAa,EAMhCa,EAAwBF,EAA4BJ,EAAeK,CACzE,OAAO7tC,MAAK2B,IAAI3B,KAAK0B,IAAI,EAAGosC,GAAwBR,IAItD7Z,EAAFvnC,UAAA6hD,cAAE,WAGE,MAAO5lD,MAAK6O,eAAiB,KAAO7O,KAAK4O,WAAa5O,KAAK6lD,aAI7Dva,EAAFvnC,UAAA+hD,mBAAE,WACE,MAAI9lD,MAAK6O,eACA7O,KAAK6O,eAKT7O,KAAKq9C,kBAAqBr9C,KAAKq9C,iBAAiB0I,sBACnD/lD,KAAK4lD,gBAIA5lD,KAAKq9C,iBAAiB2I,UAAY,KAHhC,MAOX1a,EAAFvnC,UAAAkiD,yBAAE,WACE,MAAIjmD,MAAK4/C,WAAa5/C,KAAKuU,aAAevU,KAAKuU,YAAYmtC,WAClD1hD,KAAKuU,YAAYmtC,WAAWnrB,GAG9B,MAUD+U,EAAVvnC,UAAAu+C,yBAAE,WACF,GAKQxC,GALEoG,EAAclmD,KAAK6/C,WAAW1sB,WAAWqB,eAAexJ,wBACxDm7B,EAAenmD,KAAKsT,eAAe8yC,kBACnCpxB,EAAQh1B,KAAK2gD,SACb0F,EAAermD,KAAK2/C,SAAWjD,EAAAA,gCA9gCH,GA+gCGhwC,EAIrC,IAAI1M,KAAK2/C,SACPG,EAAUpD,EAAAA,oCACL,CACX,GAAUr7B,GAAWrhB,KAAKq/C,gBAAgBh+B,SAAS,IAAMrhB,KAAK2+C,QAAQ2H,KAChExG,GAAUz+B,GAAYA,EAASklC,MAphCQ75C,GAHP,GA2hC7BsoB,IACH8qB,IAAY,EAIlB,IAAU0G,GAAe,GAAKN,EAAY94C,KAAO0yC,GAAW9qB,EAAQqxB,EAAe,IACzEI,EAAgBP,EAAY/wB,MAAQ2qB,EAAUqG,EAAa94C,OACxC2nB,EAAQ,EAAIqxB,EAGjCG,GAAe,EACjB1G,GAAW0G,EA9gC4B,EA+gC9BC,EAAgB,IACzB3G,GAAW2G,EAhhC4B,GAshCzCzmD,KAAK6/C,WAAWC,QAAUjoC,KAAKC,MAAMgoC,GACrC9/C,KAAK6/C,WAAW1sB,WAAWqa,kBAQrBlC,EAAVvnC,UAAAwhD,yBAAE,SAAiCvsC,EAAuBqsC,EACxBF,GAClC,GAGQuB,GAHE5B,EAAa9kD,KAAK0kD,iBAClBiC,GAA0B7B,EAAa9kD,KAAK+/C,aAAatjC,QAAU,EACnEmqC,EAAsB/uC,KAAKg8B,MA9jCE,IA8jC8BiR,EAIjE,IAAI9kD,KAAKs+C,wBACP,MAAO,EAGT,IAAwB,IAApBt+C,KAAKy9C,WACPiJ,EAA2B1tC,EAAgB8rC,MACtC,IAAI9kD,KAAKy9C,aAAe0H,EAAW,CAC9C,GAAY0B,GAAsB7mD,KAAKglD,gBAAkB4B,EAC7CE,EAAuB9tC,EAAgB6tC,EAIzCE,EACAjC,GAAc9kD,KAAKglD,gBAAkBF,EA/kCR,KA+kCgDA,CAMjF4B,GAA2BI,EAAuBhC,EAAaiC,MAK/DL,GAA2BrB,EAAeP,EAAa,CAMzD,OAAOjtC,MAAKC,MAAM4uC,EAA4BA,EAA2BC,IASnErb,EAAVvnC,UAAAyhD,4BAAE,SAAoCL,GACtC,GAAUL,GAAa9kD,KAAK0kD,iBAClByB,EAAenmD,KAAKsT,eAAe8yC,kBAEnCY,EAAoBhnD,KAAK+/C,aAAa1qB,IAllCH,EAmlCnC4xB,EACFd,EAAa1pC,OAASzc,KAAK+/C,aAAazqB,OAplCH,EAslCnC4xB,EAAiBrvC,KAAKsvC,IAAInnD,KAAKo+C,UAC/BgJ,EACFvvC,KAAK2B,IAAIxZ,KAAKglD,gBAAkBF,EAnnCD,KAonC7BuC,EAAoBD,EAAmBF,EAAiBlnD,KAAK+/C,aAAatjC,MAE5E4qC,GAAoBJ,EACtBjnD,KAAKsnD,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BhnD,KAAKunD,iBAAiBL,EAAgBF,EAAmB7B,GAExDnlD,KAAKk+C,iBAAmBl+C,KAAKwnD,2BAKzBlc,EAAVvnC,UAAAujD,eAAE,SAAuBD,EAA2BJ,GAEpD,GAAUQ,GAAwB5vC,KAAKC,MAAMuvC,EAAoBJ,EAI7DjnD,MAAKy9C,YAAcgK,EACnBznD,KAAKo+C,UAAYqJ,EAAwB,IACzCznD,KAAKk+C,iBAAmBl+C,KAAKwnD,0BAKzBxnD,KAAKy9C,YAAc,IACrBz9C,KAAKy9C,WAAa,EAClBz9C,KAAKo+C,UAAcp+C,KAAK+/C,aAAatjC,OAAS,GAC9Czc,KAAKk+C,iBAAmB,mBAKpB5S,EAAVvnC,UAAAwjD,iBAAE,SAAyBL,EAAwBF,EACxB7B,GAE3B,GAAUuC,GAAwB7vC,KAAKC,MAAMovC,EAAiBF,EAW1D,IAPAhnD,KAAKy9C,YAAciK,EACnB1nD,KAAKo+C,UAAYsJ,EACjB1nD,KAAKk+C,iBAAmBl+C,KAAKwnD,0BAKzBxnD,KAAKy9C,YAAc0H,EAIrB,MAHAnlD,MAAKy9C,WAAa0H,EAClBnlD,KAAKo+C,SAAW,OAChBp+C,KAAKk+C,iBAAmB,gBAMpB5S,EAAVvnC,UAAAyjD,wBAAE,WACF,GAAU1C,GAAa9kD,KAAK0kD,iBAClBiC,GAA0B7B,EAAa9kD,KAAK+/C,aAAatjC,QAAU,CAEzE,OAAO,QADS5E,KAAKsvC,IAAInnD,KAAKo+C,UAAYuI,EAAyB7B,EAAa,GACpF,UAIUxZ,EAAVvnC,UAAAihD,cAAE,WACE,MAAOhlD,MAAK2+C,QAAQp6C,OAASvE,KAAKwkD,aAAajgD,QAIzC+mC,EAAVvnC,UAAA2gD,eAAE,WACE,MAjrCiC,GAirC1B1kD,KAAKg+C,kBAOd1S,EAAFvnC,UAAA4jD,kBAAE,SAAkBC,GAChB5nD,KAAK6nD,iBAAmBD,EAAI3G,KAAK,MAOnC3V,EAAFvnC,UAAA+jD,iBAAE,WACE9nD,KAAK0S,QACL1S,KAAK8yB,QAOPnnB,OAAFC,eAAM0/B,EAANvnC,UAAA,wBAAE,WACE,MAAO/D,MAAKw9C,aAAex9C,KAAK6gD,sDAjoCpCvgD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,aACE5C,SAAU,YACV8E,SAAU,0/CACVC,QAAF,4mEACE9E,QAAF,WAAA,gBAAA,YACEoF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACElF,MACFsG,KAAA,UACM8gD,YAAN,KACInoB,kBAAJ,WACIooB,oBAAJ,kBACIC,yBAAJ,uBACIC,uBAAJ,sBACIpnD,uBAAwB,sBACxBqnD,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/BC,2BAA4B,QAC5B/nD,MAAJ,aACIorB,YAAJ,yBACIH,UAAJ,aACIC,SAAJ,aAEA3Z,YACAkqC,GAAAC,mBACAD,GAAAE,gBAEAj1C,YACAC,QAAAqhD,GAAAphD,YAAA8jC,IACA/jC,QAAAshD,GAAArhD,YAAA8jC,8FApMAhrC,KAAQY,EAAAA,SAKRZ,KAAEkiB,KAYFliB,KAAEmH,EAAAA,aAsBFnH,KAAEsZ,EAAAA,eAAFvZ,aAAAC,KAAAe,EAAAA,aA5BAf,KAAEwoD,EAAAA,OAAFzoD,aAAAC,KAAAe,EAAAA,aA3BAf,KAAQyoD,EAAAA,mBAAR1oD,aAAAC,KAAAe,EAAAA,aA6CAf,KAA6D0oD,GAA7D3oD,aAkbKC,KAlbLe,EAAAA,aAAAf,KAA8B2oD,EAAAA,UAA9B5oD,aAAAC,KAAA07C,EAAAA,OAAA17C,KAAAe,EAAAA,aAsBAf,KAAQkB,OAARnB,aAAAC,KAAAmB,EAAAA,UAAAjB,MAAA,gBAtBAF,SAAkDc,GAAlDf,aAAAC,KAqbKgB,EAAAA,OArbLd,MAAAm8C,QAsbAr8C,KAAAm1B,EAAAA,iBApeA6V,EAAA3pC,gIAwUAk+C,aAAAv/C,KAAAoO,EAAAA,UAAAlO,MAAA0oD,EAAAA,qBAAsCv6C,QAAtC,MAGAgwC,UAAAr+C,KAAA+H,EAAAA,gBAAA7H,MAAA2oD,IAAA7gD,aAAA,MAGAk8C,eAAAlkD,KAAA+H,EAAAA,gBAAA7H,MAAA4oD,MAGA/3B,aAAA/wB,KAAAqH,EAAAA,QAGA0hD,gBAAA/oD,KAAA46B,EAAAA,aAAkB16B,MAAlBkrC,IAAA/8B,QAAA,MAGAk3C,cAAAvlD,KAAAqH,EAAAA,QAGAo4B,WAAAz/B,KAAAqH,EAAAA,QAGAg4C,WAAAr/C,KAAAqH,EAAAA,QAQA2hD,yBAAAhpD,KAAAqH,EAAAA,QAQA4hD,cAAAjpD,KAAAqH,EAAAA,QAWAkE,QAAAvL,KAAAqH,EAAAA,QAWAiH,YAAAtO,KAAAqH,EAAAA,MAAQnH,MAAR,gBAcAqO,iBAAAvO,KAAAqH,EAAAA,MAAAnH,MAAA;2BAWA2qC,oBAAA7qC,KAAAqH,EAAAA,QAGAyjC,iBAAA9qC,KAAGqH,EAAAA,QAGH4uB,KAAAj2B,KAAAqH,EAAAA,QAMA2yB,eAAAh6B,KAAA+R,EAAAA,SAGAm4B,gBAAQlqC,KAAR+R,EAAAA,OAAA7R,MAAA,YAyBAkqC,gBAAApqC,KAAA+R,EAAAA,OAAA7R,MAAA,YAGA6qC,kBAAA/qC,KAAA+R,EAAAA,SAIAmb,cAAAltB,KAAA+R,EAAAA,UAYAi5B,OkD/cAC,GAAA,WAAA,QAAAA,MAW8B,sBAX9BjrC,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACA4vB,EAAAA,cACA6Z,GACAxpC,IAEFK,SAAUopC,GAAoBH,GAAWI,GAAkBF,GAAiBxpC,IAC5EW,cAAe2oC,GAAWI,IAC1BpkC,WAAYqkC,QAEdJ,KCNaK,IAIXC,aAAc78B,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyBrC,EAAAA,OAAOujB,QAAS,EAAGjhB,UAAW,cAC7DD,EAAAA,MAAM,UAAWrC,EAAAA,OAAOsC,UAAW,cACnCE,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,mCAAoCmoB,EAAAA,WACrE5qB,EAAAA,OAAOujB,QAAS,EAAGjhB,UAAW,WAAYy0B,OAAQ,IAClD/2B,EAAAA,OAAOujB,QAAS,GAAKjhB,UAAW,cAAey0B,OAAQ,KACvD/2B,EAAAA,OAAOujB,QAAS,EAAGjhB,UAAW,WAAYy0B,OAAQ,QAEpDv0B,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,mCAAoCzC,EAAAA,OAAOujB,QAAS,SlDmB7E2b,GAAqB,GAcrBC,GACT,GAAI/xB,GAAAA,eAAqC,+BAQhCgyB,IACXzkC,QAASwkC,GACT3rB,MAAOoV,EAAAA,SACPlV,WAAY2rB,IAYDC,GACT,GAAIlyB,GAAAA,eAAyC,+BAC3CkG,WAAY,OACZ0J,QAASuiB,KAkBfC,GAAA,WA0FE,QAAFA,GACYpa,EACA7xB,EACAksC,EACA1+B,EACA4F,EACRmE,EACQ40B,EACArsC,EAC6BssC,EACjB57B,EAEV67B,EACyBC,GAbrC,GAAF9oC,GAAA3D,IACYA,MAAZgyB,SAAYA,EACAhyB,KAAZG,YAAYA,EACAH,KAAZqsC,kBAAYA,EACArsC,KAAZ2N,kBAAYA,EACA3N,KAAZuT,QAAYA,EAEAvT,KAAZssC,eAAYA,EACAtsC,KAAZC,cAAYA,EAEYD,KAAxB2Q,KAAwBA,EAEV3Q,KAAdwsC,gBAAcA,EAxFJxsC,KAAVgQ,UAAuC,QAC7BhQ,KAAVsmC,WAA+B,EAoCCtmC,KAAhC0sC,UAA4C1sC,KAAKwsC,gBAAgBE,UAGjC1sC,KAAhC2sC,UAA4C3sC,KAAKwsC,gBAAgBG,UAEvD3sC,KAAV4sC,SAAqB,GA6BX5sC,KAAV6sC,iBAA6B,GAAI7W,KAGdh2B,KAAnB0T,WAAgC,GAAI3F,GAAAA,QAiBhC/N,KAAK8sC,gBAAkBP,CAC3B,IAAUv/B,GAAuB7M,EAAYuE,cACnCqoC,EAAgC,mBAAXC,SAA0B,OAAgBC,QAAUR,CAI1E/0B,GAASw1B,KAAQx1B,EAASy1B,QAInBJ,GAGV/sC,KAAK6sC,iBAAiBlW,IAAI,aAAY,WAAQ,MAAAhzB,GAAKgJ,SANnD3M,KAAK6sC,iBACFlW,IAAI,aAAY,WAAQ,MAAAhzB,GAAKgJ,SAC7BgqB,IAAI,aAAY,WAAQ,MAAAhzB,GAAKmJ,SAOlC9M,KAAK6sC,iBAAiBziC,QAAO,SAAEgjC,EAAUx7B,GAAU,MAAA5E,GAAQqgC,iBAAiBz7B,EAAOw7B,KAEnFntC,EAAcse,QAAQpe,GAAa8J,KAAKmK,EAAAA,UAAUpU,KAAK0T,aAAapP,UAAS,SAAC2J,GAEvEA,EAEiB,aAAXA,GACTsF,EAAQuD,IAAG,WAAO,MAAAnT,GAAKgJ,SAFvB4G,EAAQuD,IAAG,WAAO,MAAAnT,GAAKmJ,KAAK,OAM5B0/B,GAAmBA,EAAgBx+B,WACrChO,KAAKgO,SAAWw+B,EAAgBx+B,UAoRtC,MArYErC,QAAFC,eACMwgC,EADNroC,UAAA,gBAAE,WACkC,MAAO/D,MAAKgQ,eAC9C,SAAanE,GACPA,IAAU7L,KAAKgQ,YACjBhQ,KAAKgQ,UAAYnE,EAEb7L,KAAK+tB,cACP/tB,KAAKstC,kBAEDttC,KAAKutC,kBACPvtC,KAAqB,iBAAE2M,KAAK,GAG9B3M,KAAK+tB,YAAYyf,oDAMvB7hC,OAAFC,eACMwgC,EADNroC,UAAA,gBAAE,WAC0B,MAAO/D,MAAKsmC,eACtC,SAAaz6B,GACX7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,GAGnC7L,KAAKsmC,WACPtmC,KAAK8M,KAAK,oCAadnB,OAAFC,eACMwgC,EADNroC,UAAA,eAAE,WACgB,MAAO/D,MAAK4sC,cAC5B,SAAY/gC,GACV7L,KAAKssC,eAAemB,kBAAkBztC,KAAKG,YAAYuE,cAAe1E,KAAK4sC,UAG3E5sC,KAAK4sC,SAAoB,MAAT/gC,GAAgB,GAAGA,GAAQzG,OAAS,IAE/CpF,KAAK4sC,UAAY5sC,KAAK0tC,oBACzB1tC,KAAK8M,KAAK,IAEV9M,KAAK2tC,wBACL3tC,KAAKssC,eAAesB,SAAS5tC,KAAKG,YAAYuE,cAAe1E,KAAK+yB,2CAKtEpnB,OAAFC,eACMwgC,EADNroC,UAAA,oBAAE,WACqB,MAAO/D,MAAK6tC,mBACjC,SAAiBhiC,GACf7L,KAAK6tC,cAAgBhiC,EACjB7L,KAAKutC,kBACPvtC,KAAK8tC,iBAAiB9tC,KAAK6tC,gDA2D/BzB,EAAFroC,UAAAuK,SAAE,WACF,GAAUtB,GAAUhN,KAAKG,YAAYuE,cAC3BqpC,EAAe/gC,EAAa,KAET,WAArBA,EAAQghC,UAA6C,aAArBhhC,EAAQghC,WAM1CD,EAAaE,iBAAmBF,EAAaG,WAAaH,EAAaI,aAAe,IAMpFnhC,EAAQohC,WAA6C,SAAhCL,EAAaM,iBACpCN,EAAaM,eAAiB,KAOlCjC,EAAFroC,UAAAmE,YAAE,WAAA,GAAFvE,GAAA3D,IACQA,MAAK+tB,cACP/tB,KAAK+tB,YAAYmB,UACjBlvB,KAAKutC,iBAAmB,MAI1BvtC,KAAK6sC,iBAAiBziC,QAAO,SAAEgjC,EAAUx7B,GACvCjO,EAAKxD,YAAYuE,cAAc4pC,oBAAoB18B,EAAOw7B,KAE5DptC,KAAK6sC,iBAAiBnY,QAEtB10B,KAAK0T,WAAW5H,OAChB9L,KAAK0T,WAAWrF,WAEhBrO,KAAKssC,eAAemB,kBAAkBztC,KAAKG,YAAYuE,cAAe1E,KAAK+yB,SAC3E/yB,KAAKC,cAAcC,eAAeF,KAAKG,cAIzCisC,EAAFroC,UAAA4I,KAAE,SAAK4hC,GAAL,GAAF5qC,GAAA3D,IACI,QADJ,KAAAuuC,IAAOA,EAAgBvuC,KAAK0sC,YACpB1sC,KAAKoX,UAAapX,KAAK+yB,WAAY/yB,KAAK0tC,qBACzC1tC,KAAqB,iBAAEwuC,gBAAmBxuC,KAAqB,iBAAEyuC,gBADpE,CAKJ,GAAUtb,GAAanzB,KAAK8zB,gBAExB9zB,MAAK0uC,UACL1uC,KAAK2uC,QAAU3uC,KAAK2uC,SAAW,GAAIlb,GAAAA,gBAAgBmb,GAAkB5uC,KAAK2N,mBAC1E3N,KAAKutC,iBAAmBpa,EAAWhjB,OAAOnQ,KAAK2uC,SAAShb,SACxD3zB,KAAKutC,iBAAiBsB,cACnB5kC,KAAKmK,EAAAA,UAAUpU,KAAK0T,aACpBpP,UAAS,WAAO,MAAAX,GAAK+qC,YACxB1uC,KAAK8tC,iBAAiB9tC,KAAK6tC,eAC3B7tC,KAAK2tC,wBACL3tC,KAAqB,iBAAE2M,KAAK4hC,KAI9BnC,EAAFroC,UAAA+I,KAAE,SAAKyhC,OAAP,KAAAA,IAAOA,EAAgBvuC,KAAK2sC,WACpB3sC,KAAKutC,kBACPvtC,KAAKutC,iBAAiBzgC,KAAKyhC,IAK/BnC,EAAFroC,UAAA46B,OAAE,WACE3+B,KAAK0tC,oBAAsB1tC,KAAK8M,OAAS9M,KAAK2M,QAIhDy/B,EAAFroC,UAAA2pC,kBAAE,WACE,QAAS1tC,KAAKutC,kBAAoBvtC,KAAKutC,iBAAiBuB,aAI1D1C,EAAFroC,UAAAmR,eAAE,SAAe65B,GACT/uC,KAAK0tC,qBAAuBqB,EAAE35B,UAAY45B,EAAAA,SAAW75B,EAAAA,eAAe45B,KACtEA,EAAEx5B,iBACFw5B,EAAExQ,kBACFv+B,KAAK8M,KAAK,KAKds/B,EAAFroC,UAAAkrC,gBAAE,WACEjvC,KAAK8M,KAAK9M,KAAKwsC,gBAAgB0C,oBAIzB9C,EAAVroC,UAAA+vB,eAAE,WAAA,GAAFnwB,GAAA3D,IACI,IAAIA,KAAK+tB,YACP,MAAO/tB,MAAK+tB,WAGlB,IAAUohB,GACFnvC,KAAKqsC,kBAAkB+C,4BAA4BpvC,KAAKG,aAGtDkvC,EAAWrvC,KAAKgyB,SAAShkB,WACTshC,oBAAoBtvC,KAAKG,aACzBovC,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GACnBC,yBAAyBP,EAyB/C,OAvBAE,GAASM,gBAAgB1lC,KAAKmK,EAAAA,UAAUpU,KAAK0T,aAAapP,UAAS,SAAC6M,GAC9DxN,EAAK4pC,kBACHp8B,EAAOy+B,yBAAyBC,kBAAoBlsC,EAAK4pC,iBAAiBuB,aAG5EnrC,EAAK4P,QAAQuD,IAAG,WAAO,MAAAnT,GAAKmJ,KAAK,OAKvC9M,KAAK+tB,YAAc/tB,KAAKgyB,SAASuD,QAC/Bpd,UAAWnY,KAAK2Q,KAChBmkB,iBAAkBua,EAClBhe,WAhU6B,oBAiU7Bkb,eAAgBvsC,KAAK8sC,oBAGvB9sC,KAAKstC,kBAELttC,KAAK+tB,YAAYuG,cACdrqB,KAAKmK,EAAAA,UAAUpU,KAAK0T,aACpBpP,UAAS,WAAO,MAAAX,GAAK+qC,YAEjB1uC,KAAK+tB,aAINqe,EAAVroC,UAAA2qC,QAAE,WACM1uC,KAAK+tB,aAAe/tB,KAAK+tB,YAAY7d,eACvClQ,KAAK+tB,YAAYzd,SAGnBtQ,KAAKutC,iBAAmB,MAIlBnB,EAAVroC,UAAAupC,gBAAE,WACF,GAAUt/B,GACFhO,KAAgB,YAAE8vC,YAA4B,iBAC5C7hC,EAASjO,KAAK+vC,aACdC,EAAUhwC,KAAKiwC,qBAErBjiC,GAASkiC,eACbjd,MAAUhlB,EAAOkiC,KAASH,EAAQG,MAClCld,MAAUhlB,EAAOmiC,SAAaJ,EAAQI,aAQpChE,EAAFroC,UAAAgsC,WAAE,WACF,GAEQM,GAFEC,GAAStwC,KAAK2Q,MAA2B,OAAnB3Q,KAAK2Q,KAAK9E,MAChCmC,EAAWhO,KAAKgO,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBqiC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZxiC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsBsiC,GACV,SAAZtiC,IAAwBsiC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZxiC,GACa,SAAZA,GAAuBsiC,GACX,QAAZtiC,IAAuBsiC,GAGxB,KAAMG,IAAkCziC,EAFxCqiC,IAAkBE,QAAS,MAAOC,QAAS,UAKvC,GAAAp3B,GAAVpZ,KAAA0wC,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjBn3B,EAAA5H,EAI6Bg/B,QAJ7Bp3B,EAAA3H,KASE26B,EAAFroC,UAAAksC,oBAAE,WACF,GAEQU,GAFEL,GAAStwC,KAAK2Q,MAA2B,OAAnB3Q,KAAK2Q,KAAK9E,MAChCmC,EAAWhO,KAAKgO,QAGtB,IAAgB,SAAZA,EACF2iC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZ7iC,EACT2iC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZ7iC,GACa,QAAZA,GAAsBsiC,GACV,SAAZtiC,IAAwBsiC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZ7iC,GACa,SAAZA,GAAuBsiC,GACX,QAAZtiC,IAAuBsiC,GAGxB,KAAMG,IAAkCziC,EAFxC2iC,IAAmBC,SAAU,QAASC,SAAU,UAK5C,GAAAz3B,GAAVpZ,KAAA0wC,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjBx3B,EAAA5H,EAI8Bq/B,SAJ9Bz3B,EAAA3H,KASU26B,EAAVroC,UAAA4pC,sBAAE,WAAA,GAAFhqC,GAAA3D,IAGQA,MAAKutC,mBACPvtC,KAAKutC,iBAAiBxa,QAAU/yB,KAAK+yB,QACrC/yB,KAAKutC,iBAAiBxG,gBAEtB/mC,KAAKuT,QAAQ4d,iBAAiB9B,eAAeplB,KAC3CC,EAAAA,KAAK,GACLkK,EAAAA,UAAUpU,KAAK0T,aACfpP,UAAS,WACLX,EAAK4pC,kBACP5pC,EAAgB,YAAE6pC,qBAOlBpB,EAAVroC,UAAA+pC,iBAAE,SAAyBgD,GACnB9wC,KAAKutC,mBACPvtC,KAAKutC,iBAAiBuD,aAAeA,EACrC9wC,KAAKutC,iBAAiBxG,kBAKlBqF,EAAVroC,UAAA2sC,gBAAE,SAAwBl/B,EAA4BC,GAelD,MAdsB,UAAlBzR,KAAKgO,UAA0C,UAAlBhO,KAAKgO,SAC1B,QAANyD,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAAND,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeC,EAAfA,mBAvZAnR,KAACC,EAAAA,UAADC,OACE6C,SAAU,eACV5C,SAAU,aACVE,MACEie,cAAe,SACfoN,YAAa,yBACb+kB,aAAc,6DApGlBzwC,KAAEk1B,EAAAA,UAcFl1B,KAAEmH,EAAAA,aANFnH,KAAQo7B,EAAAA,mBAcRp7B,KAAEgG,EAAAA,mBAJFhG,KAAEY,EAAAA,SAZFZ,KAAQa,EAAAA,WAfRb,KAAQ0wC,EAAAA,gBAAR1wC,KAAuBoB,EAAAA,eA0MvBpB,SAAAc,GAAAf,aAAAC,KAAKgB,EAAAA,OAALd,MAAYurC,QAzMZzrC,KAAQsZ,EAAAA,eAARvZ,aAAAC,KA0MKe,EAAAA,aACLf,SAAAc,GAAAf,aAAAC,KAAKe,EAAAA,WAALf,KAAiBgB,EAAAA,OAAjBd,MAAwB0rC,QAExB5rC,SAAAc,GAAAf,aAAAC,KAAKe,EAAAA,WAALf,KAAiBgB,EAAAA,OAAjBd,MAAwBywC,EAAAA,sCAnFxBjjC,WAAA1N,KAAGqH,EAAAA,MAAHnH,MAAS,wBAmBT4W,WAAA9W,KAAGqH,EAAAA,MAAHnH,MAAS,wBAYTksC,YAAApsC,KAAGqH,EAAAA,MAAHnH,MAAS,yBAGTmsC,YAAArsC,KAAGqH,EAAAA,MAAHnH,MAAS,yBAKTuyB,UAAAzyB,KAAGqH,EAAAA,MAAHnH,MAAS,gBAiBTswC,eAAAxwC,KAAGqH,EAAAA,MAAHnH,MAAS,sBA6UT4rC,KAQAwC,GAAA,WAyCE,QAAFA,GACYv7B,EACA8e,GADAnyB,KAAZqT,mBAAYA,EACArT,KAAZmyB,oBAAYA,EAbVnyB,KAAFkxC,YAAmC,UAGzBlxC,KAAVmxC,qBAAyC,EAGtBnxC,KAAnBoxC,QAA2C,GAAIrjC,GAAAA,QAG7C/N,KAAFqxC,WAA4CrxC,KAAKmyB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SA3iBzF,MAqjBEua,GAAF7qC,UAAA4I,KAAE,SAAK4hC,GAAL,GAAF5qC,GAAA3D,IAEQA,MAAKyuC,iBACP/f,aAAa1uB,KAAKyuC,gBAClBzuC,KAAKyuC,eAAiB,MAIxBzuC,KAAKmxC,qBAAsB,EAC3BnxC,KAAKwuC,eAAiBxf,WAAU,WAC9BrrB,EAAKutC,YAAc,UACnBvtC,EAAK6qC,eAAiB,KAItB7qC,EAAKojC,iBACJwH,IAOLK,EAAF7qC,UAAA+I,KAAE,SAAKyhC,GAAL,GAAF5qC,GAAA3D,IAEQA,MAAKwuC,iBACP9f,aAAa1uB,KAAKwuC,gBAClBxuC,KAAKwuC,eAAiB,MAGxBxuC,KAAKyuC,eAAiBzf,WAAU,WAC9BrrB,EAAKutC,YAAc,SACnBvtC,EAAK8qC,eAAiB,KAItB9qC,EAAKojC,iBACJwH,IAILK,EAAF7qC,UAAA8qC,YAAE,WACE,MAAO7uC,MAAKoxC,QAAQ/hB,gBAItBuf,EAAF7qC,UAAA+qC,UAAE,WACE,MAA4B,YAArB9uC,KAAKkxC,aAGdtC,EAAF7qC,UAAAmE,YAAE,WACElI,KAAKoxC,QAAQ/iC,YAGfugC,EAAF7qC,UAAAutC,gBAAE,WACEtxC,KAAKmxC,qBAAsB,GAG7BvC,EAAF7qC,UAAAwtC,eAAE,SAAe3/B,GACjB,GAAUD,GAAUC,EAAa,OAEb,YAAZD,GAAyB3R,KAAK8uC,aAChC9uC,KAAKoxC,QAAQtlC,OAGC,YAAZ6F,GAAqC,WAAZA,IAC3B3R,KAAKmxC,qBAAsB,IAS/BvC,EAAF7qC,UAAAytC,uBAAE,WACMxxC,KAAKmxC,qBACPnxC,KAAK8M,KAAK,IASd8hC,EAAF7qC,UAAAgjC,cAAE,WACE/mC,KAAKqT,mBAAmB/B,+BAxI5BhR,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,wBACEkC,SAAU,mOACVC,QAAF,6UACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEsM,YAAay5B,GAAfC,cACElrC,2GAKE8wC,cAAJ,wGA/gBA7C,KmDQA8C,GAAA,WAAA,QAAAA,MAe+B,sBAf/BpxC,KAACuB,EAAAA,SAADrB,OACEsB,SACEM,EAAAA,WACAL,EAAAA,aACA4vB,EAAAA,cACA3vB,IAEFK,SAAU+pC,GAAYwC,GAAkB5sC,IACxCW,cAAeypC,GAAYwC,IAC3Bhd,iBAAkBgd,IAClBtnC,WACE0kC,IACCzkC,QAASmmB,EAAAA,sBAAuBC,SAAUC,SAG/C8jB,KCnBAC,GAAA,WAAA,QAAAA,KAMW3xC,KAAXqE,QAAoC,GAAI0J,GAAAA,QAGtC/N,KAAF4xC,kBAA8B,kBAG5B5xC,KAAF6xC,cAA0B,YAGxB7xC,KAAF8xC,kBAA8B,gBAG5B9xC,KAAF+xC,eAA2B,aAGzB/xC,KAAFgyC,cAA0B,YAGxBhyC,KAAFiyC,cAAe,SAAIxpB,EAAca,EAAkB/kB,GAC/C,GAAc,GAAVA,GAA2B,GAAZ+kB,EAAiB,MAAO,QAAQ/kB,CAEnDA,GAASsT,KAAK0B,IAAIhV,EAAQ,EAE9B,IAAU6kB,GAAaX,EAAOa,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAa7kB,EAC1BsT,KAAK2B,IAAI4P,EAAaE,EAAU/kB,GAChC6kB,EAAaE,GAErB,OAAiD/kB,GApDjD,sBAgBAjE,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAY,gHAhBzByxB,KA8DaO,IAEX3qC,QAASoqC,GACTvxB,OAAQ,GAAI/e,GAAAA,SAAY,GAAIgf,GAAAA,SAAYsxB,KACxCrxB,WAAY6xB,kBC3Bd,QAAAC,MAeA,MAAAA,oBAIA,QAAAC,MAAwB,MAAxBA,MACMC,GACF5rC,EAAcovB,EAAiBuc,KAOnCE,GAAA,SAAAhvC,GAgFE,QAAFgvC,GAAqB9xB,EACCpN,GADpB,GAAF1P,GAEIJ,EAFJK,KAAA5D,OAAAA,WAAqB2D,GAArB8c,MAAqBA,EACC9c,EAAtB0P,mBAAsBA,EArDZ1P,EAAV6uC,WAAuB,EASb7uC,EAAV8uC,QAAoB,EAkBV9uC,EAAV+uC,oBAQU/uC,EAAVgvC,eAA0B,EAShBhvC,EAAVivC,uBAAkC,EAGbjvC,EAArB8kB,KAAqD,GAAIzX,GAAAA,aAQrDrN,EAAKkvC,aAAepyB,EAAMpc,QAAQC,UAAS,WAAO,MAAAX,GAAK0P,mBAAmB/B,mBAR9E,MA9DkCxN,GAAlCyuC,EAAAhvC,GASEoI,OAAFC,eACM2mC,EADNxuC,UAAA,iBAAE,WAC0B,MAAO/D,MAAKwyC,gBACtC,SAAc3mC,GACZ7L,KAAKwyC,WAAa36B,KAAK0B,IAAIjF,EAAAA,qBAAqBzI,GAAQ,GACxD7L,KAAKqT,mBAAmB/B,gDAK1B3F,OAAFC,eACM2mC,EADNxuC,UAAA,cAAE,WACuB,MAAO/D,MAAKyyC,aACnC,SAAW5mC,GACT7L,KAAKyyC,QAAUn+B,EAAAA,qBAAqBzI,GACpC7L,KAAKqT,mBAAmB/B,gDAK1B3F,OAAFC,eACM2mC,EADNxuC,UAAA,gBAAE,WACyB,MAAO/D,MAAK8yC,eACrC,SAAajnC,GACX7L,KAAK8yC,UAAYj7B,KAAK0B,IAAIjF,EAAAA,qBAAqBzI,GAAQ,GACvD7L,KAAK+yC,mEAKPpnC,OAAFC,eACM2mC,EADNxuC,UAAA,uBAAE,WACkC,MAAO/D,MAAK0yC,sBAC9C,SAAoB7mC,GAClB7L,KAAK0yC,kBAAoB7mC,OAAaS,IAAG,SAAC0mC,GAAK,MAAA1+B,GAAAA,qBAAqB0+B,KACpEhzC,KAAK+yC,mEAKPpnC,OAAFC,eACM2mC,EADNxuC,UAAA,oBAAE,WAC8B,MAAO/D,MAAK2yC,mBAC1C,SAAiB9mC,GACf7L,KAAK2yC,cAAgB53B,EAAAA,sBAAsBlP,oCAM7CF,OAAFC,eACM2mC,EADNxuC,UAAA,4BAAE,WACsC,MAAO/D,MAAK4yC,2BAClD,SAAyB/mC,GACvB7L,KAAK4yC,sBAAwB73B,EAAAA,sBAAsBlP,oCAgBrD0mC,EAAFxuC,UAAAuK,SAAE,WACEtO,KAAKizC,cAAe,EACpBjzC,KAAK+yC,kCACL/yC,KAAKk3B,oBAGPqb,EAAFxuC,UAAAmE,YAAE,WACElI,KAAK6yC,aAAatiC,eAIpBgiC,EAAFxuC,UAAAmvC,SAAE,WACE,GAAKlzC,KAAKmzC,cAAV,CAEJ,GAAUC,GAAoBpzC,KAAKqpB,SAC/BrpB,MAAKqpB,YACLrpB,KAAKqzC,eAAeD,KAItBb,EAAFxuC,UAAAuvC,aAAE,WACE,GAAKtzC,KAAKuzC,kBAAV,CAEJ,GAAUH,GAAoBpzC,KAAKqpB,SAC/BrpB,MAAKqpB,YACLrpB,KAAKqzC,eAAeD,KAItBb,EAAFxuC,UAAAyvC,UAAE,WAEE,GAAKxzC,KAAKuzC,kBAAV,CAEJ,GAAUH,GAAoBpzC,KAAKqpB,SAC/BrpB,MAAKqpB,UAAY,EACjBrpB,KAAKqzC,eAAeD,KAItBb,EAAFxuC,UAAA0vC,SAAE,WAEE,GAAKzzC,KAAKmzC,cAAV,CAEJ,GAAUC,GAAoBpzC,KAAKqpB,SAC/BrpB,MAAKqpB,UAAYrpB,KAAK0zC,mBAAqB,EAC3C1zC,KAAKqzC,eAAeD,KAItBb,EAAFxuC,UAAAwvC,gBAAE,WACE,MAAOvzC,MAAKqpB,WAAa,GAAsB,GAAjBrpB,KAAKspB,UAIrCipB,EAAFxuC,UAAAovC,YAAE,WACF,GAAUQ,GAAe3zC,KAAK0zC,mBAAqB,CAC/C,OAAO1zC,MAAKqpB,UAAYsqB,GAAiC,GAAjB3zC,KAAKspB,UAI/CipB,EAAFxuC,UAAA2vC,iBAAE,WACE,MAAK1zC,MAAKspB,SAIHzR,KAAK6R,KAAK1pB,KAAKuE,OAASvE,KAAKspB,UAH3B,GAeXipB,EAAFxuC,UAAA6vC,gBAAE,SAAgBtqB,GAGlB,GAAUF,GAAappB,KAAKqpB,UAAYrpB,KAAKspB,SACnC8pB,EAAoBpzC,KAAKqpB,SAE/BrpB,MAAKqpB,UAAYxR,KAAKg8B,MAAMzqB,EAAaE,IAAa,EACtDtpB,KAAKspB,SAAWA,EAChBtpB,KAAKqzC,eAAeD,IAItBb,EAAFxuC,UAAA+vC,qBAAE,WACE,MAAO9zC,MAAKoX,WAAapX,KAAKmzC,eAIhCZ,EAAFxuC,UAAAgwC,yBAAE,WACE,MAAO/zC,MAAKoX,WAAapX,KAAKuzC,mBAOxBhB,EAAVxuC,UAAAgvC,gCAAE,WACO/yC,KAAKizC,eAGLjzC,KAAKspB,WACRtpB,KAAK8yC,UAA2C,GAA/B9yC,KAAKg0C,gBAAgBzvC,OAClCvE,KAAKg0C,gBAAgB,GApOL,IAwOtBh0C,KAAKi0C,0BAA4Bj0C,KAAKg0C,gBAAgBxpC,SAES,IAA3DxK,KAAKi0C,0BAA0BhsB,QAAQjoB,KAAKspB,WAC9CtpB,KAAKi0C,0BAA0BpqC,KAAK7J,KAAKspB,UAI3CtpB,KAAKi0C,0BAA0B9sB,KAAI,SAAEC,EAAGC,GAAM,MAAAD,GAAIC,IAClDrnB,KAAKqT,mBAAmB/B,iBAIlBihC,EAAVxuC,UAAAsvC,eAAE,SAAuBD,GACrBpzC,KAAKyoB,KAAK5W,MACRuhC,kBAANA,EACM/pB,UAAWrpB,KAAKqpB,UAChBC,SAAUtpB,KAAKspB,SACf/kB,OAAQvE,KAAKuE,yBAvNnBjE,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,gBACE5C,SAAU,eACV8E,SAAU,8oFACVC,QAAF,q0BACE9E,QAAF,YACEC,MACFC,MAAA,iBAEA+E,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,mFAjEAusC,EAAA5wC,kEA2EA4C,SAAAjE,KAAAqH,EAAAA,QAGA2hB,WAAAhpB,KAAAqH,EAAAA,QASAqsC,kBAAA1zC,KAAAqH,EAAAA,QASAusC,eAAA5zC,KAAAqH,EAAAA,QASAwsC,uBAAA7zC,KAAQqH,EAAAA,QASR8gB,OAAAnoB,KAAA+R,EAAAA,UAiBAkgC,OC7HA6B,GAAA,WAAA,QAAAA,MAWiC,sBAXjC9zC,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACA8hB,GACA0nB,GACAmG,IAEFrvC,SAAUkwC,IACV5vC,cAAe4vC,IACfjrC,WAAY4qC,QAEdkC,mBCaE,QAAFC,GAAqBl0C,GAAAH,KAArBG,YAAqBA,EACrB,MAAAk0C,MAEMC,GACFnxC,EAAWkxC,GAAoB,WAOtBE,GAA4B,GAAIv6B,GAAAA,eAC3C,6BACCkG,WAAY,OAAQ0J,QAAS4qB,KAyB5BC,GAAgB,EAKpBC,GAAA,SAAAnxC,GAqBE,QAAFmxC,GAAqBv0C,EAAiCoT,EACUoqB,EAKHgX,GAN3D,GAAFhxC,GAOIJ,EAPJK,KAAA5D,KAOUG,IAPVH,IAAqB2D,GAArBxD,YAAqBA,EAAiCwD,EAAtD4P,QAAsDA,EACU5P,EAAhEg6B,eAAgEA,EAqB9Dh6B,EAAFixC,kBAAqB,EAaXjxC,EAAV88B,OAA2B,EAMjB98B,EAAVkxC,aAAiC,EASrBlxC,EAAZmxC,aAA2B,GAAI9jC,GAAAA,aAGrBrN,EAAVoxC,0BAAoDrlC,EAAAA,aAAaC,MAStDhM,EAAXo2B,KAAwE,cAGtEp2B,EAAF8wC,cAAkB,oBAAoBA,IAjDtC,IAAUO,GAAOL,EAAWA,EAASM,cAAclU,MAAM,KAAK,GAAK,SAC/Dp9B,GAAKuxC,oBAAsB,QAAQF,EAAvC,IAA+CrxC,EAAK8wC,cAApD,KACI9wC,EAAKixC,iBAAsC,mBAAnBjX,IA4C5B,MAhEoC75B,GAApC4wC,EAAAnxC,GA2BEoI,OAAFC,eACM8oC,EADN3wC,UAAA,aAAE,WACsB,MAAO/D,MAAKygC,YAClC,SAAUrK,GACRp2B,KAAKygC,OAAS0U,GAAM/e,GAAK,GAGrBp2B,KAAK40C,kBACP50C,KAAKo1C,qDAMTzpC,OAAFC,eACM8oC,EADN3wC,UAAA,mBAAE,WAC4B,MAAO/D,MAAK60C,kBACxC,SAAgBze,GAAap2B,KAAK60C,aAAeM,GAAM/e,GAAK,oCA+B5Dse,EAAF3wC,UAAAsxC,kBAAE,WAEE,OAAQnmC,UAAW,UADLlP,KAAK6L,MAAQ,IAC/B,MAOE6oC,EAAF3wC,UAAAuxC,iBAAE,WACE,GAAkB,WAAdt1C,KAAK+5B,KAAmB,CAE1B,OAAQ7qB,UAAW,UADLlP,KAAKu1C,YAAc,IACvC,OAIEb,EAAF3wC,UAAAC,gBAAE,WAAA,GAAFL,GAAA3D,IACSA,MAAK40C,kBAGR50C,KAAKuT,QAAQW,kBAAiB,WACpC,GAAclH,GAAUrJ,EAAK6xC,iBAAiB9wC,aAEtCf,GAAKoxC,0BACA5gC,EAAAA,UAAUnH,EAAS,iBACjB/C,KAAKrF,EAAAA,OAAM,SAAGmqC,GAAuB,MAAAA,GAAE0G,SAAWzoC,KAClD1I,UAAS,WAAO,MAAAX,GAAK4P,QAAQuD,IAAG,WAAO,MAAAnT,GAAKyxC,2BAKzDV,EAAF3wC,UAAAmE,YAAE,WACElI,KAAK+0C,0BAA0BxkC,eAIzBmkC,EAAV3wC,UAAAqxC,kBAAE,WACoB,gBAAdp1C,KAAK+5B,MAAwC,WAAd/5B,KAAK+5B,MACtC/5B,KAAK80C,aAAahpC,MAAMD,MAAO7L,KAAK6L,wBAlI1CvL,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,mBACE5C,SAAU,iBACVE,MACFsG,KAAA,cACMyuC,gBAAN,IACIC,gBAAJ,MACInpB,uBAAJ,gEACI+Y,cAAe,OACf3kC,MAAJ,mBACIusB,kCAAJ,oBAEAzsB,QAAA,SACA6E,SAAA,spBACEC,QAAS,g1JACTG,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,iFAzFA1F,KAAEkB,OAAFnB,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,2BAMA9sB,SAAEc,GAAFf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA+zC,SA+FAG,EAAA/yC,oEAmBA6zC,mBAAQl1C,KAARoO,EAAAA,UAAAlO,MAAA,mBAAAmO,QAAA,MAaAmmC,eAAAx0C,KAAA+R,EAAAA,SAKA0nB,OAAAz5B,KAAAqH,EAAAA,SAmBA+sC,OCzJAkB,GAAA,WAAA,QAAAA,MAKmC,sBALnCt1C,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,EAAAA,aAAcC,IACxBK,SAAUqyC,GAAgB1yC,IAC1BW,cAAe+xC,QAEjBkB,KZaMC,GAAY,kBAWhB,QAAFC,GAAqB31C,GAAAH,KAArBG,YAAqBA,EACrB,MAAA21C,MACMC,GACF5yC,EAAW2yC,GAAwB,WAgB1BtQ,GACT,GAAIxrB,GAAAA,eAAiD,wCACnDkG,WAAY,OACZ0J,QAASosB,KAYT7Q,GAAmC,46CA2BzCnB,GAAA,SAAAzgC,GAkFE,QAAFygC,GAAqB7jC,EACPuX,EACsC7T,EACK6hC,EAEvChI,GALhB,GAAF/5B,GAOIJ,EAPJK,KAAA5D,KAOUG,IAPVH,IAAqB2D,GAArBxD,YAAqBA,EAE+BwD,EAApDE,UAAoDA,EA9D1CF,EAAV88B,OAAmB,EAET98B,EAAVugC,oBAA+B,EAmCrBvgC,EAAVghC,UAAsBkR,GAYXlyC,EAAXo2B,KAAuC,aAoBvC,IAAUkc,GAAmBjS,EAAmBa,UAIvCoR,GAAiBxf,IAAI5yB,EAAUqyC,OAClCD,EAAiBtf,IAAI9yB,EAAUqyC,KAAM,GAAIhR,MAAa2Q,MAGxDlyC,EAAK8gC,WAAa0R,GAAeh2C,EAAYuE,cAAeb,IAAcA,EAAUqyC,KACpFvyC,EAAKugC,mBAAqBxsB,EAASM,MAAQN,EAASK,QACpDpU,EAAKyyC,gBAAoC,mBAAlB1Q,KAChBhI,IAAaA,EAAS2Y,iBAEzB3Y,IACEA,EAAS0G,WACXzgC,EAAKygC,SAAW1G,EAAS0G,UAGvB1G,EAASyG,cACXxgC,EAAKwgC,YAAczG,EAASyG,aAMpC,IAAUmS,GACJ,sCAAqC3yC,EAAKugC,mBAAqB,YAAc,IADnF,mBAGI/jC,GAAYuE,cAAcI,UAAUuW,IAAIi7B,KA7C5C,MArDwCxyC,GAAxCkgC,EAAAzgC,GAwBEoI,OAAFC,eACMo4B,EADNjgC,UAAA,gBAAE,WACyB,MAAO/D,MAAK2kC,eACrC,SAAaf,GAGX,GAFA5jC,KAAK2kC,UAAYrwB,EAAAA,qBAAqBsvB,IAEjC5jC,KAAKkkC,mBAAoB,CAClC,GAAY+R,GAAmBjS,EAAmBa,WACtCC,EAAsBmR,EAAiBz3B,IAAIxe,KAAKykC,WAEjDK,IAAwBA,EAAoBrO,IAAIz2B,KAAK2kC,YACxD3kC,KAAKqkC,qDAOX14B,OAAFC,eACMo4B,EADNjgC,UAAA,mBAAE,WAEE,MAAO/D,MAAKu2C,cAAgBv2C,KAAKokC,SAAW,QAE9C,SAAgBv4B,GACd7L,KAAKu2C,aAAejiC,EAAAA,qBAAqBzI,oCAO3CF,OAAFC,eACMo4B,EADNjgC,UAAA,aAAE,WAEE,MAAqB,gBAAd/D,KAAK+5B,KAAyB/5B,KAAKygC,OAAS,OAErD,SAAUgG,GACRzmC,KAAKygC,OAAS5oB,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAI,IAAKlF,EAAAA,qBAAqBmyB,sCA4C/D96B,OAAFC,eAAMo4B,EAANjgC,UAAA,qBAAE,WACE,OAAQ/D,KAAKokC,SA9LS,IA8LuB,mCAI/Cz4B,OAAFC,eAAMo4B,EAANjgC,UAAA,gBAAE,WACF,GAAUyyC,GAA+B,EAArBx2C,KAAKy2C,cAAoBz2C,KAAKmkC,WAC9C,OAAO,OAAOqS,EAAlB,IAA6BA,mCAI3B7qC,OAAFC,eAAMo4B,EAANjgC,UAAA,4BAAE,WACE,MAAO,GAAI8T,KAAK6+B,GAAK12C,KAAKy2C;gCAI5B9qC,OAAFC,eAAMo4B,EAANjgC,UAAA,yBAAE,WACE,MAAkB,gBAAd/D,KAAK+5B,KACA/5B,KAAKikC,sBAAwB,IAAMjkC,KAAKygC,QAAU,IAIvDzgC,KAAKkkC,oBAAoC,kBAAdlkC,KAAK+5B,KACC,GAA5B/5B,KAAKikC,qBAGP,sCAITt4B,OAAFC,eAAMo4B,EAANjgC,UAAA,0BAAE,WACE,MAAO/D,MAAKmkC,YAAcnkC,KAAKokC,SAAW,qCAIpCJ,EAAVjgC,UAAAsgC,iBAAE,WACF,GAAUC,GAA6BtkC,KAAK6D,UAAU0gC,cAAc,SAC1DC,EAAYxkC,KAAKykC,WACjBC,EAAkB1kC,KAAK2kC,UACvBC,EAAYZ,EAAmBa,WACjCC,EAAsBF,EAAUpmB,IAAIgmB,EAExCF,GAASS,aAAa,wBAAyBL,EAAkB,IACjEJ,EAASn/B,YAAcnF,KAAKglC,oBAC5BR,EAAUS,YAAYX,GAEjBQ,IACHA,EAAsB,GAAII,KAC1BN,EAAUjO,IAAI6N,EAAWM,IAG3BA,EAAoBzpB,IAAIqpB,IAIlBV,EAAVjgC,UAAAihC,kBAAE,WACE,MAAOG,IAEFC,QAAQ,eAAgB,GAAG,IAAOplC,KAAKikC,sBACvCmB,QAAQ,aAAc,GAAG,GAAMplC,KAAKikC,sBACpCmB,QAAQ,YAAa,GAAGplC,KAAKokC,WAhJrBJ,EAAjBa,WAA8B,GAAItR,wBAvClCjzB,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,uBACE5C,SAAU,qBACVE,MACFsG,KAAA,cACMrG,MAAN,uBACIusB,kCAAJ,kBACIkY,mBAAJ,WACIC,oBAAJ,WACI/Y,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,wCACxB+Y,cAAJ,QAEA7kC,QAAA,SACA6E,SAAA,8sBACEC,QAAS,mkGACTG,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,mFA3GA1F,SAAEc,GAAFf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAyF,EAAAA,cALA3F,KAAQkB,OAAQnB,aAAhBC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,2BAmLA9sB,SAAAc,GAAAf,aAAAC,KAAegB,EAAAA,OAAQd,MAAvBglC,SAEAxB,EAAAriC,uEAzCAo4B,OAAAz5B,KAAAqH,EAAAA,QAiBAkE,QAAAvL,KAAAqH,EAAAA,SAYAq8B,sBAwHA,QAAAyB,GAAAjiC,EAAAkU,EAAAhU,EAAAgiC,EAAAhI,GAiBA,GAAA/5B,GAAAJ,EAAAK,KAAA5D,KAAAwD,EAAAkU,EAAAhU,EAAAgiC,EAAAhI,IAAA19B,IACE,OAAF2D,GAAAo2B,KAAA,gBAAAp2B,EACA,6BAMArD,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,oBAzBA4D,KAAA,cACA8yB,KAAA,gBACAn5B,MAAA,mCACMusB,kCAAN,kBACIkY,mBAAJ,WACIC,oBAAJ,YAEA5kC,QAAA,SACA6E,SAAA,8sBACAC,QAAA,mkGACAG,gBAAAC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAIAy/B,EAAAniB,eAAA,WAAA,QACAhjB,KAAAmH,EAAAA,0MA5SAnH,SAAEc,GAAFf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAglC,SA+SAC,GACAzB,ICjTA2B,GAAA,WAAA,QAAAA,MAYgC,sBAZhCrlC,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,GAAiBD,EAAAA,cAC3BM,SACE2hC,GACAyB,GACAzjC,IAEFW,cACEqhC,GACAyB,QAGJE,KCyBaC,GACX,GAAI5rB,GAAAA,eAAuC,6BAC3CkG,WAAY,OACZ0J,QAASic,KAUP5I,GAAe,EAON6I,IACXv+B,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAAs1B,MAC9B1I,OAAO,iBAKP,QAAF2I,GAEWvb,EAEA5e,GAFA7L,KAAXyqB,OAAWA,EAEAzqB,KAAX6L,MAAWA,EACX,MAAAm6B,MAKAD,GAAA,WA4HE,QAAFA,GAAsBE,GAAAjmC,KAAtBimC,gBAAsBA,EAjHZjmC,KAAVygC,OAAwB,KAGdzgC,KAAVkmC,MAA0B,mBAAmBjJ,KAGnCj9B,KAAVmmC,UAA6C,KAGnCnmC,KAAVomC,gBAAoC,EAG1BpmC,KAAVqmC,eAA+C,QAGrCrmC,KAAVsmC,WAA+B,EAGrBtmC,KAAVg+B,WAA+B,EAG7Bh+B,KAAFurB,8BAA+B,aAM7BvrB,KAAFyrB,UAAW,aAOUzrB,KAArBmR,OAA4D,GAAIH,GAAAA,aA+KhE,MArKErF,QAAFC,eACMm6B,EADNhiC,UAAA,YAAE,WACqB,MAAO/D,MAAKkmC,WACjC,SAASr6B,GACP7L,KAAKkmC,MAAQr6B,EACb7L,KAAKumC,2DAIP56B,OAAFC,eACMm6B,EADNhiC,UAAA,qBAAE,WAEE,MAAO/D,MAAKqmC,oBAEd,SAAkBjQ,GAChBp2B,KAAKqmC,eAAuB,WAANjQ,EAAiB,SAAW,QAClDp2B,KAAKwmC,uDASP76B,OAAFC,eACMm6B,EADNhiC,UAAA,aAAE,WACmB,MAAO/D,MAAKygC,YAC/B,SAAUgG,GACJzmC,KAAKygC,SAAWgG,IAElBzmC,KAAKygC,OAASgG,EAEdzmC,KAAK0mC,gCACL1mC,KAAK2mC,8DAITZ,EAAFhiC,UAAA4iC,0BAAE,WACM3mC,KAAKmmC,YAAcnmC,KAAKmmC,UAAU5I,UACpCv9B,KAAKmmC,UAAU5I,SAAU,IAQ7B5xB,OAAFC,eACMm6B,EADNhiC,UAAA,gBAAE,WACiB,MAAO/D,MAAKmmC,eAC7B,SAAa9kB,GACXrhB,KAAKmmC,UAAY9kB,EACjBrhB,KAAK6L,MAAQwV,EAAWA,EAASxV,MAAQ,KACzC7L,KAAK2mC,6DAIPh7B,OAAFC,eACMm6B,EADNhiC,UAAA,gBAAE,WAC0B,MAAO/D,MAAKsmC,eACtC,SAAaz6B,GACX7L,KAAKsmC,UAAYvrB,EAAAA,sBAAsBlP,GACvC7L,KAAKwmC,uDAIP76B,OAAFC,eACMm6B,EADNhiC,UAAA,gBAAE,WAC0B,MAAO/D,MAAKg+B,eACtC,SAAanyB,GACX7L,KAAKg+B,UAAYjjB,EAAAA,sBAAsBlP,GACvC7L,KAAKwmC,uDASPT,EAAFhiC,UAAAkE,mBAAE,WAIEjI,KAAKomC,gBAAiB,GAOxBL,EAAFhiC,UAAA6iC,OAAE,WACM5mC,KAAKyrB,WACPzrB,KAAKyrB,aAIDsa,EAAVhiC,UAAAwiC,wBAAE,WAAA,GAAF5iC,GAAA3D,IACQA,MAAK6mC,SACP7mC,KAAK6mC,QAAQz8B,QAAO,SAAC08B,GACnBA,EAAMllB,KAAOje,EAAKie,KAClBklB,EAAMC,mBAMJhB,EAAVhiC,UAAA2iC,8BAAE,WAAA,GAAF/iC,GAAA3D,KAEUgnC,EAAuC,OAAnBhnC,KAAKmmC,WAAsBnmC,KAAKmmC,UAAUt6B,QAAU7L,KAAKygC,MAE/EzgC,MAAK6mC,UAAYG,IACnBhnC,KAAKmmC,UAAY,KACjBnmC,KAAK6mC,QAAQz8B,QAAO,SAAC08B,GACnBA,EAAMvJ,QAAU55B,EAAKkI,QAAUi7B,EAAMj7B,MACjCi7B,EAAMvJ,UACR55B,EAAKwiC,UAAYW,OAOzBf,EAAFhiC,UAAA06B,iBAAE,WACMz+B,KAAKomC,gBACPpmC,KAAKmR,OAAOU,KAAK,GAAIm0B,IAAehmC,KAAc,UAAGA,KAAKygC,UAI9DsF,EAAFhiC,UAAAyiC,oBAAE,WACMxmC,KAAK6mC,SACP7mC,KAAK6mC,QAAQz8B,QAAO,SAAC08B,GAAS,MAAAA,GAAMC,mBAQxChB,EAAFhiC,UAAAqnB,WAAE,SAAWvf,GACT7L,KAAK6L,MAAQA,EACb7L,KAAKimC,gBAAgB30B,gBAQvBy0B,EAAFhiC,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAKurB,8BAAgCD,GAQvCya,EAAFhiC,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAKyrB,UAAYH,GAOnBya,EAAFhiC,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,EAChB3rB,KAAKimC,gBAAgB30B,+BA1NzBhR,KAACC,EAAAA,UAADC,OACE6C,SAAU,kBACV5C,SAAU,gBACV6G,WAAYw+B,IACZnlC,MACEsG,KAAQ,aACRrG,MAAS,2DA/EbN,KAAE8R,EAAAA,uCAsHFjB,SAAA7Q,KAAG+R,EAAAA,SAGHw0B,UAAAvmC,KAAG+H,EAAAA,gBAAH7H,MAAmBiQ,EAAAA,WAAU,WAAO,MAAAw2B,OAAmB3+B,aAAa,MAIpE4+B,QAAA5mC,KAAGqH,EAAAA,QAGHia,OAAAthB,KAAGqH,EAAAA,QAQHwb,gBAAA7iB,KAAGqH,EAAAA,QAeHkE,QAAAvL,KAAGqH,EAAAA,QAsBH0Z,WAAA/gB,KAAGqH,EAAAA,QASHyP,WAAA9W,KAAGqH,EAAAA,QAQHo4B,WAAAz/B,KAAGqH,EAAAA,SAuGHo+B,mBAUE,QAAFoB,GAAqBhnC,GAAAH,KAArBG,YAAqBA,EACrB,MAAAgnC,MAGMC,GAEEh0B,EAAmB3M,EAAc0gC,KAKzCF,GAAA,SAAA1jC,GAiKE,QAAF0jC,GAA0BI,EACZ7jC,EACQyiC,EACAhmC,EACAqnC,EAC0C3J,EAExC4J,GAPtB,GAAF5jC,GAQIJ,EARJK,KAAA5D,KAQUwD,IARVxD,WAEsB2D,GAAtBsiC,gBAAsBA,EACAtiC,EAAtB1D,cAAsBA,EACA0D,EAAtB2jC,iBAAsBA,EAC0C3jC,EAAhEg6B,eAAgEA,EAExCh6B,EAAxB4jC,kBAAwBA,EA3Id5jC,EAAVo6B,UAA8B,gBAAed,GAGlCt5B,EAAX4yB,GAAwB5yB,EAAKo6B,UAuGRp6B,EAArBwN,OAA4D,GAAIH,GAAAA,aAStDrN,EAAVs6B,UAA8B,EASpBt6B,EAAV88B,OAAwB,KAGd98B,EAAV6jC,+BAAwC,aAiBpC7jC,EAAK0jC,WAAaA,EAElB1jC,EAAK6jC,+BACHF,EAAiBG,OAAM,SAAElR,EAAY3U,GAC/B2U,IAAO5yB,EAAK4yB,IAAM3U,IAASje,EAAKie,OAClCje,EAAK45B,SAAU,OAnBzB,MArIoCz5B,GAApCmjC,EAAA1jC,GAqBEoI,OAAFC,eACMq7B,EADNljC,UAAA,eAAE,WACyB,MAAO/D,MAAKi+B,cACrC,SAAYpyB,GACd,GAAU67B,GAAkB3sB,EAAAA,sBAAsBlP,EAC1C7L,MAAKi+B,WAAayJ,IACpB1nC,KAAKi+B,SAAWyJ,EACZA,GAAmB1nC,KAAKqnC,YAAcrnC,KAAKqnC,WAAWx7B,QAAU7L,KAAK6L,MACvE7L,KAAKqnC,WAAWhmB,SAAWrhB,MACjB0nC,GAAmB1nC,KAAKqnC,YAAcrnC,KAAKqnC,WAAWx7B,QAAU7L,KAAK6L,QAI/E7L,KAAKqnC,WAAWhmB,SAAW,MAGzBqmB,GAEF1nC,KAAKsnC,iBAAiBK,OAAO3nC,KAAKu2B,GAAIv2B,KAAK4hB,MAE7C5hB,KAAKimC,gBAAgB30B,iDAKzB3F,OAAFC,eACMq7B,EADNljC,UAAA,aAAE,WACmB,MAAO/D,MAAKygC,YAC/B,SAAU50B,GACJ7L,KAAKygC,SAAW50B,IAClB7L,KAAKygC,OAAS50B,EACU,OAApB7L,KAAKqnC,aACFrnC,KAAKu9B,UAERv9B,KAAKu9B,QAAUv9B,KAAKqnC,WAAWx7B,QAAUA,GAEvC7L,KAAKu9B,UACPv9B,KAAKqnC,WAAWhmB,SAAWrhB,yCAOnC2L,OAAFC,eACMq7B,EADNljC,UAAA,qBAAE,WAEE,MAAO/D,MAAKqmC,gBAAmBrmC,KAAKqnC,YAAcrnC,KAAKqnC,WAAWlkB,eAAkB,aAEtF,SAAkBtX,GAChB7L,KAAKqmC,eAAiBx6B,mCAKxBF,OAAFC,eACMq7B,EADNljC,UAAA,gBAAE,WAEE,MAAO/D,MAAKsmC,WAAkC,OAApBtmC,KAAKqnC,YAAuBrnC,KAAKqnC,WAAWjwB,cAExE,SAAavL,GACf,GAAU+7B,GAAmB7sB,EAAAA,sBAAsBlP,EAC3C7L,MAAKsmC,YAAcsB,IACrB5nC,KAAKsmC,UAAYsB,EACjB5nC,KAAKimC,gBAAgB30B,iDAKzB3F,OAAFC,eACMq7B,EADNljC,UAAA,gBAAE,WAEE,MAAO/D,MAAKg+B,WAAch+B,KAAKqnC,YAAcrnC,KAAKqnC,WAAWtH,cAE/D,SAAal0B,GACX7L,KAAKg+B,UAAYjjB,EAAAA,sBAAsBlP,oCAIzCF,OAAFC,eACMq7B,EADNljC,UAAA,aAAE,WAEE,MAAO/D,MAAK6nC,QACT7nC,KAAKqnC,YAAcrnC,KAAKqnC,WAAWH,OACpClnC,KAAKunC,mBAAqBvnC,KAAKunC,kBAAkBL,OAAS,cAE9D,SAAUT,GAA0BzmC,KAAK6nC,OAASpB,mCAclD96B,OAAFC,eAAMq7B,EAANljC,UAAA,eAAE,WAAwB,OAAU/D,KAAKu2B,IAAMv2B,KAAK+9B,WAApD,0CA2CEkJ,EAAFljC,UAAA2O,MAAE,WACE1S,KAAKC,cAAc0gB,SAAS3gB,KAAKw+B,cAAe,aAQlDyI,EAAFljC,UAAAgjC,cAAE,WAGE/mC,KAAKimC,gBAAgB30B,gBAGvB21B,EAAFljC,UAAAuK,SAAE,WACMtO,KAAKqnC,aAEPrnC,KAAKu9B,QAAUv9B,KAAKqnC,WAAWx7B,QAAU7L,KAAKygC,OAE9CzgC,KAAK4hB,KAAO5hB,KAAKqnC,WAAWzlB,OAIhCqlB,EAAFljC,UAAAC,gBAAE,WAAA,GAAFL,GAAA3D,IACIA,MAAKC,cACFse,QAAQve,KAAKG,aAAa,GAC1BmE,UAAS,SAAC+5B,IACJA,GAAe16B,EAAK0jC,YACvB1jC,EAAK0jC,WAAWT,YAKxBK,EAAFljC,UAAAmE,YAAE,WACElI,KAAKC,cAAcC,eAAeF,KAAKG,aACvCH,KAAKwnC,kCAICP,EAAVljC,UAAA06B,iBAAE,WACEz+B,KAAKmR,OAAOU,KAAK,GAAIm0B,IAAehmC,KAAMA,KAAKygC,UAGjDwG,EAAFljC,UAAA+jC,kBAAE,WACE,MAAO9nC,MAAKshB,eAAiBthB,KAAKoX,UAGpC6vB,EAAFljC,UAAA26B,cAAE,SAAc9sB,GAQZA,EAAM2sB,mBAOR0I,EAAFljC,UAAAgkC,eAAE,SAAen2B,GAIbA,EAAM2sB,iBAEV,IAAUyJ,GAAoBhoC,KAAKqnC,YAAcrnC,KAAK6L,QAAU7L,KAAKqnC,WAAWx7B,KAC5E7L,MAAKu9B,SAAU,EACfv9B,KAAKy+B,mBAEDz+B,KAAKqnC,aACPrnC,KAAKqnC,WAAW9b,8BAA8BvrB,KAAK6L,OAC/Cm8B,GACFhoC,KAAKqnC,WAAW5I,oCApQxBn+B,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,mBACEkC,SAAU,++BACVC,QAAF,y2EACE9E,QAAF,gBAAA,YACEoF,cAAFC,EAAAA,kBAAAC,KACEvF,SAAF,iBACEE,MACFC,MAAA,mBACMqnC,4BAAN,UACIC,6BAAJ,WACI/a,kCAAJ,sCACIgb,sBAAJ,sBACIC,qBAAJ,qBACIC,mBAAJ,mBAEIzI,kBAAJ,uEAOAj6B,gBAAAC,EAAAA,wBAAAC,4GA2IAvF,KAAsC8R,EAAAA,oBAvdtC9R,KAAEoB,EAAAA,eAJFpB,KAAEgoC,EAAAA,4BAPFhoC,KAAQkB,OAARnB,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,2BAEA9sB,SAAQc,GAARf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAolC,SAseAqB,EAAAtlC,0DAvIAiN,YAAAtO,KAAAqH,EAAAA,MAAAnH,MAAA,gBAGAqO,iBAAAvO,KAAAqH,EAAAA,MAAAnH,MAAA,qBAGA+nC,kBAAGjoC,KAAHqH,EAAAA,MAAAnH,MAAA,sBAGA+8B,UAAAj9B,KAAAqH,EAAAA,QAGAkE,QAAAvL,KAAAqH,EAAAA,QAGAwb,gBAAG7iB,KAAHqH,EAAAA,QAwBAyP,WAAA9W,KAAAqH,EAAAA,QAkBAo4B,WAAAz/B,KAAAqH,EAAAA,QAUAu/B,QAAA5mC,KAAAqH,EAAAA,QAaAwJ,SAAA7Q,KAAA+R,EAAAA,SASAmsB,gBAAAl+B,KAAAoO,EAAAA,UAAAlO,MAAA,SAAAmO,QAAA,OAsCAs4B,OC1dAuB,GAAA,WAAA,QAAAA,MAK6B,sBAL7BloC,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCK,SAAU0jC,GAAekB,GAAgBjlC,IACzCW,cAAeojC,GAAekB,QAEhCuB,KCCazM,IAIXC,gBAAiBhtB,EAAAA,QAAQ,aAKvBC,EAAAA,MAAM,qBAAsBrC,EAAAA,OAC1BsC,UAAa,OACbrC,WAAc,aAEhBoC,EAAAA,MAAM,OAAQrC,EAAAA,OAEZ67B,aAAc,OACd57B,WAAc,YAEhBuC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CV2BHq5B,GACT,GAAI1uB,GAAAA,eAAwB,+BAC1BkG,WAAY,OACZ0J,QAAS+e,KAQfxN,GAAA,SAAA53B,GAaE,QAAF43B,GACc9nB,EAC6Cu1B,EACrDplC,EACA+3B,EACAtd,GALJ,GAAFta,GAMIJ,EANJK,KAAA5D,KAMUwD,EAAY+3B,EAAkBtd,IANxCje,WACc2D,GAAd0P,mBAAcA,EAC6C1P,EAA3DilC,WAA2DA,IA/D3D,MA4DsC9kC,GAAtCq3B,EAAA53B,GAUE43B,EAAFp3B,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAK4oC,WAAWhP,sBAAsBt1B,UAAS,WAC7CX,EAAK0P,mBAAmB/B,iCAxB9BhR,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,qBACEkC,SAAU,4BACV5E,MACFC,MAAA,qBACM46B,yBAAN,kCACIC,0BAAJ,oCAEA91B,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,8KAOA1F,KAAAo7B,EAAAA,mBArEAp7B,KAAEY,EAAAA,UAMFi6B,0DAiFA,GAAAx3B,GAAA3D,IAkIAA,MAAAG,YAAAA,EAAEH,KAAF6oC,kBAAAA,EAAsB7oC,KAAtBC,cAAAA,EACsBD,KAAtByD,UAAAA,EACsBzD,KAAtBuT,QAAAA,EACsBvT,KAAtB8oC,KAAAA,EACsB9oC,KAAtB+oC,qCAAA,sDA9GU/oC,KAAVgpC,MAAA,OAaUhpC,KAAVipC,eAAA,EASUjpC,KAAVkpC,YAAA,sHAgCqB,GAArBl4B,GAAAA,cAAA,2HA6CWhR,KAAXs6B,aAAAh2B,UAAA,eAcAX,EAAAmlC,OACAnlC,EAAAolC,qCAAAplC,EAAAmlC,KAAA,eAEUnlC,EAAKwlC,qBAAfxlC,EAAAylC,YACAzlC,EAAA0lC,cAKA1lC,EAAA2lC,8MAYAl1B,EAAAA,UAAwBzQ,EAAxB+P,aAAApP,UAAA,sDAIAsN,EAAA2sB,kBACY3sB,EAAK2D,uBAMbvV,KAAJupC,cAAAt/B,KAAAsH,EAAAA,qBAAA,yEAEAjN,UAAsD,2CAEtD,IAAAqN,EAAAsW,QAAA,SAAA,SAAAvW,GACA,SAAAC,GAAA,IAAAD,EAAAuW,QAAA,UAEUtkB,EAAV22B,aAAAzoB,KAAkClO,EAAM6lC,WA4ExC,MAxEA79B,QAAMC,eAANqvB,EAAAl3B,UAAA,YAzJAya,uDAEA3S,EAAA,QAAAA,EAAA,MAAA,UACA7L,KAAAgQ,YACAhQ,KAAAgQ,UAAAnE,EACQ7L,KAAKw6B,kBAAkB3oB,SAG/B/R,YAAA,EACEC,cAAF,8CAIAye,+DAEAxe,KAAAypC,aAAA39B,QAEAhM,YAAA,EACEC,cAAF,sDAIAye,uHAEEze,cAAF,mDAIAye,iHAEEze,cAAF,uDA0BAye,mGAEA1e,YAAA,EACEC,cAAF,qDAGAye,6JAIA1e,YAAA,EAEEC,cAAF,uDAGAye,mGAEA1e,YAAA,EACEC,cAAF,qDAGAye,kJAIA1e,YAAA,EAEEC,cAAF,6DAAAye,eAeA,MAAAxe,MAAAk6B,QAAA,SAAAl6B,KAAA+5B,MAEAj6B,YAAA,EACEC,cAAF,gDAwDAC,MAAA0pC,WAEA1pC,KAAAopC,WAAAO,+BAAA/tB,KAAA,YAIAguB,GAAA,kBAAAjmC,GAAAxD,YAAAuE,cAAAgO,OACA/O,EAAAxD,YAAAuE,cAAAgO,mEAcA,GAAAm3B,GAAA7pC,KAAA8oC,MAAA9oC,KAAA8oC,KAAAgB,8DAEA9pC,KAAA+oC,+CAAAgB,aAEA/pC,KAAAC,cAAA0gB,SAAA3gB,KAAA+oC,qCAAA/oC,KAAAgqC,YAGAhqC,KAAAG,YAAAuE,cAAAymB,QAEAnrB,KAAO+oC,qCAAP,KACA/oC,KAAAgqC,WAAA,+HAMAhqC,KAAAopC,WAAAa,QAAAjqC,KAAAmpC,kEAQAnpC,KAAAyD,UAAAS,YACAlE,KAAAkqC,mBAAA,wDAMAlqC,KAAAopC,WAAAe,UAEAnqC,KAAAoqC,kBAAA/7B,WACArO,KAAAupC,cAAAl7B,WAEIrO,KAAKypC,aAATp7B,WACIrO,KAAK0T,WAAT5H,OACI9L,KAAK0T,WAATrF,YAEA1C,OAAAC,eAAAqvB,EAAAl3B,UAAA,qHASEhE,cAAF,2JAqCA,YAdA,KAAAsqC,IAAAA,GAAArqC,KAAAk6B,YAAA,KAAAoQ,IAAAA,EAAA,WAAStqC,KAATwpC,QAAAa,EAAAA,GAGQrqC,KAARswB,gBAAAtwB,KAAAkqC,kBAAA,OAAA,eAEQlqC,KAARgqC,WAAAM,IAGAtqC,KAAAswB,gBAAA,OAAAtwB,KAAAspC,iBAEMtpC,KAAKopC,aACXppC,KAAAopC,WAAAa,QAAAjqC,KAAAmpC,qBAGA,GAAAztB,SAAA,iGAKA/P,OAAMC,eAANqvB,EAAAl3B,UAAA,UACAya,sGAGA1e,YAAA,EACEC,cAAF,+JAmBAk7B,EAAA56B,aACAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,kCAjUAkC,SAAA,0EACE4M,YAAF4pB,GAAAC,iBACEr7B,MACFC,MAAA,aAEAq7B,eAAA,OACMC,yBAAN,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIp1B,SAAJ,MAEArB,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,SAIAi1B,EAAA3X,eAAA,WAAA,QACAhjB,KAAAmH,EAAAA,+EAzGAnH,KAAEY,EAAAA,SAhBFZ,SAA8Cc,GAA9Cf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAyF,EAAAA,eAIAg1B,EAAAt5B,gBAkBAqM,WAAA1N,KAAAqH,EAAAA,QAwNAoyB,OAAAz5B,KAAAqH,EAAAA,iEA5GA2oB,kBAAAhwB,KAAAiqC,EAAAA,YAAA/pC,MAAA,gBAaA85B,eAAAh6B,KAAA+R,EAAAA,SASAm4B,gBAAAlqC,KAAA+R,EAAAA,OAAA7R,MAAA,YAMAiqC,cAAAnqC,KAAA+R,EAAAA,SAmBAq4B,gBAAApqC,KAAA+R,EAAAA,OAAA7R,MAAA,YAIAmqC,cAAArqC,KAAA+R,EAAAA,SAKAmoB,oBAAAl6B,KAAA+R,EAAAA,OAAA7R,MAAA,qBAMA05B,SAAA55B,KAAAqH,EAAAA,QASAijC,0BAAAtqC,KAAAuqC,EAAAA,aAAArqC,MAAA,oBAAA,aAMAsqC,yBAAAxqC,KAAAuqC,EAAAA,aAAArqC,MAAA,mBAAA,cAoJAy6B,2EA+EAj7B,KAAA2Q,KAAAA,EA2FA3Q,KAAAq6B,SAAAA,EAAEr6B,KAAFuT,QAAAA,EAKcvT,KAAdqT,mBAAAA,EALkCrT,KAAlC29B,eAAAA,EAMiE39B,KAAjE26B,cAAA,GAAA3pB,GAAAA,aAzCqBhR,KAArB0T,WAAkC,GAAlC3F,GAAAA,QAgBmB/N,KAAnB05B,gBAAA,GAAA3rB,GAAAA,6FAUA4C,GAEAA,EAAAQ,OAAAlH,KAAAmK,EAAAA,UAAApU,KAAA0T,aAAApP,UAAA,WAkBUX,EAAVw1B,8CAGA4R,EAAA55B,SACAlH,KAAAmK,EAAAA,UAAApU,KAAA0T,aAEApP,UAAA,WAGA,MAAAX,GAAA81B,yBACAz5B,KAAOgrC,UAAPC,EAjGA,kDAmGIzsB,mEA/FJ7S,OAAAC,eAAAstB,EAAAn1B,UAAA,wEAGA4H,OAAAC,eAAAstB,EAAAn1B,UAAA,6IAYA4H,OAAAC,eAAAstB,EAAAn1B,UAAA,+IAQA/D,KAAAkrC,mBAGAvU,8FAKE52B,cAAF,IAEA4L,OAAAC,eAAAstB,EAAAn1B,UAAA;uDAmCEhE,cAAF,IAEAm5B,EAAAn1B,UAAAkE,8BA4BA,GAAAtE,GAAA3D,wEACQ2D,EAARw1B,+CAGAC,+EACAz1B,EAAA01B,SAAA90B,QACQZ,EAAK21B,cAAb31B,EAAiC41B,SACzB51B,EAAK21B,cAAb31B,EAAA61B,QACS71B,EAAT81B,uBAGA91B,EAAA0P,mBAAA/B,iBAEAtR,KAAA05B,gBAAAzvB,KAAA0vB,EAAAA,aAAA,IACAvlB,EAAAA,UAAApU,KAAA0T,aAAApP,UAAA,WAKA,MAAyBX,GAAzB81B,0BAIEP,EAAFn1B,UAAAmE,uBAEAlI,KAAA45B,sBAAAvrB,kEAAArO,KAAA0T,WAAArF,6BAQE,0CACF+qB,GAAA,MAAAA,GAAAtG,4BAIE,0CACFsG,GAAA,MAAAA,GAAAS,2GAcQ,GAAR,QAAY75B,KAAZ85B,MAAAC,8BAGa,IAAb,QAAA/5B,KAAsB85B,MAAtBC,KAAA,CAEQ,GAAI1sB,GAAQrN,KAApB85B,MAAAE,MACA5sB,IAAAC,EAAA8nB,GAAqB9nB,EAErB,GAAArN,KAAAi6B,QAAAj6B,KAAAi6B,OAAAC,OACA,GAAA,QAAQl6B,KAAKi6B,OAAbF,KACA5E,GAAAn1B,KAAAi6B,OAAAD,WAGa,IAAb,QAAAh6B,KAAAi6B,OAAAF,KAAA,CAEQ,GAAR1sB,GAAArN,KAAAi6B,OAAAD,MACA7E,IAAA9nB,EAAAD,GAAAC,EAOID,EAAJA,GAAA,KACI+nB,EAAJA,GAAA,KACA/nB,IAAApN,KAAAm6B,gBAAA/sB,MAAA+nB,IAAAn1B,KAAAm6B,gBAAAhF,QACAn1B,KAAAm6B,iBAAA/sB,KAAAA,EAAA+nB,MAAAA,GAIQn1B,KAARuT,QAAqBuD,IAArB,WAIA,MAAAnT,GAAAi2B,sBAAA9tB,KAAAnI,EAAAw2B,qBAGEjB,EAAFn1B,UAAAq2B,qBAEA,GAAAz2B,GAAA3D,uCAAAA,KAAAuT,QAMGW,kBANH,WAGA,MAAAvQ,GAAA+1B,gBAAA5tB,2GAWA8F,GAAA,MAAAA,GAAAF,YAAAE,EAAAD,UAAAyC,EAAAA,UAAApU,KAAAq5B,SAAAh1B,6BAIAuN,oEAAAjO,EAAA02B,SAAA31B,cAAAI,UAAAuW,IAAA,yBAEM1X,EAAN81B,uBACM91B,EAAN0P,mBAAA/B,iBAEA,SAAA8nB,EAAAW,MAEMX,EAANkB,aAAArwB,KAAAmK,EAAAA,UAAApU,KAAAq5B,SAAAh1B,UAAAC,UAAA,WAKA,MAAAX,GAAA42B,mBAAAnB,EAAAc,sEAWAd,EAAAoB,kBAAAvwB,KAAAmK,EAAAA,UAAApU,KAAAq5B,SAAAh1B,UAAAC,UAAA,WAIAX,EAAA4P,QAAA4d,iBAAA9B,eAAAplB,KAAAC,EAAAA,KAAA,IAAoE5F,UAAS,WAC7EX,EAAAw1B,gKAOA70B,UAAA,WAGAX,EAAA81B,0KASQz5B,KAAKq6B,SAAb31B,cAAAI,UAAAqW,OAAA,oGAQAnb,KAAAq5B,SAAAjvB,QAAA,SAIAgvB,8CACUz1B,EAAM61B,KAAhBJ,IAGA,MAAAz1B,EAAA41B,QACAkB,GAAA,SACA92B,EAAA41B,OAAAH,KAGAp5B,KAAAi6B,OAAAj6B,KAAA85B,MAAA,KAEA95B,KAAA2Q,MAAA,QAAA3Q,KAAA2Q,KAAA9E,OACO7L,KAAP85B,MAAA95B,KAAAw5B,KAEQx5B,KAARi6B,OAAsBj6B,KAAtBu5B,SAIMv5B,KAAK85B,MAAQ95B,KAAKu5B,OAClBv5B,KAAKi6B,OAASj6B,KAAKw5B,iKAWvBN,EAAFn1B,UAAA22B,8BAEA16B,KAAA26B,cAAA9oB,iCAGEqnB,EAAFn1B,UAAA62B,6BAEA,GAAAj3B,GAAA3D,6BAAA4E,OAAA,SAGAw0B,GAAA,MAAAA,KAAAA,EAAAyB,cAAAl3B,EAAAm3B,iBAAA1B,sBACAA,GAAA,MAAA,GAAAS,WACEX,EAAFn1B,UAAAg3B,8BAEA,MAAA/6B,MAAAs5B,cAAAt5B,KAAAu5B,SAAoBv5B,KAApB86B,iBAAA96B,KAAAu5B,mPASAj5B,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,uBACA5C,SAAA,qBACA8E,SAAA,25EArVA5E,MACAC,MAAA,uBACAo6B,iDAAA,qBAEEr1B,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAIAkzB,EAAA5V,eAAA,WAAA,QACAhjB,KAAAsZ,EAAAA,eAAAvZ,aAAAC,KAAAe,EAAAA,aACAf,KAAAmH,EAAAA,aACAnH,KAAAY,EAAAA,gHA7bAZ,KAAQkB,OAARnB,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,4BAqBA8L,EAAAv3B,gBAXA03B,WAAA/4B,KAAA+H,EAAAA,gBAAA7H,MAAAy6B,MANA7qB,WAAA9P,KAAA46B,EAAAA,aAAA16B,MAAA26B,IAAAxsB,QAAA,MA6gBAysB,eAAA96B,KAAAoO,EAAAA,UAAAlO,MAAA26B,IAAAxsB,QAAA,MACA0sB,WAAA/6B,KAAAqH,EAAAA,sEAlFAuxB,KC7aAoC,GAAA,SAAA/3B,GAaE,QAAF+3B,GACM1qB,EAC+CmjB,EAC/CvwB,EACA+3B,EACAtd,GACN,MAAI1a,GAAJK,KAAA5D,KAAU4Q,EAAmBmjB,EAAWvwB,EAAY+3B,EAAkBtd,IAAtEje,KA3BA,MAoBuC8D,GAAvCw3B,EAAA/3B,kBAZAjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,sBACEkC,SAAU,4BACV5E,MACFC,MAAA,yCACM46B,yBAAN,kCACIC,0BAAJ,oCAEA91B,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,8KAOA1F,KAAAo7B,EAAAA,mBAxBAp7B,KAAEY,EAAAA,UACFo6B,OA6BAK,GAAA,SAAAp4B,GAGA,QAAAo4B,KAsBA,GAAAh4B,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,IAcU,OApCV2D,GAAAi4B,kBAAA,EAAAj4B,EAAAk4B,aAAA,EA2BUl4B,EAAVm4B,gBAAA,EASAn4B,EAZA,MApCAG,GAAA63B,EAAAp4B,wDAoCAib,6HAEEze,cAAF,yKASEA,cAAF,kLASEA,cAAF,mBADAO,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,oCA3CAkC,SAAA,0EACE4M,YAAF4pB,GAAAC,iBACEr7B,MACFC,MAAA,yBACAoG,SAAA,KAEMi1B,eAAN,OACIC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIC,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEA52B,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,SAGA21B,EAAAh6B,gBACA66B,kBAAAl8B,KAAAqH,EAAAA,QACA80B,cAAAn8B,KAAAqH,EAAAA,yCAGAg0B,GASAV,IASAyB,GAAA,SAAAn5B,GAGE,QAAFm5B,oDAgBA,cACyCA,EAAzCr8B,aAbAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,uDAgBAkC,SAAA,66EAhBA5E,MACAC,MAAA,6CACAo6B,iDAAA,qBAEEr1B,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAGA02B,EAAI/6B,gBACJ03B,WAAG/4B,KAAH+H,EAAAA,gBAAA7H,MAAAm7B,MACAvrB,WAAA9P,KAAA46B,EAAAA,aAAA16B,MAAA86B,IAAA3sB,QAAA,OAEA+tB,OCjGAC,GAAA,WAAA,QAAAA,MAyB+B,sBAzB/Br8B,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACAC,GACA46B,EAAAA,gBACAC,EAAAA,gBAEFx6B,SACEL,GACAi5B,GACA/B,GACAiC,GACAQ,GACAe,GACApB,IAEF34B,cACEs4B,GACA/B,GACAiC,GACAQ,GACAe,GACApB,QAGJqB,KCtBaG,GACX,GAAI9iB,GAAAA,eAA6C,oCAC/CkG,WAAY,OACZ0J,QAAO,WAAQ,OAAEmT,oBAAoB,EAAOC,kBAAkB,MC0B9DC,GAAe,EAGNC,IACX31B,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAA2sB,MAC9BC,OAAO,iBAKP,QAAFC,GAEW7S,EAEA8S,GAFAv9B,KAAXyqB,OAAWA,EAEAzqB,KAAXu9B,QAAWA,EACX,MAAAD,oBAKE,QAAFE,GAAqBr9B,GAAAH,KAArBG,YAAqBA,EACrB,MAAAq9B,MACMC,GAMEh3B,EAActD,EAAWiQ,EAAmB1M,EAAc82B,KAAsB,WAGxFJ,GAAA,SAAA75B,GAyGE,QAAF65B,GAAc55B,EACQvD,EACAoT,EACerM,EACfuM,EAEGmqB,EACuCC,EAC9BhtB,GARhC,GAAFhN,GASIJ,EATJK,KAAA5D,KASUwD,IATVxD,WACsB2D,GAAtB1D,cAAsBA,EACA0D,EAAtB0P,mBAAsBA,EAEA1P,EAAtB4P,QAAsBA,EAEG5P,EAAzB+5B,SAAyBA,EACuC/5B,EAAhEg6B,eAAgEA,EAC9Bh6B,EAAlCgN,KAAkCA,EAtFxBhN,EAAVi6B,UAAmB,SAAIC,KACbl6B,EAAVm6B,WAAoB,aAEVn6B,EAAVo6B,UAA8B,uBAAsBd,GAC1Ct5B,EAAVq6B,WAA+B,EACrBr6B,EAAVs6B,UAA8B,EAGpBt6B,EAAVu6B,WAAsB,EAkBXv6B,EAAXie,KAAiC,KAGtBje,EAAX4yB,GAAwB5yB,EAAKo6B,UAGlBp6B,EAAXwf,cAA+C,QAGxBxf,EAAvBiL,UAAkD,KAGtBjL,EAA5BkL,eAA4D,KAevClL,EAArBwN,OACM,GAAIH,GAAAA,aAQWrN,EAArBw6B,aAAwD,GAAIntB,GAAAA,aAQvCrN,EAArBy6B,WAAsD,GAAIptB,GAAAA,aAkBtDrN,EAAKqD,SAAWsX,SAAStX,IAAa,IAZ1C,MAjFoClD,GAApCs5B,EAAA75B,GA8CEoI,OAAFC,eACMwxB,EADNr5B,UAAA,gBAAE,WAC0B,MAAO/D,MAAKg+B,eACtC,SAAanyB,GAAS7L,KAAKg+B,UAAYjjB,EAAAA,sBAAsBlP,oCAG7DF,OAAFC,eACMwxB,EADNr5B,UAAA,eAAE,WACyB,MAAO/D,MAAKi+B,cACrC,SAAYpyB,GACV7L,KAAKi+B,SAAWljB,EAAAA,sBAAsBlP,GACtC7L,KAAKqT,mBAAmB/B,gDAuB1B3F,OAAFC,eAAMwxB,EAANr5B,UAAA,eAAE,WAAwB,OAAU/D,KAAKu2B,IAAMv2B,KAAK+9B,WAApD,0CAkBEX,EAAFr5B,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAKC,cACFse,QAAQve,KAAKG,aAAa,GAC1BmE,UAAS,SAAC+5B,GACJA,GAMH3iB,QAAQC,UAAUC,KAAI,WAAO,MAAAjY,GAAKm6B,kBAK1CV,EAAFr5B,UAAAmE,YAAE,WACElI,KAAKC,cAAcC,eAAeF,KAAKG,cAIzCi9B,EAAFr5B,UAAAu6B,eAAE,SAAe1sB,GAcb,GAVAA,EAAM2sB,kBAEDv+B,KAAKk+B,WACRl+B,KAAKm+B,aAAatsB,OAOhB7R,KAAKk+B,WAAal+B,KAAK09B,SAASX,mBAElC,YADA/8B,KAAKw+B,cAAc95B,cAAc64B,QAAUv9B,KAAKu9B,QAKlDv9B,MAAKu9B,QAAUv9B,KAAKw+B,cAAc95B,cAAc64B,QAIhDv9B,KAAKy+B,oBAIPrB,EAAFr5B,UAAA26B,cAAE,SAAc9sB,GAQZA,EAAM2sB,mBAIRnB,EAAFr5B,UAAAqnB,WAAE,SAAWvf,GACT7L,KAAKu9B,UAAY1xB,GAInBuxB,EAAFr5B,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAK49B,UAAYtS,GAInB8R,EAAFr5B,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAK89B,WAAaxS,GAIpB8R,EAAFr5B,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,EAChB3rB,KAAKqT,mBAAmB/B,gBAI1B8rB,EAAFr5B,UAAA2O,MAAE,WACE1S,KAAKC,cAAc0gB,SAAS3gB,KAAKw+B,cAAe,aAIlDpB,EAAFr5B,UAAA46B,OAAE,WACE3+B,KAAKu9B,SAAWv9B,KAAKu9B,QACrBv9B,KAAK49B,UAAU59B,KAAKu9B,UAMdH,EAAVr5B,UAAA06B,iBAAE,WACEz+B,KAAK49B,UAAU59B,KAAKu9B,SACpBv9B,KAAKmR,OAAOU,KAAK,GAAIyrB,IAAqBt9B,KAAMA,KAAKu9B,WAI/CH,EAAVr5B,UAAA66B,mBAAE,SAA2BtlB,GAC7B,GAAQsR,GAActR,EAAWtZ,KAAK6+B,eAAkB,GAOpD,OAJI7+B,MAAK8+B,mBACPlU,GAAc,KAGT/S,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAIoR,EAAY,OAG1CwS,EAAFr5B,UAAAg7B,aAAE,WACE,IAAK/+B,KAAKoX,WAAapX,KAAKk+B,UAAW,CAC3C,GAAYc,GAAUh/B,KAAKi/B,SAASv6B,aAC9B1E,MAAK6+B,eAAiB7+B,KAAKk/B,YAAYx6B,cAAcy6B,YAAcH,EAAQG,YAC3EH,EAAQl6B,UAAUuW,IAAI,gBAEtBrb,KAAK8+B,iBAAmB9+B,KAAKu9B,QAC7Bv9B,KAAKk+B,WAAY,IAIrBd,EAAFr5B,UAAAq7B,QAAE,SAAQxtB,GACN,GAAI5R,KAAKk+B,UAAW,CACxB,GAAY/lB,GAAYnY,KAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,OAAmB,EAAI,CAChE7L,MAAKq/B,gBAAkBr/B,KAAK4+B,mBAAmBhtB,EAAM0tB,OAASnnB,EAEpE,IAAYonB,GAASv/B,KAAKq/B,gBAAkB,IAAOr/B,KAAK6+B,eAAiB1mB,CACnEnY,MAAKi/B,SAASv6B,cAAckI,MAAMsC,UAAY,eAAeqwB,EAAnE,cAIEnC,EAAFr5B,UAAAy7B,WAAE,WAAA,GAAF77B,GAAA3D,IACI,IAAIA,KAAKk+B,UAAW,CACxB,GAAYuB,GAAkBz/B,KAAKq/B,gBAAkB,EAE3CI,KAAoBz/B,KAAKu9B,UAC3Bv9B,KAAKo+B,WAAWvsB,OACX7R,KAAK09B,SAASV,mBACjBh9B,KAAKu9B,QAAUkC,EACfz/B,KAAKy+B,qBAMTz+B,KAAKuT,QAAQW,kBAAiB,WAAO,MAAA8a,YAAU,WACzCrrB,EAAKu6B,YACPv6B,EAAKu6B,WAAY,EACjBv6B,EAAKs7B,SAASv6B,cAAcI,UAAUqW,OAAO,gBAI7CxX,EAAKs7B,SAASv6B,cAAckI,MAAMsC,UAAY,UAOtDkuB,EAAFr5B,UAAA27B,mBAAE,WAME1/B,KAAKqT,mBAAmB6d,gCA5R5B5wB,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,mBACE5C,SAAU,iBACVE,MACFC,MAAA,mBACM++B,OAAN,KAEIC,kBAAJ,uDAEIC,uBAAJ,WACIC,wCAAJ,4BACI3S,kCAAJ,sCACItB,UAAJ,uCAEAtmB,SAAA,owCACAC,QAAA,s2GACE8B,WAAF41B,IACEx8B,QAAS,WAAX,gBAAA,QAAA,YACEoF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,yFAjFAvF,KAAE8R,EAAAA,oBATF9R,KAAQkB,OAARnB,aAAAC,KAAAmB,EAAAA,UAAAjB,MAAA,gBAOAF,KAAEY,EAAAA,SA6KFZ,SAAAc,GAAAf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAyBs8B,QAnKzBx8B,KAAEkB,OAAFnB,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,2BAqKA9sB,KAAAsZ,EAAAA,eAAAvZ,aAAAC,KAAAe,EAAAA,cArLA+7B,EAAAz7B,kJAsHAigB,OAAAthB,KAAAqH,EAAAA,QAGA4uB,KAAAj2B,KAAAqH,EAAAA,QAGAwb,gBAAA7iB,KAAAqH,EAAAA,QAGAiH,YAAAtO,KAAAqH,EAAAA,MAAAnH,MAAA,gBAGAqO,iBAAAvO,KAAAqH,EAAAA,MAAAnH,MAAA,qBAGAu/B,WAAAz/B,KAAAqH,EAAAA,QAGA41B,UAAAj9B,KAAAqH,EAAAA,QAGAwJ,SAAA7Q,KAAA+R,EAAAA,SAKA8rB,eAAA79B,KAAQ+R,EAAAA,SAOR+rB,aAAA99B,KAAA+R,EAAAA,SASAmsB,gBAAAl+B,KAAAoO,EAAAA,UAAAlO,MAAA,SAAAmO,QAAA,OAcAyuB,OCxKA4C,GAAA,WAAA,QAAAA,MAQmC,sBARnC1/B,KAACuB,EAAAA,SAADrB,OACEsB,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CE,SAAU+6B,GAAgBp7B,IAC1BW,cAAey6B,IACf91B,YACGC,QAASmmB,EAAAA,sBAAuBC,SAAUC,SAG/CoS,KjBoDapU,IACXrkB,QAAS41B,EAAAA,kBACT31B,YAAaiJ,EAAAA,WAAU,WAAO,MAAA8Z,MAC9B8S,OAAO,iBAIT,QAAA7S,MAMA,MAAAA,oBAME,QAAFyV,GAAqB9/B,GAAAH,KAArBG,YAAqBA,EACrB,MAAA8/B,MACMC,GAKEz5B,EAActD,EAAWuD,EAAcu5B,IAAgB,WAM/D1V,GAAA,SAAAhnB,GAmWE,QAAFgnB,GAAc/mB,EACQvD,EACAoT,EACY1C,EACG3J,EAE2B22B,GAN9D,GAAFh6B,GAOIJ,EAPJK,KAAA5D,KAOUwD,IAPVxD,WACsB2D,GAAtB1D,cAAsBA,EACA0D,EAAtB0P,mBAAsBA,EACY1P,EAAlCgN,KAAkCA,EAG8BhN,EAAhEg6B,eAAgEA,EAzTtDh6B,EAAVw8B,SAAoB,EAYVx8B,EAAVy8B,KAAyB,IAiBfz8B,EAAV08B,KAAyB,EAef18B,EAAV28B,MAA0B,EAMhB38B,EAAV48B,aAAiC,EAiBvB58B,EAAV68B,cAA2C,EA4BjC78B,EAAV88B,OAAkC,KAexB98B,EAAV+8B,WAAsB,EAGD/8B,EAArBwN,OAA6D,GAAIH,GAAAA,aAG5CrN,EAArB4pB,MAA4D,GAAIvc,GAAAA,aAO3CrN,EAArB6pB,YAAgE,GAAIxc,GAAAA,aA6BlErN,EAAF8nB,UAAW,aAID9nB,EAAVg9B,SAA6B,EAM3Bh9B,EAAFi9B,YAAwB,EAMtBj9B,EAAF8a,WAAuB,EA2Gb9a,EAAV0mB,qBAAyC,EAG/B1mB,EAAVqmB,kBAAiD,KAEvCrmB,EAAV4nB,8BAAuC,aAM7B5nB,EAAVkN,uBAAmCnB,EAAAA,aAAaC,MA8B5ChM,EAAKqD,SAAWsX,SAAStX,IAAa,IAxB1C,MA5S+BlD,GAA/BymB,EAAAhnB,GAGEoI,OAAFC,eACM2e,EADNxmB,UAAA,cAAE,WACwB,MAAO/D,MAAKmgC,aACpC,SAAWt0B,GACT7L,KAAKmgC,QAAUplB,EAAAA,sBAAsBlP,oCAKvCF,OAAFC,eACM2e,EADNxmB,UAAA,WAAE,WACoB,MAAO/D,MAAKogC,UAChC,SAAQhK,GACNp2B,KAAKogC,KAAO9rB,EAAAA,qBAAqB8hB,EAAGp2B,KAAKogC,MACzCpgC,KAAK2gC,SAAW3gC,KAAK0qB,qBAAqB1qB,KAAKygC,QAG/CzgC,KAAKqT,mBAAmB/B,gDAK1B3F,OAAFC,eACM2e,EADNxmB,UAAA,WAAE,WACoB,MAAO/D,MAAKqgC,UAChC,SAAQjK,GACNp2B,KAAKqgC,KAAO/rB,EAAAA,qBAAqB8hB,EAAGp2B,KAAKqgC,MAGrB,OAAhBrgC,KAAKygC,SACPzgC,KAAK6L,MAAQ7L,KAAKqgC,MAEpBrgC,KAAK2gC,SAAW3gC,KAAK0qB,qBAAqB1qB,KAAKygC,QAG/CzgC,KAAKqT,mBAAmB/B,gDAK1B3F,OAAFC,eACM2e,EADNxmB,UAAA,YAAE,WACqB,MAAO/D,MAAKsgC,WACjC,SAASlK,GACPp2B,KAAKsgC,MAAQhsB,EAAAA,qBAAqB8hB,EAAGp2B,KAAKsgC,OAEtCtgC,KAAKsgC,MAAQ,GAAM,IACrBtgC,KAAK6gC,gBAAkB7gC,KAAKsgC,MAAMQ,WAAWC,MAAM,KAAKC,MAAOz8B,QAIjEvE,KAAKqT,mBAAmB/B,gDAK1B3F,OAAFC,eACM2e,EADNxmB,UAAA,kBAAE,WAC4B,MAAO/D,MAAKugC,iBACxC,SAAe10B,GAAkB7L,KAAKugC,YAAcxlB,EAAAA,sBAAsBlP,oCAO1EF,OAAFC,eACM2e,EADNxmB,UAAA,oBAAE,WACqB,MAAO/D,MAAKwgC,mBACjC,SAAiB30B,GAEb7L,KAAKwgC,cADO,SAAV30B,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxByI,EAAAA,qBAAqBzI,EAAO7L,KAAkB,eAE9C,mCAMzB2L,OAAFC,eACM2e,EADNxmB,UAAA,aAAE,WAME,MAHoB,QAAhB/D,KAAKygC,SACPzgC,KAAK6L,MAAQ7L,KAAKqgC,MAEbrgC,KAAKygC,YAEd,SAAUrK,GACR,GAAIA,IAAMp2B,KAAKygC,OAAQ,CAC3B,GAAU50B,GAAQyI,EAAAA,qBAAqB8hB,EAI7Bp2B,MAAK6gC,kBACPh1B,EAAQo1B,WAAWp1B,EAAMq1B,QAAQlhC,KAAK6gC,mBAGxC7gC,KAAKygC,OAAS50B,EACd7L,KAAK2gC,SAAW3gC,KAAK0qB,qBAAqB1qB,KAAKygC,QAG/CzgC,KAAKqT,mBAAmB/B,iDAa5B3F,OAAFC,eACM2e,EADNxmB,UAAA,gBAAE,WAC0B,MAAO/D,MAAK0gC,eACtC,SAAa70B,GACX7L,KAAK0gC,UAAY3lB,EAAAA,sBAAsBlP,oCAkBzCF,OAAFC,eAAM2e,EAANxmB,UAAA,oBAAE,WACE,MAAI/D,MAAKstB,YACAttB,KAAKstB,YAAYttB,KAAK6L,OAM3B7L,KAAK6gC,iBAAmB7gC,KAAK6L,OAAS7L,KAAK6L,MAAQ,GAAM,EACpD7L,KAAK6L,MAAMq1B,QAAQlhC,KAAK6gC,iBAG1B7gC,KAAK6L,OAAS,mCAIvB0e,EAAFxmB,UAAA2O,MAAE,WACE1S,KAAKirB,qBAIPV,EAAFxmB,UAAAonB,KAAE,WACEnrB,KAAKkrB,oBAOPvf,OAAFC,eAAM2e,EAANxmB,UAAA,eAAE,WAAwB,MAAO/D,MAAK6qB,OAAO7qB,KAAK2gC,2CAmBhDh1B,OAAFC,eAAM2e,EAANxmB,UAAA,mBAAE,WAGE,MAAO/D,MAAK+pB,UAAY/pB,KAAKmhC,OAASnhC,KAAKmhC,wCAK7Cx1B,OAAFC,eAAM2e,EAANxmB,UAAA,mBAAE,WACE,MAAwB,KAAjB/D,KAAKohC,yCAOdz1B,OAAFC,eAAM2e,EAANxmB,UAAA,iBAAE,WACE,MAAI/D,MAAKoX,SA5Rc,EA+RnBpX,KAAKqhC,cAAgBrhC,KAAKqtB,WACrBrtB,KAAKye,UA1RiB,GAHG,EA+R3B,mCAIT9S,OAAFC,eAAM2e,EAANxmB,UAAA,8BAAE,WACF,GAAUu9B,GAAOthC,KAAK+pB,SAAW,IAAM,IAC7BwX,EAAQvhC,KAAK+pB,SAAW,OAAM,EAAI/pB,KAAKohC,SAAjD,MAAmE,EAAIphC,KAAKohC,QAA5E,QAGI,QAEElyB,UAAW,YAAYoyB,EAA7B,KAJiBthC,KAAKwhC,2BAA6B,IAAM,IAIbxhC,KAAKyhC,UAAjD,eAAyEF,EAAzE,sCAKE51B,OAAFC,eAAM2e,EAANxmB,UAAA,wBAAE,WACF,GAAUu9B,GAAOthC,KAAK+pB,SAAW,IAAM,IAC7BwX,EAAQvhC,KAAK+pB,SAAW,MAAM/pB,KAAKohC,QAA7C,MAA+DphC,KAAKohC,QAApE,QAGI,QAEElyB,UAAW,YAAYoyB,EAA7B,KAJiBthC,KAAKwhC,2BAA6B,GAAK,KAIZxhC,KAAKyhC,UAAjD,eAAyEF,EAAzE,sCAKE51B,OAAFC,eAAM2e,EAANxmB,UAAA,6BAAE,WAME,OACEmL,UAAa,aANJlP,KAAK+pB,SAAW,IAAM,KAMrC,KAHgB/pB,KAAK+pB,UAAoC,OAAxB/pB,KAAK0hC,gBAAgC,IAAL,IAChD1hC,KAAKqqB,qBAAuB,EAAI,IAEjD,uCAKE1e,OAAFC,eAAM2e,EAANxmB,UAAA,oBAAE,WACF,GAAQ49B,GAAuC,IAA5B3hC,KAAKqqB,qBAChBuX,EAAiB5hC,KAAK+pB,SAAW,OAAO4X,EAAhD,IAAiEA,EAAjE,QACQL,EAAOthC,KAAK+pB,SAAW,IAAM,IAI7B8X,EAAQ7hC,KAAK+pB,UAAoC,OAAxB/pB,KAAK0hC,gBAAiC,GAAN,IACzDI,EAAU9hC,KAAK+pB,UAAoC,OAAxB/pB,KAAK0hC,gBAA+C,GAApB,kBAC3Dl8B,GACFo8B,eAAkBA,EAElB1yB,UAAa,0BAA0BoyB,EAA7C,IAAqDO,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAI9hC,KAAKqhC,aAAerhC,KAAKyhC,UAAW,CAItCj8B,EAAO,WAHIxF,KAAK+pB,SACX/pB,KAAK+hC,YAAc,SAAW,MAC9B/hC,KAAK+hC,YAAc,QAAU,SACJ/hC,KAAKyhC,UAAzC,KAGI,MAAOj8B,oCAGTmG,OAAFC,eAAM2e,EAANxmB,UAAA,6BAAE,WAOE,OACEmL,UAAa,aAPJlP,KAAK+pB,SAAW,IAAM,KAOrC,KAFoE,MADnC,OAAxB/pB,KAAK0hC,iBAA6B1hC,KAAK+pB,SAAgC/pB,KAAK+hC,aAAxB/hC,KAAK+hC,aACjC/hC,KAAKohC,QAAU,EAAIphC,KAAKohC,SAEzD,uCA4BU7W,EAAVxmB,UAAAy9B,yBAAE,WACE,MAAgC,OAAxBxhC,KAAK0hC,iBAA6B1hC,KAAK+pB,SAAgC/pB,KAAK+hC,aAAxB/hC,KAAK+hC,aAI3DxX,EAAVxmB,UAAA29B,cAAE,WACE,MAAQ1hC,MAAK2Q,MAA2B,OAAnB3Q,KAAK2Q,KAAK9E,MAAkB,MAAQ,OAe3D0e,EAAFxmB,UAAAuK,SAAE,WAAA,GAAF3K,GAAA3D,IACIA,MAAKC,cACAse,QAAQve,KAAKG,aAAa,GAC1BmE,UAAS,SAAE2J,GACVtK,EAAK8a,YAAcxQ,GAAqB,aAAXA,EAC7BtK,EAAK0P,mBAAmB6d,kBAE1BlxB,KAAK2Q,OACP3Q,KAAK6Q,uBAAyB7Q,KAAK2Q,KAAKQ,OAAO7M,UAAS,WACtDX,EAAK0P,mBAAmB/B,mBAK9BiZ,EAAFxmB,UAAAmE,YAAE,WACElI,KAAKC,cAAcC,eAAeF,KAAKG,aACvCH,KAAK6Q,uBAAuBN,eAG9Bga,EAAFxmB,UAAAi+B,cAAE,WACMhiC,KAAKoX,WAMTpX,KAAKgqB,kBAAoBhqB,KAAK8qB,uBAC9B9qB,KAAKiiC,+BAGP1X,EAAFxmB,UAAAm+B,aAAE,SAAatwB,GAGX,IAAI5R,KAAKoX,UAA6B,IAAjBxF,EAAMuwB,OAA3B,CAIJ,GAAUC,GAAWpiC,KAAK6L,KACtB7L,MAAK4gC,YAAa,EAClB5gC,KAAKirB,oBACLjrB,KAAKqiC,0BAA0B7wB,EAAGI,EAAM0wB,QAAS7wB,EAAGG,EAAM2wB,UAGtDH,GAAYpiC,KAAK6L,QACnB7L,KAAKwiC,kBACLxiC,KAAKy+B,sBAITlU,EAAFxmB,UAAA0+B,SAAE,SAAS7wB,GACP,IAAI5R,KAAKoX,SAAT,CAMKpX,KAAK4gC,YACR5gC,KAAK0iC,cAAc,MAIrB9wB,EAAM2D,gBAEV,IAAQ6sB,GAAWpiC,KAAK6L,KACpB7L,MAAKqiC,0BAA0B7wB,EAAGI,EAAM+wB,OAAOnxB,EAAGC,EAAGG,EAAM+wB,OAAOlxB,IAG9D2wB,GAAYpiC,KAAK6L,OACnB7L,KAAKwiC,oBAITjY,EAAFxmB,UAAA2+B,cAAE,SAAc9wB,GACR5R,KAAKoX,UAAYpX,KAAK4gC,aAK1B5gC,KAAKgiC,gBAELhiC,KAAK4gC,YAAa,EAClB5gC,KAAKirB,oBACLjrB,KAAK4iC,mBAAqB5iC,KAAK6L,MAE3B+F,IACF5R,KAAKqiC,0BAA0B7wB,EAAGI,EAAM+wB,OAAOnxB,EAAGC,EAAGG,EAAM+wB,OAAOlxB,IAClEG,EAAM2D,oBAIVgV,EAAFxmB,UAAA8+B,YAAE,WACE7iC,KAAK4gC,YAAa,EAEd5gC,KAAK4iC,oBAAsB5iC,KAAK6L,OAAU7L,KAAKoX,UACjDpX,KAAKy+B,mBAEPz+B,KAAK4iC,mBAAqB,MAG5BrY,EAAFxmB,UAAA++B,SAAE,WAGE9iC,KAAKgqB,kBAAoBhqB,KAAK8qB,uBAC9B9qB,KAAKiiC,8BAGP1X,EAAFxmB,UAAAg/B,QAAE,WACE/iC,KAAKyrB,aAGPlB,EAAFxmB,UAAAi/B,WAAE,SAAWpxB,GACT,IAAI5R,KAAKoX,WAAYjC,EAAAA,eAAevD,GAApC,CAIJ,GAAUwwB,GAAWpiC,KAAK6L,KAEtB,QAAQ+F,EAAMwD,SACZ,IAAK6tB,GAAAA,QACHjjC,KAAKkjC,WAAW,GAChB,MACF,KAAKC,GAAAA,UACHnjC,KAAKkjC,YAAY,GACjB,MACF,KAAK1tB,GAAAA,IACHxV,KAAK6L,MAAQ7L,KAAKuZ,GAClB,MACF,KAAKlE,GAAAA,KACHrV,KAAK6L,MAAQ7L,KAAKwZ,GAClB,MACF,KAAK4pB,GAAAA,WAQHpjC,KAAKkjC,WAAmC,OAAxBljC,KAAK0hC,gBAA2B,GAAK,EACrD,MACF,KAAK2B,GAAAA,SACHrjC,KAAKkjC,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEHtjC,KAAKkjC,WAAmC,OAAxBljC,KAAK0hC,iBAA4B,EAAI,EACrD,MACF,KAAK6B,GAAAA,WACHvjC,KAAKkjC,YAAY,EACjB,MACF,SAGE,OAGAd,GAAYpiC,KAAK6L,QACnB7L,KAAKwiC,kBACLxiC,KAAKy+B,oBAGPz+B,KAAK4gC,YAAa,EAClBhvB,EAAM2D,mBAGRgV,EAAFxmB,UAAAy/B,SAAE,WACExjC,KAAK4gC,YAAa,GAIZrW,EAAVxmB,UAAAm/B,WAAE,SAAmBO,GACjBzjC,KAAK6L,MAAQ7L,KAAK6qB,QAAQ7qB,KAAK6L,OAAS,GAAK7L,KAAKkqB,KAAOuZ,EAAUzjC,KAAKwZ,IAAKxZ,KAAKuZ,MAI5EgR,EAAVxmB,UAAAs+B,yBAAE,SAAiCqB,GAC/B,GAAK1jC,KAAKgqB,kBAAV,CAIJ,GAAQ2Z,GAAS3jC,KAAK+pB,SAAW/pB,KAAKgqB,kBAAkBqL,IAAMr1B,KAAKgqB,kBAAkB5c,KAC7Ew2B,EAAO5jC,KAAK+pB,SAAW/pB,KAAKgqB,kBAAkBvN,OAASzc,KAAKgqB,kBAAkB3c,MAC9Ew2B,EAAe7jC,KAAK+pB,SAAW2Z,EAAIjyB,EAAIiyB,EAAIlyB,EAG3C4vB,EAAUphC,KAAK6qB,QAAQgZ,EAAeF,GAAUC,EAUpD,IARI5jC,KAAKwhC,6BACPJ,EAAU,EAAIA,GAOA,IAAZA,EACFphC,KAAK6L,MAAQ7L,KAAKwZ,QACb,IAAgB,IAAZ4nB,EACTphC,KAAK6L,MAAQ7L,KAAKuZ,QACb,CACX,GAAYuqB,GAAa9jC,KAAK2qB,gBAAgByW,GAIlC2C,EAAelsB,KAAKC,OAAOgsB,EAAa9jC,KAAKwZ,KAAOxZ,KAAKkqB,MAAQlqB,KAAKkqB,KAAOlqB,KAAKwZ,GAGxFxZ,MAAK6L,MAAQ7L,KAAK6qB,OAAOkZ,EAAc/jC,KAAKwZ,IAAKxZ,KAAKuZ,QAKlDgR,EAAVxmB,UAAA06B,iBAAE,WACEz+B,KAAKurB,8BAA8BvrB,KAAK6L,OACxC7L,KAAKwtB,YAAY3b,KAAK7R,KAAK6L,OAC3B7L,KAAKmR,OAAOU,KAAK7R,KAAKyb,uBAIhB8O,EAAVxmB,UAAAy+B,gBAAE,WACExiC,KAAKutB,MAAM1b,KAAK7R,KAAKyb,uBAIf8O,EAAVxmB,UAAAk+B,2BAAE,WACE,GAAKjiC,KAAKsqB,cAAiBtqB,KAAKgqB,kBAIhC,GAAyB,QAArBhqB,KAAKsqB,aAAwB;2EACrC,GAAUR,GAAY9pB,KAAK+pB,SAAW/pB,KAAKgqB,kBAAkBvN,OAASzc,KAAKgqB,kBAAkB3c,MACnF4c,EAAgBH,EAAY9pB,KAAKkqB,MAAQlqB,KAAKuZ,IAAMvZ,KAAKwZ,KACzD2Q,EAAetS,KAAK6R,KAvoBG,GAuoB6BO,GACpDG,EAAgBD,EAAenqB,KAAKkqB,IACxClqB,MAAKqqB,qBAAuBD,EAAgBN,MAE5C9pB,MAAKqqB,qBAAuBrqB,KAAKsqB,aAAetqB,KAAKkqB,MAAQlqB,KAAKuZ,IAAMvZ,KAAKwZ,MAKzE+Q,EAAVxmB,UAAA0X,mBAAE,SAA2B5P,OAA7B,KAAAA,IAA6BA,EAAQ7L,KAAK6L,MAC1C,IAAQ+F,GAAQ,GAAI4Y,GAKhB,OAHA5Y,GAAM6Y,OAASzqB,KACf4R,EAAM/F,MAAQA,EAEP+F,GAID2Y,EAAVxmB,UAAA2mB,qBAAE,SAA6B7e,GAC3B,QAASA,GAAS,GAAK7L,KAAKwZ,MAAQxZ,KAAKuZ,IAAMvZ,KAAKwZ,MAI9C+Q,EAAVxmB,UAAA4mB,gBAAE,SAAwBC,GACtB,MAAO5qB,MAAKwZ,IAAMoR,GAAc5qB,KAAKuZ,IAAMvZ,KAAKwZ,MAI1C+Q,EAAVxmB,UAAA8mB,OAAE,SAAehf,EAAe2N,EAASD,GACrC,WADJ,KAAAC,IAAgCA,EAAhC,OAAA,KAAAD,IAAyCA,EAAzC,GACW1B,KAAK0B,IAAIC,EAAK3B,KAAK2B,IAAI3N,EAAO0N,KAQ/BgR,EAAVxmB,UAAA+mB,qBAAE,WACE,MAAO9qB,MAAK+qB,eAAiB/qB,KAAK+qB,eAAermB,cAAcsmB,wBAA0B,MAOnFT,EAAVxmB,UAAAknB,kBAAE,WACEjrB,KAAKG,YAAYuE,cAAcgO,SAIzB6X,EAAVxmB,UAAAmnB,iBAAE,WACElrB,KAAKG,YAAYuE,cAAcymB,QAOjCZ,EAAFxmB,UAAAqnB,WAAE,SAAWvf,GACT7L,KAAK6L,MAAQA,GAQf0e,EAAFxmB,UAAAsnB,iBAAE,SAAiBC,GACftrB,KAAKurB,8BAAgCD,GAQvCf,EAAFxmB,UAAAynB,kBAAE,SAAkBF,GAChBtrB,KAAKyrB,UAAYH,GAQnBf,EAAFxmB,UAAA2nB,iBAAE,SAAiBC,GACf3rB,KAAKoX,SAAWuU,kBA9qBpBrrB,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,aACE5C,SAAU,YACV6G,WAAFskB,IACEjrB,MACFkrB,UAAA,aACMC,SAAN,YACIC,cAAJ,uBACIC,YAAJ,qBACIC,UAAJ,aACItN,eAAJ,kBACIuN,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACIxrB,MAAJ,aACIqG,KAAJ,SACIolB,aAAJ,WACIvrB,uBAAJ,WACIwrB,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACIC,kCAAJ,uCAEA5nB,SAAA,ipBACAC,QAAA,ssPACE9E,QAAF,WAAA,QAAA,YACEoF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAA2CC,yFApH3CvF,KAAE8R,EAAAA,oBAnBF9R,KAAQsZ,EAAAA,eAARvZ,aAAAC,KAAAe,EAAAA,aAiBAf,KAAEkB,OAAFnB,aAAAC,KAAAmB,EAAAA,UAAAjB,MAAA,gBAhBAF,KAAQkB,OAARnB,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAA4sB,EAAAA,4BA2cA7C,EAAA5oB,6DA9TA6X,MAAAlZ,KAAAqH,EAAAA,QAQAuiB,OAAA5pB,KAAAqH,EAAAA,QAYA0lB,aAAA/sB,KAAAqH,EAAAA,QAiBA2iB,eAAAhqB,KAAAqH,EAAAA,QAeAkE,QAAAvL,KAAAqH,EAAAA,QASA2lB,cAAAhtB,KAAAqH,EAAAA,QAcAoiB,WAAAzpB,KAAAqH,EAAAA,QAgCAwJ,SAAA7Q,KAAA+R,EAAAA,SAGAkb,QAAAjtB,KAAA+R,EAAAA,SAQAmb,cAAAltB,KAAA+R,EAAAA,SAGA0Y,iBAAAzqB,KAAAoO,EAAAA,UAAAlO,MAAA,iBAAAmO,QAAA,OAgLA4b,OChbAkD,GAAA,WAAA,QAAAA,MAM8B,sBAN9BntB,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,EAAAA,aAAcC,IACxBK,SAAUkoB,GAAWvoB,IACrBW,cAAe4nB,IACfjjB,YAAaC,QAASmmB,EAAAA,sBAAuBC,SAAUC,SAEzDH,mBC6BE,QAAFI,GAAcC,EACQC,GADpB,GAAFpqB,GAAA3D,IACsBA,MAAtB+tB,YAAsBA,EAlBH/tB,KAAnBguB,gBAAqC,GAAIjgB,GAAAA,QAGtB/N,KAAnBiuB,aAAkC,GAAIlgB,GAAAA,QAGnB/N,KAAnBkuB,UAA+B,GAAIngB,GAAAA,QASzB/N,KAAVmuB,oBAA+B,EAI3BnuB,KAAK8tB,kBAAoBA,EAEzB9tB,KAAKouB,WAAW9pB,UAAS,WAAO,MAAAX,GAAK0qB,YACrCP,EAAkBQ,QAAQhqB,UAAS,WAAO,MAAAX,GAAK4qB,mBAsEnD,MAlEEV,GAAF9pB,UAAAsqB,QAAE,WACOruB,KAAKguB,gBAAgBQ,QACxBxuB,KAAK8tB,kBAAkBW,OAEzBC,aAAa1uB,KAAK2uB,qBAIpBd,EAAF9pB,UAAA6qB,kBAAE,WACO5uB,KAAKkuB,UAAUM,SAClBxuB,KAAKmuB,oBAAqB,EAC1BnuB,KAAKkuB,UAAUpiB,OACf9L,KAAKkuB,UAAU7f,aAUnBwf,EAAF9pB,UAAA8qB,gBAAE,WACE7uB,KAAK4uB,qBAIPf,EAAF9pB,UAAA+qB,cAAE,SAAcC,GAAd,GAAFprB,GAAA3D,IACIA,MAAK2uB,mBAAqBK,WAAU,WAAO,MAAArrB,GAAK0qB,WAAWU,IAI7DlB,EAAF9pB,UAAAkrB,MAAE,WACOjvB,KAAKiuB,aAAaO,SACrBxuB,KAAKiuB,aAAaniB,OAClB9L,KAAKiuB,aAAa5f,aAKdwf,EAAV9pB,UAAAwqB,eAAE,WACEvuB,KAAK+tB,YAAYmB,UAEZlvB,KAAKkuB,UAAUM,QAClBxuB,KAAKkuB,UAAU7f,WAGjBrO,KAAKguB,gBAAgBliB,MAAMqjB,kBAAmBnvB,KAAKmuB,qBACnDnuB,KAAKguB,gBAAgB3f,WACrBrO,KAAKmuB,oBAAqB,GAI5BN,EAAF9pB,UAAAqrB,eAAE,WACE,MAAOpvB,MAAKguB,gBAAgBqB,gBAI9BxB,EAAF9pB,UAAAurB,YAAE,WACE,MAAOtvB,MAAK8tB,kBAAkByB,UAIhC1B,EAAF9pB,UAAAqqB,SAAE,WACE,MAAOpuB,MAAKkuB,UAAUmB,gBAE1BxB,KChHa2B,GAAqB,GAAIxV,GAAAA,eAAoB,iCAW1D,QAAAyV,KAEEzvB,KAAF0vB,WAAoC,YAMlC1vB,KAAF2vB,oBAAiC,GAM/B3vB,KAAF+uB,SAAsB,EASpB/uB,KAAF8H,KAAoB,KAGlB9H,KAAF4vB,mBAAuD,SAGrD5vB,KAAF6vB,iBAAmD,SACnD,MAAAJ,MCrCAK,GAAA,WAeE,QAAFA,GACWC,EACqBjoB,GADrB9H,KAAX+vB,YAAWA,EAEP/vB,KAAK8H,KAAOA,EADhB,MAKEgoB,GAAF/rB,UAAAisB,OAAE,WACEhwB,KAAK+vB,YAAYnB,qBAInBjjB,OAAFC,eAAMkkB,EAAN/rB,UAAA,iBAAE,WACE,QAAS/D,KAAK8H,KAAKkoB,uDA5BvB1vB,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,mBACEkC,SAAU,8JACVC,QAAF,yUACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACElF,MACFC,MAAA,+HAWAkvB,KCdaG,IAIXC,cAAelhB,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,eAAgBrC,EAAAA,OACpBsC,UAAW,aACXihB,QAAS,KAEXlhB,EAAAA,MAAM,UAAWrC,EAAAA,OACfsC,UAAW,WACXihB,QAAS,KAEX/gB,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,qCACnCD,EAAAA,WAAW,yBAA0BC,EAAAA,QAAQ,oCAAqCzC,EAAAA,OAChFujB,QAAS,SCEfC,GAAA,SAAA7sB,GAsCE,QAAF6sB,GACY7c,EACApT,EACAkT,EAEDgd,GALT,GAAF1sB,GAOIJ,EAPJK,KAAA5D,OAAAA,WACY2D,GAAZ4P,QAAYA,EACA5P,EAAZxD,YAAYA,EACAwD,EAAZ0P,mBAAYA,EAED1P,EAAX0sB,eAAWA,EAtBD1sB,EAAV+P,YAAuB,EAMZ/P,EAAX2qB,QAAmC,GAAIvgB,GAAAA,QAG5BpK,EAAX4rB,SAAoC,GAAIxhB,GAAAA,QAGtCpK,EAAF2sB,gBAAoB,OAgBkB,cAA9BD,EAAeX,YAA+BW,EAAeV,oBAExB,QAA9BU,EAAeX,WACxB/rB,EAAK4sB,MAAQ,KAEb5sB,EAAK4sB,MAAQ,SAJb5sB,EAAK4sB,MAAQ,UA1BnB,MAL0CzsB,GAA1CssB,EAAA7sB,GAwCE6sB,EAAFrsB,UAAAysB,sBAAE,SAAyBC,GAGvB,MAFAzwB,MAAK0wB,qBACL1wB,KAAK2wB,wBACE3wB,KAAK4wB,cAAcJ,sBAAsBC,IAIlDL,EAAFrsB,UAAA8sB,qBAAE,SAAwBJ,GAGtB,MAFAzwB,MAAK0wB,qBACL1wB,KAAK2wB,wBACE3wB,KAAK4wB,cAAcC,qBAAqBJ,IAIjDL,EAAFrsB,UAAA+sB,eAAE,SAAelf,GACN,GAAAF,GAAXE,EAAAF,UAAsBC,EAAtBC,EAAAD,OAMI,KAJiB,SAAZA,GAAoC,SAAdD,GAAqC,WAAZC,IAClD3R,KAAK+wB,gBAGS,YAAZpf,EAAuB,CAG/B,GAAYqf,GAAUhxB,KAAKuvB,QAErBvvB,MAAKuT,QAAQuD,IAAG,WACdka,EAAQllB,OACRklB,EAAQ3iB,eAMd+hB,EAAFrsB,UAAAktB,MAAE,WACOjxB,KAAK0T,aACR1T,KAAKswB,gBAAkB,UACvBtwB,KAAKqT,mBAAmB6d,kBAK5Bd,EAAFrsB,UAAA0qB,KAAE,WAKE,MADAzuB,MAAKswB,gBAAkB,SAChBtwB,KAAKsuB,SAId8B,EAAFrsB,UAAAmE,YAAE,WACElI,KAAK0T,YAAa,EAClB1T,KAAK+wB,iBAOCX,EAAVrsB,UAAAgtB,cAAE,WAAA,GAAFptB,GAAA3D,IACIA,MAAKuT,QAAQ4d,iBAAiB9B,eAAeplB,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,WAClEX,EAAK2qB,QAAQxiB,OACbnI,EAAK2qB,QAAQjgB,cAKT+hB,EAAVrsB,UAAA4sB,sBAAE,WACF,GAAU3jB,GAAuBhN,KAAKG,YAAYuE,cACxC0sB,EAAepxB,KAAKqwB,eAAegB,UAErCD,KACE5sB,MAAMuF,QAAQqnB,GAEhBA,EAAahnB,QAAO,SAACknB,GAAY,MAAAtkB,GAAQlI,UAAUuW,IAAIiW,KAEvDtkB,EAAQlI,UAAUuW,IAAI+V,IAIqB,WAA3CpxB,KAAKqwB,eAAeT,oBACtB5iB,EAAQlI,UAAUuW,IAAI,wBAGqB,QAAzCrb,KAAKqwB,eAAeR,kBACtB7iB,EAAQlI,UAAUuW,IAAI,sBAKlB+U,EAAVrsB,UAAA2sB,mBAAE,WACE,GAAI1wB,KAAK4wB,cAAc1gB,cACrB,KAAMqhB,OAAM,4FAxJlBjxB,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,sBACEkC,SAAU,8CACVC,QAAF,ieAOE2M,YAAF8d,GAAAC,eACEvvB,MACF0G,cAAA,QACMzG,MAAN,0BACI4wB,WAAJ,kBACIC,gBAAJ,sGA7BAnxB,KAAE8R,EAAAA,oBAFF9R,KAAEmvB,MAUFW,EAAAzuB,yFA+BAyuB,uBC3CAsB,GAAA,WAAA,QAAAA,MAYgC,sBAZhCpxB,KAACuB,EAAAA,SAADrB,OACEsB,SACE6vB,EAAAA,cACA1vB,EAAAA,aACAF,EAAAA,aACA8hB,GACA7hB,IAEFK,SAAU+tB,GAAsBpuB,IAChCW,cAAeytB,GAAsBN,IACrC8B,iBAAkBxB,GAAsBN,QAE1C4B,KCGaG,GACT,GAAI7X,GAAAA,eAAkC,iCACpCkG,WAAY,OACZ0J,QAASkI,KAWfC,GAAA,WAuBE,QAAFA,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvCryB,KAAdgyB,SAAcA,EACAhyB,KAAdiyB,MAAcA,EACAjyB,KAAdkyB,UAAcA,EACAlyB,KAAdmyB,oBAAcA,EACwBnyB,KAAtCoyB,gBAAsCA,EACepyB,KAArDqyB,eAAqDA,EAtB3CryB,KAAVsyB,wBAAgE,KAtDhE,MAyDE3mB,QAAFC,eAAMmmB,EAANhuB,UAAA,0BAAE,WACF,GAAUwuB,GAASvyB,KAAKoyB,eACpB,OAAOG,GAASA,EAAOC,mBAAqBxyB,KAAKsyB,6BAGnD,SAAuBzmB,GACjB7L,KAAKoyB,gBACPpyB,KAAKoyB,gBAAgBI,mBAAqB3mB,EAE1C7L,KAAKsyB,wBAA0BzmB,mCAmBnCkmB,EAAFhuB,UAAA0uB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAO3yB,MAAK4yB,QAAQF,EAAWC,IAUjCZ,EAAFhuB,UAAA8uB,iBAAE,SAAiBttB,EAA4BotB,GAE3C,MAAO3yB,MAAK4yB,QAAQrtB,EAAUotB,IAShCZ,EAAFhuB,UAAA+uB,KAAE,SAAKC,EAAiB/C,EAAqB2C,OAA7C,KAAA3C,IAAwBA,EAAxB,GAEA,IAAUgD,GAAVC,MAAwBjzB,KAAKqyB,eAAmBM,EAU5C,OANAK,GAAQlrB,MAAQirB,QAApBA,EAA6B/C,OAA7BA,GAESgD,EAAQrD,sBACXqD,EAAQrD,oBAAsBoD,GAGzB/yB,KAAKyyB,kBAAkB3C,GAAgBkD,IAMhDjB,EAAFhuB,UAAAsqB,QAAE,WACMruB,KAAKwyB,oBACPxyB,KAAKwyB,mBAAmBnE,WAI5B0D,EAAFhuB,UAAAmE,YAAE,WAEMlI,KAAKsyB,yBACPtyB,KAAKsyB,wBAAwBjE,WAOzB0D,EAAVhuB,UAAAmvB,yBAAE,SAAiCC,EACAR,GAEnC,GAAUS,GAAeT,GAAUA,EAAOpjB,kBAAoBojB,EAAOpjB,iBAAiB8jB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBpzB,KAAKkyB,UAAW,GAAIqB,WACrE9D,GAAmBkD,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBrD,GAAsBuC,EAAOpjB,iBAAkB8jB,GACjEK,EAAmDP,EAAWhjB,OAAOqjB,EAE3E,OADAE,GAAaC,SAAStD,eAAiBsC,EAChCe,EAAaC,UAMd5B,EAAVhuB,UAAA6uB,QAAE,SAAmBgB,EAA4CC,GAGjE,GAAUlB,GAAVM,MAAuB,GAAIxD,IAAwBzvB,KAAKqyB,eAAmBwB,GACjEV,EAAanzB,KAAK8zB,eAAenB,GACjCoB,EAAY/zB,KAAKkzB,yBAAyBC,EAAYR,GACtD5C,EAAc,GAAIlC,IAAyCkG,EAAWZ,EAE5E,IAAIS,YAAmBrmB,GAAAA,YAAa,CACxC,GAAYkjB,GAAS,GAAIliB,GAAAA,eAAeqlB,EAAO,MACvCI,UAAWrB,EAAO7qB,KAClBioB,YAARA,GAGMA,GAAY4D,SAAWI,EAAUlD,qBAAqBJ,OACjD,CACX,GAAY4C,GAAWrzB,KAAKi0B,gBAAgBtB,EAAQ5C,GACxCU,EAAS,GAAIgD,GAAAA,gBAAgBG,MAASxyB,GAAWiyB,GACjDa,EAAaH,EAAUvD,sBAAyBC,EAGtDV,GAAY4D,SAAWO,EAAWP,SAkBpC,MAZA3zB,MAAKmyB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAASpqB,KACpDmK,EAAAA,UAAU+e,EAAWmB,cAAcrqB,KAAKC,EAAAA,KAAK,MAC7C5F,UAAS,SAAC2K,GACNA,EAAMslB,QACRpB,EAAWqB,eAAe1vB,UAAUuW,IAAI,yBAExC8X,EAAWqB,eAAe1vB,UAAUqW,OAAO,2BAI/Cnb,KAAKy0B,iBAAiB1E,EAAa4C,GACnC3yB,KAAKwyB,mBAAqBzC,EACnB/vB,KAAKwyB,oBAINT,EAAVhuB,UAAA0wB,iBAAE,SAAyB1E,EAAkC4C,GAA3D,GAAFhvB,GAAA3D,IAEI+vB,GAAYX,iBAAiB9qB,UAAS,WAEhCX,EAAK6uB,oBAAsBzC,IAC7BpsB,EAAK6uB,mBAAqB,MAGxBG,EAAOhD,qBACThsB,EAAKsuB,MAAMyC,UAIX10B,KAAKwyB,oBAGPxyB,KAAKwyB,mBAAmBpD,iBAAiB9qB,UAAS,WAChDyrB,EAAYjC,kBAAkBmD,UAEhCjxB,KAAKwyB,mBAAmBnE,WAGxB0B,EAAYjC,kBAAkBmD,QAI5B0B,EAAO5D,UAAY4D,EAAO5D,SAAW,GACvCgB,EAAYT,cAAchrB,UAAS,WAAO,MAAAyrB,GAAYjB,cAAc6D,EAAe,YAGjFA,EAAOhD,qBACT3vB,KAAKiyB,MAAM0C,SAAShC,EAAOhD,oBAAqBgD,EAAOjD,aAQnDqC,EAAVhuB,UAAA+vB,eAAE,SAAuBnB,GACzB,GAAUiC,GAAgB,GAAIC,GAAAA,aAC1BD,GAAczc,UAAYwa,EAAOxa,SAErC,IAAQ2c,GAAmB90B,KAAKgyB,SAAShkB,WAAW+mB,SAE1CC,EAA6B,QAArBrC,EAAOxa,UACf8c,EAC0B,SAA9BtC,EAAO/C,oBACwB,UAA9B+C,EAAO/C,qBAAmCoF,GACZ,QAA9BrC,EAAO/C,oBAAgCoF,EACpCE,GAAWD,GAAwC,WAA9BtC,EAAO/C,kBAgBlC,OAfIqF,GACFH,EAAiB1nB,KAAK,KACb8nB,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BzC,EAAO9C,iBACTiF,EAAiBO,IAAI,KAErBP,EAAiBQ,OAAO,KAG1BV,EAAcE,iBAAmBA,EAC1B90B,KAAKgyB,SAASuD,OAAOX,IAQtB7C,EAAVhuB,UAAAkwB,gBAAE,SACItB,EACA5C,GAEN,GAAUqD,GAAeT,GAAUA,EAAOpjB,kBAAoBojB,EAAOpjB,iBAAiB8jB,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgBpzB,KAAKkyB,UAAW,GAAIqB,WAC3D1F,GAAgBkC,IAChBP,GAAoBmD,EAAO7qB,yBA9OlCxH,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAYwR,2CArCzBpxB,KAAQk1B,EAAAA,UAFRl1B,KAAQm1B,EAAAA,gBAURn1B,KAAEo1B,EAAAA,WATFp1B,KAAQq1B,EAAAA,qBAkERr1B,KAAuDyxB,EAAvD1xB,aAAAC,KAAOe,EAAAA,WAAPf,KAAmB+f,EAAAA,aAjDnB/f,KAA4BmvB,GAA5BpvB,aAAAC,KAkDOgB,EAAAA,OAlDPd,MAkDcqxB,qPA5EdE,mBC0DA,QAAA6D,MAAmB,MAAnBA,MACMC,GACFC,EAAiBpvB,EAAckvB,KAGnCrW,GAAA,SAAAhc,GAAA,QAAAgc,KAAA,GAAA5b,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,WAQE2D,GAAFoyB,UAAc,GAAIC,KAGPryB,EAAXmK,cAA2B,GAAIC,GAAAA,QASNpK,EAAzB8b,MAAiD,MAWvC9b,EAAVsyB,WAAsC,GAYFtyB,EAApC2kB,WAAqE,GAAItX,GAAAA,eA8DzE,MApG6BlN,GAA7Byb,EAAAhc,GAkBEoI,OAAFC,eACM2T,EADNxb,UAAA,iBAAE,WACiC,MAAO/D,MAAKi2B,gBAC7C,SAAc9d,GACZ,GAAIlU,EAAAA,aAAekU,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAM+d,IAA6B/d,EAErCnY,MAAKi2B,WAAa9d,mCAQpBxM,OAAFC,eACM2T,EADNxb,UAAA,oBAAE,WAC8B,MAAO/D,MAAKm2B,mBAC1C,SAAiBC,GAAcp2B,KAAKm2B,cAAgBpb,EAAAA,sBAAsBqb,oCAU1E7W,EAAFxb,UAAAsyB,SAAE,SAASC,GACP,IAAKA,EAASC,GACZ,KAAMC,KAGR,IAAIx2B,KAAK+1B,UAAUU,IAAIH,EAASC,IAC9B,KAAMG,IAAgCJ,EAASC,GAEjDv2B,MAAK+1B,UAAUY,IAAIL,EAASC,GAAID,IAOlC/W,EAAFxb,UAAA6yB,WAAE,SAAWN,GACTt2B,KAAK+1B,UAAUc,OAAOP,EAASC,KAIjChX,EAAFxb,UAAAojB,KAAE,SAAKmP,GACCt2B,KAAK4d,QAAU0Y,EAASC,IAC1Bv2B,KAAK4d,OAAS0Y,EAASC,GACvBv2B,KAAKmY,UAAYme,EAAS7W,MAAQ6W,EAAS7W,MAAQzf,KAAKyf,OAExDzf,KAAKmY,UAAYnY,KAAK82B,qBAAqBR,GAG7Ct2B,KAAKsoB,WAAWzW,MAAM+L,OAAQ5d,KAAK4d,OAAQzF,UAAWnY,KAAKmY,aAI7DoH,EAAFxb,UAAA+yB,qBAAE,SAAqBR,GACnB,IAAKA,EAAY,MAAO,EAG5B,IAAU5W,GAAwC,MAAzB4W,EAAS5W,aAAuB4W,EAAS5W,aAAe1f,KAAK0f,aAC9EqX,EAAqBC,GAAsBV,EAAS7W,OAASzf,KAAKyf,MAAOC,GAGzEuX,EAAqBF,EAAmB9O,QAAQjoB,KAAKmY,WAAa,CAEtE,OADI8e,IAAsBF,EAAmBxyB,SAAU0yB,EAAqB,GACrEF,EAAmBE,IAG5B1X,EAAFxb,UAAAuK,SAAE,WACEtO,KAAKk3B,oBAGP3X,EAAFxb,UAAAoK,YAAE,WACEnO,KAAK8N,cAAchC,QAGrByT,EAAFxb,UAAAmE,YAAE,WACElI,KAAK8N,cAAcO,2BAvGvB/N,KAACC,EAAAA,UAADC,OACE6C,SAAU,YACV5C,SAAU,UACVC,QAAS,mDAWXkd,SAAAtd,KAAGqH,EAAAA,MAAHnH,MAAS,mBAMTif,QAAAnf,KAAGqH,EAAAA,MAAHnH,MAAS,kBAGT2X,YAAA7X,KAAGqH,EAAAA,MAAHnH,MAAS,sBAcTkf,eAAApf,KAAGqH,EAAAA,MAAHnH,MAAS,yBAMT8nB,aAAAhoB,KAAG+R,EAAAA,OAAH7R,MAAU,oBA8DV+e,GApG6BsW,IClDvBsB,GAA4BC,GAAmBC,SAAW,IAC9BC,GAAgBC,eAMrCvY,IASXC,UAAWjQ,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,qBAE3CD,EAAAA,MAAM,oBAAqBrC,EAAAA,OAAOsC,UAAW,sBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ8nB,OAInDjY,YAAalQ,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,oBAC3CD,EAAAA,MAAM,oBAAqBrC,EAAAA,OAAOsC,UAAW,mBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ8nB,OAInDhY,aAAcnQ,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,mBAC3CD,EAAAA,MAAM,oBAAqBrC,EAAAA,OAAOsC,UAAW,oBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ8nB,OAInD/X,aAAcpQ,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyCrC,EAAAA,OAAOujB,QAAS,KAC/DlhB,EAAAA,MAAM,kCAAmCrC,EAAAA,OAAOujB,QAAS,OACzDlhB,EAAAA,MAAM,4EACFrC,EAAAA,OAAOujB,QAAS,KAEpB/gB,EAAAA,WAAW,yDAA0DC,EAAAA,QAAQ,QAC7ED,EAAAA,WAAW,UAAWC,EAAAA,QAAQ8nB,OAUhC9X,cAAerQ,EAAAA,QAAQ,iBAErBI,EAAAA,WAAW,yCACPC,EAAAA,QAAQ8nB,GAA2BK,EAAAA,WACjC5qB,EAAAA,OAAOsC,UAAW,qBAClBtC,EAAAA,OAAOsC,UAAW,sBAGxBE,EAAAA,WAAW,yCACPC,EAAAA,QAAQ8nB,GAA2BK,EAAAA,WACjC5qB,EAAAA,OAAOsC,UAAW,kBAClBtC,EAAAA,OAAOsC,UAAW,wBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQ8nB,GAA2BK,EAAAA,WACjC5qB,EAAAA,OAAOsC,UAAW,oBAClBtC,EAAAA,OAAOsC,UAAW,sBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQ8nB,GAA2BK,EAAAA,WACjC5qB,EAAAA,OAAOsC,UAAW,kBAClBtC,EAAAA,OAAOsC,UAAW,yBAExBD,EAAAA,MAAM,yEACFrC,EAAAA,OAAOsC,UAAW,mBACtBD,EAAAA,MAAM,qCACFrC,EAAAA,OAAOsC,UAAW,sBACtBD,EAAAA,MAAM,kCACFrC,EAAAA,OAAOsC,UAAW,uBAIxBoQ,cAAetQ,EAAAA,QAAQ,iBACrBI,EAAAA,WAAW,WACTqoB,EAAAA,MAAM,KAAMC,EAAAA,gBAAiBzW,UAAU,SC9F7C0W,GAAA,WAAA,QAAAA,KAMW33B,KAAXqE,QAAoC,GAAI0J,GAAAA,QAGtC/N,KAAF43B,gBAAiB,SAAIrB,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeAj2B,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAY,gHAfzByX,KAkCa/X,IAEXrY,QAASowB,GACTvX,OAAQ,GAAI/e,GAAAA,SAAY,GAAIgf,GAAAA,SAAYsX,KACxCrX,WAAYuX,kB3BPd,QAAAC,MAAyB,MAAzBA,MACMC,GACFrxB,EAAcoxB,IAoClBtY,GAAA,SAAAjc,GAqEE,QAAFic,GAAqBiB,EACP7P,EACmBuX,EAER6P,GAJvB,GAAFr0B,GASIJ,EAAJK,KAAA5D,OAAAA,IAEI,IAXiB2D,EAArB8c,MAAqBA,EAEY9c,EAAjCwkB,MAAiCA,EAERxkB,EAAzBq0B,WAAyBA,EAvCvBr0B,EAAFs0B,oBAAgC,EAU9Bt0B,EAAFu0B,gBAAmC,GAKjCv0B,EAAFw0B,4BAA+B,EASpBx0B,EAAX0b,cAA+C,SAsBtC8I,EACH,KAAMiQ,YAGRz0B,GAAK00B,sBAAwBhsB,EAAAA,MAAM8b,EAAMG,WAAYH,EAAMra,cAAe2S,EAAMpc,SAC3EC,UAAS,WACJX,EAAK20B,aACP30B,EAAK40B,yBAIF50B,EAAK20B,aAAe30B,EAAK60B,YAA0C,WAA5B70B,EAAK60B,WAAW7mB,UAC1DhO,EAAKw0B,4BAA6B,EAClCx0B,EAAK80B,8BAA8B/mB,UAAW,SAAUC,QAAShO,EAAKu0B,mBAGxEtnB,EAAkBU,mBAhC5B,MAtCmCxN,GAAnC0b,EAAAjc,GAsCEoI,OAAFC,eACM4T,EADNzb,UAAA,oBAAE,WAC8B,MAAO/D,MAAKm2B,mBAC1C,SAAiBC,GAAKp2B,KAAKm2B,cAAgBpb,EAAAA,sBAAsBqb,oCAkCjE5W,EAAFzb,UAAAuK,SAAE,YACOtO,KAAKu2B,IAAMv2B,KAAKg4B,aACnBh4B,KAAKu2B,GAAKv2B,KAAKg4B,WAAWpW,MAI5B5hB,KAAKu4B,wBACLv4B,KAAKy4B,8BACA9mB,QAAS3R,KAAKs4B,YAAc,SAAWt4B,KAAKk4B,kBAEjDl4B,KAAKmoB,MAAMkO,SAASr2B,OAGtBwf,EAAFzb,UAAAmE,YAAE,WACElI,KAAKmoB,MAAMyO,WAAW52B,MACtBA,KAAKq4B,sBAAsB9nB,eAO7BiP,EAAFzb,UAAA20B,yBAAE,SAAyBC,GAEnB34B,KAAK44B,eAAiBD,IAE1B34B,KAAKi4B,mBAAqBU,EAErB34B,KAAKs4B,cACRt4B,KAAKu4B,wBACDv4B,KAAKi4B,mBACPj4B,KAAKy4B,8BAA8B/mB,UAAW1R,KAAKk4B,gBAAiBvmB,QAAS,SAE7E3R,KAAKy4B,8BAA8B/mB,UAAW,OAAQC,QAAS3R,KAAKk4B,qBAU1E1Y,EAAFzb,UAAA00B,6BAAE,SAA6BI,GAC3B74B,KAAKw4B,WAAaK,EAId74B,KAAKm4B,6BACPn4B,KAAKw4B,YAAc7mB,QAASknB,EAAUlnB,WAK1C6N,EAAFzb,UAAA6Y,aAAE,WACE,IAAI5c,KAAK44B,cAAT,CAEA54B,KAAKmoB,MAAMhB,KAAKnnB,MAGgB,SAA5BA,KAAKw4B,WAAW7mB,SAAkD,WAA5B3R,KAAKw4B,WAAW7mB,UACxD3R,KAAKm4B,4BAA6B,EAKxC,IAAUU,GAAsC74B,KAAKs4B,aAC5C5mB,UAAW1R,KAAKk4B,gBAAiBvmB,QAAS,WAC1CD,UAAW,SAAUC,QAAS3R,KAAKk4B,gBACxCl4B,MAAKy4B,6BAA6BI,GAElC74B,KAAKi4B,oBAAqB,IAI5BzY,EAAFzb,UAAAu0B,UAAE,WACE,MAAOt4B,MAAKmoB,MAAMvK,QAAU5d,KAAKu2B,KACH,QAAzBv2B,KAAKmoB,MAAMhQ,WAAgD,SAAzBnY,KAAKmoB,MAAMhQ,YAIpDqH,EAAFzb,UAAA+0B,wBAAE,WACE,OAAU94B,KAAKs4B,YAAc,UAAY,IAAKt4B,KAAKk4B,iBAIrD1Y,EAAFzb,UAAAg1B,mBAAE,WACF,GAAUrnB,GAAY1R,KAAKw4B,WAAW9mB,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAM1R,KAAKw4B,WAAW7mB,SAajE6N,EAAFzb,UAAAw0B,sBAAE,WACEv4B,KAAKk4B,gBAAkBl4B,KAAKs4B,YACxBt4B,KAAKmoB,MAAMhQ,UACVnY,KAAKyf,OAASzf,KAAKmoB,MAAM1I,OAGhCD,EAAFzb,UAAA60B,YAAE,WACE,MAAO54B,MAAKmoB,MAAM/Q,UAAYpX,KAAKoX,UASrCoI,EAAFzb,UAAAi1B,sBAAE,WACE,MAAKh5B,MAAKs4B,YAEqB,OAAxBt4B,KAAKmoB,MAAMhQ,UAAqB,YAAc,aAFrB,MAMlCqH,EAAFzb,UAAAk1B,aAAE,WACE,OAAQj5B,KAAK44B,eAAiB54B,KAAKs4B,4BAjOvCh4B,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,oBACE5C,SAAU,gBACV8E,SAAU,4jCACVC,QAAF;upDACE7E,MACF+d,UAAA,iBACMC,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEAjZ,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,OACEnF,QAAF,YACEyR,YACF6M,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBK,cAClBL,GAAkBM,4FAhEtBhf,KAAQif,GAARlf,aAAAC,KAAAe,EAAAA,aAfAf,SAAEc,GAAFf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAA,gCAAAF,KAAAe,EAAAA,cAkIAme,EAAA7d,4FAjBA8d,QAAAnf,KAAAqH,EAAAA,QAGA+X,eAAApf,KAAAqH,EAAAA,SAMA6X,OCtHAG,GAAA,WAAA,QAAAA,MAM4B,sBAN5Brf,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,EAAAA,cACVM,SAAUkd,GAASC,IACnB7c,cAAe4c,GAASC,IACxBlY,WAAYsY,QAEdD,KCVAE,GAAA,SAAAtc,GAAA,QAAAsc,oDAGgD,MAAd/b,GAAlC+b,EAAAtc,kBAHAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,qBAEZwc,GAAkCC,EAAAA,cCDlCC,GAAA,WAAA,QAAAA,KAMW/f,KAAXqE,QAAoC,GAAI0J,GAAAA,QAGtC/N,KAAFggB,cAA0B,WAtB1B,sBAaA1f,KAAC2f,EAAAA,WAADzf,OAAa0f,WAAY,gHAbzBH,KAgCaI,IACX5Y,QAASwY,GACTK,OAAQ,GAAI/e,GAAAA,SAAY,GAAIgf,GAAAA,SAAYN,KACxCO,WAAYC,ICTdC,GAAA,SAAAjd,GA0CE,QAAFid,GACWC,EACCxgB,EACRE,EACAyQ,GAJF,GAAFjN,GAKIJ,EALJK,KAAA5D,KAKUG,IALVH,WACW2D,GAAX8c,MAAWA,EACC9c,EAAZ1D,cAAYA,EAIRA,EAAcse,QAAQpe,GAAa,GACnCwD,EAAK+c,kBAAoBD,EAAMpc,QAAQC,UAAS,WAAO,MAAAsM,GAAkBU,mBAT7E,MA5BmCxN,GAAnC0c,EAAAjd,GAwCEid,EAAFzc,UAAAmE,YAAE,WACElI,KAAK0gB,kBAAkBnQ,cACvBvQ,KAAKC,cAAcC,eAAeF,KAAKG,cAIzCqgB,EAAFzc,UAAA2O,MAAE,WACE1S,KAAKC,cAAc0gB,SAAS3gB,KAAKG,YAAa,YAIhDqgB,EAAFzc,UAAA6c,aAAE,WACE,MAAO5gB,MAAK6gB,gBAAiBhB,IAAe,KAAO7f,KAAK6gB,OAI1DL,EAAFzc,UAAA+c,eAAE,WACE,MAAO9gB,MAAK6gB,gBAAiBhB,IAAe7f,KAAK6gB,MAAQ,MAI3DL,EAAFzc,UAAAgd,gBAAE,WACE,MAAO/gB,MAAKG,YAAYuE,eAI1B8b,EAAFzc,UAAAid,gBAAE,WACE,OACE1W,MAAOtK,KAAKsK,MACZsT,OAAQ5d,KAAK4d,OACbqD,SAAUjhB,KAAKihB,WAInBT,EAAFzc,UAAAmd,wBAAE,SAAwBjS,GACtB,MAAa,UAATA,EACK,IAAGjP,KAAKsK,MAAQ,GAEZ,QAAT2E,EACK,SAEI,SAATA,EACK,UAEFA,kBAhGX3O,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,kBACEkC,SAAU,qrCACVC,QAAF,40BACE7E,MACFC,MAAA,kBACMqG,KAAN,OAEAnB,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,+EAbAvF,KAAQmH,EAAAA,aAbRnH,KAAQ8R,EAAAA,qBAGRoO,EAAA7e,8DA+BAwf,eAAA7gB,KAAAqH,EAAAA,QAGAyZ,gBAAA9gB,KAAAqH,EAAAA,QAGA2C,QAAAhK,KAAAqH,EAAAA,QAGA0Z,WAAA/gB,KAAAqH,EAAAA,QAGAiW,SAAAtd,KAAAqH,EAAAA,QAGAsZ,WAAA3gB,KAAGqH,EAAAA,QAGH2Z,gBAAAhhB,KAAAqH,EAAAA,SAMA6Y,oBC9Cae,IAKXC,yBAA0BxS,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAYrC,EAAAA,OAAOsC,UAAW,2BAA4BrC,WAAY,YAC5EoC,EAAAA,MAAM,UAAWrC,EAAAA,OAAOsC,UAAW,OAAQrC,WAAY,aACvDoC,EAAAA,MAAM,OAAQrC,EAAAA,OAAOsC,UAAW,0BAA2BrC,WAAY,YACvEuC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BoS,uBAAwBzS,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAYrC,EAAAA,OAAO6P,OAAQ,MAAO5P,WAAY,YACpDoC,EAAAA,MAAM,OAAQrC,EAAAA,OAAO6P,OAAQ,MAAO5P,WAAY,YAChDoC,EAAAA,MAAM,UAAWrC,EAAAA,OAAO6P,OAAQ,IAAK5P,WAAY,aACjDuC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,4CCbxCqS,GAAA,WAOE,QAAFA,GAAqBC,GAAA3hB,KAArB2hB,YAAqBA,EACrB,sBARArhB,KAACC,EAAAA,UAADC,OACE6C,SAAU,sEAjBZ/C,KAA0BiN,EAAAA,iCAqB1BqU,OAAAthB,KAAGqH,EAAAA,MAAHnH,MAAS,qBAGTkhB,KCiBAG,GAAA,SAAAte,GAcE,QAAFse,GAAoDC,EAClBC,EACwBC,GAFxD,GAAFre,GAGIJ,EAHJK,KAAA5D,KAGU8hB,EAASE,IAHnBhiB,WACkC2D,GAAlCoe,mBAAkCA,IAJlC,MAF6Bje,GAA7B+d,EAAAte,GAYEse,EAAF9d,UAAAke,aAAE,SAAaC,EAA6BC,GAC5C,GAAUC,GAAqBpiB,KAAK+hB,mBAAmBE,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWtiB,KAAKuiB,WAE/D,OAAOH,IAAsBC,kBA7BjC/hB,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,WACEkC,SAAU,uDACV+B,YAAFC,QAAAib,GAAAhb,YAAAqa,IACE/b,cAAFC,EAAAA,kBAAAC,KACEvF,SAAF,UACEkF,gBAAFC,EAAAA,wBAAAC,0KASAvF,SAAAc,GAAAf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAiiB,EAAAA,6BAEAZ,EAAAlgB,yEALAkgB,cAIca,GAAd,SAAAnf,GAmBA,QAAAmf,KACA,GAAA/e,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,oGAcA,kEAQAA,MAAA2iB,OAAAvY,QAAA,wCACA,OAAAzG,GAAAif,eAAAhB,GAAAD,IAAiD3hB,KAAjD6iB,OAAAxe,QAAA4F,KAAAmK,EAAAA,UAAApU,KAAA0T,aAAApP,UAAA,+DAOMiN,EAAAA,qBAAN,mJAIA5N,EAAAiX,cAAA/I,UAIA6Q,EAAAriB,aACAC,KAAAC,EAAAA,UAAAC,OAAA6C,SAAA,eAAAiE,YAAAC,QAAAub,EAAAA,WAAAtb,YAAAkb,QAxCAA,EAAA/gB,0GAGAghB,SAAAriB,KAAA+H,EAAAA,gBAAe7H,MAAfkhB,MAGA9G,gBAAAta,KAAA+R,EAAAA,SAGAiP,gBAAAhhB,KAAAqH,EAAAA,SAMA+a,iBAMEK,GAAF,SAAAxf,GAsBA,QAAAwf,KAsBA,GAAApf,GAAA,OAAAJ,GAAAA,EAAAsF,MAAoD7I,KAApD8I,YAAA9I,iEAIAM,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,yDA1BAkC,SAAA,89CACEC,QAAF,ioGACE9E,QAAF,iBACEC,MACFC,MAAe,yBACfoiB,yCAAA,yBACAC,4CAAA,4BACMC,mBAAN,aACIjc,KAAJ,WAEAkL,YAAAoP,GAAAC,0BACAla,YACAC,QAAAmb,GAAAlb,YAAAub,IACAxb,QAAAub,EAAAA,WAAAtb,YAAAub,IAEEjd,cAAFC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAGAkd,EAAAphB,gBACAwhB,gBAAA7iB,KAAAqH,EAAAA,gBAIAyb,GAAA,SAAA7f,GAAE,QAAF6f,GAAAhS,EAAAR,EAIApN,EAAAK,GAoBA,GAAAF,GAAAJ,EAAAK,KAAA5D,KAAAoR,EAAAR,EAAApN,EAAAK,IAAA7D,IAIA,OAHA2D,GAAA0f,aAAA,WAGA1f,gBAHAyf,EAAA/iB,aAOAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,qDACAkC,SAAA,ghJA7BA7E,QAAA,iBACEC,MACFC,MAAA,uBACAsiB,mBAAA,WACAjc,KAAA,WAEEkL,YAAFoP,GAAAE,wBACEna,YACFC,QAAAmb,GAAAlb,YAAA4b,IACA7b,QAAAub,EAAAA,WAAAtb,YAAA4b,IAEAtd,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,WAIAud,EAAAE,eAAA,WAAA,QACAhjB,KAAAsZ,EAAAA,eAAAvZ,aAAAC,KAAmCe,EAAAA,aACnCf,KAAA8R,EAAAA,oBACA9R,KAAAmH,EAAAA,8EArKAib,ICIAa,GAAA,SAAAhgB,GAAA,QAAAggB,oDAQA,MADoCzf,GAApCyf,EAAAhgB,kBAPAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,yBACV1C,MACE6iB,SAAU,QAEZ9iB,QAAS,YAGX6iB,GADoCE,EAAAA,gBAIpCC,GAAA,SAAAngB,GAAA,QAAAmgB,oDAQA,MADwC5f,GAAxC4f,EAAAngB,kBAPAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,6BACV1C,MACE6iB,SAAU,QAEZ9iB,QAAS,YAGXgjB,GADwCC,EAAAA,oBCPxCC,GAAA,WAAA,QAAAA,MAmC+B,sBAnC/BtjB,KAACuB,EAAAA,SAADrB,OACEsB,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACA4hB,GACAC,EAAAA,iBACAC,GACA7hB,IAEFG,SACEL,GACA+gB,GACAK,GACAvB,GACAhC,GACA6C,GACAa,GACAG,GACAlD,GACAkB,IAEF/e,cACEogB,GACAK,GACAvB,GACAhC,GACA6C,GACAa,GACAG,GACAlD,GACAkB,IAEFpa,WAAY6Y,GAA2BqC,QAEzCoB,KC5CAI,GAAA,SAAAzgB,GAAA,QAAAygB,KAAA,GAAArgB,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,WAiBY2D,GAAZsgB,eAA6B,qBAH7B,MACiCngB,GAAjCkgB,EAAAzgB,kBAfAjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,8BACE5C,SAAU,WACV8E,SAAU2e,EAAAA,mBACV1e,QAAF,+wDACE7E,MACFC,MAAA,aAEA0G,YAAAC,QAAA4c,EAAAA,SAAA3c,YAAAwc,IACAle,cAAAC,EAAAA,kBAAAC,2DAMAge,eCPAI,GAAA,SAAA7gB,GAAA,QAAA6gB,oDAI4C,MAAZtgB,GAAhCsgB,EAAA7gB,kBAJAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,eACViE,YAAaC,QAAS8c,EAAAA,WAAY7c,YAAa4c,QAEjDA,GAAgCC,EAAAA,YAMhCC,GAAA,SAAA/gB,GAAA,QAAA+gB,oDAIwD,MAAlBxgB,GAAtCwgB,EAAA/gB,kBAJAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,qBACViE,YAAaC,QAASgd,EAAAA,iBAAkB/c,YAAa8c,QAEvDA,GAAsCC,EAAAA,kBAMtCC,GAAA,SAAAjhB,GAAA,QAAAihB,oDAIwD,MAAlB1gB,GAAtC0gB,EAAAjhB,kBAJAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,qBACViE,YAAaC,QAASkd,EAAAA,iBAAkBjd,YAAagd,QAEvDA,GAAsCC,EAAAA,kBAMtCC,GAAA,SAAAnhB,GAAA,QAAAmhB,oDAgBA,MATkC5gB,GAAlC4gB,EAAAnhB,kBAPAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,iBACViE,YACGC,QAASod,EAAAA,aAAcnd,YAAakd,IACpCnd,QAAS,6BAA8BC,YAAakd,0BAKzD9C,OAAAthB,KAAGqH,EAAAA,MAAHnH,MAAS,kBAGTokB,SAAAtkB,KAAGqH,EAAAA,QAGHkd,YAAAvkB,KAAGqH,EAAAA,SACH+c,GATkCC,EAAAA,cAYlCG,GAAA,SAAAvhB,GAQE,QAAFuhB,GAAcC,EACAvhB,GADZ,GAAFG,GAEIJ,EAFJK,KAAA5D,KAEU+kB,EAAWvhB,IAFrBxD,WAGIwD,GAAWkB,cAAcI,UAAUuW,IAAI,cAAc0J,EAAUC,wBAEnE,MANmClhB,GAAnCghB,EAAAvhB,kBAPAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,uCACV1C,MACEC,MAAS,kBACTqG,KAAQ,wDA9DZ3G,KAAEqkB,EAAAA,eAJFrkB,KAAmBmH,EAAAA,cA2EnBqd,GANmCG,EAAAA,eASnCC,GAAA,SAAA3hB,GAQE,QAAF2hB,GAAcH,EACAvhB,GADZ,GAAFG,GAEIJ,EAFJK,KAAA5D,KAEU+kB,EAAWvhB,IAFrBxD,WAGIwD,GAAWkB,cAAcI,UAAUuW,IAAI,cAAc0J,EAAUC,wBAEnE,MANmClhB,GAAnCohB,EAAA3hB,kBAPAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,uCACV1C,MACEC,MAAS,kBACTqG,KAAQ,oDA9EZ3G,KAAEqkB,EAAAA,eAJFrkB,KAAmBmH,EAAAA,cA2FnByd,GANmCC,EAAAA,eASnCC,GAAA,SAAA7hB,GAQE,QAAF6hB,GAAcL,EACAvhB,GADZ,GAAFG,GAEIJ,EAFJK,KAAA5D,KAEU+kB,EAAWvhB,IAFrBxD,WAGIwD,GAAWkB,cAAcI,UAAUuW,IAAI,cAAc0J,EAAUC,wBAEnE,MAN6BlhB,GAA7BshB,EAAA7hB,kBAPAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,yBACV1C,MACEC,MAAS,WACTqG,KAAQ,oDA9FZ3G,KAAEqkB,EAAAA,eAJFrkB,KAAmBmH,EAAAA,cA2GnB2d,GAN6BC,EAAAA,SCtF7BC,GAAA,SAAA/hB,GAAA,QAAA+hB,oDAMA,MADqCxhB,GAArCwhB,EAAA/hB,kBALAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,oBACViE,YAAaC,QAASge,EAAAA,gBAAiB/d,YAAa8d,IACpD5kB,QAAS,2BAA4B,qCAGvC4kB,GADqCC,EAAAA,iBAOrCC,GAAA,SAAAjiB,GAAA,QAAAiiB,oDAMA,MADqC1hB,GAArC0hB,EAAAjiB,kBALAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,oBACViE,YAAaC,QAASke,EAAAA,gBAAiBje,YAAage,IACpD9kB,QAAS,2BAA4B,qCAGvC8kB,GADqCC,EAAAA,iBAQrCC,GAAA,SAAAniB,GAAA,QAAAmiB,oDAMA,MADkC5hB,GAAlC4hB,EAAAniB,kBALAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,cACViE,YAAaC,QAASoe,EAAAA,UAAWne,YAAake,IAC9ChlB,QAAS,4BAA6B,2BAGxCglB,GADkCC,EAAAA,WAIlCC,GAAA,SAAAriB,GAAA,QAAAqiB,oDAcA,MACkC9hB,GAAlC8hB,EAAAriB,kBAfAjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,qCACEkC,SAAUsgB,EAAAA,iBACVllB,MACFC,MAAA,iBACMqG,KAAN,gGAMExG,SAAF,eACE6G,YAAFC,QAAAue,EAAAA,aAAuCte,YAAvCoe,QAGAA,kCAKA,QAAAG,KAeA,MAAA,QAAAxiB,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,KAHA,6BAIAM,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,iEAhBA1C,MACAC,MAAA,iBACAqG,KAAA,OAIAtB,gBAAiBC,EAAAA,wBAAjBogB,QACAlgB,cAAAC,EAAAA,kBAAAC,oFAKA+f,GACAE,EAAAA,cAEAC,GAAA,SAAA3iB,+DAcA,cAK4B2iB,EAA5B7lB,aAfAC,KAAAgF,EAAAA,UAAA9E,OAAA6C,SAAA,mDAgBA1C,sBAhBAsG,KAAA,OAIEtB,gBAAFC,EAAAA,wBAAAogB,QACAlgB,cAAAC,EAAAA,kBAAAC,KACAvF,SAAU,SACV6G,YAAAC,QAAA4e,EAAAA,OAAA3e,YAAA0e,QAGAA,GACAC,EAAAA,QCtFAC,GAAA,SAAA7iB,GAAA,QAAA6iB,oDAqBA,MACsCtiB,GAAtCsiB,EAAA7iB,kBAtBAjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,kBACEkC,SAAU,ySACVO,cAAFC,EAAAA,kBAAAC,2DAmBAogB,oBCTMC,IAEJrC,GAGAM,GACAgB,GACAZ,GACAN,GACAsB,GACAlB,GACAgB,GAGAV,GACAM,GACAF,GAGAU,GACAM,GACAH,GAEAK,IAGFE,GAAA,WAAA,QAAAA,MAS6B,sBAT7BhmB,KAACuB,EAAAA,SAADrB,OACEsB,SACEykB,EAAAA,eACAxkB,EAAAA,aACAC,IAEFK,QAASgkB,GACT1jB,aAAc0jB,OAEhBC,KCxCME,GAAmB,gCAwKvB,QAAFC,GAAcnb,OAAd,KAAAA,IAAcA,KAAZ,IAAF3H,GACIJ,EADJK,KAAA5D,OAAAA,WAzJmB2D,GAAnB+iB,YAAiC,GAAIlb,GAAAA,oBAGlB7H,EAAnBgjB,QAA6B,GAAInb,GAAAA,gBAAwB,IAGtC7H,EAAnBijB,qBAA0C,GAAI7Y,GAAAA,QAM5CpK,EAAFkjB,2BAA+BnX,EAAAA,aAAaC,MA0D1ChM,EAAFmjB,oBAAqB,SACdhf,EAASif,GAChB,GAAUlb,GAAQ,EAA+Bkb,EAE7C,IAAIC,EAAAA,eAAenb,GAAQ,CAC/B,GAAYob,GAAc/f,OAAO2E,EAI3B,OAAOob,GAAcT,GAAmBS,EAAcpb,EAGxD,MAAOA,IAYTlI,EAAFujB,SAAU,SAAyCpf,EAAWqf,GAC9D,GAAUvJ,GAASuJ,EAAKvJ,OACdzF,EAAYgP,EAAKhP,SACvB,OAAKyF,IAAuB,IAAbzF,EAERrQ,EAAKqf,KAAI,SAAEC,EAAGC,GACzB,GAAUC,GAAS3jB,EAAKmjB,oBAAoBM,EAAGxJ,GACrC2J,EAAS5jB,EAAKmjB,oBAAoBO,EAAGzJ,GAMrC4J,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbrP,EAAqB,GAAK,KAxBdrQ,GAsC3CnE,EAAF8jB,gBAAiB,SAA4C3f,EAASlD,GAEtE,GAAU8iB,GAAU/b,OAAOgc,KAAK7f,GAAM8f,OAAM,SAAEC,EAAqBC,GAO7D,MAAOD,GAAc,EAA+BC,GAAO,KAC1D,IAAIC,cAGDC,EAAoBpjB,EAAOQ,OAAO2iB,aAExC,QAA8C,GAAvCL,EAAQO,QAAQD,IAKvBrkB,EAAK+H,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtC3H,EAAKukB,8BAwHT,MAzR2CpkB,GAA3C2iB,EAAAljB,GA4BEoI,OAAFC,eAAM6a,EAAN1iB,UAAA,YAAE,WAAa,MAAO/D,MAAK0L,MAAMG,WAC/B,SAAS/D,GAAa9H,KAAK0L,MAAMI,KAAKhE,oCAMtC6D,OAAFC,eAAM6a,EAAN1iB,UAAA,cAAE,WAAuB,MAAO/D,MAAK2mB,QAAQ9a,WAC3C,SAAWjH,GAAkB5E,KAAK2mB,QAAQ7a,KAAKlH,oCAM/C+G,OAAFC,eAAM6a,EAAN1iB,UAAA,YAAE,WAA6B,MAAO/D,MAAKmoB,WACzC,SAAShB,GACPnnB,KAAKmoB,MAAQhB,EACbnnB,KAAKkoB,6DAcPvc,OAAFC,eAAM6a,EAAN1iB,UAAA,iBAAE,WAAuC,MAAO/D,MAAKooB,gBACnD,SAAcC,GACZroB,KAAKooB,WAAaC,EAClBroB,KAAKkoB,6DA2GPzB,EAAF1iB,UAAAmkB,0BAAE,WAAA,GAAFvkB,GAAA3D,KAOUsoB,EAAyCtoB,KAAKmoB,MAChD9b,EAAAA,MAAMrM,KAAKmoB,MAAMG,WAAYtoB,KAAKmoB,MAAMI,aACxCxS,EAAAA,GAAa,MACXyS,EAA8CxoB,KAAKooB,WACrD/b,EAAAA,MACErM,KAAKooB,WAAWK,KAChBzoB,KAAK4mB,qBACL5mB,KAAKooB,WAAWG,aAElBxS,EAAAA,GAAa,MACX2S,EAAa1oB,KAAK0L,MAElBid,EAAeC,EAAAA,cAAcF,EAAY1oB,KAAK2mB,SACjD1c,KAAKqC,EAAAA,IAAG,SAAE8M,GAAjB,GAAkBtR,GAAlBsR,EAAA,EAA4B,OAAAzV,GAAKklB,YAAY/gB,MAEnCghB,EAAcF,EAAAA,cAAcD,EAAcL,GAC7Cre,KAAKqC,EAAAA,IAAG,SAAE8M,GAAjB,GAAkBtR,GAAlBsR,EAAA,EAA4B,OAAAzV,GAAKolB,WAAWjhB,MAElCkhB,EAAgBJ,EAAAA,cAAcE,EAAaN,GAC9Cve,KAAKqC,EAAAA,IAAG,SAAE8M,GAAjB,GAAkBtR,GAAlBsR,EAAA,EAA4B,OAAAzV,GAAKslB,UAAUnhB,KAEvC9H,MAAK6mB,2BAA2BtW,cAChCvQ,KAAK6mB,2BAA6BmC,EAAc1kB,UAAS,SAACwD,GAAQ,MAAAnE,GAAK+iB,YAAY5a,KAAKhE,MAQ1F2e,EAAF1iB,UAAA8kB,YAAE,SAAY/gB,GAAZ,GAAFnE,GAAA3D,IASI,OALAA,MAAK2oB,aACA3oB,KAAK4E,OAAgBkD,EAAKlD,OAAM,SAACskB,GAAO,MAAAvlB,GAAK8jB,gBAAgByB,EAAKvlB,EAAKiB,UAAzDkD,EAEf9H,KAAKqoB,WAAaroB,KAAKmpB,iBAAiBnpB,KAAK2oB,aAAapkB,QAEvDvE,KAAK2oB,cAQdlC,EAAF1iB,UAAAglB,WAAE,SAAWjhB,GAET,MAAK9H,MAAKmnB,KAEHnnB,KAAKknB,SAASpf,EAAK0C,QAASxK,KAAKmnB,MAFfrf,GAS3B2e,EAAF1iB,UAAAklB,UAAE,SAAUnhB,GACR,IAAK9H,KAAKqoB,UAAa,MAAOvgB,EAElC,IAAUshB,GAAappB,KAAKqoB,UAAUgB,UAAYrpB,KAAKqoB,UAAUiB,QAC7D,OAAOxhB,GAAK0C,QAAQ+e,OAAOH,EAAYppB,KAAKqoB,UAAUiB,WAQxD7C,EAAF1iB,UAAAolB,iBAAE,SAAiBK,GAAjB,GAAF7lB,GAAA3D,IACI0b,SAAQC,UAAUC,KAAI,WAC1B,GAAYyM,GAAY1kB,EAAK0kB,SAEvB,IAAKA,IAELA,EAAU9jB,OAASilB,EAGfnB,EAAUgB,UAAY,GAAG,CACnC,GAAcI,GAAgB5R,KAAK6R,KAAKrB,EAAU9jB,OAAS8jB,EAAUiB,UAAY,GAAK,EACxEK,EAAe9R,KAAK2B,IAAI6O,EAAUgB,UAAWI,EAE/CE,KAAiBtB,EAAUgB,YAC7BhB,EAAUgB,UAAYM,EAItBhmB,EAAKijB,qBAAqB9a,YAUlC2a,EAAF1iB,UAAAiI,QAAE,WAAY,MAAOhM,MAAK0mB,aAMxBD,EAAF1iB,UAAAwI,WAAE,aACFka,GAzR2Cja,EAAAA,YxBhB9Bc,GACX,GAAI0M,GAAAA,eAAqC,uBACvCkG,WAAY,OACZ0J,QAASC,KAoBbjnB,GAAA,WAOE,QAAFA,GACYzC,EACAoT,EACiCrG,GAFjClN,KAAZG,YAAYA,EACAH,KAAZuT,QAAYA,EACiCvT,KAA7CkN,kBAA6CA,EAwC7C,MAjCEtK,GAAFmB,UAAAmV,eAAE,SAAelM,GAAf,GAAFrJ,GAAA3D,IACIA,MAAK2M,OAEgC,mBAA1B2J,uBACTtW,KAAKuT,QAAQW,kBAAiB,WAC5BoC,sBAAqB,WAAO,MAAA3S,GAAKoJ,WAAWC,OAG9ChN,KAAK+M,WAAWC;EAKpBpK,EAAFmB,UAAA4I,KAAE,WACE3M,KAAKG,YAAYuE,cAAckI,MAAMC,WAAa,WAIpDjK,EAAFmB,UAAA+I,KAAE,WACE9M,KAAKG,YAAYuE,cAAckI,MAAMC,WAAa,UAO5CjK,EAAVmB,UAAAgJ,WAAE,SAAmBC,GACrB,GAAUC,GAAYjN,KAAKkN,kBAAkBF,GACnCG,EAAsBnN,KAAKG,YAAYuE,aAE7CyI,GAAOP,MAAMQ,KAAOH,EAAUG,KAC9BD,EAAOP,MAAMS,MAAQJ,EAAUI,sBAhDnC/M,KAACC,EAAAA,UAADC,OACE6C,SAAU,cACV1C,MACEC,MAAS,uDAvCbN,KAAmBmH,EAAAA,aAAnBnH,KAAuDY,EAAAA,SA8CvDZ,SAAAc,GAAAf,aAAAC,KAAKgB,EAAAA,OAALd,MAAY8M,SAwCZ1K,KCnFAF,GAAA,WAEE,QAAFA,GAAqB6C,GAAAvF,KAArBuF,SAAqBA,EACrB,sBAHAjF,KAACC,EAAAA,UAADC,OAAY6C,SAAU,0DAHtB/C,KAAmBiN,EAAAA,eAMnB7K,KCFAH,GAAA,SAAAgB,GAAA,QAAAhB,oDAG4C,MAAXuB,GAAjCvB,EAAAgB,kBAHAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,qCAEZd,GAAiCiL,EAAAA,yBCgBjC,QAAAC,MAAkB,MAAlBA,MACMC,GACFhH,EAAc+G,IAElBjL,GAAA,SAAAe,GA8DE,QAAFf,GAAsBmL,GAApB,GAAFhK,GACIJ,EADJK,KAAA5D,OAAAA,WAAsB2D,GAAtBgK,kBAAsBA,EAvCJhK,EAAlBiK,UAAsC,GAY5BjK,EAAVkK,eAAkD,KAQvClK,EAAXmK,cAA2B,GAAIC,GAAAA,QAM7BpK,EAAFqK,SAA4B,KAM1BrK,EAAFsK,OAA0B,KAKxBtK,EAAFuK,UAAa,IA5Bb,MAvB4BpK,GAA5BtB,EAAAe,GA6BEoI,OAAFC,eAAMpJ,EAANuB,UAAA,eAAE,WACE,MAAO/D,MAAK6N,gDA2BdrL,EAAFuB,UAAAoK,YAAE,SAAY9J,IACNA,EAAQ+J,eAAe,cAAgB/J,EAAQ+J,eAAe,cAChEpO,KAAK8N,cAAchC,QAIvBtJ,EAAFuB,UAAAmE,YAAE,WACElI,KAAK8N,cAAcO,YAGrB7L,EAAFuB,UAAAuK,SAAE,WACEtO,KAAK6N,eAAiB,GAAIU,GAAAA,eACtBvO,KAAKwO,kBAAoBxO,KAAKyO,iBAAkBzO,KAAK2N,mCA9E7DrN,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,UACEkC,SAAU,uDACV7E,QAAF,YACEiF,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEvF,SAAF,4EApBA+B,EAAAb,8JA0BA8M,mBAAAnO,KAAAoO,EAAAA,UAAAlO,MAAgB+M,EAAAA,aAAcoB,QAAQ,MAKtCf,YAAAtN,KAAAqH,EAAAA,MAAGnH,MAAH,WAIAoO,YAAAtO,KAAAqH,EAAAA,MAAGnH,MAAH,gBAGAqO,iBAAAvO,KAAQqH,EAAAA,MAARnH,MAAA,sBASAgC,OC/CasM,IAIXC,aAAcC,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyDrC,EAAAA,OAAOsC,UAAW,UAMjFD,EAAAA,MAAM,OAAQrC,EAAAA,OAAOsC,UAAW,2BAA4BC,UAAW,SACvEF,EAAAA,MAAM,QAASrC,EAAAA,OAAOsC,UAAW,0BAA2BC,UAAW,SAEvEC,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yDACZD,EAAAA,WAAW,8BACTxC,EAAAA,OAAOsC,UAAW,6BAClBG,EAAAA,QAAQ,0DAEVD,EAAAA,WAAW,+BACTxC,EAAAA,OAAOsC,UAAW,4BAClBG,EAAAA,QAAQ,6DCgBdtM,GAAA,SAAAQ,GASE,QAAFR,GACIuM,EACAC,EAC8CC,GAHhD,GAAF7L,GAIMJ,EAJNK,KAAA5D,KAIYsP,EAA0BC,IAJtCvP,WAGkD2D,GAAlD6L,MAAkDA,EAPxC7L,EAAV8L,cAA0BC,EAAAA,aAAaC,MAE7BhM,EAAViM,YAAwBF,EAAAA,aAAaC,QAgCrC,MApCsC7L,GAAtCf,EAAAQ,GAcER,EAAFgB,UAAAuK,SAAE,WAAA,GAAF3K,GAAA3D,IACIuD,GAAJQ,UAAUuK,SAAV1K,KAAA5D,MAEIA,KAAKyP,cAAgBzP,KAAKwP,MAAMK,iBAC7B5F,KAAK6F,EAAAA,UAAU9P,KAAKwP,MAAMO,kBAAkB/P,KAAKwP,MAAMQ,aACvD1L,UAAS,SAAE2L,GACNA,IAAgBtM,EAAKuM,eACvBvM,EAAKwM,OAAOxM,EAAK6L,MAAMY,YAI7BpQ,KAAK4P,YAAc5P,KAAKwP,MAAMa,oBAAoB/L,UAAS,WACzDX,EAAK2M,YAKTvN,EAAFgB,UAAAmE,YAAE,WACE3E,EAAJQ,UAAUmE,YAAVtE,KAAA5D,MACIA,KAAKyP,cAAcc,cACnBvQ,KAAK4P,YAAYW,8BArCrBjQ,KAACC,EAAAA,UAADC,OACE6C,SAAU,2DAtCZ/C,KAAEkQ,EAAAA,2BACFlQ,KAAEgG,EAAAA,mBAgDFhG,KAAyDwC,GAAzDzC,aAAAC,KAAKgB,EAAAA,OAALd,MAAYiQ,EAAAA,WAAU,WAAO,MAAA3N,YA2B7BC,GApCsC2N,EAAAA,iBA0CtC5N,GAAA,WA2DE,QAAFA,GAAsB3C,EACYwQ,EACpBC,GAFZ,GAAFjN,GAAA3D,IAAsBA,MAAtBG,YAAsBA,EACYH,KAAlC2Q,KAAkCA,EA1CxB3Q,KAAV6Q,uBAAmCnB,EAAAA,aAAaC,MAM9C3P,KAAF8Q,sBAA0B,GAAI/C,GAAAA,QAGT/N,KAArB+Q,aAA0D,GAAIC,GAAAA,aAGzChR,KAArB6P,iBAA+D,GAAImB,GAAAA,aAG9ChR,KAArBqQ,oBAAkE,GAAIW,GAAAA,aAGjDhR,KAArBiR,YAAuD,GAAID,GAAAA,cAAmB,GAcnEhR,KAAXkR,kBAAuC,QAa/BP,IACF3Q,KAAK6Q,uBAAyBF,EAAKQ,OAAO7M,UAAS,SAAE8M,GACnDzN,EAAK0N,+BAA+BD,GACpCR,EAAkBU,kBAMtBtR,KAAK8Q,sBAAsB7G,KAAKsH,EAAAA,qBAAoB,SAAEC,EAAGC,GACvD,MAAOD,GAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,WACpDrN,UAAS,SAACsN,GAERjO,EAAKoM,kBAAkB6B,EAAMD,UAAYhO,EAAKoM,kBAAkBpM,EAAKqM,YACvErM,EAAKsN,YAAYY,OAGflO,EAAKoM,kBAAkB6B,EAAMF,aAAe/N,EAAKoM,kBAAkBpM,EAAKqM,YAC1ErM,EAAK0M,oBAAoBwB,SA5BjC,MAAElG,QAAFC,eACM9I,EADNiB,UAAA,gBAAE,SACaiK,GACXhO,KAAK8R,eAAiB9D,EACtBhO,KAAKqR,kEAkCPvO,EAAFiB,UAAAuK,SAAE,WACwB,UAAlBtO,KAAKgQ,WAAwC,MAAfhQ,KAAKiO,SACrCjO,KAAKgQ,UAAYhQ,KAAK+R,+BAI1BjP,EAAFiB,UAAAmE,YAAE,WACElI,KAAK6Q,uBAAuBN,cAC5BvQ,KAAK8Q,sBAAsBzC,YAG7BvL,EAAFiB,UAAAiO,uBAAE,SAAuBJ,GACzB,GAAU3B,GAAcjQ,KAAK+P,kBAAkB6B,EAAMD,QACjD3R,MAAK6P,iBAAiBgC,KAAK5B,GACvBA,GACFjQ,KAAK+Q,aAAac,KAAK7R,KAAKG,YAAYuE,cAAcuN,eAK1DnP,EAAFiB,UAAAmO,oBAAE,WACE,MAAOlS,MAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,MAAkB,MAAQ,OAI1D/I,EAAFiB,UAAAgM,kBAAE,SAAkB/B,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,GAIElL,EAAViB,UAAAsN,+BAAE,SAAuCD,OAAzC,KAAAA,IAAyCA,EAAiBpR,KAAKkS,uBACvDlS,KAAK8R,eAAiB,EACxB9R,KAAKgQ,UAAmB,OAAPoB,EAAe,OAAS,QAChCpR,KAAK8R,eAAiB,EAC/B9R,KAAKgQ,UAAmB,OAAPoB,EAAe,QAAU,OAE1CpR,KAAKgQ,UAAY,UAQblN,EAAViB,UAAAgO,2BAAE,WACF,GAAUX,GAAMpR,KAAKkS,qBAEjB,OAAY,OAAPd,GAAgBpR,KAAKiO,QAAU,GAAc,OAAPmD,GAAgBpR,KAAKiO,OAAS,EAChE,qBAGF,sCA/IX3N,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,eACEkC,SAAU,sSACVC,QAAF,wHACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEsM,YAAarD,GAAfC,cACEpO,MACFC,MAAe,mIA9FfN,KAAE8R,EAAAA,qBAPFtP,EAAAnB,kFAyHA0O,sBAAA/P,KAAA+R,EAAAA,SAGApB,cAAA3Q,KAAA+R,EAAAA,SAGAC,cAAAhS,KAAAoO,EAAAA,UAAAlO,MAAA+R,EAAAA,qBAAA5D,QAAA,MAGAyB,WAAA9P,KAAAqH,EAAAA,MAAAnH,MAAA,aAGAyN,SAAA3N,KAAAqH,EAAAA,QAGAuJ,oBAAA5Q,KAAAqH,EAAAA,QAGAqG,WAAA1N,KAAAqH,EAAAA,SAQA7E,mBC/IA,QAAA0P,MAA8B,MAA9BA,MACMC,GACF/L,EAAc8L,IAMlB3P,GAAA,SAAAU,GASE,QAAFV,GAAqBW,GAAnB,GAAFG,GACIJ,EADJK,KAAA5D,OAAAA,WAAqB2D,GAArBH,WAAqBA,IAgBrB,MAjBwCM,GAAxCjB,EAAAU,GAMEV,EAAFkB,UAAA2O,MAAE,WACE1S,KAAKwD,WAAWkB,cAAcgO,SAGhC7P,EAAFkB,UAAA4O,cAAE,WACE,MAAO3S,MAAKwD,WAAWkB,cAAckO,YAGvC/P,EAAFkB,UAAA8O,eAAE,WACE,MAAO7S,MAAKwD,WAAWkB,cAAcoO,4BAvBzCxS,KAACC,EAAAA,UAADC,OACE6C,SAAU,uBACV3C,QAAS,YACTC,MACEK,2BAA4B,WAC5BF,uBAAwB,sDAnB5BR,KAAmBmH,EAAAA,cAuCnB5E,GAjBwC4P,ICWlCM,GACFC,EAAAA,iCAAiCC,SAAS,kBA6B9C,QAAAC,MAAwB,MAAxBA,MACMC,GACFC,EAAmBF,IASvBlQ,GAAA,SAAAO,GAgFE,QAAFP,GAAsB7C,EACAkT,EACAC,EACY3C,EACZ4C,EACA9P,GALpB,GAAFE,GAMIJ,EANJK,KAAA5D,OAAAA,WAAsB2D,GAAtBxD,YAAsBA,EACAwD,EAAtB0P,mBAAsBA,EACA1P,EAAtB2P,eAAsBA,EACY3P,EAAlCgN,KAAkCA,EACZhN,EAAtB4P,QAAsBA,EACA5P,EAAtBF,UAAsBA,EA5DZE,EAAV6P,gBAA4B,EAGlB7P,EAAV8P,uBAAkC,EAGf9P,EAAnB+P,WAAgC,GAAI3F,GAAAA,QAGlCpK,EAAFgQ,yBAA4B,EAG1BhQ,EAAFiQ,qBAAwB,EAGtBjQ,EAAFkQ,sBAAyB,EAkBflQ,EAAVmQ,eAA2B,GAAI/F,GAAAA,QAcrBpK,EAAVoQ,eAAmC,EAGdpQ,EAArBqQ,mBAAgE,GAAIhD,GAAAA,aAG/CrN,EAArBsQ,aAA0D,GAAIjD,GAAAA,aAW1DuC,EAAQW,kBAAiB,WACvBC,EAAAA,UAAUhU,EAAYuE,cAAe,cAClCuF,KAAKmK,EAAAA,UAAUzQ,EAAK+P,aACpBpP,UAAS,WACRX,EAAK0Q,sBAff,MAhEkCvQ,GAAlCd,EAAAO,GA+CEoI,OAAFC,eACM5I,EADNe,UAAA,qBAAE,WAC8B,MAAO/D,MAAK+T,oBAC1C,SAAkBlI,GAChBA,EAAQyI,EAAAA,qBAAqBzI,GAC7B7L,KAAKyT,sBAAwBzT,KAAK+T,gBAAkBlI,EACpD7L,KAAK+T,eAAiBlI,EAElB7L,KAAKuU,aACPvU,KAAKuU,YAAYC,sBAAsB3I,oCA6B3C7I,EAAFe,UAAA0Q,sBAAE,WAEMzU,KAAK0U,gBAAkB1U,KAAK2U,eAAepQ,SAC7CvE,KAAK4U,mBACL5U,KAAK0U,eAAiB1U,KAAK2U,eAAepQ,OAC1CvE,KAAKqT,mBAAmB/B,gBAKtBtR,KAAKyT,wBACPzT,KAAK6U,eAAe7U,KAAK+T,gBACzB/T,KAAK8U,0BACL9U,KAAK+U,4BACL/U,KAAKyT,uBAAwB,EAC7BzT,KAAKqT,mBAAmB/B,gBAKtBtR,KAAKgV,yBACPhV,KAAKiV,2BACLjV,KAAKgV,wBAAyB,EAC9BhV,KAAKqT,mBAAmB/B,iBAK5BtO,EAAFe,UAAAmR,eAAE,SAAetD,GAEb,IAAIuD,EAAAA,eAAevD,GAInB,OAAQA,EAAMwD,SACZ,IAAKC,GAAAA,KACHrV,KAAKuU,YAAYe,qBACjB1D,EAAM2D,gBACN,MACF,KAAKC,GAAAA,IACHxV,KAAKuU,YAAYkB,oBACjB7D,EAAM2D,gBACN,MACF,KAAKG,GAAAA,MACL,IAAKC,GAAAA,MACH3V,KAAKgU,mBAAmBnC,KAAK7R,KAAK4V,YAClChE,EAAM2D,gBACN,MACF,SACEvV,KAAKuU,YAAYsB,UAAUjE,KAOjC5O,EAAFe,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,KACU8V,EAAY9V,KAAK2Q,KAAO3Q,KAAK2Q,KAAKQ,OAAS4E,EAAAA,GAAa,MACxDC,EAAShW,KAAKsT,eAAenC,OAAO,KACpC8E,EAAO,WACXtS,EAAKiR,mBACLjR,EAAKoR,4BAGP/U,MAAKuU,YAAc,GAAI2B,GAAAA,gBAAgBlW,KAAK2U,gBACzCwB,0BAA0BnW,KAAKkS,uBAC/BkE,WAEHpW,KAAKuU,YAAY8B,iBAAiB,GAID,mBAA1BC,uBAAwCA,sBAAsBL,GAAWA,IAIhF5J,EAAAA,MAAMyJ,EAAWE,GAAQ/L,KAAKmK,EAAAA,UAAUpU,KAAK0T,aAAapP,UAAS,WACjE2R,IACAtS,EAAK4Q,YAAY4B,0BAA0BxS,EAAKuO,yBAMlDlS,KAAKuU,YAAYpD,OAAOlH,KAAKmK,EAAAA,UAAUpU,KAAK0T,aAAapP,UAAS,SAACiS,GACjE5S,EAAKsQ,aAAapC,KAAK0E,GACvB5S,EAAK6S,aAAaD,MAItBvT,EAAFe,UAAAC,gBAAE,WAAA,GAAFL,GAAA3D,IAEImU,GAAAA,UAAUnU,KAAKyW,mBAAmB/R,cAAe,aAAcqO,IAC5D9I,KAAKmK,EAAAA,UAAUpU,KAAK0T,aACpBpP,UAAS,WACRX,EAAK+S,sBAAsB,YAG/BvC,EAAAA,UAAUnU,KAAK2W,eAAejS,cAAe,aAAcqO,IACxD9I,KAAKmK,EAAAA,UAAUpU,KAAK0T,aACpBpP,UAAS,WACRX,EAAK+S,sBAAsB,YAIjC1T,EAAFe,UAAAmE,YAAE,WACElI,KAAK0T,WAAW5H,OAChB9L,KAAK0T,WAAWrF,WAChBrO,KAAK8T,eAAezF,YAMtBrL,EAAFe,UAAA6S,kBAAE,WAAA,GAAFjT,GAAA3D,KACUmF,EAAcnF,KAAKG,YAAYuE,cAAcS,WAK/CA,KAAgBnF,KAAK6W,sBACvB7W,KAAK6W,oBAAsB1R,EAI3BnF,KAAKuT,QAAQuD,IAAG,WACdnT,EAAKiR,mBACLjR,EAAKoR,4BACLpR,EAAK0P,mBAAmB/B,mBAY9BtO,EAAFe,UAAA6Q,iBAAE,WACE5U,KAAK+W,0BACL/W,KAAK8U,0BACL9U,KAAKiV,4BAIPtJ,OAAFC,eAAM5I,EAANe,UAAA,kBAAE,WACE,MAAO/D,MAAKuU,YAAcvU,KAAKuU,YAA2B,gBAAI,OAIhE,SAAe1I,GACR7L,KAAKgX,cAAcnL,IAAU7L,KAAK4V,aAAe/J,GAAU7L,KAAKuU,aAIrEvU,KAAKuU,YAAY0C,cAAcpL,oCAOjC7I,EAAFe,UAAAiT,cAAE,SAAc1M,GACZ,IAAKtK,KAAK2U,eAAkB,OAAO,CAEvC,IAAUuC,GAAMlX,KAAK2U,eAAiB3U,KAAK2U,eAAewC,UAAU7M,GAAS,IACzE,SAAS4M,IAAQA,EAAIE,UAOvBpU,EAAFe,UAAAyS,aAAE,SAAaxP,GAKX,GAJIhH,KAAK2T,yBACP3T,KAAK6U,eAAe7N,GAGlBhH,KAAK2U,gBAAkB3U,KAAK2U,eAAepQ,OAAQ,CACrDvE,KAAK2U,eAAewC,UAAUnQ,GAAU0L,OAK9C,IAAY2E,GAAcrX,KAAKsX,kBAAkB5S,cACrC0M,EAAMpR,KAAKkS,qBAGfmF,GAAYE,WADH,OAAPnG,EACuB,EAEAiG,EAAYG,YAAcH,EAAYvE,cAMrE9P,EAAFe,UAAAmO,oBAAE,WACE,MAAOlS,MAAK2Q,MAA4B,QAApB3Q,KAAK2Q,KAAK9E,MAAkB,MAAQ,OAI1D7I,EAAFe,UAAAkR,yBAAE,WACF,GAAUwC,GAAiBzX,KAAKyX,eACtBC,EAAW1X,KAAKyD,UAChBkU,EAA4C,QAA/B3X,KAAKkS,uBAAmCuF,EAAiBA,CAQ5EzX,MAAK4X,SAASlT,cAAckI,MAAMsC,UAAY,cAAc2I,KAAKC,MAAMH,GAA3E,OAMQD,EAASK,SAAWL,EAASM,QAC/BhY,KAAKsX,kBAAkB5S,cAAc6S,WAAa,IAKtD5L,OAAFC,eAAM5I,EAANe,UAAA,sBAAE,WAA+B,MAAO/D,MAAKwT,qBAC3C,SAAmB3H,GACjB7L,KAAKiY,UAAUpM,oCAWjB7I,EAAFe,UAAAmU,cAAE,SAAcC,GAChB,GAAUC,GAAapY,KAAKsX,kBAAkB5S,cAAcoO,YAGlDuF,GAA6B,UAAbF,GAAyB,EAAI,GAAKC,EAAa,CAErE,OAAOpY,MAAKiY,UAAUjY,KAAKwT,gBAAkB6E,IAI/CrV,EAAFe,UAAAuU,sBAAE,SAAsBH,GACpBnY,KAAKqU,gBACLrU,KAAKkY,cAAcC,IASrBnV,EAAFe,UAAA8Q,eAAE,SAAe0D,GACjB,GAAUC,GAAgBxY,KAAK2U,eAAiB3U,KAAK2U,eAAewC,UAAUoB,GAAc,IAExF,IAAKC,EAAL,CAGJ,GAEQC,GAAwBC,EAFtBN,EAAapY,KAAKsX,kBAAkB5S,cAAcoO,WAGtB,QAA9B9S,KAAKkS,uBACPuG,EAAiBD,EAAc7F,gBAC/B+F,EAAgBD,EAAiBD,EAAc3F,mBAE/C6F,EAAgB1Y,KAAK4X,SAASlT,cAAcoO,YAAc0F,EAAc7F,gBACxE8F,EAAiBC,EAAgBF,EAAc3F,iBAGrD,IAAU8F,GAAmB3Y,KAAKyX,eACxBmB,EAAkB5Y,KAAKyX,eAAiBW,CAE1CK,GAAiBE,EAEnB3Y,KAAKyX,gBAAkBkB,EAAmBF,EAvZjB,GAwZhBC,EAAgBE,IAEzB5Y,KAAKyX,gBAAkBiB,EAAgBE,EA1Zd,MAsa7B5V,EAAFe,UAAAgT,wBAAE,WACF,GAAU8B,GACF7Y,KAAK4X,SAASlT,cAAc8S,YAAcxX,KAAKG,YAAYuE,cAAcoO,WAExE+F,KACH7Y,KAAKyX,eAAiB,GAGpBoB,IAAc7Y,KAAK2T,yBACrB3T,KAAKqT,mBAAmB/B,eAG1BtR,KAAK2T,wBAA0BkF,GAYjC7V,EAAFe,UAAA+Q,wBAAE,WAEE9U,KAAK6T,qBAA8C,GAAvB7T,KAAKyX,eACjCzX,KAAK4T,oBAAsB5T,KAAKyX,gBAAkBzX,KAAK8Y,wBACvD9Y,KAAKqT,mBAAmB/B,gBAU1BtO,EAAFe,UAAA+U,sBAAE,WAGE,MAFwB9Y,MAAK4X,SAASlT,cAAc8S,YACjCxX,KAAKsX,kBAAkB5S,cAAcoO,aACf,GAI3C9P,EAAFe,UAAAgR,0BAAE,WACF,GAAUgE,GAAuB/Y,KAAK2U,gBAAkB3U,KAAK2U,eAAepQ,OACpEvE,KAAK2U,eAAewC,UAAUnX,KAAKgZ,eAAexV,WAAWkB,cAC7D,IAEJ1E,MAAKiZ,QAAQC,eAAc,IAI7BlW,EAAFe,UAAAsQ,cAAE,WACErU,KAAK8T,eAAehI,QAQtB9I,EAAFe,UAAA2S,sBAAE,SAAsByB,GAAtB,GAAFxU,GAAA3D,IAEIA,MAAKqU,gBAGL8E,EAAAA,MApewB,IAMG,KAgexBlP,KAAKmK,EAAAA,UAAU/H,EAAAA,MAAMrM,KAAK8T,eAAgB9T,KAAK0T,cAC/CpP,UAAS,WACF,GAAA8U,GAAdzV,EAAAuU,cAAAC,GAAekB,EAAfD,EAAAC,kBAAkCC,EAAlCF,EAAAE,UAGyB,IAAbA,GAAkBA,GAAYD,IAChC1V,EAAK0Q,mBAULrR,EAAVe,UAAAkU,UAAE,SAAkBjK,GACpB,GAAUqL,GAAoBrZ,KAAK8Y,uBAQ/B,OAPA9Y,MAAKwT,gBAAkBqE,KAAK0B,IAAI,EAAG1B,KAAK2B,IAAIH,EAAmBrL,IAI/DhO,KAAKgV,wBAAyB,EAC9BhV,KAAK8U,2BAEGuE,kBAAZA,EAA+BC,SAAUtZ,KAAKwT,iCA1e9ClT,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,iBACEkC,SAAU,0oCACVC,QAAF,g8EACE9E,QAAF,iBACEoF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACElF,MACFC,MAAA,iBACM6Y,qDAAN,0BACIC,6BAAJ,yHAxEApZ,KAAEqZ,EAAAA,gBAHFrZ,KAAEsZ,EAAAA,eAAFvZ,aAAAC,KAAAe,EAAAA,aALAf,KAAQY,EAAAA,SAHRZ,KAAmBa,EAAAA,YA6BnB6B,EAAArB,uHA8DA2V,oBAAAhX,KAAAoO,EAAAA,UAAAlO,MAAA,oBAAAmO,QAAA,MACAiJ,WAAAtX,KAAAoO,EAAAA,UAAAlO,MAAA,WAAAmO,QAAA,MACAgI,iBAAArW,KAAAoO,EAAAA,UAAAlO,MAAA,iBAAAmO,QAAA,MACA8H,qBAAAnW,KAAAoO,EAAAA,UAAAlO,MAAA,qBAAAmO,QAAA,MACAqK,gBAAA1Y,KAAAqH,EAAAA,QACAqM,qBAAA1T,KAAG+R,EAAAA,SAuCH4B,eAAA3T,KAAA+R,EAAAA,UAiBArP,OCrHI6W,GAAS,gBAGb,QAAAC,MAKA,MAAAA,MAYaC,GAAkB,GAAIC,GAAAA,eAAe,iCAKhD,QAAFC,GAAqB9Z,GAAAH,KAArBG,YAAqBA,EACrB,MAAA8Z,MACMC,GACF/W,EAAWiQ,EAAmB6G,IAAkB,WAOpD3X,GAAA,SAAAiB,GA6FE,QAAFjB,GAAckB,EACQ6P,EAC6B8G,GAFjD,GAAFxW,GAGIJ,EAHJK,KAAA5D,KAGUwD,IAHVxD,WACsB2D,GAAtB0P,mBAAsBA,EArEZ1P,EAAVyW,eAA0C,EAGhCzW,EAAV0W,sBAA0C,EAGhC1W,EAAV2W,kBAA8B5K,EAAAA,aAAaC,MAGjChM,EAAV4W,sBAAkC7K,EAAAA,aAAaC,MAMrChM,EAAV6W,gBAAoC,EAQ1B7W,EAAVoQ,eAA0C,KAG/BpQ,EAAX8W,eAAkD,QA2B7B9W,EAArB+W,oBAAiE,GAAI1J,GAAAA,aAGhDrN,EAArBgX,YACM,GAAI3J,GAAAA,aAGWrN,EAArBiX,cAAyD,GAAI5J,GAAAA,aAGxCrN,EAArBkX,kBACM,GAAI7J,GAAAA,cAAgC,GAQtCrN,EAAKmX,SAAWjB,KAChBlW,EAAKuN,kBAAoBiJ,GAAiBA,EAAcjJ,kBACpDiJ,EAAcjJ,kBAAoB,UAX1C,MAzEiCpN,GAAjCxB,EAAAiB,GAsBEoI,OAAFC,eACMtJ,EADNyB,UAAA,qBAAE,WAC+B,MAAO/D,MAAKwa,oBAC3C,SAAkB3O,GAAkB7L,KAAKwa,eAAiBO,EAAAA,sBAAsBlP,oCAIhFF,OAAFC,eACMtJ,EADNyB,UAAA,qBAAE,WACqC,MAAO/D,MAAK+T,oBACjD,SAAkBlI,GAChB7L,KAAKoa,eAAiB9F,EAAAA,qBAAqBzI,EAAO,uCAQpDF,OAAFC,eACMtJ,EADNyB,UAAA,yBAAE,WACkC,MAAO/D,MAAKgb,wBAC9C,SAAsBnP,GACpB7L,KAAKgb,mBAAqB,QAAQC,KAAKpP,GAASA,EAAQ,KAAOA,mCAKjEF,OAAFC,eACMtJ,EADNyB,UAAA,uBAAE,WACsC,MAAO/D,MAAKkb,sBAClD,SAAoBrP,GACtB,GAAUnH,GAA6B1E,KAAKG,YAAYuE,aAEpDA,GAAcI,UAAUqW,OAAO,kBAAkBnb,KAAKob,iBAElDvP,GACFnH,EAAcI,UAAUuW,IAAI,kBAAkBxP,GAGhD7L,KAAKkb,iBAAmBrP,mCAmC1BvJ,EAAFyB,UAAA0Q,sBAAE,WAAA,GAAF9Q,GAAA3D,KAGUsb,EAAgBtb,KAAKoa,eAAiBpa,KAAKub,eAAevb,KAAKoa,eAIrE,IAAIpa,KAAK+T,gBAAkBuH,EAAe,CAC9C,GAAYE,GAAoC,MAAvBxb,KAAK+T,cAEnByH,IACHxb,KAAK6a,kBAAkBhJ,KAAK7R,KAAKyb,mBAAmBH,IAKtDI,QAAQC,UAAUC,KAAI,WACpBjY,EAAKkY,MAAMzR,QAAO,SAAE8M,EAAK5M,GAAU,MAAA4M,GAAIhJ,SAAW5D,IAAUgR,IAEvDE,GACH7X,EAAK+W,oBAAoB7I,KAAKyJ,KAMpCtb,KAAK6b,MAAMzR,QAAO,SAAE8M,EAAa5M,GAC/B4M,EAAIlJ,SAAW1D,EAAQgR,EAII,MAAvB3X,EAAKoQ,gBAA0C,GAAhBmD,EAAIlJ,UAAkBkJ,EAAIjJ,SAC3DiJ,EAAIjJ,OAASqN,EAAgB3X,EAAKoQ,kBAIlC/T,KAAK+T,iBAAmBuH,IAC1Btb,KAAK+T,eAAiBuH,EACtBtb,KAAKqT,mBAAmB/B,iBAI5BhP,EAAFyB,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAK8b,wBAIL9b,KAAKsa,kBAAoBta,KAAK6b,MAAMxX,QAAQC,UAAS,WAKnD,GAJsBX,EAAK4X,eAAe5X,EAAKyW,kBAIzBzW,EAAKoQ,eAGzB,IAAK,GAFCgI,GAAOpY,EAAKkY,MAAM1E,UAEflM,EAAI,EAAGA,EAAI8Q,EAAKxX,OAAQ0G,IAC/B,GAAI8Q,EAAK9Q,GAAGiD,SAAU,CAIpBvK,EAAKyW,eAAiBzW,EAAKoQ,eAAiB9I,CAC5C,OAKNtH,EAAKmY,wBACLnY,EAAK0P,mBAAmB/B,kBAI5BhP,EAAFyB,UAAAmE,YAAE,WACElI,KAAKsa,kBAAkB/J,cACvBvQ,KAAKua,sBAAsBhK,eAI7BjO,EAAFyB,UAAAiY,cAAE,WACMhc,KAAKic,YACPjc,KAAKic,WAAWlH,6BAIpBzS,EAAFyB,UAAAmY,cAAE,SAAc5R,GACZtK,KAAK2a,YAAY9I,KAAK7R,KAAKyb,mBAAmBnR,KAGxChI,EAAVyB,UAAA0X,mBAAE,SAA2BnR,GAC7B,GAAUsH,GAAQ,GAAIkI,GAKlB,OAJAlI,GAAMtH,MAAQA,EACVtK,KAAK6b,OAAS7b,KAAK6b,MAAMtX,SAC3BqN,EAAMsF,IAAMlX,KAAK6b,MAAM1E,UAAU7M,IAE5BsH,GASDtP,EAAVyB,UAAA+X,sBAAE,WAAA,GAAFnY,GAAA3D,IACQA,MAAKua,uBACPva,KAAKua,sBAAsBhK,cAG7BvQ,KAAKua,sBAAwBlO,EAAAA,MAAjCxD,UAAA,GAA0C7I,KAAK6b,MAAMvP,IAAG,SAAC4K,GAAO,MAAAA,GAAIpJ,iBAC7DxJ,UAAS,WAAO,MAAAX,GAAK0P,mBAAmB/B,kBAIrChP,EAAVyB,UAAAwX,eAAE,SAAuBjR,GAIrB,MAAOuN,MAAK2B,IAAIxZ,KAAK6b,MAAMtX,OAAS,EAAGsT,KAAK0B,IAAIjP,GAAS,EAAG,KAI9DhI,EAAFyB,UAAAoY,eAAE,SAAelR,GACb,MAAO,iBAAiBjL,KAAK8a,SAAjC,IAA6C7P,GAI3C3I,EAAFyB,UAAAqY,iBAAE,SAAiBnR,GACf,MAAO,mBAAmBjL,KAAK8a,SAAnC,IAA+C7P,GAO7C3I,EAAFyB,UAAAsY,yBAAE,SAAyBC,GACvB,GAAKtc,KAAKwa,gBAAmBxa,KAAKqa,sBAAlC,CAEJ,GAAUkC,GAAuBvc,KAAKwc,gBAAgB9X,aAElD6X,GAAQ3P,MAAM6P,OAASzc,KAAKqa,sBAAwB,KAIhDra,KAAKwc,gBAAgB9X,cAAcgY,eACrCH,EAAQ3P,MAAM6P,OAASH,EAAY,QAKvCha,EAAFyB,UAAA4Y,4BAAE,WACF,GAAUJ,GAAUvc,KAAKwc,gBAAgB9X,aACrC1E,MAAKqa,sBAAwBkC,EAAQtK,aACrCsK,EAAQ3P,MAAM6P,OAAS,GACvBzc,KAAK4a,cAAc/I,QAIrBvP,EAAFyB,UAAA6Y,aAAE,SAAa1F,EAAa2F,EAAyBvS,GAC5C4M,EAAIE,WACPpX,KAAKgZ,cAAgB6D,EAAUjH,WAAatL,IAKhDhI,EAAFyB,UAAA+Y,aAAE,SAAa5F,EAAa6F,GACxB,MAAI7F,GAAIE,SACC,KAEFpX,KAAKgZ,gBAAkB+D,EAAM,GAAK,kBAnR7Czc,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,gBACE5C,SAAU,cACV8E,SAAU,ghDACVC,QAAF,s6CACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEnF,QAAF,QAAA,iBACEC,MACFC,MAAA,gBACMoc,uCAAN,gBACIC,wCAAJ,qHAxEA3c,SAAEc,GAAFf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAuZ,MAAAzZ,KAAAe,EAAAA,cA6JAiB,EAAAX,oIA7EAsa,aAAA3b,KAAAoO,EAAAA,UAAAlO,MAAA,aAAAmO,QAAA,MAEAuO,gBAAA5c,KAAAqH,EAAAA,QAEAqR,gBAAA1Y,KAAAqH,EAAAA,QAeA8S,iBAAAna,KAAAqH,EAAAA,QAMAuJ,oBAAA5Q,KAAAqH,EAAAA,QAQAyT,kBAAA9a,KAAAqH,EAAAA,QAGA+S,sBAAApa,KAAA+R,EAAAA,SAQAsI,cAAAra,KAAA+R,EAAAA,SAgBAuI,gBAAAta,KAAA+R,EAAAA,SAGAwI,oBAAGva,KAAM+R,EAAAA,UAOT/P,qB1BhHE,QAAF6a,GAAqBhd,GAAAH,KAArBG,YAAqBA,EACrB,MAAAgd,MACMC,GACFhK,EAAmBjQ,EAAWga,GAAe,YAMjD1a,GAAA,SAAAc,GA0CE,QAAFd,GAAce,EACoBmN,EACZ4C,EACAF,EACAC,GAJpB,GAAF3P,GAKIJ,EALJK,KAAA5D,KAKUwD,IALVxD,WACkC2D,GAAlCgN,KAAkCA,EACZhN,EAAtB4P,QAAsBA,EACA5P,EAAtB0P,mBAAsBA,EACA1P,EAAtB2P,eAAsBA,EA/BH3P,EAAnB0Z,WAAgC,GAAItP,GAAAA,UAYpC,MAhB+BjK,GAA/BrB,EAAAc,GAgBEoI,OAAFC,eACMnJ,EADNsB,UAAA,uBAAE,WACsC,MAAO/D,MAAKkb,sBAClD,SAAoBrP,GACtB,GAAUnH,GAA6B1E,KAAKG,YAAYuE,aAEpDA,GAAcI,UAAUqW,OAAO,kBAAkBnb,KAAKob,iBAElDvP,GACFnH,EAAcI,UAAUuW,IAAI,kBAAkBxP,GAGhD7L,KAAKkb,iBAAmBrP,mCAgB1BpJ,EAAFsB,UAAAuZ,iBAAE,SAAiBtQ,GAGfhN,KAAKud,qBAAuBvQ,EAC5BhN,KAAKqT,mBAAmB/B,gBAG1B7O,EAAFsB,UAAAkE,mBAAE,WAAA,GAAFtE,GAAA3D,IACIA,MAAKuT,QAAQW,kBAAiB,WAClC,GAAY4B,GAAYnS,EAAKgN,KAAOhN,EAAKgN,KAAKQ,OAAS4E,EAAAA,GAAa,KAE9D,OAAO1J,GAAAA,MAAMyJ,EAAWnS,EAAK2P,eAAenC,OAAO,KAC9ClH,KAAKmK,EAAAA,UAAUzQ,EAAK0Z,aACpB/Y,UAAS,WAAO,MAAAX,GAAK6Z,oBAK9B/a,EAAFsB,UAAA0Q,sBAAE,WACE,GAAIzU,KAAKud,mBAAoB,CACjC,GAAYE,GAAYzd,KAAK0d,UAAUC,KAAI,SAACzG,GAAO,MAAAA,GAAI0G,QAEjD5d,MAAK6d,mBAAqBJ,EAAYA,EAAUtd,YAAc,KAC9DH,KAAKwd,eACLxd,KAAKud,oBAAqB,IAI9B9a,EAAFsB,UAAAmE,YAAE,WACElI,KAAKqd,WAAWvR,OAChB9L,KAAKqd,WAAWhP,YAIlB5L,EAAFsB,UAAAyZ,aAAE,WACMxd,KAAK6d,oBACP7d,KAAKiZ,QAAQtM,OACb3M,KAAKiZ,QAAQC,eAAelZ,KAAK6d,mBAAmBnZ,gBAEpD1E,KAAKiZ,QAAQnM,uBA7FnBxM,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,oBACE5C,SAAU,0BACVC,QAAF,QAAA,iBACE6E,SAAU,6HACVC,QAAS,83CACT7E,MAAFC,MAAA,mBACEkF,cAAFC,EAAAA,kBAAAC,KACEL,gBAAgBC,EAAAA,wBAAlBC,0HAnDAvF,KAAEY,EAAAA,SAZFZ,KAAQ8R,EAAAA,oBAgBR9R,KAAEqZ,EAAAA,iBAdFlX,EAAAd,sMAiFAc,OAyEAqb,GAAA,yBAAA,MAAAA,MAAAC,GAAAtX,EAAA2M,EAAA1M,EAAAoX,qBAQA,QAAA1d,GAAA4d,EAAA7d,EAAA8d,EAAAvG,EAAAwG,EAAAlX,EAAA/G,GAaA,GAAA0D,GAAAJ,EAAAK,KAAA5D,OAAAA,IA+CI,OAXJ2D,GAAAqa,WAAAA,EAAEra,EAAFxD,YAAAA,EACcwD,EAAd1D,cAAAA,kDAjCY0D,EAAZwa,eAAAC,mBAAAje,EAAAuE,eAuCIf,EAAK0a,aAATH,MACIva,EAAKqD,SAATsX,SAAAtX,IAA0C,EACtC/G,EAAJse,QAAApe,GAEAwD,EArCA,0DAAA6a,2EAEAxe,KAAAye,UAAA5S,EACQ7L,KAAKge,WAAbV,iBAAAtd,KAAAG,eAGAL,YAAA,EACEC,cAAF,kJAcAC,KAAAqe,aAAAjH;uGAEAtX,YAAA,EACEC,cAAF,kFAiBAC,KAAAC,cAAAC,eAAAF,KAAAG,cAEAC,EAAAC,aACAC,KAAAC,EAAAA,UAAAC,+CAnEAC,SAAA,aACEC,QAAF,WAAA,gBAAA,YACEC,MACFC,MAAA,eACMC,sBAAN,SACIC,uBAAJ,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,gFA0CAX,KAA0BY,EAAAA,SA1M1BZ,KAAEa,EAAAA,WAIFb,SAAEc,GAAFf,aAAAC,KAAAe,EAAAA,WAAAf,KAAAgB,EAAAA,OAAAd,MAAAe,QAfAjB,KAAQkB,OAAQnB,aAAhBC,KAAAmB,EAAAA,UAAAjB,MAAA,gBAuNAF,KAAAoB,EAAAA,gBA/KAtB,EAAAuB,yCAkJAvB,OCzKAwB,GAAA,WAAA,QAAAA,MAiC4B,sBAjC5BtB,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,gBACAC,EAAAA,YAGFC,SACEL,GACAM,GACAC,GACAC,GACAC,GACArC,GACAsC,IAEFC,cACEL,GACAC,GACAC,GACAI,GACAC,GACAJ,GACArC,GACA0C,GACAC,GACAC,GACAN,QAGJd,mBC9BE,QAAFqB,GAAqB9C,GAAAH,KAArBG,YAAqBA,EACrB,MAAA8C,MACMC,GAA6DC,EAAWF,IAE9EG,GAAA,WAAA,QAAAA,MAK4B,sBAL5B9C,KAACC,EAAAA,UAADC,OACE6C,SAAU,kBACV5C,SAAU,gBACVE,MAAOC,MAAS,uBAElBwC,KAEAE,GAAA,SAAAC,GAqBE,QAAFD,GACIE,EACQC,EACUC,GAHpB,GAAFC,GAIIJ,EAJJK,KAAA5D,KAIUwD,IAJVxD,WAEY2D,GAAZF,UAAYA,EAKRE,EAAKE,UAAYH,IATrB,MAJgCI,GAAhCR,EAAAC,GAgBED,EAAFS,UAAAC,gBAAE,WAAA,GAAFL,GAAA3D,IACSiE,GAAAA,aAAgBjE,KAAKyD,UAAUS,YAIpClE,KAAKmE,0BACLnE,KAAKoE,aAAaC,QAAQC,UAAS,WAAO,MAAAX,GAAKQ,8BAMzCb,EAAVS,UAAAI,wBAAE,WAAA,GAAFR,GAAA3D,IACI,IAAKA,KAAKoE,aAAaG,OAAvB,CAMwBC,MAAMC,KAAkBzE,KAAKG,YAAYuE,cAAcC,YAC5EC,OAAM,SAACC,GAAQ,QAAEA,EAAKC,WAAaD,EAAKC,UAAUC,SAAS,sBAC3DH,OAAM,SAACC,GAAQ,MAAAA,GAAKG,YAAcrB,EAAKE,UAAYF,EAAKE,UAAUoB,aAAe,KACjFC,KAAI,SAACL,GAAQ,SAAGA,EAAKM,cAAeN,EAAKM,YAAYC,WAGtDC,sBAxDN/E,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,cACE5C,SAAU,aACV8E,SAAU,8EACVC,QAAF,8hBACE9E,QAAF,SACEC,MACFC,MAAA,cACM6E,oCAAN,0BACIC,iCAAJ,6BAEAC,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,mFAlCA1F,SAAEc,GAAFf,aAAAC,KAAAgB,EAAAA,OAAAd,MAAAyF,EAAAA,eA+CA3C,EAAA3B,mEALA2B,OC7CA4C,GAAA,WAAA,QAAAA,MAK+B,sBAL/B5F,KAACuB,EAAAA,SAADrB,OACEsB,SAAUE,IACVK,SAAUiB,GAAYF,GAAepB,IACrCW,cAAeW,GAAYF,QAE7B8C,KCCAC,GAAA,WAIE,QAAFA,GACaC,EAC+CC,GAD/CrG,KAAboG,cAAaA,EAC+CpG,KAA5DqG,MAA4DA,EAC5D,sBAPA/F,KAACC,EAAAA,UAADC,OACE6C,SAAU,8DARZ/C,KAAEgG,EAAAA,mBAaFhG,SAAAc,GAAAf,aAAAC,KAAOgB,EAAAA,OAAPd,MAAc+F,EAAAA,6BAAdjG,KAA0Ce,EAAAA,cAC1C8E,KCWMK,GACFC,EAAcC,EAAcC,EAAAA,cAE1BC,GAEEH,EAAcC,EAAcG,EAAAA,oBAKpCC,GAAA,SAAAvD,GAgBE,QAAFuD,GAAwB3G,EACA4G,EACaC,GAFnC,GAAFrD,GAGIJ,EAHJK,KAAA5D,KAGUG,EAAa4G,IAHvB/G,WAAwB2D,GAAxBxD,YAAwBA,EACAwD,EAAxBoD,MAAwBA,EAHbpD,EAAXsD,KAAwC,WAOpCtD,EAAKqD,SAAWE,OAAOF,IAAa,IAExC,MAXoClD,GAApCgD,EAAAvD,kBAZAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,gBACV5C,SAAU,cACVC,QAAS,WAAY,YACrBC,MACEwG,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACfzG,MAAS,iBAEX0G,YAAaC,QAASZ,EAAAA,YAAaa,YAAaV,4CArClDxG,KAAEmH,EAAAA,aATFnH,KAAEoH,EAAAA,UAsDFpH,KAAAkB,OAAAnB,aAAAC,KAAemB,EAAAA,UAAfjB,MAAyB,mCAJzByG,OAAA3G,KAAGqH,EAAAA,SASHb,GAXoCN,IAgBpCoB,GAAA,SAAArE,GAAA,QAAAqE,oDASA,MAFuC9D,GAAvC8D,EAAArE,kBAPAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,mBACV3C,QACE,4BAEF4G,YAAaC,QAASM,EAAAA,eAAgBL,YAAaI,0BAGrDE,OAAAxH,KAAGqH,EAAAA,MAAHnH,MAAS,kBACToH,GAFuCC,EAAAA,gBAOvCE,GAAA,SAAAxE,GA2BE,QAAFwE,GAAwB5H,EACA4G,EACAiB,EACahB,GAHnC,GAAFrD,GAIIJ,EAJJK,KAAA5D,KAIUG,EAAa4G,EAAOiB,IAJ9BhI,WAAwB2D,GAAxBxD,YAAwBA,EACAwD,EAAxBoD,MAAwBA,EACApD,EAAxBqE,SAAwBA,EAIpBrE,EAAKqD,SAAWE,OAAOF,IAAa,IAaxC,MA/B0ClD,GAA1CiE,EAAAxE,GAwBEwE,EAAFhE,UAAAkE,mBAAE,WACE1E,EAAJQ,UAAUkE,mBAAVrE,KAAA5D,OAGE+H,EAAFhE,UAAAmE,YAAE,WACE3E,EAAJQ,UAAUmE,YAAVtE,KAAA5D,sBA5CAM,KAACC,EAAAA,UAADC,OACE6C,SAAU,uBACV5C,SAAU,oBACVE,MACEwG,uBAAwB,aACxBE,cAAe,OACfzG,MAAS,wBAEXF,QAAS,WAAY,YACrB4G,YACGC,QAASV,EAAAA,kBAAmBW,YAAaO,IACzCR,QAASZ,EAAAA,YAAaa,YAAaO,IACnCR,QAAShB,EAAAA,0BAA2BiB,YAAaO,4CAjFtDzH,KAAEmH,EAAAA,aATFnH,KAAEoH,EAAAA,UAWFpH,KAAE6H,EAAAA,kBAiGF7H,KAAAkB,OAAAnB,aAAAC,KAAemB,EAAAA,UAAfjB,MAAyB,mCAbzBqE,OAAAvE,KAAGqH,EAAAA,MAAHnH,MAAS,uBAGT4H,aAAA9H,KAAG+H,EAAAA,gBAAH7H,MAAmB2F,IAGfmC,aAAa,OAuBjBP,GA/B0CnB,IC3F1C2B,GAAA,SAAAhF,GAAA,QAAAgF,oDAWA,MAP2CzE,GAA3CyE,EAAAhF,kBAJAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,uBACViE,YAAaC,QAASiB,EAAAA,mBAAoBhB,YAAae,0BAKzDE,QAAAnI,KAAGqH,EAAAA,MAAHnH,MAAS,wBAGTkI,SAAApI,KAAGqH,EAAAA,MAAHnH,MAAS,+BACT+H,GAP2CC,EAAAA,oBCF3CG,GAAA,SAAApF,GAAA,QAAAoF,oDAkBA,MAFgC7E,GAAhC6E,EAAApF,kBAhBAjD,KAACgF,EAAAA,UAAD9E,OAAA6C,SAAA,WACE5C,SAAU,UACV8E,SAAU,kDACV5E,MACFC,MAAA,WACMqG,KAAN,QAEAzB,QAAA,mLACAM,cAAAC,EAAAA,kBAAAC,yGAOA2C,EAAAhH,wEAGAgH,cCnBAC,GAAA,SAAArF,GAAA,QAAAqF,KAAA,GAAAjF,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,WAKuC2D,GAAvCoF,WAA4D,IAC5D,MAF0CjF,GAA1C8E,EAAArF,kBAJAjD,KAACC,EAAAA,UAADC,OACE6C,SAAU,sBACViE,YAAaC,QAASyB,EAAAA,kBAAmBxB,YAAaoB,0BAGxDG,YAAAzI,KAAGqH,EAAAA,MAAHnH,MAAS,iCACToI,GAF0CI,EAAAA,mBCCpCC,IACJlB,GACAH,GACAW,GACAK,GACAD,GACA7B,GACAX,IAGF+C,GAAA,WAAA,QAAAA,MAK4B,sBAL5B5I,KAACuB,EAAAA,SAADrB,OACEsB,SAAUqH,EAAAA,cAAepH,EAAAA,aAAcC,IACvCK,QAAS4G,GACTtG,aAAcsG,OAEhBC,mBCeE,QAAFE,GAAqBC,EACAC,EACAC,EACAC,GAHAxJ,KAArBqJ,kBAAqBA,EACArJ,KAArBsJ,SAAqBA,EACAtJ,KAArBuJ,aAAqBA,EACAvJ,KAArBwJ,YAAqBA,EAkErB,MA/DEJ,GAAFrF,UAAA0F,aAAE,SAAa5E,EAAS4D,EACTiB,EAAkBC,GAD/B,GAAFhG,GAAA3D,KAEU4J,EAAW5J,KAAKqJ,kBAAkBxE,EAAM4D,EAG9C,IAFAiB,EAAYG,KAAKD,GAEb5J,KAAKuJ,aAAaK,GAAW,CACrC,GAAYE,GAAgB9J,KAAKwJ,YAAY3E,EACnCiF,KACEtF,MAAMuF,QAAQD,GAChB9J,KAAKgK,iBAAiBF,EAAerB,EAAOiB,EAAaC,GAEzDG,EAAcG,KAAKC,EAAAA,KAAK,IAAI5F,UAAS,SAAC6F,GACpCxG,EAAKqG,iBAAiBG,EAAU1B,EAAOiB,EAAaC,MAK5D,MAAOD,IAGTN,EAAFrF,UAAAiG,iBAAE,SAAiBG,EAAe1B,EACfiB,EAAkBC,GADnC,GAAFhG,GAAA3D,IAEImK,GAASC,QAAO,SAAEC,EAAOC,GAC7B,GAAUC,GAA4BZ,EAAUa,OAC1CD,GAAeV,KAAKS,GAASH,EAAS5F,OAAS,GAC/CZ,EAAK8F,aAAaY,EAAO5B,EAAQ,EAAGiB,EAAaa,MASrDnB,EAAFrF,UAAA0G,aAAE,SAAaC,GAAb,GAAF/G,GAAA3D,KACQ0J,IAEJ,OADAgB,GAAeN,QAAO,SAACvF,GAAQ,MAAAlB,GAAK8F,aAAa5E,EAAM,EAAG6E,QACnDA,GAOTN,EAAFrF,UAAA4G,qBAAE,SAAqBC,EAAYC,GAAjC,GAAFlH,GAAA3D,KACQ8K,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMR,QAAO,SAACvF,GAEZ,IAAK,GADDmG,IAAS,EACJC,EAAI,EAAGA,GAAKtH,EAAK2F,SAASzE,GAAOoG,IACxCD,EAASA,GAAUD,EAAcE,EAE/BD,IACFF,EAAQjB,KAAKhF,GAEXlB,EAAK4F,aAAa1E,KACpBkG,EAAcpH,EAAK2F,SAASzE,GAAQ,GAAKgG,EAAYK,WAAWrG,MAG7DiG,GAEX1B,oBAuBE,QAAF+B,GAAsBC,EACAC,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAF3H,GAGIJ,EAHJK,KAAA5D,OAAAA,WAAsB2D,GAAtByH,aAAsBA,EACAzH,EAAtB0H,eAAsBA,EAbpB1H,EAAF4H,eAAmB,GAAIC,GAAAA,oBAErB7H,EAAF8H,cAAkB,GAAID,GAAAA,oBAclB7H,EAAK+H,MAAQ,GAAIF,GAAAA,gBAAqBF,KAmB1C,MApCiDxH,GAAjDqH,EAAA5H,GAMEoI,OAAFC,eAAMT,EAANpH,UAAA,YAAE,WAAa,MAAO/D,MAAK0L,MAAMG,WAC/B,SAASA,GACP7L,KAAK0L,MAAMI,KAAKD,GAChB7L,KAAKuL,eAAeO,KAAK9L,KAAKqL,eAAeZ,aAAazK,KAAK8H,OAC/D9H,KAAKoL,aAAaW,UAAY/L,KAAKuL,eAAeM,uCAUpDV,EAAFpH,UAAAiI,QAAE,SAAQC,GAAR,GAAFtI,GAAA3D,KACUqE,GACJ4H,EAAiBC,WACjBlM,KAAKoL,aAAae,eAAeC,SACjCpM,KAAKuL,eAEP,OAAOc,GAAAA,MAAXxD,UAAA,GAAoBxE,GAAS4F,KAAKqC,EAAAA,IAAG,WAG/B,MAFA3I,GAAK8H,cAAcK,KACjBnI,EAAK0H,eAAeV,qBAAqBhH,EAAK4H,eAAeM,MAAOlI,EAAKyH,eACpEzH,EAAK8H,cAAcI,UAI9BV,EAAFpH,UAAAwI,WAAE,aAGFpB,GApCiDqB,EAAAA,2BC7GjD,QAAAC,KAAA,GAAA9I,GAAA,OAAAJ,GAAAA,EAAAsF,MAAA7I,KAAA8I,YAAA9I,WACE2D,GAAF+H,MAAU,GAAIF,GAAAA,sBAkBd,MAnBgD1H,GAAhD2I,EAAAlJ,GAMEoI,OAAFC,eAAMa,EAAN1I,UAAA,YAAE,WAAa,MAAO/D,MAAK0L,MAAMG,WAC/B,SAASA,GAAc7L,KAAK0L,MAAMI,KAAKD,oCAEvCY,EAAF1I,UAAAiI,QAAE,SAAQC,GAAR,GAAFtI,GAAA3D,IACI,OAAOqM,GAAAA,MAAXxD,UAAA,IAAqBoD,EAAiBC,WAAYlM,KAAK0L,QAChDzB,KAAKqC,EAAAA,IAAG,WACP,MAAO3I,GAAKmE,SAIlB2E,EAAF1I,UAAAwI,WAAE,aAGFE,GAnBgDD,EAAAA,mSCwCN,+BAGD,q9EChDtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACnF,QAAS,SAAU,mjBCsBC,iBAED,00BCnBqB,izECoFT,6BAGD,mCAGOE,2BAGR,kCAkBQ,k0EC5EV"}