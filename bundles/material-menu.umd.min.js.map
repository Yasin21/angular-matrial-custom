{"version":3,"file":"material-menu.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/material/menu/menu-errors.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/menu/menu-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\r\n * @docs-private\r\n */\r\nexport function throwMatMenuMissingError() {\r\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\r\n\r\n    Example:\r\n      <mat-menu #menu=\"matMenu\"></mat-menu>\r\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when menu's x-position value isn't valid.\r\n * In other words, it doesn't match 'before' or 'after'.\r\n * @docs-private\r\n */\r\nexport function throwMatMenuInvalidPositionX() {\r\n  throw Error(`xPosition value must be either 'before' or after'.\r\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when menu's y-position value isn't valid.\r\n * In other words, it doesn't match 'above' or 'below'.\r\n * @docs-private\r\n */\r\nexport function throwMatMenuInvalidPositionY() {\r\n  throw Error(`yPosition value must be either 'above' or below'.\r\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ESCAPE,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  DOWN_ARROW,\r\n  UP_ARROW,\r\n  HOME,\r\n  END,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  TemplateRef,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {startWith, switchMap, take} from 'rxjs/operators';\r\nimport {matMenuAnimations} from './menu-animations';\r\nimport {MatMenuContent} from './menu-content';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\r\nimport {AnimationEvent} from '@angular/animations';\r\n\r\n/** Default `mat-menu` options that can be overridden. */\r\nexport interface MatMenuDefaultOptions {\r\n  /** The x-axis position of the menu. */\r\n  xPosition: MenuPositionX;\r\n\r\n  /** The y-axis position of the menu. */\r\n  yPosition: MenuPositionY;\r\n\r\n  /** Whether the menu should overlap the menu trigger. */\r\n  overlapTrigger: boolean;\r\n\r\n  /** Class to be applied to the menu's backdrop. */\r\n  backdropClass: string;\r\n\r\n  /** Whether the menu has a backdrop. */\r\n  hasBackdrop?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-menu`. */\r\nexport const MAT_MENU_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\r\n  return {\r\n    overlapTrigger: false,\r\n    xPosition: 'after',\r\n    yPosition: 'below',\r\n    backdropClass: 'cdk-overlay-transparent-backdrop',\r\n  };\r\n}\r\n/**\r\n * Start elevation for the menu panel.\r\n * @docs-private\r\n */\r\nconst MAT_MENU_BASE_ELEVATION = 4;\r\n\r\n/** Base class with all of the `MatMenu` functionality. */\r\n// tslint:disable-next-line:class-name\r\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\r\n  OnDestroy {\r\n  private _keyManager: FocusKeyManager<MatMenuItem>;\r\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\r\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\r\n  private _previousElevation: string;\r\n\r\n  /** Menu items inside the current menu. */\r\n  private _items: MatMenuItem[] = [];\r\n\r\n  /** Emits whenever the amount of menu items changes. */\r\n  private _itemChanges = new Subject<MatMenuItem[]>();\r\n\r\n  /** Subscription to tab events on the menu panel */\r\n  private _tabSubscription = Subscription.EMPTY;\r\n\r\n  /** Config object to be passed into the menu's ngClass */\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Current state of the panel animation. */\r\n  _panelAnimationState: 'void' | 'enter' = 'void';\r\n\r\n  /** Emits whenever an animation on the menu completes. */\r\n  _animationDone = new Subject<AnimationEvent>();\r\n\r\n  /** Whether the menu is animating. */\r\n  _isAnimating: boolean;\r\n\r\n  /** Parent menu of the current menu panel. */\r\n  parentMenu: MatMenuPanel | undefined;\r\n\r\n  /** Layout direction of the menu. */\r\n  direction: Direction;\r\n\r\n  /** Class to be added to the backdrop element. */\r\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\r\n\r\n  /** Position of the menu in the X axis. */\r\n  @Input()\r\n  get xPosition(): MenuPositionX { return this._xPosition; }\r\n  set xPosition(value: MenuPositionX) {\r\n    if (value !== 'before' && value !== 'after') {\r\n      throwMatMenuInvalidPositionX();\r\n    }\r\n    this._xPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** Position of the menu in the Y axis. */\r\n  @Input()\r\n  get yPosition(): MenuPositionY { return this._yPosition; }\r\n  set yPosition(value: MenuPositionY) {\r\n    if (value !== 'above' && value !== 'below') {\r\n      throwMatMenuInvalidPositionY();\r\n    }\r\n    this._yPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\r\n\r\n  /**\r\n   * List of the items inside of a menu.\r\n   * @deprecated\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\r\n\r\n  /**\r\n   * Menu content that will be rendered lazily.\r\n   * @docs-private\r\n   */\r\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\r\n\r\n  /** Whether the menu should overlap its trigger. */\r\n  @Input()\r\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\r\n  set overlapTrigger(value: boolean) {\r\n    this._overlapTrigger = coerceBooleanProperty(value);\r\n  }\r\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\r\n\r\n  /** Whether the menu has a backdrop. */\r\n  @Input()\r\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\r\n  set hasBackdrop(value: boolean | undefined) {\r\n    this._hasBackdrop = coerceBooleanProperty(value);\r\n  }\r\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @param classes list of class names\r\n   */\r\n  @Input('class')\r\n  set panelClass(classes: string) {\r\n    const previousPanelClass = this._previousPanelClass;\r\n\r\n    if (previousPanelClass && previousPanelClass.length) {\r\n      previousPanelClass.split(' ').forEach((className: string) => {\r\n        this._classList[className] = false;\r\n      });\r\n    }\r\n\r\n    this._previousPanelClass = classes;\r\n\r\n    if (classes && classes.length) {\r\n      classes.split(' ').forEach((className: string) => {\r\n        this._classList[className] = true;\r\n      });\r\n\r\n      this._elementRef.nativeElement.className = '';\r\n    }\r\n  }\r\n  private _previousPanelClass: string;\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @deprecated Use `panelClass` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @Input()\r\n  get classList(): string { return this.panelClass; }\r\n  set classList(classes: string) { this.panelClass = classes; }\r\n\r\n  /** Event emitted when the menu is closed. */\r\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\r\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\r\n\r\n  /**\r\n   * Event emitted when the menu is closed.\r\n   * @deprecated Switch to `closed` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @Output() close = this.closed;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    private _ngZone: NgZone,\r\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\r\n\r\n  ngOnInit() {\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\r\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabSubscription.unsubscribe();\r\n    this.closed.complete();\r\n  }\r\n\r\n  /** Stream that emits whenever the hovered menu item changes. */\r\n  _hovered(): Observable<MatMenuItem> {\r\n    return this._itemChanges.pipe(\r\n      startWith(this._items),\r\n      switchMap(items => merge(...items.map(item => item._hovered)))\r\n    );\r\n  }\r\n\r\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    const keyCode = event.keyCode;\r\n    const manager = this._keyManager;\r\n\r\n    switch (keyCode) {\r\n      case ESCAPE:\r\n        if (!hasModifierKey(event)) {\r\n          event.preventDefault();\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case LEFT_ARROW:\r\n        if (this.parentMenu && this.direction === 'ltr') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case RIGHT_ARROW:\r\n        if (this.parentMenu && this.direction === 'rtl') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case HOME:\r\n      case END:\r\n        if (!hasModifierKey(event)) {\r\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n          event.preventDefault();\r\n        }\r\n      break;\r\n      default:\r\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\r\n          manager.setFocusOrigin('keyboard');\r\n        }\r\n\r\n        manager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the first item in the menu.\r\n   * @param origin Action from which the focus originated. Used to set the correct styling.\r\n   */\r\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\r\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\r\n    if (this.lazyContent) {\r\n      this._ngZone.onStable.asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\r\n    } else {\r\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\r\n   * the user to start from the first option when pressing the down arrow.\r\n   */\r\n  resetActiveItem() {\r\n    this._keyManager.setActiveItem(-1);\r\n  }\r\n\r\n  /**\r\n   * Sets the menu panel elevation.\r\n   * @param depth Number of parent menus that come before the menu.\r\n   */\r\n  setElevation(depth: number): void {\r\n    // The elevation starts at the base and increases by one for each level.\r\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\r\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\r\n\r\n    if (!customElevation || customElevation === this._previousElevation) {\r\n      if (this._previousElevation) {\r\n        this._classList[this._previousElevation] = false;\r\n      }\r\n\r\n      this._classList[newElevation] = true;\r\n      this._previousElevation = newElevation;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a menu item with the menu.\r\n   * @docs-private\r\n   */\r\n  addItem(item: MatMenuItem) {\r\n    // We register the items through this method, rather than picking them up through\r\n    // `ContentChildren`, because we need the items to be picked up by their closest\r\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\r\n    // all descendant items will bleed into the top-level menu in the case where the consumer\r\n    // has `mat-menu` instances nested inside each other.\r\n    if (this._items.indexOf(item) === -1) {\r\n      this._items.push(item);\r\n      this._itemChanges.next(this._items);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the menu.\r\n   * @docs-private\r\n   */\r\n  removeItem(item: MatMenuItem) {\r\n    const index = this._items.indexOf(item);\r\n\r\n    if (this._items.indexOf(item) > -1) {\r\n      this._items.splice(index, 1);\r\n      this._itemChanges.next(this._items);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds classes to the menu panel based on its position. Can be used by\r\n   * consumers to add specific styling based on the position.\r\n   * @param posX Position of the menu along the x axis.\r\n   * @param posY Position of the menu along the y axis.\r\n   * @docs-private\r\n   */\r\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\r\n    const classes = this._classList;\r\n    classes['mat-menu-before'] = posX === 'before';\r\n    classes['mat-menu-after'] = posX === 'after';\r\n    classes['mat-menu-above'] = posY === 'above';\r\n    classes['mat-menu-below'] = posY === 'below';\r\n  }\r\n\r\n  /** Starts the enter animation. */\r\n  _startAnimation() {\r\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\r\n    this._panelAnimationState = 'enter';\r\n  }\r\n\r\n  /** Resets the panel animation to its initial state. */\r\n  _resetAnimation() {\r\n    // @breaking-change 8.0.0 Combine with _startAnimation.\r\n    this._panelAnimationState = 'void';\r\n  }\r\n\r\n  /** Callback that is invoked when the panel animation completes. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    this._animationDone.next(event);\r\n    this._isAnimating = false;\r\n  }\r\n\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    this._isAnimating = true;\r\n\r\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\r\n    // because we move focus to the first item while it's still being animated, which can throw\r\n    // the browser off when it determines the scroll position. Alternatively we can move focus\r\n    // when the animation is done, however moving focus asynchronously will interrupt screen\r\n    // readers which are in the process of reading out the menu already. We take the `element`\r\n    // from the `event` since we can't use a `ViewChild` to access the pane.\r\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\r\n      event.element.scrollTop = 0;\r\n    }\r\n  }\r\n}\r\n\r\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\r\nexport class MatMenu extends _MatMenuBase {}\r\n\r\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\r\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\r\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\r\n// queries and DI to work correctly, while still not referencing the actual menu class.\r\n// Class responsibility is split up as follows:\r\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\r\n// * MatMenu - keeps the same name symbol name as the current menu and\r\n// is used as a provider for DI and query purposes.\r\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\r\n// be tree shaken away for MDC.\r\n\r\n/** @docs-public MatMenu */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-menu',\r\n  templateUrl: 'menu.html',\r\n  styleUrls: ['menu.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matMenu',\r\n  animations: [\r\n    matMenuAnimations.transformMenu,\r\n    matMenuAnimations.fadeInItems\r\n  ],\r\n  providers: [\r\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\r\n    {provide: MatMenu, useExisting: _MatMenu}\r\n  ]\r\n})\r\n// tslint:disable-next-line:class-name\r\nexport class _MatMenu extends MatMenu {\r\n\r\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\r\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\r\n    super(elementRef, ngZone, defaultOptions);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  HorizontalConnectionPos,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  VerticalConnectionPos,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Self,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\r\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\r\nimport {MatMenu} from './menu';\r\nimport {throwMatMenuMissingError} from './menu-errors';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MatMenuPanel} from './menu-panel';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\n\r\n/** Injection token that determines the scroll handling while the menu is open. */\r\nexport const MAT_MENU_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_MENU_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n/** Default top padding of the menu panel. */\r\nexport const MENU_PANEL_TOP_PADDING = 8;\r\n\r\n/** Options for binding a passive event listener. */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\r\n\r\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\r\n\r\n/**\r\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\r\n * responsible for toggling the display of the provided menu instance.\r\n */\r\n@Directive({\r\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\r\n  host: {\r\n    'aria-haspopup': 'true',\r\n    '[attr.aria-expanded]': 'menuOpen || null',\r\n    '(mousedown)': '_handleMousedown($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(click)': '_handleClick($event)',\r\n  },\r\n  exportAs: 'matMenuTrigger'\r\n})\r\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\r\n  private _portal: TemplatePortal;\r\n  private _overlayRef: OverlayRef | null = null;\r\n  private _menuOpen: boolean = false;\r\n  private _closingActionsSubscription = Subscription.EMPTY;\r\n  private _hoverSubscription = Subscription.EMPTY;\r\n  private _menuCloseSubscription = Subscription.EMPTY;\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /**\r\n   * Handles touch start events on the trigger.\r\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\r\n   */\r\n  private _handleTouchStart = () => this._openedBy = 'touch';\r\n\r\n  // Tracking input type is necessary so it's possible to only auto-focus\r\n  // the first item of the list when the menu is opened via the keyboard\r\n  _openedBy: 'mouse' | 'touch' | null = null;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @Input('mat-menu-trigger-for')\r\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\r\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\r\n    this.menu = v;\r\n  }\r\n\r\n  /** References the menu instance that the trigger is associated with. */\r\n  @Input('matMenuTriggerFor')\r\n  get menu() { return this._menu; }\r\n  set menu(menu: MatMenuPanel) {\r\n    if (menu === this._menu) {\r\n      return;\r\n    }\r\n\r\n    this._menu = menu;\r\n    this._menuCloseSubscription.unsubscribe();\r\n\r\n    if (menu) {\r\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\r\n        this._destroyMenu();\r\n\r\n        // If a click closed the menu, we should close the entire chain of nested menus.\r\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\r\n          this._parentMenu.closed.emit(reason);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  private _menu: MatMenuPanel;\r\n\r\n  /** Data to be passed along to any lazily-rendered content. */\r\n  @Input('matMenuTriggerData') menuData: any;\r\n\r\n  /**\r\n   * Whether focus should be restored when the menu is closed.\r\n   * Note that disabling this option can have accessibility implications\r\n   * and it's up to you to manage focus, if you decide to turn it off.\r\n   */\r\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\r\n\r\n  /** Event emitted when the associated menu is opened. */\r\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted when the associated menu is opened.\r\n   * @deprecated Switch to `menuOpened` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\r\n\r\n  /** Event emitted when the associated menu is closed. */\r\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted when the associated menu is closed.\r\n   * @deprecated Switch to `menuClosed` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\r\n\r\n  constructor(private _overlay: Overlay,\r\n              private _element: ElementRef<HTMLElement>,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\r\n              @Optional() private _parentMenu: MatMenu,\r\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\r\n              @Optional() private _dir: Directionality,\r\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\r\n              // @breaking-change 8.0.0\r\n              private _focusMonitor?: FocusMonitor) {\r\n\r\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\r\n        passiveEventListenerOptions);\r\n\r\n    if (_menuItemInstance) {\r\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._checkMenu();\r\n    this._handleHover();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n\r\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\r\n        passiveEventListenerOptions);\r\n\r\n    this._menuCloseSubscription.unsubscribe();\r\n    this._closingActionsSubscription.unsubscribe();\r\n    this._hoverSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Whether the menu is open. */\r\n  get menuOpen(): boolean {\r\n    return this._menuOpen;\r\n  }\r\n\r\n  /** The text direction of the containing app. */\r\n  get dir(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Whether the menu triggers a sub-menu or a top-level one. */\r\n  triggersSubmenu(): boolean {\r\n    return !!(this._menuItemInstance && this._parentMenu);\r\n  }\r\n\r\n  /** Toggles the menu between the open and closed states. */\r\n  toggleMenu(): void {\r\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\r\n  }\r\n\r\n  /** Opens the menu. */\r\n  openMenu(): void {\r\n    if (this._menuOpen) {\r\n      return;\r\n    }\r\n\r\n    this._checkMenu();\r\n\r\n    const overlayRef = this._createOverlay();\r\n    const overlayConfig = overlayRef.getConfig();\r\n\r\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\r\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\r\n        this.menu.hasBackdrop;\r\n    overlayRef.attach(this._getPortal());\r\n\r\n    if (this.menu.lazyContent) {\r\n      this.menu.lazyContent.attach(this.menuData);\r\n    }\r\n\r\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\r\n    this._initMenu();\r\n\r\n    if (this.menu instanceof MatMenu) {\r\n      this.menu._startAnimation();\r\n    }\r\n  }\r\n\r\n  /** Closes the menu. */\r\n  closeMenu(): void {\r\n    this.menu.close.emit();\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu trigger.\r\n   * @param origin Source of the menu trigger's focus.\r\n   */\r\n  focus(origin: FocusOrigin = 'program') {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.focusVia(this._element, origin);\r\n    } else {\r\n      this._element.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  /** Closes the menu and does the necessary cleanup. */\r\n  private _destroyMenu() {\r\n    if (!this._overlayRef || !this.menuOpen) {\r\n      return;\r\n    }\r\n\r\n    const menu = this.menu;\r\n\r\n    this._closingActionsSubscription.unsubscribe();\r\n    this._overlayRef.detach();\r\n\r\n    if (menu instanceof MatMenu) {\r\n      menu._resetAnimation();\r\n\r\n      if (menu.lazyContent) {\r\n        // Wait for the exit animation to finish before detaching the content.\r\n        menu._animationDone\r\n          .pipe(\r\n            filter(event => event.toState === 'void'),\r\n            take(1),\r\n            // Interrupt if the content got re-attached.\r\n            takeUntil(menu.lazyContent._attached)\r\n          )\r\n          .subscribe({\r\n            next: () => menu.lazyContent!.detach(),\r\n            // No matter whether the content got re-attached, reset the menu.\r\n            complete: () => this._resetMenu()\r\n          });\r\n      } else {\r\n        this._resetMenu();\r\n      }\r\n    } else {\r\n      this._resetMenu();\r\n\r\n      if (menu.lazyContent) {\r\n        menu.lazyContent.detach();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method sets the menu state to open and focuses the first item if\r\n   * the menu was opened via the keyboard.\r\n   */\r\n  private _initMenu(): void {\r\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\r\n    this.menu.direction = this.dir;\r\n    this._setMenuElevation();\r\n    this._setIsMenuOpen(true);\r\n    this.menu.focusFirstItem(this._openedBy || 'program');\r\n  }\r\n\r\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\r\n  private _setMenuElevation(): void {\r\n    if (this.menu.setElevation) {\r\n      let depth = 0;\r\n      let parentMenu = this.menu.parentMenu;\r\n\r\n      while (parentMenu) {\r\n        depth++;\r\n        parentMenu = parentMenu.parentMenu;\r\n      }\r\n\r\n      this.menu.setElevation(depth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method resets the menu when it's closed, most importantly restoring\r\n   * focus to the menu trigger if the menu was opened via the keyboard.\r\n   */\r\n  private _resetMenu(): void {\r\n    this._setIsMenuOpen(false);\r\n\r\n    // We should reset focus if the user is navigating using a keyboard or\r\n    // if we have a top-level trigger which might cause focus to be lost\r\n    // when clicking on the backdrop.\r\n    if (this.restoreFocus) {\r\n      if (!this._openedBy) {\r\n        // Note that the focus style will show up both for `program` and\r\n        // `keyboard` so we don't have to specify which one it is.\r\n        this.focus();\r\n      } else if (!this.triggersSubmenu()) {\r\n        this.focus(this._openedBy);\r\n      }\r\n    }\r\n\r\n    this._openedBy = null;\r\n  }\r\n\r\n  // set state rather than toggle to support triggers sharing a menu\r\n  private _setIsMenuOpen(isOpen: boolean): void {\r\n    this._menuOpen = isOpen;\r\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\r\n\r\n    if (this.triggersSubmenu()) {\r\n      this._menuItemInstance._highlighted = isOpen;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method checks that a valid instance of MatMenu has been passed into\r\n   * matMenuTriggerFor. If not, an exception is thrown.\r\n   */\r\n  private _checkMenu() {\r\n    if (!this.menu) {\r\n      throwMatMenuMissingError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method creates the overlay from the provided menu's template and saves its\r\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\r\n   */\r\n  private _createOverlay(): OverlayRef {\r\n    if (!this._overlayRef) {\r\n      const config = this._getOverlayConfig();\r\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\r\n      this._overlayRef = this._overlay.create(config);\r\n\r\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\r\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\r\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\r\n      this._overlayRef.keydownEvents().subscribe();\r\n    }\r\n\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /**\r\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\r\n   * @returns OverlayConfig\r\n   */\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._overlay.position()\r\n          .flexibleConnectedTo(this._element)\r\n          .withLockedPosition()\r\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\r\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\r\n      scrollStrategy: this._scrollStrategy(),\r\n      direction: this._dir\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listens to changes in the position of the overlay and sets the correct classes\r\n   * on the menu based on the new position. This ensures the animation origin is always\r\n   * correct, even if a fallback position is used for the overlay.\r\n   */\r\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\r\n    if (this.menu.setPositionClasses) {\r\n      position.positionChanges.subscribe(change => {\r\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\r\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\r\n\r\n        this.menu.setPositionClasses!(posX, posY);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the appropriate positions on a position strategy\r\n   * so the overlay connects with the trigger correctly.\r\n   * @param positionStrategy Strategy whose position to update.\r\n   */\r\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\r\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\r\n\r\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\r\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\r\n\r\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\r\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\r\n    let offsetY = 0;\r\n\r\n    if (this.triggersSubmenu()) {\r\n      // When the menu is a sub-menu, it should always align itself\r\n      // to the edges of the trigger, instead of overlapping it.\r\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\r\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\r\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\r\n    } else if (!this.menu.overlapTrigger) {\r\n      originY = overlayY === 'top' ? 'bottom' : 'top';\r\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\r\n    }\r\n\r\n    positionStrategy.withPositions([\r\n      {originX, originY, overlayX, overlayY, offsetY},\r\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\r\n      {\r\n        originX,\r\n        originY: originFallbackY,\r\n        overlayX,\r\n        overlayY: overlayFallbackY,\r\n        offsetY: -offsetY\r\n      },\r\n      {\r\n        originX: originFallbackX,\r\n        originY: originFallbackY,\r\n        overlayX: overlayFallbackX,\r\n        overlayY: overlayFallbackY,\r\n        offsetY: -offsetY\r\n      }\r\n    ]);\r\n  }\r\n\r\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\r\n  private _menuClosingActions() {\r\n    const backdrop = this._overlayRef!.backdropClick();\r\n    const detachments = this._overlayRef!.detachments();\r\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\r\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\r\n      filter(active => active !== this._menuItemInstance),\r\n      filter(() => this._menuOpen)\r\n    ) : observableOf();\r\n\r\n    return merge(backdrop, parentClose, hover, detachments);\r\n  }\r\n\r\n  /** Handles mouse presses on the trigger. */\r\n  _handleMousedown(event: MouseEvent): void {\r\n    if (!isFakeMousedownFromScreenReader(event)) {\r\n      // Since right or middle button clicks won't trigger the `click` event,\r\n      // we shouldn't consider the menu as opened by mouse in those cases.\r\n      this._openedBy = event.button === 0 ? 'mouse' : null;\r\n\r\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\r\n      // we should prevent focus from moving onto it via click to avoid the\r\n      // highlight from lingering on the menu item.\r\n      if (this.triggersSubmenu()) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Handles key presses on the trigger. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    if (this.triggersSubmenu() && (\r\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\r\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\r\n      this.openMenu();\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the trigger. */\r\n  _handleClick(event: MouseEvent): void {\r\n    if (this.triggersSubmenu()) {\r\n      // Stop event propagation to avoid closing the parent menu.\r\n      event.stopPropagation();\r\n      this.openMenu();\r\n    } else {\r\n      this.toggleMenu();\r\n    }\r\n  }\r\n\r\n  /** Handles the cases where the user hovers over the trigger. */\r\n  private _handleHover() {\r\n    // Subscribe to changes in the hovered item in order to toggle the panel.\r\n    if (!this.triggersSubmenu()) {\r\n      return;\r\n    }\r\n\r\n    this._hoverSubscription = this._parentMenu._hovered()\r\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\r\n      // with different data and triggers), we have to delay it by a tick to ensure that\r\n      // it won't be closed immediately after it is opened.\r\n      .pipe(\r\n        filter(active => active === this._menuItemInstance && !active.disabled),\r\n        delay(0, asapScheduler)\r\n      )\r\n      .subscribe(() => {\r\n        this._openedBy = 'mouse';\r\n\r\n        // If the same menu is used between multiple triggers, it might still be animating\r\n        // while the new trigger tries to re-open it. Wait for the animation to finish\r\n        // before doing so. Also interrupt if the user moves to another item.\r\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\r\n          // We need the `delay(0)` here in order to avoid\r\n          // 'changed after checked' errors in some cases. See #12194.\r\n          this.menu._animationDone\r\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\r\n            .subscribe(() => this.openMenu());\r\n        } else {\r\n          this.openMenu();\r\n        }\r\n      });\r\n  }\r\n\r\n  /** Gets the portal that should be attached to the overlay. */\r\n  private _getPortal(): TemplatePortal {\r\n    // Note that we can avoid this check by keeping the portal on the menu panel.\r\n    // While it would be cleaner, we'd have to introduce another required method on\r\n    // `MatMenuPanel`, making it harder to consume.\r\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\r\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\r\n    }\r\n\r\n    return this._portal;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport{\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n  query,\r\n  group,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the mat-menu component.\r\n * Animation duration and timing values are based on:\r\n * https://material.io/guidelines/components/menus.html#menus-usage\r\n * @docs-private\r\n */\r\nexport const matMenuAnimations: {\r\n  readonly transformMenu: AnimationTriggerMetadata;\r\n  readonly fadeInItems: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation controls the menu panel's entry and exit from the page.\r\n   *\r\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\r\n   *\r\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\r\n   * delay to display the ripple.\r\n   */\r\n  transformMenu: trigger('transformMenu', [\r\n    state('void', style({\r\n      opacity: 0,\r\n      transform: 'scale(0.8)'\r\n    })),\r\n    transition('void => enter', group([\r\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\r\n        opacity: 1\r\n      }))),\r\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\r\n    ])),\r\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n\r\n  /**\r\n   * This animation fades in the background color and content of the menu panel\r\n   * after its containing element is scaled in.\r\n   */\r\n  fadeInItems: trigger('fadeInItems', [\r\n    // TODO(crisbeto): this is inside the `transformMenu`\r\n    // now. Remove next time we do breaking changes.\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => *', [\r\n      style({opacity: 0}),\r\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const fadeInItems = matMenuAnimations.fadeInItems;\r\n\r\n/**\r\n * @deprecated\r\n * @breaking-change 8.0.0\r\n * @docs-private\r\n */\r\nexport const transformMenu = matMenuAnimations.transformMenu;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  TemplateRef,\r\n  ComponentFactoryResolver,\r\n  ApplicationRef,\r\n  Injector,\r\n  ViewContainerRef,\r\n  Inject,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * Menu content that will be rendered lazily once the menu is opened.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matMenuContent]'\r\n})\r\nexport class MatMenuContent implements OnDestroy {\r\n  private _portal: TemplatePortal<any>;\r\n  private _outlet: DomPortalOutlet;\r\n\r\n  /** Emits when the menu content has been attached. */\r\n  _attached = new Subject<void>();\r\n\r\n  constructor(\r\n    private _template: TemplateRef<any>,\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private _appRef: ApplicationRef,\r\n    private _injector: Injector,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(DOCUMENT) private _document: any) {}\r\n\r\n  /**\r\n   * Attaches the content with a particular context.\r\n   * @docs-private\r\n   */\r\n  attach(context: any = {}) {\r\n    if (!this._portal) {\r\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\r\n    }\r\n\r\n    this.detach();\r\n\r\n    if (!this._outlet) {\r\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\r\n          this._componentFactoryResolver, this._appRef, this._injector);\r\n    }\r\n\r\n    const element: HTMLElement = this._template.elementRef.nativeElement;\r\n\r\n    // Because we support opening the same menu from different triggers (which in turn have their\r\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\r\n    // risk it staying attached to a pane that's no longer in the DOM.\r\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\r\n    this._portal.attach(this._outlet, context);\r\n    this._attached.next();\r\n  }\r\n\r\n  /**\r\n   * Detaches the content.\r\n   * @docs-private\r\n   */\r\n  detach() {\r\n    if (this._portal.isAttached) {\r\n      this._portal.detach();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._outlet) {\r\n      this._outlet.dispose();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {FocusOrigin} from '@angular/cdk/a11y';\r\nimport {MatMenuContent} from './menu-content';\r\n\r\n/**\r\n * Injection token used to provide the parent menu to menu-specific components.\r\n * @docs-private\r\n */\r\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\r\n\r\n/**\r\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\r\n * @docs-private\r\n */\r\nexport interface MatMenuPanel<T = any> {\r\n  xPosition: MenuPositionX;\r\n  yPosition: MenuPositionY;\r\n  overlapTrigger: boolean;\r\n  templateRef: TemplateRef<any>;\r\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\r\n  parentMenu?: MatMenuPanel | undefined;\r\n  direction?: Direction;\r\n  focusFirstItem: (origin?: FocusOrigin) => void;\r\n  resetActiveItem: () => void;\r\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\r\n  setElevation?(depth: number): void;\r\n  lazyContent?: MatMenuContent;\r\n  backdropClass?: string;\r\n  hasBackdrop?: boolean;\r\n  addItem?: (item: T) => void;\r\n  removeItem?: (item: T) => void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n  Inject,\r\n  Optional,\r\n  Input,\r\n  HostListener,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable, CanDisableCtor,\r\n  CanDisableRipple, CanDisableRippleCtor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\r\n\r\n// Boilerplate for applying mixins to MatMenuItem.\r\n/** @docs-private */\r\nclass MatMenuItemBase {}\r\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\r\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\r\n\r\n/**\r\n * This directive is intended to be used inside an mat-menu tag.\r\n * It exists mostly to set the role attribute.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-menu-item]',\r\n  exportAs: 'matMenuItem',\r\n  inputs: ['disabled', 'disableRipple'],\r\n  host: {\r\n    '[attr.role]': 'role',\r\n    'class': 'mat-menu-item',\r\n    '[class.mat-menu-item-highlighted]': '_highlighted',\r\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.disabled]': 'disabled || null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: 'menu-item.html',\r\n})\r\nexport class MatMenuItem extends _MatMenuItemMixinBase\r\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\r\n\r\n  /** ARIA role for the menu item. */\r\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\r\n\r\n  private _document: Document;\r\n\r\n  /** Stream that emits when the menu item is hovered. */\r\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\r\n\r\n  /** Whether the menu item is highlighted. */\r\n  _highlighted: boolean = false;\r\n\r\n  /** Whether the menu item acts as a trigger for a sub-menu. */\r\n  _triggersSubmenu: boolean = false;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    @Inject(DOCUMENT) document?: any,\r\n    private _focusMonitor?: FocusMonitor,\r\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\r\n\r\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\r\n    super();\r\n\r\n    if (_focusMonitor) {\r\n      // Start monitoring the element so it gets the appropriate focused classes. We want\r\n      // to show the focus style for menu items only when the focus was not caused by a\r\n      // mouse or touch interaction.\r\n      _focusMonitor.monitor(this._elementRef, false);\r\n    }\r\n\r\n    if (_parentMenu && _parentMenu.addItem) {\r\n      _parentMenu.addItem(this);\r\n    }\r\n\r\n    this._document = document;\r\n  }\r\n\r\n  /** Focuses the menu item. */\r\n  focus(origin: FocusOrigin = 'program'): void {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\r\n    } else {\r\n      this._getHostElement().focus();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.stopMonitoring(this._elementRef);\r\n    }\r\n\r\n    if (this._parentMenu && this._parentMenu.removeItem) {\r\n      this._parentMenu.removeItem(this);\r\n    }\r\n\r\n    this._hovered.complete();\r\n  }\r\n\r\n  /** Used to set the `tabindex`. */\r\n  _getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\r\n\r\n  /** Returns the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  /** Prevents the default element actions if it is disabled. */\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('click', ['$event'])\r\n  _checkDisabled(event: Event): void {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /** Emits to the hover stream. */\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('mouseenter')\r\n  _handleMouseEnter() {\r\n    this._hovered.next(this);\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\r\n    let output = '';\r\n\r\n    if (element.childNodes) {\r\n      const length = element.childNodes.length;\r\n\r\n      // Go through all the top-level text nodes and extract their text.\r\n      // We skip anything that's not a text node to prevent the text from\r\n      // being thrown off by something like an icon.\r\n      for (let i = 0; i < length; i++) {\r\n        if (element.childNodes[i].nodeType === textNodeType) {\r\n          output += element.childNodes[i].textContent;\r\n        }\r\n      }\r\n    }\r\n\r\n    return output.trim();\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatMenuContent} from './menu-content';\r\nimport {_MatMenu} from './menu';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {\r\n  MatMenuTrigger,\r\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './menu-trigger';\r\n\r\n/**\r\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\r\n * to declare the menu-related directives.\r\n */\r\n@NgModule({\r\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\r\n  declarations: [MatMenuTrigger, MatMenuContent],\r\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\r\n})\r\n// tslint:disable-next-line:class-name\r\nexport class _MatMenuDirectivesModule {}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    MatRippleModule,\r\n    OverlayModule,\r\n    _MatMenuDirectivesModule,\r\n  ],\r\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\r\n  declarations: [_MatMenu, MatMenuItem],\r\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\r\n})\r\nexport class MatMenuModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","group","query","animate","fadeInItems","MatMenuContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","Subject","attach","context","_portal","TemplatePortal","detach","_outlet","DomPortalOutlet","createElement","element","elementRef","nativeElement","insertBefore","outletElement","next","isAttached","ngOnDestroy","dispose","type","Directive","args","selector","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","undefined","decorators","Inject","DOCUMENT","MAT_MENU_PANEL","InjectionToken","MatMenuItemBase","_MatMenuItemMixinBase","mixinDisableRipple","mixinDisabled","MatMenuItem","_super","_elementRef","document","_focusMonitor","_parentMenu","_this","call","role","_hovered","_highlighted","_triggersSubmenu","monitor","addItem","tslib_1.__extends","focus","origin","focusVia","_getHostElement","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","length","i","nodeType","textContent","trim","Component","exportAs","inputs","host","[attr.role]","class","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.tabindex]","[attr.aria-disabled]","[attr.disabled]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","template","FocusMonitor","Optional","propDecorators","HostListener","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","Subscription","EMPTY","_classList","_panelAnimationState","_animationDone","_overlapTrigger","_hasBackdrop","hasBackdrop","closed","EventEmitter","close","defineProperty","value","setPositionClasses","coerceBooleanProperty","classes","previousPanelClass","_previousPanelClass","split","forEach","className","panelClass","ngOnInit","ngAfterContentInit","_keyManager","FocusKeyManager","withWrap","withTypeAhead","tabOut","subscribe","emit","unsubscribe","pipe","startWith","switchMap","items","merge","apply","map","item","_handleKeydown","keyCode","manager","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","HOME","END","setFirstItemActive","setLastItemActive","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","asObservable","take","resetActiveItem","setActiveItem","setElevation","depth","newElevation","customElevation","keys","find","c","startsWith","_previousElevation","indexOf","push","index","splice","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","toState","activeItemIndex","scrollTop","ElementRef","NgZone","Input","templateRef","ViewChild","static","ContentChildren","ContentChild","classList","Output","MatMenu","_MatMenu","ngZone","defaultOptions","styles","animations","providers","provide","useExisting","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","addEventListener","triggersSubmenu","_scrollStrategy","menu","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","menuOpen","filter","takeUntil","_resetMenu","dir","_setMenuElevation","_setIsMenuOpen","isOpen","config","_getOverlayConfig","_subscribeToPositions","keydownEvents","OverlayConfig","positionStrategy","position","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","_a","originX","originFallbackX","_b","overlayFallbackY","_c","originY","originFallbackY","_d","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","observableOf","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","(keydown)","(click)","Self","Directionality","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","NgModule","exports","MatCommonModule","declarations","MatMenuModule","imports","CommonModule","MatRippleModule","OverlayModule"],"mappings":"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"}