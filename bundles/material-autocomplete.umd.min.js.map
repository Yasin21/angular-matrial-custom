{"version":3,"file":"material-autocomplete.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple,\r\n  CanDisableRippleCtor,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  MatOptgroup,\r\n  MatOption,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\n\r\n\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nexport class MatAutocompleteSelectedEvent {\r\n  constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    public source: MatAutocomplete,\r\n    /** Option that was selected. */\r\n    public option: MatOption) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nclass MatAutocompleteBase {}\r\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\r\n    mixinDisableRipple(MatAutocompleteBase);\r\n\r\n/** Default `mat-autocomplete` options that can be overridden. */\r\nexport interface MatAutocompleteDefaultOptions {\r\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\r\n  autoActiveFirstOption?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\r\n      providedIn: 'root',\r\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\r\n  return {autoActiveFirstOption: false};\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'matAutocomplete',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  },\r\n  providers: [\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\r\n  ]\r\n})\r\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\r\n  CanDisableRipple {\r\n\r\n  /** Manages active item in option list based on key events. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** Whether the autocomplete panel should be visible, depending on option length. */\r\n  showPanel: boolean = false;\r\n\r\n  /** Whether the autocomplete panel is open. */\r\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\r\n  _isOpen: boolean = false;\r\n\r\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\r\n  // lead to the overlay being created before change detection has finished for this component.\r\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\r\n\r\n  /** Element for the panel containing the autocomplete options. */\r\n  @ViewChild('panel', {static: false}) panel: ElementRef;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Function that maps an option's control value to its display value in the trigger. */\r\n  @Input() displayWith: ((value: any) => string) | null = null;\r\n\r\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\r\n  @Input()\r\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\r\n  set autoActiveFirstOption(value: boolean) {\r\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n  }\r\n  private _autoActiveFirstOption: boolean;\r\n\r\n  /**\r\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\r\n   * match the width of its host.\r\n   */\r\n  @Input() panelWidth: string | number;\r\n\r\n  /** Event that is emitted whenever an option from the list is selected. */\r\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\r\n      new EventEmitter<MatAutocompleteSelectedEvent>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is opened. */\r\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Event that is emitted when the autocomplete panel is closed. */\r\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\r\n  @Input('class')\r\n  set classList(value: string) {\r\n    if (value && value.length) {\r\n      this._classList = value.split(' ').reduce((classList, className) => {\r\n        classList[className.trim()] = true;\r\n        return classList;\r\n      }, {} as {[key: string]: boolean});\r\n    } else {\r\n      this._classList = {};\r\n    }\r\n\r\n    this._setVisibilityClasses(this._classList);\r\n    this._elementRef.nativeElement.className = '';\r\n  }\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\r\n    super();\r\n\r\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\r\n    // Set the initial visibility state.\r\n    this._setVisibility();\r\n  }\r\n\r\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\r\n  _setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /** Returns the panel's scrollTop. */\r\n  _getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\r\n\r\n  /** Panel should hide itself when the option list is empty. */\r\n  _setVisibility() {\r\n    this.showPanel = !!this.options.length;\r\n    this._setVisibilityClasses(this._classList);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits the `select` event. */\r\n  _emitSelectEvent(option: MatOption): void {\r\n    const event = new MatAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\r\n\r\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\r\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\r\n    classList['mat-autocomplete-visible'] = this.showPanel;\r\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n  ConnectedPosition,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\r\n\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the scrollTop of the panel. Because we are not\r\n * actually focusing the active item, scroll must be handled manually.\r\n */\r\n\r\n/** The height of each autocomplete option. */\r\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\r\n\r\n/** The total height of the autocomplete panel. */\r\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\r\n\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n * @docs-private\r\n */\r\nexport function getMatAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    '[attr.autocomplete]': 'autocompleteAttribute',\r\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\r\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\r\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\r\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\r\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\r\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  exportAs: 'matAutocompleteTrigger',\r\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n})\r\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\r\n  private _overlayRef: OverlayRef | null;\r\n  private _portal: TemplatePortal;\r\n  private _componentDestroyed = false;\r\n  private _autocompleteDisabled = false;\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\r\n  private _previousValue: string | number | null;\r\n\r\n  /** Strategy that is used to position the panel. */\r\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** Whether or not the label state is being overridden. */\r\n  private _manuallyFloatingLabel = false;\r\n\r\n  /** The subscription for closing actions (some are bound to document). */\r\n  private _closingActionsSubscription: Subscription;\r\n\r\n  /** Subscription to viewport size changes. */\r\n  private _viewportSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\r\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\r\n   * comes back.\r\n   */\r\n  private _canOpenOnNextFocus = true;\r\n\r\n  /** Stream of keyboard events that can close the panel. */\r\n  private readonly _closeKeyEventStream = new Subject<void>();\r\n\r\n  /**\r\n   * Event handler for when the window is blurred. Needs to be an\r\n   * arrow function in order to preserve the context.\r\n   */\r\n  private _windowBlurHandler = () => {\r\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\r\n    // refocused when they come back. In this case we want to skip the first focus event, if the\r\n    // pane was closed, in order to avoid reopening it unintentionally.\r\n    this._canOpenOnNextFocus =\r\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\r\n  }\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when autocomplete has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The autocomplete panel to be attached to this trigger. */\r\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\r\n\r\n  /**\r\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\r\n   * will render the panel underneath the trigger if there is enough space for it to fit in\r\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\r\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\r\n   * whether it fits completely in the viewport.\r\n   */\r\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\r\n\r\n  /**\r\n   * Reference relative to which to position the autocomplete panel.\r\n   * Defaults to the autocomplete trigger element.\r\n   */\r\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\r\n\r\n  /**\r\n   * `autocomplete` attribute to be set on the input element.\r\n   * @docs-private\r\n   */\r\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\r\n\r\n  /**\r\n   * Whether the autocomplete is disabled. When disabled, the element will\r\n   * act as a regular input and the user won't be able to open the panel.\r\n   */\r\n  @Input('matAutocompleteDisabled')\r\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\r\n  set autocompleteDisabled(value: boolean) {\r\n    this._autocompleteDisabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              private _zone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Host() private _formField: MatFormField,\r\n              @Optional() @Inject(DOCUMENT) private _document: any,\r\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\r\n              private _viewportRuler?: ViewportRuler) {\r\n\r\n    if (typeof window !== 'undefined') {\r\n      _zone.runOutsideAngular(() => {\r\n        window.addEventListener('blur', this._windowBlurHandler);\r\n      });\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['position'] && this._positionStrategy) {\r\n      this._setStrategyPositions(this._positionStrategy);\r\n\r\n      if (this.panelOpen) {\r\n        this._overlayRef!.updatePosition();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (typeof window !== 'undefined') {\r\n      window.removeEventListener('blur', this._windowBlurHandler);\r\n    }\r\n\r\n    this._viewportSubscription.unsubscribe();\r\n    this._componentDestroyed = true;\r\n    this._destroyPanel();\r\n    this._closeKeyEventStream.complete();\r\n  }\r\n\r\n  /** Whether or not the autocomplete panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._overlayAttached && this.autocomplete.showPanel;\r\n  }\r\n  private _overlayAttached: boolean = false;\r\n\r\n  /** Opens the autocomplete suggestion panel. */\r\n  openPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatLabel();\r\n  }\r\n\r\n  /** Closes the autocomplete suggestion panel. */\r\n  closePanel(): void {\r\n    this._resetLabel();\r\n\r\n    if (!this._overlayAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.panelOpen) {\r\n      // Only emit if the panel was visible.\r\n      this.autocomplete.closed.emit();\r\n    }\r\n\r\n    this.autocomplete._isOpen = this._overlayAttached = false;\r\n\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n      this._closingActionsSubscription.unsubscribe();\r\n    }\r\n\r\n    // Note that in some cases this can end up being called after the component is destroyed.\r\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n    if (!this._componentDestroyed) {\r\n      // We need to trigger change detection manually, because\r\n      // `fromEvent` doesn't seem to do it at the proper time.\r\n      // This ensures that the label is reset when the\r\n      // user clicks outside.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n   * within the viewport.\r\n   */\r\n  updatePosition(): void {\r\n    if (this._overlayAttached) {\r\n      this._overlayRef!.updatePosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\r\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\r\n      this._closeKeyEventStream,\r\n      this._getOutsideClickStream(),\r\n      this._overlayRef ?\r\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\r\n          observableOf()\r\n    ).pipe(\r\n      // Normalize the output so we return a consistent type.\r\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\r\n    );\r\n  }\r\n\r\n  /** Stream of autocomplete option selections. */\r\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.autocomplete && this.autocomplete.options) {\r\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n    // Return a stream that we'll replace with the real one once everything is in place.\r\n    return this._zone.onStable\r\n        .asObservable()\r\n        .pipe(take(1), switchMap(() => this.optionSelections));\r\n  }) as Observable<MatOptionSelectionChange>;\r\n\r\n  /** The currently active option, coerced to MatOption type. */\r\n  get activeOption(): MatOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stream of clicks outside of the autocomplete panel. */\r\n  private _getOutsideClickStream(): Observable<any> {\r\n    return merge(\r\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\r\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\r\n    )\r\n    .pipe(filter(event => {\r\n      const clickTarget = event.target as HTMLElement;\r\n      const formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._overlayAttached &&\r\n              clickTarget !== this._element.nativeElement &&\r\n              (!formField || !formField.contains(clickTarget)) &&\r\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this._element.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n    // the input value to the one that it had on focus, however it won't dispatch any events\r\n    // which means that the model value will be out of sync with the view.\r\n    if (keyCode === ESCAPE) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else if (this.autocomplete) {\r\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen || keyCode === TAB) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey && this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n\r\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n        this._scrollToOption();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleInput(event: KeyboardEvent): void {\r\n    let target = event.target as HTMLInputElement;\r\n    let value: number | string | null = target.value;\r\n\r\n    // Based on `NumberValueAccessor` from forms.\r\n    if (target.type === 'number') {\r\n      value = value == '' ? null : parseFloat(value);\r\n    }\r\n\r\n    // If the input has a placeholder, IE will fire the `input` event on page load,\r\n    // focus and blur, in addition to when the user actually changed the value. To\r\n    // filter out all of the extra events, we save the value on focus and between\r\n    // `input` events, and we check whether it changed.\r\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (this._previousValue !== value) {\r\n      this._previousValue = value;\r\n      this._onChange(value);\r\n\r\n      if (this._canOpen() && this._document.activeElement === event.target) {\r\n        this.openPanel();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleFocus(): void {\r\n    if (!this._canOpenOnNextFocus) {\r\n      this._canOpenOnNextFocus = true;\r\n    } else if (this._canOpen()) {\r\n      this._previousValue = this._element.nativeElement.value;\r\n      this._attachOverlay();\r\n      this._floatLabel(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\r\n  private _floatLabel(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatLabel === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockLabel();\r\n      } else {\r\n        this._formField.floatLabel = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingLabel = true;\r\n    }\r\n  }\r\n\r\n  /** If the label has been manually elevated, return it to its normal state. */\r\n  private _resetLabel(): void  {\r\n    if (this._manuallyFloatingLabel) {\r\n      this._formField.floatLabel = 'auto';\r\n      this._manuallyFloatingLabel = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given that we are not actually focusing active options, we must manually adjust scroll\r\n   * to reveal options below the fold. First, we find the offset of the option from the top\r\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n   * the panel height + the option height, so the active option will be just visible at the\r\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n   * not adjusted.\r\n   */\r\n  private _scrollToOption(): void {\r\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(index,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n\r\n    const newScrollPosition = _getOptionScrollPosition(\r\n      index + labelCount,\r\n      AUTOCOMPLETE_OPTION_HEIGHT,\r\n      this.autocomplete._getScrollTop(),\r\n      AUTOCOMPLETE_PANEL_HEIGHT\r\n    );\r\n\r\n    this.autocomplete._setScrollTop(newScrollPosition);\r\n  }\r\n\r\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\r\n  private _subscribeToClosingActions(): Subscription {\r\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\r\n    const optionChanges = this.autocomplete.options.changes.pipe(\r\n      tap(() => this._positionStrategy.reapplyLastPosition()),\r\n      // Defer emitting to the stream until the next tick, because changing\r\n      // bindings in here will cause \"changed after checked\" errors.\r\n      delay(0)\r\n    );\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return merge(firstStable, optionChanges)\r\n        .pipe(\r\n            // create a new stream of panelClosingActions, replacing any previous streams\r\n            // that were created, and flatten it so our stream only emits closing events...\r\n            switchMap(() => {\r\n              const wasOpen = this.panelOpen;\r\n              this._resetActiveItem();\r\n              this.autocomplete._setVisibility();\r\n\r\n              if (this.panelOpen) {\r\n                this._overlayRef!.updatePosition();\r\n\r\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\r\n                // event, because we may not have emitted it when the panel was attached. This\r\n                // can happen if the users opens the panel and there are no options, but the\r\n                // options come in slightly later or as a result of the value changing.\r\n                if (wasOpen !== this.panelOpen) {\r\n                  this.autocomplete.opened.emit();\r\n                }\r\n              }\r\n\r\n              return this.panelClosingActions;\r\n            }),\r\n            // when the first closing event occurs...\r\n            take(1))\r\n        // set the value, close the panel, and complete.\r\n        .subscribe(event => this._setValueAndClose(event));\r\n  }\r\n\r\n  /** Destroys the autocomplete suggestion panel. */\r\n  private _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _setTriggerValue(value: any): void {\r\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\r\n      this.autocomplete.displayWith(value) :\r\n      value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n\r\n    this._previousValue = inputValue;\r\n  }\r\n\r\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\r\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\r\n  private _clearPreviousSelectedOption(skip: MatOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMatAutocompleteMissingPanelError();\r\n    }\r\n\r\n    let overlayRef = this._overlayRef;\r\n\r\n    if (!overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      overlayRef = this._overlay.create(this._getOverlayConfig());\r\n      this._overlayRef = overlayRef;\r\n\r\n      // Use the `keydownEvents` in order to take advantage of\r\n      // the overlay event targeting provided by the CDK overlay.\r\n      overlayRef.keydownEvents().subscribe(event => {\r\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\r\n          this._resetActiveItem();\r\n          this._closeKeyEventStream.next();\r\n        }\r\n      });\r\n\r\n      if (this._viewportRuler) {\r\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\r\n          if (this.panelOpen && overlayRef) {\r\n            overlayRef.updateSize({width: this._getPanelWidth()});\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Update the trigger, panel width and direction, in case anything has changed.\r\n      this._positionStrategy.setOrigin(this._getConnectedElement());\r\n      overlayRef.updateSize({width: this._getPanelWidth()});\r\n    }\r\n\r\n    if (overlayRef && !overlayRef.hasAttached()) {\r\n      overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    const wasOpen = this.panelOpen;\r\n\r\n    this.autocomplete._setVisibility();\r\n    this.autocomplete._isOpen = this._overlayAttached = true;\r\n\r\n    // We need to do an extra `panelOpen` check in here, because the\r\n    // autocomplete won't be shown if there are no options.\r\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\r\n      this.autocomplete.opened.emit();\r\n    }\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getPanelWidth(),\r\n      direction: this._dir\r\n    });\r\n  }\r\n\r\n  private _getOverlayPosition(): PositionStrategy {\r\n    const strategy = this._overlay.position()\r\n      .flexibleConnectedTo(this._getConnectedElement())\r\n      .withFlexibleDimensions(false)\r\n      .withPush(false);\r\n\r\n    this._setStrategyPositions(strategy);\r\n    this._positionStrategy = strategy;\r\n    return strategy;\r\n  }\r\n\r\n  /** Sets the positions on a position strategy based on the directive's input state. */\r\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    const belowPosition: ConnectedPosition = {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'top'\r\n    };\r\n    const abovePosition: ConnectedPosition = {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n\r\n      // The overlay edge connected to the trigger should have squared corners, while\r\n      // the opposite end has rounded corners. We apply a CSS class to swap the\r\n      // border-radius based on the overlay position.\r\n      panelClass: 'mat-autocomplete-panel-above'\r\n    };\r\n\r\n    let positions: ConnectedPosition[];\r\n\r\n    if (this.position === 'above') {\r\n      positions = [abovePosition];\r\n    } else if (this.position === 'below') {\r\n      positions = [belowPosition];\r\n    } else {\r\n      positions = [belowPosition, abovePosition];\r\n    }\r\n\r\n    positionStrategy.withPositions(positions);\r\n  }\r\n\r\n  private _getConnectedElement(): ElementRef {\r\n    if (this.connectedTo) {\r\n      return this.connectedTo.elementRef;\r\n    }\r\n\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\r\n  }\r\n\r\n  private _getPanelWidth(): number | string {\r\n    return this.autocomplete.panelWidth || this._getHostWidth();\r\n  }\r\n\r\n  /** Returns the width of the input element, so the panel width can match it. */\r\n  private _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\r\n  private _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\r\n  }\r\n\r\n  /** Determines whether the panel can be opened. */\r\n  private _canOpen(): boolean {\r\n    const element = this._element.nativeElement;\r\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\n\r\n/**\r\n * Directive applied to an element to make it usable\r\n * as a connection point for an autocomplete panel.\r\n */\r\n@Directive({\r\n  selector: '[matAutocompleteOrigin]',\r\n  exportAs: 'matAutocompleteOrigin',\r\n})\r\nexport class MatAutocompleteOrigin {\r\n  constructor(\r\n      /** Reference to the element on which the directive is applied. */\r\n      public elementRef: ElementRef<HTMLElement>) { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {\r\n  MatAutocompleteTrigger,\r\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n} from './autocomplete-trigger';\r\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\r\n\r\n@NgModule({\r\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\r\n  exports: [\r\n    MatAutocomplete,\r\n    MatOptionModule,\r\n    MatAutocompleteTrigger,\r\n    MatAutocompleteOrigin,\r\n    MatCommonModule\r\n  ],\r\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\r\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n})\r\nexport class MatAutocompleteModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","getMatAutocompleteMissingPanelError","Error","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","mixinDisableRipple","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MatAutocomplete","_super","_changeDetectorRef","_elementRef","defaults","_this","call","showPanel","_isOpen","displayWith","optionSelected","EventEmitter","opened","closed","_classList","id","_autoActiveFirstOption","tslib_1.__extends","defineProperty","value","coerceBooleanProperty","length","split","reduce","classList","className","trim","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","inputs","host","class","providers","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","undefined","decorators","Inject","propDecorators","ContentChildren","MatOption","descendants","optionGroups","MatOptgroup","Input","panelWidth","Output","MatAutocompleteOrigin","elementRef","Directive","ElementRef","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","Subscription","EMPTY","_canOpenOnNextFocus","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","merge","apply","map","onSelectionChange","onStable","asObservable","pipe","take","switchMap","window","runOutsideAngular","addEventListener","_scrollStrategy","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","updatePosition","ngOnDestroy","removeEventListener","unsubscribe","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_overlayRef","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","filter","_getOutsideClickStream","detachments","observableOf","MatOptionSelectionChange","activeItem","fromEvent","clickTarget","formField","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","ESCAPE","preventDefault","activeOption","ENTER","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","_handleInput","target","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","newScrollPosition","_getOptionScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","delay","wasOpen","panelClosingActions","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","TemplatePortal","_getOverlayConfig","keydownEvents","altKey","next","change","attach","OverlayConfig","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","positions","belowPosition","originX","originY","overlayX","overlayY","abovePosition","panelClass","withPositions","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","[attr.autocomplete]","[attr.role]","[attr.aria-autocomplete]","[attr.aria-activedescendant]","[attr.aria-expanded]","[attr.aria-owns]","[attr.aria-haspopup]","(focusin)","(blur)","(input)","(keydown)","ViewContainerRef","NgZone","ChangeDetectorRef","Directionality","Optional","MatFormField","Host","DOCUMENT","ViewportRuler","autocompleteDisabled","MatAutocompleteModule","NgModule","imports","MatOptionModule","OverlayModule","MatCommonModule","CommonModule","exports","declarations"],"mappings":"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"}