{"version":3,"file":"material-sidenav.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  HostBinding,\r\n} from '@angular/core';\r\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\r\nimport {\r\n  debounceTime,\r\n  filter,\r\n  map,\r\n  startWith,\r\n  take,\r\n  takeUntil,\r\n  distinctUntilChanged,\r\n} from 'rxjs/operators';\r\nimport {matDrawerAnimations} from './drawer-animations';\r\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\r\n\r\n\r\n/**\r\n * Throws an exception when two MatDrawer are matching the same position.\r\n * @docs-private\r\n */\r\nexport function throwMatDuplicatedDrawerError(position: string) {\r\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\r\n}\r\n\r\n\r\n/** Result of the toggle promise that indicates the state of the drawer. */\r\nexport type MatDrawerToggleResult = 'open' | 'close';\r\n\r\n/** Configures whether drawers should use auto sizing by default. */\r\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\r\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\r\n      providedIn: 'root',\r\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\r\n  return false;\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content',\r\n    '[style.margin-left.px]': '_container._contentMargins.left',\r\n    '[style.margin-right.px]': '_container._contentMargins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\r\n  constructor(\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\r\n      elementRef: ElementRef<HTMLElement>,\r\n      scrollDispatcher: ScrollDispatcher,\r\n      ngZone: NgZone) {\r\n    super(elementRef, scrollDispatcher, ngZone);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._container._contentMarginChanges.subscribe(() => {\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * This component corresponds to a drawer that can be opened on the drawer container.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer',\r\n  exportAs: 'matDrawer',\r\n  templateUrl: 'drawer.html',\r\n  animations: [matDrawerAnimations.transformDrawer],\r\n  host: {\r\n    'class': 'mat-drawer',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    'tabIndex': '-1',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\r\n  private _focusTrap: FocusTrap;\r\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\r\n\r\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\r\n  private _enableAnimations = false;\r\n\r\n  /** The side that the drawer is attached to. */\r\n  @Input()\r\n  get position(): 'start' | 'end' { return this._position; }\r\n  set position(value: 'start' | 'end') {\r\n    // Make sure we have a valid value.\r\n    value = value === 'end' ? 'end' : 'start';\r\n    if (value != this._position) {\r\n      this._position = value;\r\n      this.onPositionChanged.emit();\r\n    }\r\n  }\r\n  private _position: 'start' | 'end' = 'start';\r\n\r\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\r\n  @Input()\r\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\r\n  set mode(value: 'over' | 'push' | 'side') {\r\n    this._mode = value;\r\n    this._modeChanged.next();\r\n  }\r\n  private _mode: 'over' | 'push' | 'side' = 'over';\r\n\r\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\r\n  @Input()\r\n  get disableClose(): boolean { return this._disableClose; }\r\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\r\n  private _disableClose: boolean = false;\r\n\r\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\r\n  @Input()\r\n  get autoFocus(): boolean { return this._autoFocus; }\r\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\r\n  private _autoFocus: boolean = true;\r\n\r\n  /** How the sidenav was opened (keypress, mouse click etc.) */\r\n  private _openedVia: FocusOrigin | null;\r\n\r\n  /** Emits whenever the drawer has started animating. */\r\n  _animationStarted = new Subject<AnimationEvent>();\r\n\r\n  /** Emits whenever the drawer is done animating. */\r\n  _animationEnd = new Subject<AnimationEvent>();\r\n\r\n  /** Current state of the sidenav animation. */\r\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\r\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\r\n  // that can be inherited.\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n  @HostBinding('@transform')\r\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\r\n\r\n  /** Event emitted when the drawer open state is changed. */\r\n  @Output() readonly openedChange: EventEmitter<boolean> =\r\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\r\n      new EventEmitter<boolean>(/* isAsync */true);\r\n\r\n  /** Event emitted when the drawer has been opened. */\r\n  @Output('opened')\r\n  get _openedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the drawer has started opening. */\r\n  @Output()\r\n  get openedStart(): Observable<void> {\r\n    return this._animationStarted.pipe(\r\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\r\n      map(() => {})\r\n    );\r\n  }\r\n\r\n  /** Event emitted when the drawer has been closed. */\r\n  @Output('closed')\r\n  get _closedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the drawer has started closing. */\r\n  @Output()\r\n  get closedStart(): Observable<void> {\r\n    return this._animationStarted.pipe(\r\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\r\n      map(() => {})\r\n    );\r\n  }\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  /** Event emitted when the drawer's position changes. */\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\r\n   * to know when to when the mode changes so it can adapt the margins on the content.\r\n   */\r\n  readonly _modeChanged = new Subject();\r\n\r\n  get _isFocusTrapEnabled(): boolean {\r\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\r\n    return this.opened && this.mode !== 'side';\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              private _focusTrapFactory: FocusTrapFactory,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _platform: Platform,\r\n              private _ngZone: NgZone,\r\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\r\n\r\n    this.openedChange.subscribe((opened: boolean) => {\r\n      if (opened) {\r\n        if (this._doc) {\r\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\r\n        }\r\n\r\n        if (this._isFocusTrapEnabled && this._focusTrap) {\r\n          this._trapFocus();\r\n        }\r\n      } else {\r\n        this._restoreFocus();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Listen to `keydown` events outside the zone so that change detection is not run every\r\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\r\n     * and we don't have close disabled.\r\n     */\r\n    this._ngZone.runOutsideAngular(() => {\r\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\r\n            filter(event => {\r\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\r\n            }),\r\n            takeUntil(this._destroyed)\r\n        ).subscribe(event => this._ngZone.run(() => {\r\n            this.close();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }));\r\n    });\r\n\r\n    // We need a Subject with distinctUntilChanged, because the `done` event\r\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\r\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\r\n      return x.fromState === y.fromState && x.toState === y.toState;\r\n    })).subscribe((event: AnimationEvent) => {\r\n      const {fromState, toState} = event;\r\n\r\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\r\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\r\n        this.openedChange.emit(this._opened);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Traps focus inside the drawer. */\r\n  private _trapFocus() {\r\n    if (!this.autoFocus) {\r\n      return;\r\n    }\r\n\r\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\r\n      // still works. We need to check that `focus` is a function due to Universal.\r\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\r\n   * opened.\r\n   */\r\n  private _restoreFocus() {\r\n    if (!this.autoFocus) {\r\n      return;\r\n    }\r\n\r\n    const activeEl = this._doc && this._doc.activeElement;\r\n\r\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\r\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\r\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\r\n      } else {\r\n        this._elementRef.nativeElement.blur();\r\n      }\r\n    }\r\n\r\n    this._elementFocusedBeforeDrawerWasOpened = null;\r\n    this._openedVia = null;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\r\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\r\n    // animations, because we don't want the drawer to animate the first time the user sees\r\n    // the page.\r\n    if (this._platform.isBrowser) {\r\n      this._enableAnimations = true;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n\r\n    this._animationStarted.complete();\r\n    this._animationEnd.complete();\r\n    this._modeChanged.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Whether the drawer is opened. We overload this because we trigger an event when it\r\n   * starts or end.\r\n   */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\r\n  private _opened: boolean = false;\r\n\r\n  /**\r\n   * Open the drawer.\r\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\r\n   * Used for focus management after the sidenav is closed.\r\n   */\r\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\r\n    return this.toggle(true, openedVia);\r\n  }\r\n\r\n  /** Close the drawer. */\r\n  close(): Promise<MatDrawerToggleResult> {\r\n    return this.toggle(false);\r\n  }\r\n\r\n  /**\r\n   * Toggle this drawer.\r\n   * @param isOpen Whether the drawer should be open.\r\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\r\n   * Used for focus management after the sidenav is closed.\r\n   */\r\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\r\n    Promise<MatDrawerToggleResult> {\r\n\r\n    this._opened = isOpen;\r\n\r\n    if (isOpen) {\r\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\r\n      this._openedVia = openedVia;\r\n    } else {\r\n      this._animationState = 'void';\r\n      this._restoreFocus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\r\n    }\r\n\r\n    return new Promise<MatDrawerToggleResult>(resolve => {\r\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\r\n    });\r\n  }\r\n\r\n  get _width(): number {\r\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\r\n  }\r\n\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('@transform.start', ['$event'])\r\n  _animationStartListener(event: AnimationEvent) {\r\n    this._animationStarted.next(event);\r\n  }\r\n\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('@transform.done', ['$event'])\r\n  _animationDoneListener(event: AnimationEvent) {\r\n    this._animationEnd.next(event);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `<mat-drawer-container>` component.\r\n *\r\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\r\n * and coordinates the backdrop and content styling.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer-container',\r\n  exportAs: 'matDrawerContainer',\r\n  templateUrl: 'drawer-container.html',\r\n  styleUrls: ['drawer.css'],\r\n  host: {\r\n    'class': 'mat-drawer-container',\r\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\r\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\r\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\r\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\r\n\r\n  /** The drawer child with the `start` position. */\r\n  get start(): MatDrawer | null { return this._start; }\r\n\r\n  /** The drawer child with the `end` position. */\r\n  get end(): MatDrawer | null { return this._end; }\r\n\r\n  /**\r\n   * Whether to automatically resize the container whenever\r\n   * the size of any of its drawers changes.\r\n   *\r\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\r\n   * the drawers on every change detection cycle. Can be configured globally via the\r\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\r\n   */\r\n  @Input()\r\n  get autosize(): boolean { return this._autosize; }\r\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\r\n  private _autosize: boolean;\r\n\r\n  /**\r\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\r\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\r\n   * mode as well.\r\n   */\r\n  @Input()\r\n  get hasBackdrop() {\r\n    if (this._backdropOverride == null) {\r\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\r\n    }\r\n\r\n    return this._backdropOverride;\r\n  }\r\n  set hasBackdrop(value: any) {\r\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\r\n  }\r\n  _backdropOverride: boolean | null;\r\n\r\n  /** Event emitted when the drawer backdrop is clicked. */\r\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** The drawer at the start/end position, independent of direction. */\r\n  private _start: MatDrawer | null;\r\n  private _end: MatDrawer | null;\r\n\r\n  /**\r\n   * The drawer at the left/right. When direction changes, these will change as well.\r\n   * They're used as aliases for the above to set the left/right style properly.\r\n   * In LTR, _left == _start and _right == _end.\r\n   * In RTL, _left == _end and _right == _start.\r\n   */\r\n  private _left: MatDrawer | null;\r\n  private _right: MatDrawer | null;\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\r\n  private readonly _doCheckSubject = new Subject<void>();\r\n\r\n  /**\r\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\r\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\r\n   * fixed position elements inside of the transformed element.\r\n   */\r\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\r\n\r\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\r\n\r\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\r\n  get scrollable(): CdkScrollable {\r\n    return this._userContent || this._content;\r\n  }\r\n\r\n  constructor(@Optional() private _dir: Directionality,\r\n              private _element: ElementRef<HTMLElement>,\r\n              private _ngZone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              viewportRuler: ViewportRuler,\r\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\r\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\r\n\r\n    // If a `Dir` directive exists up the tree, listen direction changes\r\n    // and update the left/right properties to point to the proper start/end.\r\n    if (_dir) {\r\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n        this._validateDrawers();\r\n        this.updateContentMargins();\r\n      });\r\n    }\r\n\r\n    // Since the minimum width of the sidenav depends on the viewport width,\r\n    // we need to recompute the margins if the viewport changes.\r\n    viewportRuler.change()\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => this.updateContentMargins());\r\n\r\n    this._autosize = defaultAutosize;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._validateDrawers();\r\n\r\n      this._drawers.forEach((drawer: MatDrawer) => {\r\n        this._watchDrawerToggle(drawer);\r\n        this._watchDrawerPosition(drawer);\r\n        this._watchDrawerMode(drawer);\r\n      });\r\n\r\n      if (!this._drawers.length ||\r\n          this._isDrawerOpen(this._start) ||\r\n          this._isDrawerOpen(this._end)) {\r\n        this.updateContentMargins();\r\n      }\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    this._doCheckSubject.pipe(\r\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\r\n      takeUntil(this._destroyed)\r\n    ).subscribe(() => this.updateContentMargins());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._contentMarginChanges.complete();\r\n    this._doCheckSubject.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Calls `open` of both start and end drawers */\r\n  open(): void {\r\n    this._drawers.forEach(drawer => drawer.open());\r\n  }\r\n\r\n  /** Calls `close` of both start and end drawers */\r\n  close(): void {\r\n    this._drawers.forEach(drawer => drawer.close());\r\n  }\r\n\r\n  /**\r\n   * Recalculates and updates the inline styles for the content. Note that this should be used\r\n   * sparingly, because it causes a reflow.\r\n   */\r\n  updateContentMargins() {\r\n    // 1. For drawers in `over` mode, they don't affect the content.\r\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\r\n    //    left margin (for left drawer) or right margin (for right the drawer).\r\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\r\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\r\n    //    margin from the other side.\r\n    let left = 0;\r\n    let right = 0;\r\n\r\n    if (this._left && this._left.opened) {\r\n      if (this._left.mode == 'side') {\r\n        left += this._left._width;\r\n      } else if (this._left.mode == 'push') {\r\n        const width = this._left._width;\r\n        left += width;\r\n        right -= width;\r\n      }\r\n    }\r\n\r\n    if (this._right && this._right.opened) {\r\n      if (this._right.mode == 'side') {\r\n        right += this._right._width;\r\n      } else if (this._right.mode == 'push') {\r\n        const width = this._right._width;\r\n        right += width;\r\n        left -= width;\r\n      }\r\n    }\r\n\r\n    // If either `right` or `left` is zero, don't set a style to the element. This\r\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\r\n    // measured widths will always be zero. Note that we reset to `null` here, rather\r\n    // than below, in order to ensure that the types in the `if` below are consistent.\r\n    left = left || null!;\r\n    right = right || null!;\r\n\r\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\r\n      this._contentMargins = {left, right};\r\n\r\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\r\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\r\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // If users opted into autosizing, do a check every change detection cycle.\r\n    if (this._autosize && this._isPushed()) {\r\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\r\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribes to drawer events in order to set a class on the main container element when the\r\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\r\n   * is properly hidden.\r\n   */\r\n  private _watchDrawerToggle(drawer: MatDrawer): void {\r\n    drawer._animationStarted.pipe(\r\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\r\n      takeUntil(this._drawers.changes),\r\n    )\r\n    .subscribe((event: AnimationEvent) => {\r\n      // Set the transition class on the container so that the animations occur. This should not\r\n      // be set initially because animations should only be triggered via a change in state.\r\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\r\n        this._element.nativeElement.classList.add('mat-drawer-transition');\r\n      }\r\n\r\n      this.updateContentMargins();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (drawer.mode !== 'side') {\r\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\r\n          this._setContainerClass(drawer.opened));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribes to drawer onPositionChanged event in order to\r\n   * re-validate drawers when the position changes.\r\n   */\r\n  private _watchDrawerPosition(drawer: MatDrawer): void {\r\n    if (!drawer) {\r\n      return;\r\n    }\r\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\r\n    // since both drawers may be swapping positions at the same time.\r\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\r\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._validateDrawers();\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Subscribes to changes in drawer mode so we can run change detection. */\r\n  private _watchDrawerMode(drawer: MatDrawer): void {\r\n    if (drawer) {\r\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\r\n        .subscribe(() => {\r\n          this.updateContentMargins();\r\n          this._changeDetectorRef.markForCheck();\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\r\n  private _setContainerClass(isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._element.nativeElement.classList.add('mat-drawer-opened');\r\n    } else {\r\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\r\n    }\r\n  }\r\n\r\n  /** Validate the state of the drawer children components. */\r\n  private _validateDrawers() {\r\n    this._start = this._end = null;\r\n\r\n    // Ensure that we have at most one start and one end drawer.\r\n    this._drawers.forEach(drawer => {\r\n      if (drawer.position == 'end') {\r\n        if (this._end != null) {\r\n          throwMatDuplicatedDrawerError('end');\r\n        }\r\n        this._end = drawer;\r\n      } else {\r\n        if (this._start != null) {\r\n          throwMatDuplicatedDrawerError('start');\r\n        }\r\n        this._start = drawer;\r\n      }\r\n    });\r\n\r\n    this._right = this._left = null;\r\n\r\n    // Detect if we're LTR or RTL.\r\n    if (this._dir && this._dir.value === 'rtl') {\r\n      this._left = this._end;\r\n      this._right = this._start;\r\n    } else {\r\n      this._left = this._start;\r\n      this._right = this._end;\r\n    }\r\n  }\r\n\r\n  /** Whether the container is being pushed to the side by one of the drawers. */\r\n  private _isPushed() {\r\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\r\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\r\n  }\r\n\r\n  _onBackdropClicked() {\r\n    this.backdropClick.emit();\r\n    this._closeModalDrawer();\r\n  }\r\n\r\n  _closeModalDrawer() {\r\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\r\n    [this._start, this._end]\r\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\r\n      .forEach(drawer => drawer!.close());\r\n  }\r\n\r\n  _isShowingBackdrop(): boolean {\r\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\r\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\r\n  }\r\n\r\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\r\n    return drawer.mode !== 'side' || !!this._backdropOverride;\r\n  }\r\n\r\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\r\n    return drawer != null && drawer.opened;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material drawers.\r\n * @docs-private\r\n */\r\nexport const matDrawerAnimations: {\r\n  readonly transformDrawer: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that slides a drawer in and out. */\r\n  transformDrawer: trigger('transform', [\r\n    // We remove the `transform` here completely, rather than setting it to zero, because:\r\n    // 1. Having a transform can cause elements with ripples or an animated\r\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\r\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\r\n    state('open, open-instant', style({\r\n      'transform': 'none',\r\n      'visibility': 'visible',\r\n    })),\r\n    state('void', style({\r\n      // Avoids the shadow showing up when closed in SSR.\r\n      'box-shadow': 'none',\r\n      'visibility': 'hidden',\r\n    })),\r\n    transition('void => open-instant', animate('0ms')),\r\n    transition('void <=> open, open-instant => void',\r\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  ViewEncapsulation,\r\n  QueryList,\r\n  ElementRef,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\r\nimport {matDrawerAnimations} from './drawer-animations';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content mat-sidenav-content',\r\n    '[style.margin-left.px]': '_container._contentMargins.left',\r\n    '[style.margin-right.px]': '_container._contentMargins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSidenavContent extends MatDrawerContent {\r\n  constructor(\r\n      changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\r\n      elementRef: ElementRef<HTMLElement>,\r\n      scrollDispatcher: ScrollDispatcher,\r\n      ngZone: NgZone) {\r\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav',\r\n  exportAs: 'matSidenav',\r\n  templateUrl: 'drawer.html',\r\n  animations: [matDrawerAnimations.transformDrawer],\r\n  host: {\r\n    'class': 'mat-drawer mat-sidenav',\r\n    'tabIndex': '-1',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\r\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\r\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSidenav extends MatDrawer {\r\n  /** Whether the sidenav is fixed in the viewport. */\r\n  @Input()\r\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\r\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\r\n  private _fixedInViewport = false;\r\n\r\n  /**\r\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\r\n   * mode.\r\n   */\r\n  @Input()\r\n  get fixedTopGap(): number { return this._fixedTopGap; }\r\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\r\n  private _fixedTopGap = 0;\r\n\r\n  /**\r\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\r\n   * fixed mode.\r\n   */\r\n  @Input()\r\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\r\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\r\n  private _fixedBottomGap = 0;\r\n}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav-container',\r\n  exportAs: 'matSidenavContainer',\r\n  templateUrl: 'sidenav-container.html',\r\n  styleUrls: ['drawer.css'],\r\n  host: {\r\n    'class': 'mat-drawer-container mat-sidenav-container',\r\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MatSidenavContainer extends MatDrawerContainer {\r\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\r\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\r\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    ScrollingModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MatCommonModule,\r\n    MatDrawer,\r\n    MatDrawerContainer,\r\n    MatDrawerContent,\r\n    MatSidenav,\r\n    MatSidenavContainer,\r\n    MatSidenavContent,\r\n  ],\r\n  declarations: [\r\n    MatDrawer,\r\n    MatDrawerContainer,\r\n    MatDrawerContent,\r\n    MatSidenav,\r\n    MatSidenavContainer,\r\n    MatSidenavContent,\r\n  ],\r\n})\r\nexport class MatSidenavModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","box-shadow","transition","animate","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","factory","MatDrawerContent","_super","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","_this","call","tslib_1.__extends","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","type","Component","args","selector","template","host","class","[style.margin-left.px]","[style.margin-right.px]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ScrollDispatcher","NgZone","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","EventEmitter","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","takeUntil","_destroyed","event","stopPropagation","preventDefault","_animationEnd","pipe","distinctUntilChanged","toState","indexOf","fromState","emit","_opened","defineProperty","MatDrawer","get","value","_position","onPositionChanged","enumerable","configurable","_modeChanged","next","opened","mode","autoFocus","focusInitialElementWhenReady","then","hasMovedFocus","nativeElement","focus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","blur","enabled","isBrowser","_enableAnimations","destroy","_animationStarted","complete","isOpen","openedVia","_animationState","Promise","decorators","animations","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","tabIndex","ctorParameters","ElementRef","undefined","Optional","Inject","DOCUMENT","propDecorators","Input","HostBinding","Output","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","_dir","_element","_animationMode","backdropClick","Subject","_doCheckSubject","change","_validateDrawers","viewportRuler","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","set","drawer","_drawers","length","_isDrawerOpen","_start","_end","debounceTime","ngOnDestroy","open","close","_left","width","_width","left","right","_right","_contentMargins","run","ngDoCheck","runOutsideAngular","changes","classList","add","_setContainerClass","onMicrotaskEmpty","asObservable","take","remove","forEach","_onBackdropClicked","_closeModalDrawer","filter","disableClose","_canHaveBackdrop","_isShowingBackdrop","exportAs","[class.mat-drawer-container-explicit-backdrop]","Directionality","String","ANIMATION_MODULE_TYPE","ContentChildren","_content","ContentChild","static","_userContent","ViewChild","autosize","MatSidenavContent","changeDetectorRef","container","MatSidenav","apply","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","NgModule","imports","CommonModule","MatCommonModule","ScrollingModule","PlatformModule","exports","declarations"],"mappings":"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"}